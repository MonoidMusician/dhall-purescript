(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated automatically by nearley, version 2.15.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

function binop(type, i=1) {
  return data => data[1].reduce((r, v) => ({ type, value: [r, v[i]] }), data[0]);
};

function nuller() { return null; }

const pass = n => d => d ? d[n] : null;
const pass0 = pass(0);
const pass1 = pass(1);

const tag = type => value => ({ type, value });

function flatten(items) {
  const flat = [];

  items.forEach(item => {
    if (Array.isArray(item)) {
      flat.push(...flatten(item));
    } else {
      flat.push(item);
    }
  });

  return flat;
}

function collapse(items) {
  var flat = "";

  items.forEach(item => {
    if (Array.isArray(item)) {
      flat += collapse(item);
    } else if (item != null) {
      flat += item;
    }
  });

  return flat;
}

function remove_common_prefix(items) {
  // Function to iterate through each character (or interpolation) in a string
  function iterate(iterator) {
    items.forEach(function(str) {
      if (typeof str === "string") {
        // Array.from respects CodePoints
        Array.from(str).forEach(iterator);
      } else {
        iterator(str);
      }
    });
  }
  // First we gather a list of all of the prefixes
  var prefixes = [];
  // current_prefix:
  //   - null means we have stopped scanning for this line
  //   - string means we are actively scanning this line, indicates what
  //     spaces and tabs have been found thus far
  var current_prefix = "";
  function gather_prefixes(char) {
    // Reset the current_prefix indicator, but do not add to prefixes
    // (if line was non-empty, that would have happened already)
    if (char === "\n") {
      current_prefix = "";
    // If still scanning...
    } else if (current_prefix !== null) {
      // A tab or space gets added to the current prefix
      if (char === "\t" || char === " ") {
        current_prefix += char;
      // Anything else (including interpolation) stops scanning this line,
      // flushing the current prefix to the list.
      } else {
        prefixes.push(current_prefix);
        current_prefix = null;
      }
    }
  }
  iterate(gather_prefixes);
  // Flush out any remaining prefix (right before the close quotes)
  gather_prefixes(null);
  // Now we calculate the common prefix
  var common_prefix = prefixes.reduce(function(a, b) {
    var common = "";
    while (a.length && b.length) {
      if (a[0] === b[0]) {
        common += a[0];
        a = a.substring(1);
        b = b.substring(1);
      } else break;
    }
    return common;
  });
  // Now we remove the common prefixes, building the new result
  var result = [];
  // prefix_removal indicates the next chars to remove, if possible
  var prefix_removal = common_prefix;
  function remove_prefixes(char) {
    var keep = true;
    // Reset the prefix on the new line
    if (char === "\n") {
      prefix_removal = common_prefix;
    // If we can still remove a prefix character
    } else if (prefix_removal !== "") {
      // Drop this element if it matches, and advance to the next char in the
      // common prefix
      if (char === prefix_removal[0]) {
        keep = false;
        prefix_removal = prefix_removal.substring(1);
      // Otherwise keep it but cancel removing any more (probably unreachable)
      } else {
        prefix_removal = "";
      }
    }
    if (keep) result.push(char);
  }
  iterate(remove_prefixes);
  return result;
}

const keyword =
  [ "if"
  , "then"
  , "else"
  , "let"
  , "in"
  , "using"
  , "missing"
  , "as"
  , "Infinity"
  , "NaN"
  , "merge"
  , "Some"
  , "toMap"
  , "assert"
  , "forall" // FIXME
  ];

const builtin =
  [ "Type"
  , "Kind"
  , "Sort"
  , "Bool"
  , "True"
  , "False"
  , "missing"
  , "Natural"
  , "Natural/fold"
  , "Natural/build"
  , "Natural/isZero"
  , "Natural/even"
  , "Natural/odd"
  , "Natural/toInteger"
  , "Natural/show"
  , "Natural/subtract"
  , "Integer"
  , "Integer/show"
  , "Integer/toDouble"
  , "Double"
  , "Double/show"
  , "Text"
  , "Text/show"
  , "List"
  , "List/build"
  , "List/fold"
  , "List/length"
  , "List/head"
  , "List/last"
  , "List/indexed"
  , "List/reverse"
  , "Optional"
  , "None"
  , "Optional/build"
  , "Optional/fold"
  ];
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "complete_expression", "symbols": ["whsp", "expression", "whsp"], "postprocess": pass1},
    {"name": "end_of_line", "symbols": [/[\n]/], "postprocess": pass0},
    {"name": "end_of_line", "symbols": [/[\r]/, /[\n]/], "postprocess": () => "\n"},
    {"name": "tab", "symbols": [/[\t]/], "postprocess": pass0},
    {"name": "ascii", "symbols": [/[\x20-\x7F]/], "postprocess": pass0},
    {"name": "valid_non_ascii", "symbols": [/[\x80-\uD7FF\uE000-\uFFFD]/], "postprocess": collapse},
    {"name": "valid_non_ascii", "symbols": [/[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE]/, /[\uDC00-\uDFFF]/], "postprocess": collapse},
    {"name": "valid_non_ascii", "symbols": [/[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF]/, /[\uDC00-\uDFFD]/], "postprocess": collapse},
    {"name": "block_comment$string$1", "symbols": [{"literal":"{"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "block_comment", "symbols": ["block_comment$string$1", "block_comment_continue"]},
    {"name": "block_comment_char", "symbols": [/[\x20-\x7A\x7C-\x7F]/]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": [/[\x20-\x2c\x2e-\x7F]/]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["valid_non_ascii"]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["tab"]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["end_of_line"]},
    {"name": "block_comment_char$subexpression$1", "symbols": [/[\x7B]/, "block_comment_char$subexpression$1$subexpression$1"]},
    {"name": "block_comment_char", "symbols": ["block_comment_char$subexpression$1"]},
    {"name": "block_comment_char", "symbols": ["valid_non_ascii"]},
    {"name": "block_comment_char", "symbols": ["tab"]},
    {"name": "block_comment_char", "symbols": ["end_of_line"]},
    {"name": "block_comment_continue$string$1", "symbols": [{"literal":"-"}, {"literal":"}"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "block_comment_continue", "symbols": ["block_comment_continue$string$1"]},
    {"name": "block_comment_continue", "symbols": ["block_comment", "block_comment_continue"]},
    {"name": "block_comment_continue", "symbols": ["block_comment_char", "block_comment_continue"]},
    {"name": "not_end_of_line", "symbols": ["ascii"]},
    {"name": "not_end_of_line", "symbols": ["valid_non_ascii"]},
    {"name": "not_end_of_line", "symbols": ["tab"]},
    {"name": "line_comment$string$1", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "line_comment$ebnf$1", "symbols": []},
    {"name": "line_comment$ebnf$1", "symbols": ["line_comment$ebnf$1", "not_end_of_line"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "line_comment", "symbols": ["line_comment$string$1", "line_comment$ebnf$1", "end_of_line"]},
    {"name": "whitespace_chunk", "symbols": [{"literal":" "}], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["tab"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["end_of_line"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["line_comment"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["block_comment"], "postprocess": nuller},
    {"name": "whsp$ebnf$1", "symbols": []},
    {"name": "whsp$ebnf$1", "symbols": ["whsp$ebnf$1", "whitespace_chunk"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "whsp", "symbols": ["whsp$ebnf$1"], "postprocess": nuller},
    {"name": "whsp1$ebnf$1", "symbols": ["whitespace_chunk"]},
    {"name": "whsp1$ebnf$1", "symbols": ["whsp1$ebnf$1", "whitespace_chunk"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "whsp1", "symbols": ["whsp1$ebnf$1"], "postprocess": nuller},
    {"name": "ALPHA", "symbols": [/[A-Za-z]/], "postprocess": pass0},
    {"name": "DIGIT", "symbols": [/[0-9]/], "postprocess": pass0},
    {"name": "ALPHANUM", "symbols": ["ALPHA"], "postprocess": pass0},
    {"name": "ALPHANUM", "symbols": ["DIGIT"], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": ["DIGIT"], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Aa]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Bb]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Cc]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Dd]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Ee]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Ff]/], "postprocess": pass0},
    {"name": "simple_label_first_char", "symbols": ["ALPHA"], "postprocess": pass0},
    {"name": "simple_label_first_char", "symbols": [{"literal":"_"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": ["ALPHANUM"], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"-"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"/"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"_"}], "postprocess": pass0},
    {"name": "simple_label$ebnf$1", "symbols": []},
    {"name": "simple_label$ebnf$1", "symbols": ["simple_label$ebnf$1", "simple_label_next_char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "simple_label", "symbols": ["simple_label_first_char", "simple_label$ebnf$1"], "postprocess":  (d, _, reject) => {
          let r = d[0] + d[1].join("");
          return keyword.includes(r) ? reject : r;
        } },
    {"name": "quoted_label_char", "symbols": [/[\x20-\x5F\x61-\x7E]/]},
    {"name": "quoted_label$ebnf$1", "symbols": ["quoted_label_char"]},
    {"name": "quoted_label$ebnf$1", "symbols": ["quoted_label$ebnf$1", "quoted_label_char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "quoted_label", "symbols": ["quoted_label$ebnf$1"], "postprocess": collapse},
    {"name": "label$subexpression$1", "symbols": [{"literal":"`"}, "quoted_label", {"literal":"`"}], "postprocess": pass1},
    {"name": "label$subexpression$1", "symbols": ["simple_label"], "postprocess": pass0},
    {"name": "label", "symbols": ["label$subexpression$1"], "postprocess": pass0},
    {"name": "nonreserved_label$subexpression$1", "symbols": [{"literal":"`"}, "quoted_label", {"literal":"`"}], "postprocess": pass1},
    {"name": "nonreserved_label$subexpression$1", "symbols": ["simple_label"], "postprocess": (d, _, reject) => builtin.includes(d[0]) ? reject : d[0]},
    {"name": "nonreserved_label", "symbols": ["nonreserved_label$subexpression$1"], "postprocess": pass0},
    {"name": "any_label", "symbols": ["label"], "postprocess": pass0},
    {"name": "double_quote_chunk", "symbols": ["interpolation"], "postprocess": pass0},
    {"name": "double_quote_chunk", "symbols": [{"literal":"\\"}, "double_quote_escaped"], "postprocess": pass1},
    {"name": "double_quote_chunk", "symbols": ["double_quote_char"], "postprocess": pass0},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x22\x24\x5C\x2F]/], "postprocess": pass0},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x62]/], "postprocess": () => "\x08"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x66]/], "postprocess": () => "\x0C"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x6E]/], "postprocess": () => "\x0A"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x72]/], "postprocess": () => "\x0D"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x74]/], "postprocess": () => "\x09"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [{"literal":"u"}, "unicode_escape"], "postprocess": pass1},
    {"name": "double_quote_escaped", "symbols": ["double_quote_escaped$subexpression$1"], "postprocess": pass0},
    {"name": "unicode_escape", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"], "postprocess": d => String.fromCharCode(parseInt(d[0]+d[1]+d[2]+d[3], 16))},
    {"name": "unicode_escape$ebnf$1", "symbols": ["HEXDIG"]},
    {"name": "unicode_escape$ebnf$1", "symbols": ["unicode_escape$ebnf$1", "HEXDIG"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "unicode_escape", "symbols": [{"literal":"{"}, "unicode_escape$ebnf$1", {"literal":"}"}], "postprocess": d => String.fromCodePoint(parseInt(d[1].join(""), 16))},
    {"name": "double_quote_char", "symbols": [/[\x20-\x21\x23\x25-\x5B\x5D-\x7F]/], "postprocess": pass0},
    {"name": "double_quote_char", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "double_quote_literal$ebnf$1", "symbols": []},
    {"name": "double_quote_literal$ebnf$1", "symbols": ["double_quote_literal$ebnf$1", "double_quote_chunk"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "double_quote_literal", "symbols": [/[\x22]/, "double_quote_literal$ebnf$1", /[\x22]/], "postprocess": pass1},
    {"name": "single_quote_continue", "symbols": ["interpolation", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue", "symbols": ["escaped_quote_pair", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue", "symbols": ["escaped_interpolation", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue", "symbols": ["single_quote_char", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "single_quote_continue", "symbols": ["single_quote_continue$string$1"], "postprocess": () => []},
    {"name": "escaped_quote_pair$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "escaped_quote_pair", "symbols": ["escaped_quote_pair$string$1"], "postprocess": () => "''"},
    {"name": "escaped_interpolation$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}, {"literal":"$"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "escaped_interpolation", "symbols": ["escaped_interpolation$string$1"], "postprocess": () => "${"},
    {"name": "single_quote_char", "symbols": [/[\x20-\x23\x25-\x26\x28-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": [/[\x20-\x26\x28-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": [/[\x27]/, "single_quote_char$subexpression$1"], "postprocess": collapse},
    {"name": "single_quote_char$subexpression$2", "symbols": [/[\x20-\x7A\x7C-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": [/[\x24]/, "single_quote_char$subexpression$2"], "postprocess": collapse},
    {"name": "single_quote_literal$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "single_quote_literal", "symbols": ["single_quote_literal$string$1", "end_of_line", "single_quote_continue"], "postprocess": d => remove_common_prefix(d[2])},
    {"name": "interpolation$string$1", "symbols": [{"literal":"$"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "interpolation", "symbols": ["interpolation$string$1", "complete_expression", {"literal":"}"}], "postprocess": pass1},
    {"name": "text_literal$subexpression$1", "symbols": ["double_quote_literal"]},
    {"name": "text_literal$subexpression$1", "symbols": ["single_quote_literal"]},
    {"name": "text_literal", "symbols": ["text_literal$subexpression$1"], "postprocess": d => d[0][0]},
    {"name": "if$string$1", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "if", "symbols": ["if$string$1"], "postprocess": pass0},
    {"name": "then$string$1", "symbols": [{"literal":"t"}, {"literal":"h"}, {"literal":"e"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "then", "symbols": ["then$string$1"], "postprocess": pass0},
    {"name": "else$string$1", "symbols": [{"literal":"e"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "else", "symbols": ["else$string$1"], "postprocess": pass0},
    {"name": "let$string$1", "symbols": [{"literal":"l"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "let", "symbols": ["let$string$1"], "postprocess": pass0},
    {"name": "in$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "in", "symbols": ["in$string$1"], "postprocess": pass0},
    {"name": "as$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "as", "symbols": ["as$string$1"], "postprocess": pass0},
    {"name": "using$string$1", "symbols": [{"literal":"u"}, {"literal":"s"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "using", "symbols": ["using$string$1"], "postprocess": pass0},
    {"name": "merge$string$1", "symbols": [{"literal":"m"}, {"literal":"e"}, {"literal":"r"}, {"literal":"g"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "merge", "symbols": ["merge$string$1"], "postprocess": pass0},
    {"name": "missing$string$1", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"s"}, {"literal":"s"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "missing", "symbols": ["missing$string$1"], "postprocess": pass0},
    {"name": "Infinity$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"f"}, {"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Infinity", "symbols": ["Infinity$string$1"], "postprocess": pass0},
    {"name": "NaN$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"N"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "NaN", "symbols": ["NaN$string$1"], "postprocess": pass0},
    {"name": "Some$string$1", "symbols": [{"literal":"S"}, {"literal":"o"}, {"literal":"m"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Some", "symbols": ["Some$string$1"], "postprocess": pass0},
    {"name": "toMap$string$1", "symbols": [{"literal":"t"}, {"literal":"o"}, {"literal":"M"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "toMap", "symbols": ["toMap$string$1"], "postprocess": pass0},
    {"name": "assert$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"s"}, {"literal":"e"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assert", "symbols": ["assert$string$1"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["if"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["then"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["else"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["let"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["in"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["using"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["missing"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["as"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["Infinity"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["NaN"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["merge"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["Some"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["toMap"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["assert"], "postprocess": pass0},
    {"name": "keyword$string$1", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "keyword", "symbols": ["keyword$string$1"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_fold"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_build"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_isZero"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_even"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_odd"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_toInteger"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_subtract"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_toDouble"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Double_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_build"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_fold"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_length"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_head"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_last"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_indexed"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_reverse"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Optional_fold"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Optional_build"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Text_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Bool"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["True"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["False"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Optional"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["None"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Double"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Text"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Type"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Kind"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Sort"], "postprocess": pass0},
    {"name": "Text$string$1", "symbols": [{"literal":"T"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Text", "symbols": ["Text$string$1"], "postprocess": pass0},
    {"name": "Location$string$1", "symbols": [{"literal":"L"}, {"literal":"o"}, {"literal":"c"}, {"literal":"a"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Location", "symbols": ["Location$string$1"], "postprocess": pass0},
    {"name": "Bool$string$1", "symbols": [{"literal":"B"}, {"literal":"o"}, {"literal":"o"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Bool", "symbols": ["Bool$string$1"], "postprocess": pass0},
    {"name": "True$string$1", "symbols": [{"literal":"T"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "True", "symbols": ["True$string$1"], "postprocess": pass0},
    {"name": "False$string$1", "symbols": [{"literal":"F"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "False", "symbols": ["False$string$1"], "postprocess": pass0},
    {"name": "Optional$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional", "symbols": ["Optional$string$1"], "postprocess": pass0},
    {"name": "None$string$1", "symbols": [{"literal":"N"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "None", "symbols": ["None$string$1"], "postprocess": pass0},
    {"name": "Natural$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural", "symbols": ["Natural$string$1"], "postprocess": pass0},
    {"name": "Integer$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer", "symbols": ["Integer$string$1"], "postprocess": pass0},
    {"name": "Double$string$1", "symbols": [{"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Double", "symbols": ["Double$string$1"], "postprocess": pass0},
    {"name": "List$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List", "symbols": ["List$string$1"], "postprocess": pass0},
    {"name": "Type$string$1", "symbols": [{"literal":"T"}, {"literal":"y"}, {"literal":"p"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Type", "symbols": ["Type$string$1"], "postprocess": pass0},
    {"name": "Kind$string$1", "symbols": [{"literal":"K"}, {"literal":"i"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Kind", "symbols": ["Kind$string$1"], "postprocess": pass0},
    {"name": "Sort$string$1", "symbols": [{"literal":"S"}, {"literal":"o"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Sort", "symbols": ["Sort$string$1"], "postprocess": pass0},
    {"name": "Natural_fold$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_fold", "symbols": ["Natural_fold$string$1"], "postprocess": pass0},
    {"name": "Natural_build$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_build", "symbols": ["Natural_build$string$1"], "postprocess": pass0},
    {"name": "Natural_isZero$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"i"}, {"literal":"s"}, {"literal":"Z"}, {"literal":"e"}, {"literal":"r"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_isZero", "symbols": ["Natural_isZero$string$1"], "postprocess": pass0},
    {"name": "Natural_even$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_even", "symbols": ["Natural_even$string$1"], "postprocess": pass0},
    {"name": "Natural_odd$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"o"}, {"literal":"d"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_odd", "symbols": ["Natural_odd$string$1"], "postprocess": pass0},
    {"name": "Natural_toInteger$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"t"}, {"literal":"o"}, {"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_toInteger", "symbols": ["Natural_toInteger$string$1"], "postprocess": pass0},
    {"name": "Natural_show$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_show", "symbols": ["Natural_show$string$1"], "postprocess": pass0},
    {"name": "Natural_subtract$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"s"}, {"literal":"u"}, {"literal":"b"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"c"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_subtract", "symbols": ["Natural_subtract$string$1"], "postprocess": pass0},
    {"name": "Integer_toDouble$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"t"}, {"literal":"o"}, {"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_toDouble", "symbols": ["Integer_toDouble$string$1"], "postprocess": pass0},
    {"name": "Integer_show$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_show", "symbols": ["Integer_show$string$1"], "postprocess": pass0},
    {"name": "Double_show$string$1", "symbols": [{"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Double_show", "symbols": ["Double_show$string$1"], "postprocess": pass0},
    {"name": "List_build$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_build", "symbols": ["List_build$string$1"], "postprocess": pass0},
    {"name": "List_fold$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_fold", "symbols": ["List_fold$string$1"], "postprocess": pass0},
    {"name": "List_length$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"l"}, {"literal":"e"}, {"literal":"n"}, {"literal":"g"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_length", "symbols": ["List_length$string$1"], "postprocess": pass0},
    {"name": "List_head$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"h"}, {"literal":"e"}, {"literal":"a"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_head", "symbols": ["List_head$string$1"], "postprocess": pass0},
    {"name": "List_last$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"l"}, {"literal":"a"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_last", "symbols": ["List_last$string$1"], "postprocess": pass0},
    {"name": "List_indexed$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"i"}, {"literal":"n"}, {"literal":"d"}, {"literal":"e"}, {"literal":"x"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_indexed", "symbols": ["List_indexed$string$1"], "postprocess": pass0},
    {"name": "List_reverse$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"r"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_reverse", "symbols": ["List_reverse$string$1"], "postprocess": pass0},
    {"name": "Optional_fold$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional_fold", "symbols": ["Optional_fold$string$1"], "postprocess": pass0},
    {"name": "Optional_build$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional_build", "symbols": ["Optional_build$string$1"], "postprocess": pass0},
    {"name": "Text_show$string$1", "symbols": [{"literal":"T"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Text_show", "symbols": ["Text_show$string$1"], "postprocess": pass0},
    {"name": "combine$subexpression$1", "symbols": [/[\u2227]/]},
    {"name": "combine$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"\\"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "combine$subexpression$1", "symbols": ["combine$subexpression$1$string$1"]},
    {"name": "combine", "symbols": ["combine$subexpression$1"], "postprocess": pass0},
    {"name": "combine_types$subexpression$1", "symbols": [/[\u2A53]/]},
    {"name": "combine_types$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}, {"literal":"\\"}, {"literal":"\\"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "combine_types$subexpression$1", "symbols": ["combine_types$subexpression$1$string$1"]},
    {"name": "combine_types", "symbols": ["combine_types$subexpression$1"], "postprocess": pass0},
    {"name": "equivalent$subexpression$1", "symbols": [/[\u2261]/]},
    {"name": "equivalent$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equivalent$subexpression$1", "symbols": ["equivalent$subexpression$1$string$1"]},
    {"name": "equivalent", "symbols": ["equivalent$subexpression$1"], "postprocess": pass0},
    {"name": "prefer$subexpression$1", "symbols": [/[\u2AFD]/]},
    {"name": "prefer$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "prefer$subexpression$1", "symbols": ["prefer$subexpression$1$string$1"]},
    {"name": "prefer", "symbols": ["prefer$subexpression$1"], "postprocess": pass0},
    {"name": "lambda$subexpression$1", "symbols": [/[\u03BB]/]},
    {"name": "lambda$subexpression$1", "symbols": [{"literal":"\\"}]},
    {"name": "lambda", "symbols": ["lambda$subexpression$1"], "postprocess": pass0},
    {"name": "forall$subexpression$1", "symbols": [/[\u2200]/]},
    {"name": "forall$subexpression$1$string$1", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "forall$subexpression$1", "symbols": ["forall$subexpression$1$string$1"]},
    {"name": "forall", "symbols": ["forall$subexpression$1"], "postprocess": pass0},
    {"name": "arrow$subexpression$1", "symbols": [/[\u2192]/]},
    {"name": "arrow$subexpression$1$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "arrow$subexpression$1", "symbols": ["arrow$subexpression$1$string$1"]},
    {"name": "arrow", "symbols": ["arrow$subexpression$1"], "postprocess": pass0},
    {"name": "exponent$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "exponent$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "exponent$ebnf$1", "symbols": ["exponent$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "exponent$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "exponent$ebnf$2", "symbols": ["DIGIT"]},
    {"name": "exponent$ebnf$2", "symbols": ["exponent$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "exponent", "symbols": [{"literal":"e"}, "exponent$ebnf$1", "exponent$ebnf$2"]},
    {"name": "numeric_double_literal$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "numeric_double_literal$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "numeric_double_literal$ebnf$1", "symbols": ["numeric_double_literal$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "numeric_double_literal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "numeric_double_literal$ebnf$2", "symbols": ["DIGIT"]},
    {"name": "numeric_double_literal$ebnf$2", "symbols": ["numeric_double_literal$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "numeric_double_literal$subexpression$1$ebnf$1", "symbols": ["DIGIT"]},
    {"name": "numeric_double_literal$subexpression$1$ebnf$1", "symbols": ["numeric_double_literal$subexpression$1$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2$subexpression$1", "symbols": ["exponent"]},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2", "symbols": ["numeric_double_literal$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "numeric_double_literal$subexpression$1", "symbols": [{"literal":"."}, "numeric_double_literal$subexpression$1$ebnf$1", "numeric_double_literal$subexpression$1$ebnf$2"]},
    {"name": "numeric_double_literal$subexpression$1", "symbols": ["exponent"]},
    {"name": "numeric_double_literal", "symbols": ["numeric_double_literal$ebnf$1", "numeric_double_literal$ebnf$2", "numeric_double_literal$subexpression$1"], "postprocess": d => +flatten(d).join("")},
    {"name": "minus_infinity_literal", "symbols": [{"literal":"-"}, "Infinity"], "postprocess": () => -Infinity},
    {"name": "plus_infinity_literal", "symbols": ["Infinity"], "postprocess": () => Infinity},
    {"name": "double_literal", "symbols": ["numeric_double_literal"], "postprocess": (d,_,reject) => isFinite(d[0]) ? d[0] : reject},
    {"name": "double_literal", "symbols": ["minus_infinity_literal"], "postprocess": pass0},
    {"name": "double_literal", "symbols": ["plus_infinity_literal"], "postprocess": pass0},
    {"name": "double_literal", "symbols": ["NaN"], "postprocess": () => NaN},
    {"name": "natural_literal$ebnf$1", "symbols": ["DIGIT"]},
    {"name": "natural_literal$ebnf$1", "symbols": ["natural_literal$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "natural_literal", "symbols": ["natural_literal$ebnf$1"], "postprocess": d => d[0].join("")|0},
    {"name": "integer_literal$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "integer_literal$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "integer_literal", "symbols": ["integer_literal$subexpression$1", "natural_literal"], "postprocess": d => d[0] == "+" ? +d[1] : -d[1]},
    {"name": "identifier", "symbols": ["variable"], "postprocess": pass0},
    {"name": "identifier", "symbols": ["builtin"], "postprocess": d => ({ type: d[0], value: [] })},
    {"name": "variable$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"@"}, "natural_literal"]},
    {"name": "variable$ebnf$1", "symbols": ["variable$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "variable$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "variable", "symbols": ["nonreserved_label", "variable$ebnf$1"], "postprocess": d => ({ type: "Var", value: [d[0], pass(2)(d[1]) || 0] })},
    {"name": "path_character", "symbols": [/[\x21-\x22\x24-\x27\x2A-\x2B\x2D-\x2E\x30-\x3B\x3D\x40-\x5A\x5E-\x7A\x7C\x7E]/], "postprocess": pass0},
    {"name": "quoted_path_character", "symbols": [/[\x20-\x21\x23-\x2E\x30-\x7F]/], "postprocess": pass0},
    {"name": "quoted_path_character", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "unquoted_path_component$ebnf$1", "symbols": ["path_character"]},
    {"name": "unquoted_path_component$ebnf$1", "symbols": ["unquoted_path_component$ebnf$1", "path_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "unquoted_path_component", "symbols": ["unquoted_path_component$ebnf$1"], "postprocess": collapse},
    {"name": "quoted_path_component$ebnf$1", "symbols": ["quoted_path_character"]},
    {"name": "quoted_path_component$ebnf$1", "symbols": ["quoted_path_component$ebnf$1", "quoted_path_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "quoted_path_component", "symbols": ["quoted_path_component$ebnf$1"], "postprocess": collapse},
    {"name": "path_component$subexpression$1", "symbols": ["unquoted_path_component"], "postprocess": pass0},
    {"name": "path_component$subexpression$1", "symbols": [/[\x22]/, "quoted_path_component", /[\x22]/], "postprocess": pass1},
    {"name": "path_component", "symbols": [{"literal":"/"}, "path_component$subexpression$1"], "postprocess": pass1},
    {"name": "path$ebnf$1", "symbols": ["path_component"]},
    {"name": "path$ebnf$1", "symbols": ["path$ebnf$1", "path_component"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "path", "symbols": ["path$ebnf$1"], "postprocess": pass0},
    {"name": "local$string$1", "symbols": [{"literal":"."}, {"literal":"."}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "local", "symbols": ["local$string$1", "path"], "postprocess": d => ({ type: "Local", value: ["Parent", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": [{"literal":"."}, "path"], "postprocess": d => ({ type: "Local", value: ["Here", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": [{"literal":"~"}, "path"], "postprocess": d => ({ type: "Local", value: ["Home", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": ["path"], "postprocess": d => ({ type: "Local", value: ["Absolute", d[0].slice(0, -1), d[0][d[0].length-1]] })},
    {"name": "scheme$string$1", "symbols": [{"literal":"h"}, {"literal":"t"}, {"literal":"t"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "scheme", "symbols": ["scheme$string$1"], "postprocess": pass0},
    {"name": "scheme$string$2", "symbols": [{"literal":"h"}, {"literal":"t"}, {"literal":"t"}, {"literal":"p"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "scheme", "symbols": ["scheme$string$2"], "postprocess": pass0},
    {"name": "http_raw$string$1", "symbols": [{"literal":":"}, {"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "http_raw$ebnf$1$subexpression$1", "symbols": [{"literal":"?"}, "query"]},
    {"name": "http_raw$ebnf$1", "symbols": ["http_raw$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "http_raw$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "http_raw", "symbols": ["scheme", "http_raw$string$1", "authority", "url_path", "http_raw$ebnf$1"], "postprocess": d => ({ type: "Remote", value: [d[0], d[2], d[3].slice(0,-1), d[3][d[3].length-1], pass1(d[4])] })},
    {"name": "url_path$ebnf$1$subexpression$1", "symbols": [{"literal":"/"}, /[\x22]/, "quoted_path_component", /[\x22]/], "postprocess": pass(2)},
    {"name": "url_path$ebnf$1$subexpression$1", "symbols": [{"literal":"/"}, "segment"], "postprocess": pass1},
    {"name": "url_path$ebnf$1", "symbols": ["url_path$ebnf$1$subexpression$1"]},
    {"name": "url_path$ebnf$1$subexpression$2", "symbols": [{"literal":"/"}, /[\x22]/, "quoted_path_component", /[\x22]/], "postprocess": pass(2)},
    {"name": "url_path$ebnf$1$subexpression$2", "symbols": [{"literal":"/"}, "segment"], "postprocess": pass1},
    {"name": "url_path$ebnf$1", "symbols": ["url_path$ebnf$1", "url_path$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "url_path", "symbols": ["url_path$ebnf$1"], "postprocess": pass0},
    {"name": "authority$ebnf$1$subexpression$1", "symbols": ["userinfo", {"literal":"@"}]},
    {"name": "authority$ebnf$1", "symbols": ["authority$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "authority$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "authority$ebnf$2$subexpression$1", "symbols": [{"literal":":"}, "port"]},
    {"name": "authority$ebnf$2", "symbols": ["authority$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "authority$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "authority", "symbols": ["authority$ebnf$1", "host", "authority$ebnf$2"], "postprocess": collapse},
    {"name": "userinfo$ebnf$1", "symbols": []},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["unreserved"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["pct_encoded"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "userinfo$ebnf$1", "symbols": ["userinfo$ebnf$1", "userinfo$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "userinfo", "symbols": ["userinfo$ebnf$1"], "postprocess": pass0},
    {"name": "host", "symbols": ["IP_literal"], "postprocess": collapse},
    {"name": "host", "symbols": ["IPv4address"], "postprocess": collapse},
    {"name": "host", "symbols": ["domain"], "postprocess": collapse},
    {"name": "port$ebnf$1", "symbols": []},
    {"name": "port$ebnf$1", "symbols": ["port$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "port", "symbols": ["port$ebnf$1"], "postprocess": pass0},
    {"name": "IP_literal$subexpression$1", "symbols": ["IPv6address"], "postprocess": collapse},
    {"name": "IP_literal$subexpression$1", "symbols": ["IPvFuture"], "postprocess": collapse},
    {"name": "IP_literal", "symbols": [{"literal":"["}, "IP_literal$subexpression$1", {"literal":"]"}]},
    {"name": "IPvFuture$ebnf$1", "symbols": ["HEXDIG"]},
    {"name": "IPvFuture$ebnf$1", "symbols": ["IPvFuture$ebnf$1", "HEXDIG"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": ["unreserved"]},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "IPvFuture$ebnf$2", "symbols": ["IPvFuture$ebnf$2$subexpression$1"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": ["unreserved"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": ["sub_delims"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": [{"literal":":"}]},
    {"name": "IPvFuture$ebnf$2", "symbols": ["IPvFuture$ebnf$2", "IPvFuture$ebnf$2$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IPvFuture", "symbols": [{"literal":"v"}, "IPvFuture$ebnf$1", {"literal":"."}, "IPvFuture$ebnf$2"]},
    {"name": "IPv6address$subexpression$1", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$subexpression$1", "ls32"]},
    {"name": "IPv6address$string$1", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$2", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$string$1", "IPv6address$subexpression$2", "ls32"]},
    {"name": "IPv6address$ebnf$1$subexpression$1", "symbols": ["h16"]},
    {"name": "IPv6address$ebnf$1", "symbols": ["IPv6address$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$2", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$3", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$1", "IPv6address$string$2", "IPv6address$subexpression$3", "ls32"]},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$2$subexpression$1", "symbols": ["IPv6address$ebnf$2$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$2", "symbols": ["IPv6address$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$3", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$4", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$2", "IPv6address$string$3", "IPv6address$subexpression$4", "ls32"]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$3$subexpression$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$3", "symbols": ["IPv6address$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$4", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$5", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$3", "IPv6address$string$4", "IPv6address$subexpression$5", "ls32"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$4", "symbols": ["IPv6address$ebnf$4$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$5", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$4", "IPv6address$string$5", "h16", {"literal":":"}, "ls32"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$5", "symbols": ["IPv6address$ebnf$5$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$6", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$5", "IPv6address$string$6", "ls32"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$6", "symbols": ["IPv6address$ebnf$6$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$7", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$6", "IPv6address$string$7", "h16"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1", "h16"]},
    {"name": "IPv6address$ebnf$7", "symbols": ["IPv6address$ebnf$7$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$8", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$7", "IPv6address$string$8"]},
    {"name": "h16", "symbols": ["HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"]},
    {"name": "ls32$subexpression$1", "symbols": ["h16", {"literal":":"}, "h16"]},
    {"name": "ls32", "symbols": ["ls32$subexpression$1"]},
    {"name": "ls32", "symbols": ["IPv4address"]},
    {"name": "IPv4address", "symbols": ["dec_octet", {"literal":"."}, "dec_octet", {"literal":"."}, "dec_octet", {"literal":"."}, "dec_octet"]},
    {"name": "dec_octet", "symbols": ["DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [/[\x31-\x39]/, "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [{"literal":"1"}, "DIGIT", "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [{"literal":"2"}, /[\x30-\x34]/, "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet$string$1", "symbols": [{"literal":"2"}, {"literal":"5"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dec_octet", "symbols": ["dec_octet$string$1", /[\x30-\x35]/], "postprocess": collapse},
    {"name": "domain$ebnf$1", "symbols": []},
    {"name": "domain$ebnf$1$subexpression$1", "symbols": ["domainlabel", {"literal":"."}]},
    {"name": "domain$ebnf$1", "symbols": ["domain$ebnf$1", "domain$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domain$ebnf$2", "symbols": [{"literal":"."}], "postprocess": id},
    {"name": "domain$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "domain", "symbols": ["domain$ebnf$1", "domainlabel", "domain$ebnf$2"], "postprocess": collapse},
    {"name": "domainlabel$ebnf$1", "symbols": ["ALPHANUM"]},
    {"name": "domainlabel$ebnf$1", "symbols": ["domainlabel$ebnf$1", "ALPHANUM"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2", "symbols": []},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$1", "symbols": [{"literal":"-"}]},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$1", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$1", {"literal":"-"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$2", "symbols": ["ALPHANUM"]},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$2", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$2", "ALPHANUM"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2$subexpression$1", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$1", "domainlabel$ebnf$2$subexpression$1$ebnf$2"]},
    {"name": "domainlabel$ebnf$2", "symbols": ["domainlabel$ebnf$2", "domainlabel$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel", "symbols": ["domainlabel$ebnf$1", "domainlabel$ebnf$2"], "postprocess": collapse},
    {"name": "segment$ebnf$1", "symbols": []},
    {"name": "segment$ebnf$1", "symbols": ["segment$ebnf$1", "pchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "segment", "symbols": ["segment$ebnf$1"], "postprocess": collapse},
    {"name": "pchar$subexpression$1", "symbols": ["unreserved"]},
    {"name": "pchar$subexpression$1", "symbols": ["pct_encoded"]},
    {"name": "pchar$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "pchar$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "pchar$subexpression$1", "symbols": [{"literal":"@"}]},
    {"name": "pchar", "symbols": ["pchar$subexpression$1"], "postprocess": collapse},
    {"name": "query$ebnf$1", "symbols": []},
    {"name": "query$ebnf$1$subexpression$1", "symbols": ["pchar"]},
    {"name": "query$ebnf$1$subexpression$1", "symbols": [{"literal":"/"}]},
    {"name": "query$ebnf$1$subexpression$1", "symbols": [{"literal":"?"}]},
    {"name": "query$ebnf$1", "symbols": ["query$ebnf$1", "query$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "query", "symbols": ["query$ebnf$1"], "postprocess": collapse},
    {"name": "pct_encoded", "symbols": [{"literal":"%"}, "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unreserved$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "unreserved$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"."}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"~"}]},
    {"name": "unreserved", "symbols": ["unreserved$subexpression$1"], "postprocess": collapse},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"!"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"$"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"&"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"'"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":";"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"="}]},
    {"name": "sub_delims", "symbols": ["sub_delims$subexpression$1"], "postprocess": collapse},
    {"name": "http$ebnf$1$subexpression$1", "symbols": ["whsp", "using", "whsp1", "import_expression"]},
    {"name": "http$ebnf$1", "symbols": ["http$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "http$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "http", "symbols": ["http_raw", "http$ebnf$1"], "postprocess": d => (d[0].value[5] = pass(3)(d[1]), d[0])},
    {"name": "env$string$1", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"v"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "env$subexpression$1", "symbols": ["bash_environment_variable"]},
    {"name": "env$subexpression$1", "symbols": [/[\x22]/, "posix_environment_variable", /[\x22]/]},
    {"name": "env", "symbols": ["env$string$1", "env$subexpression$1"], "postprocess": d => ({ type: "Env", value: [d[1].length === 1 ? d[1][0] : d[1][1]] })},
    {"name": "bash_environment_variable$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "bash_environment_variable$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "bash_environment_variable$ebnf$1", "symbols": []},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "bash_environment_variable$ebnf$1", "symbols": ["bash_environment_variable$ebnf$1", "bash_environment_variable$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bash_environment_variable", "symbols": ["bash_environment_variable$subexpression$1", "bash_environment_variable$ebnf$1"], "postprocess": collapse},
    {"name": "posix_environment_variable$ebnf$1", "symbols": ["posix_environment_variable_character"]},
    {"name": "posix_environment_variable$ebnf$1", "symbols": ["posix_environment_variable$ebnf$1", "posix_environment_variable_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posix_environment_variable", "symbols": ["posix_environment_variable$ebnf$1"], "postprocess": collapse},
    {"name": "posix_environment_variable_character$subexpression$1", "symbols": [/[\x22\x5C\x61\x62\x66\x6E\x72\x74\x76]/]},
    {"name": "posix_environment_variable_character", "symbols": [/[\x5C]/, "posix_environment_variable_character$subexpression$1"]},
    {"name": "posix_environment_variable_character", "symbols": [/[\x20-\x21\x23-\x3C\x3E-\x5B\x5D-\x7E]/]},
    {"name": "import_type", "symbols": ["missing"], "postprocess": () => ({ type: "Missing", value: [] })},
    {"name": "import_type", "symbols": ["local"], "postprocess": pass0},
    {"name": "import_type", "symbols": ["http"], "postprocess": pass0},
    {"name": "import_type", "symbols": ["env"], "postprocess": pass0},
    {"name": "sha256_prefix$string$1", "symbols": [{"literal":"s"}, {"literal":"h"}, {"literal":"a"}, {"literal":"2"}, {"literal":"5"}, {"literal":"6"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sha256_prefix", "symbols": ["sha256_prefix$string$1"]},
    {"name": "hash", "symbols": ["sha256_prefixpostprocess": d => collapse(d.slice(1))},
    {"name": "import$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Text"], "postprocess": pass0},
    {"name": "import$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Location"], "postprocess": pass0},
    {"name": "import$ebnf$1$subexpression$1", "symbols": ["whsp", "as", "whsp1", "import$ebnf$1$subexpression$1$subexpression$1"], "postprocess": pass(3)},
    {"name": "import$ebnf$1", "symbols": ["import$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "import$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "import", "symbols": ["import_type", "import$ebnf$1"], "postprocess": tag("Import")},
    {"name": "expression", "symbols": ["lambda", "whsp", {"literal":"("}, "whsp", "nonreserved_label", "whsp", {"literal":":"}, "whsp1", "expression", "whsp", {"literal":")"}, "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Lam", value: [d[4], d[8], d[14]] })},
    {"name": "expression", "symbols": ["if", "whsp1", "expression", "whsp", "then", "whsp1", "expression", "whsp", "else", "whsp1", "expression"], "postprocess": d => ({ type: "BoolIf", value: [d[2], d[6], d[10]] })},
    {"name": "expression$ebnf$1", "symbols": ["let_binding"]},
    {"name": "expression$ebnf$1", "symbols": ["expression$ebnf$1", "let_binding"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expression", "symbols": ["expression$ebnf$1", "in", "whsp1", "expression"], "postprocess": d => d[0].reduceRight((b,a) => ({ type: "Let", value: a.concat(b) }), d[3])},
    {"name": "expression", "symbols": ["forall", "whsp", {"literal":"("}, "whsp", "nonreserved_label", "whsp", {"literal":":"}, "whsp1", "expression", "whsp", {"literal":")"}, "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Pi", value: [d[4], d[8], d[14]] })},
    {"name": "expression", "symbols": ["operator_expression", "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Pi", value: ["_", d[0], d[4]] })},
    {"name": "expression", "symbols": ["merge", "whsp1", "import_expression", "whsp1", "import_expression", "whsp", {"literal":":"}, "whsp1", "application_expression"], "postprocess": d => ({ type: "Merge", value: [d[2], d[4], d[8]] })},
    {"name": "expression", "symbols": [{"literal":"["}, "whsp", {"literal":"]"}, "whsp", {"literal":":"}, "whsp1", "application_expression"], "postprocess": d => ({ type: "ListLit", value: [[],d[6]] })},
    {"name": "expression", "symbols": ["toMap", "whsp1", "import_expression", "whsp", {"literal":":"}, "whsp1", "application_expression"], "postprocess": d => ({ type: "ToMap", value: [d[2],d[6]] })},
    {"name": "expression", "symbols": ["assert", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => ({ type: "Assert", value: [d[4]] })},
    {"name": "expression", "symbols": ["annotated_expression"], "postprocess": pass0},
    {"name": "let_binding$ebnf$1$subexpression$1", "symbols": [{"literal":":"}, "whsp1", "expression", "whsp"]},
    {"name": "let_binding$ebnf$1", "symbols": ["let_binding$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "let_binding$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "let_binding", "symbols": ["let", "whsp1", "nonreserved_label", "whsp", "let_binding$ebnf$1", {"literal":"="}, "whsp", "expression", "whsp"], "postprocess": d => [d[2],pass(2)(d[4]),d[7]]},
    {"name": "annotated_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":":"}, "whsp1", "expression"]},
    {"name": "annotated_expression$ebnf$1", "symbols": ["annotated_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "annotated_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "annotated_expression", "symbols": ["operator_expression", "annotated_expression$ebnf$1"], "postprocess": d => d[1] == null ? d[0] : { type: "Annot", value: [d[0], d[1][3]] }},
    {"name": "operator_expression", "symbols": ["import_alt_expression"], "postprocess": pass0},
    {"name": "import_alt_expression$ebnf$1", "symbols": []},
    {"name": "import_alt_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"?"}, "whsp1", "or_expression"]},
    {"name": "import_alt_expression$ebnf$1", "symbols": ["import_alt_expression$ebnf$1", "import_alt_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "import_alt_expression", "symbols": ["or_expression", "import_alt_expression$ebnf$1"], "postprocess": binop("ImportAlt", 3)},
    {"name": "or_expression$ebnf$1", "symbols": []},
    {"name": "or_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "or_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "or_expression$ebnf$1$subexpression$1$string$1", "whsp", "plus_expression"]},
    {"name": "or_expression$ebnf$1", "symbols": ["or_expression$ebnf$1", "or_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "or_expression", "symbols": ["plus_expression", "or_expression$ebnf$1"], "postprocess": binop("BoolOr", 3)},
    {"name": "plus_expression$ebnf$1", "symbols": []},
    {"name": "plus_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"+"}, "whsp1", "text_append_expression"]},
    {"name": "plus_expression$ebnf$1", "symbols": ["plus_expression$ebnf$1", "plus_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "plus_expression", "symbols": ["text_append_expression", "plus_expression$ebnf$1"], "postprocess": binop("NaturalPlus", 3)},
    {"name": "text_append_expression$ebnf$1", "symbols": []},
    {"name": "text_append_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"+"}, {"literal":"+"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "text_append_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "text_append_expression$ebnf$1$subexpression$1$string$1", "whsp", "list_append_expression"]},
    {"name": "text_append_expression$ebnf$1", "symbols": ["text_append_expression$ebnf$1", "text_append_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "text_append_expression", "symbols": ["list_append_expression", "text_append_expression$ebnf$1"], "postprocess": binop("TextAppend", 3)},
    {"name": "list_append_expression$ebnf$1", "symbols": []},
    {"name": "list_append_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"#"}, "whsp", "and_expression"]},
    {"name": "list_append_expression$ebnf$1", "symbols": ["list_append_expression$ebnf$1", "list_append_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "list_append_expression", "symbols": ["and_expression", "list_append_expression$ebnf$1"], "postprocess": binop("ListAppend", 3)},
    {"name": "and_expression$ebnf$1", "symbols": []},
    {"name": "and_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "and_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "and_expression$ebnf$1$subexpression$1$string$1", "whsp", "combine_expression"]},
    {"name": "and_expression$ebnf$1", "symbols": ["and_expression$ebnf$1", "and_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "and_expression", "symbols": ["combine_expression", "and_expression$ebnf$1"], "postprocess": binop("BoolAnd", 3)},
    {"name": "combine_expression$ebnf$1", "symbols": []},
    {"name": "combine_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "combine", "whsp", "prefer_expression"]},
    {"name": "combine_expression$ebnf$1", "symbols": ["combine_expression$ebnf$1", "combine_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "combine_expression", "symbols": ["prefer_expression", "combine_expression$ebnf$1"], "postprocess": binop("Combine", 3)},
    {"name": "prefer_expression$ebnf$1", "symbols": []},
    {"name": "prefer_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "prefer", "whsp", "combine_types_expression"]},
    {"name": "prefer_expression$ebnf$1", "symbols": ["prefer_expression$ebnf$1", "prefer_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "prefer_expression", "symbols": ["combine_types_expression", "prefer_expression$ebnf$1"], "postprocess": binop("Prefer", 3)},
    {"name": "combine_types_expression$ebnf$1", "symbols": []},
    {"name": "combine_types_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "combine_types", "whsp", "times_expression"]},
    {"name": "combine_types_expression$ebnf$1", "symbols": ["combine_types_expression$ebnf$1", "combine_types_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "combine_types_expression", "symbols": ["times_expression", "combine_types_expression$ebnf$1"], "postprocess": binop("CombineTypes", 3)},
    {"name": "times_expression$ebnf$1", "symbols": []},
    {"name": "times_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"*"}, "whsp", "equal_expression"]},
    {"name": "times_expression$ebnf$1", "symbols": ["times_expression$ebnf$1", "times_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "times_expression", "symbols": ["equal_expression", "times_expression$ebnf$1"], "postprocess": binop("NaturalTimes", 3)},
    {"name": "equal_expression$ebnf$1", "symbols": []},
    {"name": "equal_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equal_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "equal_expression$ebnf$1$subexpression$1$string$1", "whsp", "not_equal_expression"]},
    {"name": "equal_expression$ebnf$1", "symbols": ["equal_expression$ebnf$1", "equal_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "equal_expression", "symbols": ["not_equal_expression", "equal_expression$ebnf$1"], "postprocess": binop("BoolEQ", 3)},
    {"name": "not_equal_expression$ebnf$1", "symbols": []},
    {"name": "not_equal_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "not_equal_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "not_equal_expression$ebnf$1$subexpression$1$string$1", "whsp", "equivalent_expression"]},
    {"name": "not_equal_expression$ebnf$1", "symbols": ["not_equal_expression$ebnf$1", "not_equal_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "not_equal_expression", "symbols": ["equivalent_expression", "not_equal_expression$ebnf$1"], "postprocess": binop("BoolNE", 3)},
    {"name": "equivalent_expression$ebnf$1", "symbols": []},
    {"name": "equivalent_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "equivalent", "whsp", "application_expression"]},
    {"name": "equivalent_expression$ebnf$1", "symbols": ["equivalent_expression$ebnf$1", "equivalent_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "equivalent_expression", "symbols": ["application_expression", "equivalent_expression$ebnf$1"], "postprocess": binop("Equivalent", 3)},
    {"name": "application_expression$ebnf$1", "symbols": []},
    {"name": "application_expression$ebnf$1$subexpression$1", "symbols": ["whsp1", "import_expression"]},
    {"name": "application_expression$ebnf$1", "symbols": ["application_expression$ebnf$1", "application_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "application_expression", "symbols": ["first_application_expression", "application_expression$ebnf$1"], "postprocess": binop("App")},
    {"name": "first_application_expression", "symbols": ["merge", "whsp1", "import_expression", "whsp1", "import_expression"], "postprocess": d => ({ type: "Merge", value: [d[2],d[4],null]})},
    {"name": "first_application_expression", "symbols": ["Some", "whsp1", "import_expression"], "postprocess": d => ({ type: "Some", value: [d[2]] })},
    {"name": "first_application_expression", "symbols": ["toMap", "whsp1", "import_expression"], "postprocess": d => ({ type: "ToMap", value: [d[2], null] })},
    {"name": "first_application_expression", "symbols": ["import_expression"], "postprocess": pass0},
    {"name": "import_expression$subexpression$1", "symbols": ["import"], "postprocess": pass0},
    {"name": "import_expression$subexpression$1", "symbols": ["selector_expression"], "postprocess": pass0},
    {"name": "import_expression$ebnf$1$subexpression$1", "symbols": ["whsp1", "hash"]},
    {"name": "import_expression$ebnf$1", "symbols": ["import_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "import_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "import_expression", "symbols": ["import_expression$subexpression$1", "import_expression$ebnf$1"], "postprocess": d => d[1] == null ? d[0] : ({ type: "Hashed", value: [d[0], d[1][1]] })},
    {"name": "selector_expression$ebnf$1", "symbols": []},
    {"name": "selector_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"."}, "whsp", "selector"]},
    {"name": "selector_expression$ebnf$1", "symbols": ["selector_expression$ebnf$1", "selector_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "selector_expression", "symbols": ["primitive_expression", "selector_expression$ebnf$1"], "postprocess":  d =>
        d[1].reduce((r, v) => ({ type: v[3].type, value: [r, v[3].value[0]] }), d[0])
        },
    {"name": "selector", "symbols": ["any_label"], "postprocess": tag("Field")},
    {"name": "selector", "symbols": ["labels"], "postprocess": tag("Project")},
    {"name": "selector", "symbols": ["type_selector"], "postprocess": tag("ProjectType")},
    {"name": "labels$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "labels$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp", "any_label", "whsp"]},
    {"name": "labels$ebnf$1$subexpression$1$ebnf$1", "symbols": ["labels$ebnf$1$subexpression$1$ebnf$1", "labels$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "labels$ebnf$1$subexpression$1", "symbols": ["any_label", "whsp", "labels$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "labels$ebnf$1", "symbols": ["labels$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "labels$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "labels", "symbols": [{"literal":"{"}, "whsp", "labels$ebnf$1", {"literal":"}"}], "postprocess": d => d[2] != null ? [d[2][0]].concat(d[2][2].map(v => v[2])) : []},
    {"name": "type_selector", "symbols": [{"literal":"("}, "whsp", "expression", "whsp", {"literal":")"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": ["double_literal"], "postprocess": tag("DoubleLit")},
    {"name": "primitive_expression", "symbols": ["natural_literal"], "postprocess": tag("NaturalLit")},
    {"name": "primitive_expression", "symbols": ["integer_literal"], "postprocess": tag("IntegerLit")},
    {"name": "primitive_expression", "symbols": ["text_literal"], "postprocess": d => ({ type: "TextLit", value: d[0] })},
    {"name": "primitive_expression", "symbols": [{"literal":"{"}, "whsp", "non_empty_record_type_or_literal", "whsp", {"literal":"}"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": [{"literal":"{"}, "whsp", "empty_record_literal", "whsp", {"literal":"}"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": [{"literal":"{"}, "whsp", "empty_record_type", {"literal":"}"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": [{"literal":"<"}, "whsp", "non_empty_union_type", "whsp", {"literal":">"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": [{"literal":"<"}, "whsp", "empty_union_type", {"literal":">"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": ["non_empty_list_literal"], "postprocess": pass0},
    {"name": "primitive_expression", "symbols": ["identifier"], "postprocess": pass0},
    {"name": "primitive_expression", "symbols": [{"literal":"("}, "complete_expression", {"literal":")"}], "postprocess": pass1},
    {"name": "record_type_or_literal", "symbols": ["empty_record_literal"], "postprocess": pass0},
    {"name": "record_type_or_literal", "symbols": ["non_empty_record_type_or_literal"], "postprocess": pass0},
    {"name": "record_type_or_literal", "symbols": ["empty_record_type"], "postprocess": pass0},
    {"name": "empty_record_literal", "symbols": [{"literal":"="}], "postprocess": () => ({ type: "RecordLit", value: [] })},
    {"name": "empty_record_type", "symbols": [], "postprocess": () => ({ type: "Record", value: [] })},
    {"name": "non_empty_record_type_or_literal$subexpression$1", "symbols": ["non_empty_record_literal"]},
    {"name": "non_empty_record_type_or_literal$subexpression$1", "symbols": ["non_empty_record_type"]},
    {"name": "non_empty_record_type_or_literal", "symbols": ["any_label", "whsp", "non_empty_record_type_or_literal$subexpression$1"], "postprocess": d => {d[2][0].value[0][0] = d[0]; return d[2][0]}},
    {"name": "non_empty_record_type$ebnf$1", "symbols": []},
    {"name": "non_empty_record_type$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":","}, "whsp", "record_type_entry"]},
    {"name": "non_empty_record_type$ebnf$1", "symbols": ["non_empty_record_type$ebnf$1", "non_empty_record_type$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_record_type", "symbols": [{"literal":":"}, "whsp1", "expression", "non_empty_record_type$ebnf$1"], "postprocess": 
        d => ({ type: "Record", value: [["",d[2]]].concat(d[3].map(v => v[3])) })
        },
    {"name": "record_type_entry", "symbols": ["any_label", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => [d[0], d[4]]},
    {"name": "non_empty_record_literal$ebnf$1", "symbols": []},
    {"name": "non_empty_record_literal$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":","}, "whsp", "record_literal_entry"]},
    {"name": "non_empty_record_literal$ebnf$1", "symbols": ["non_empty_record_literal$ebnf$1", "non_empty_record_literal$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_record_literal", "symbols": [{"literal":"="}, "whsp", "expression", "non_empty_record_literal$ebnf$1"], "postprocess": 
        d => ({ type: "RecordLit", value: [["",d[2]]].concat(d[3].map(v => v[3])) })
        },
    {"name": "record_literal_entry", "symbols": ["any_label", "whsp", {"literal":"="}, "whsp", "expression"], "postprocess": d => [d[0],d[4]]},
    {"name": "union_type", "symbols": ["non_empty_union_type"], "postprocess": pass0},
    {"name": "union_type", "symbols": ["empty_union_type"], "postprocess": pass0},
    {"name": "empty_union_type", "symbols": [], "postprocess": () => ({ type: "Union", value: [] })},
    {"name": "non_empty_union_type$ebnf$1", "symbols": []},
    {"name": "non_empty_union_type$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"|"}, "whsp", "union_type_entry"], "postprocess": pass(3)},
    {"name": "non_empty_union_type$ebnf$1", "symbols": ["non_empty_union_type$ebnf$1", "non_empty_union_type$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_union_type", "symbols": ["union_type_entry", "non_empty_union_type$ebnf$1"], "postprocess": d => ({ type: "Union", value: [d[0]].concat(d[1]) })},
    {"name": "union_type_entry$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":":"}, "whsp1", "expression"]},
    {"name": "union_type_entry$ebnf$1", "symbols": ["union_type_entry$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "union_type_entry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "union_type_entry", "symbols": ["any_label", "union_type_entry$ebnf$1"], "postprocess": d => [d[0],pass(3)(d[1])]},
    {"name": "non_empty_list_literal$ebnf$1", "symbols": []},
    {"name": "non_empty_list_literal$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp", "expression", "whsp"]},
    {"name": "non_empty_list_literal$ebnf$1", "symbols": ["non_empty_list_literal$ebnf$1", "non_empty_list_literal$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_list_literal", "symbols": [{"literal":"["}, "whsp", "expression", "whsp", "non_empty_list_literal$ebnf$1", {"literal":"]"}], "postprocess": d => ({ type: "ListLit", value: [[d[2]].concat(d[4].map(v => v[2])),null] })}
]
  , ParserStart: "complete_expression"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();

},{}],2:[function(require,module,exports){
(function(root, factory) {
    if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.nearley = factory();
    }
}(this, function() {

    function Rule(name, symbols, postprocess) {
        this.id = ++Rule.highestId;
        this.name = name;
        this.symbols = symbols;        // a list of literal | regex class | nonterminal
        this.postprocess = postprocess;
        return this;
    }
    Rule.highestId = 0;

    Rule.prototype.toString = function(withCursorAt) {
        function stringifySymbolSequence (e) {
            return e.literal ? JSON.stringify(e.literal) :
                   e.type ? '%' + e.type : e.toString();
        }
        var symbolSequence = (typeof withCursorAt === "undefined")
                             ? this.symbols.map(stringifySymbolSequence).join(' ')
                             : (   this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ')
                                 + " ● "
                                 + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ')     );
        return this.name + " → " + symbolSequence;
    }


    // a State is a rule at a position from a given starting point in the input stream (reference)
    function State(rule, dot, reference, wantedBy) {
        this.rule = rule;
        this.dot = dot;
        this.reference = reference;
        this.data = [];
        this.wantedBy = wantedBy;
        this.isComplete = this.dot === rule.symbols.length;
    }

    State.prototype.toString = function() {
        return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
    };

    State.prototype.nextState = function(child) {
        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
        state.left = this;
        state.right = child;
        if (state.isComplete) {
            state.data = state.build();
        }
        return state;
    };

    State.prototype.build = function() {
        var children = [];
        var node = this;
        do {
            children.push(node.right.data);
            node = node.left;
        } while (node.left);
        children.reverse();
        return children;
    };

    State.prototype.finish = function() {
        if (this.rule.postprocess) {
            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
        }
    };


    function Column(grammar, index) {
        this.grammar = grammar;
        this.index = index;
        this.states = [];
        this.wants = {}; // states indexed by the non-terminal they expect
        this.scannable = []; // list of states that expect a token
        this.completed = {}; // states that are nullable
    }


    Column.prototype.process = function(nextColumn) {
        var states = this.states;
        var wants = this.wants;
        var completed = this.completed;

        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration
            var state = states[w];

            if (state.isComplete) {
                state.finish();
                if (state.data !== Parser.fail) {
                    // complete
                    var wantedBy = state.wantedBy;
                    for (var i = wantedBy.length; i--; ) { // this line is hot
                        var left = wantedBy[i];
                        this.complete(left, state);
                    }

                    // special-case nullables
                    if (state.reference === this.index) {
                        // make sure future predictors of this rule get completed.
                        var exp = state.rule.name;
                        (this.completed[exp] = this.completed[exp] || []).push(state);
                    }
                }

            } else {
                // queue scannable states
                var exp = state.rule.symbols[state.dot];
                if (typeof exp !== 'string') {
                    this.scannable.push(state);
                    continue;
                }

                // predict
                if (wants[exp]) {
                    wants[exp].push(state);

                    if (completed.hasOwnProperty(exp)) {
                        var nulls = completed[exp];
                        for (var i = 0; i < nulls.length; i++) {
                            var right = nulls[i];
                            this.complete(state, right);
                        }
                    }
                } else {
                    wants[exp] = [state];
                    this.predict(exp);
                }
            }
        }
    }

    Column.prototype.predict = function(exp) {
        var rules = this.grammar.byName[exp] || [];

        for (var i = 0; i < rules.length; i++) {
            var r = rules[i];
            var wantedBy = this.wants[exp];
            var s = new State(r, 0, this.index, wantedBy);
            this.states.push(s);
        }
    }

    Column.prototype.complete = function(left, right) {
        var copy = left.nextState(right);
        this.states.push(copy);
    }


    function Grammar(rules, start) {
        this.rules = rules;
        this.start = start || this.rules[0].name;
        var byName = this.byName = {};
        this.rules.forEach(function(rule) {
            if (!byName.hasOwnProperty(rule.name)) {
                byName[rule.name] = [];
            }
            byName[rule.name].push(rule);
        });
    }

    // So we can allow passing (rules, start) directly to Parser for backwards compatibility
    Grammar.fromCompiled = function(rules, start) {
        var lexer = rules.Lexer;
        if (rules.ParserStart) {
          start = rules.ParserStart;
          rules = rules.ParserRules;
        }
        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });
        var g = new Grammar(rules, start);
        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable
        return g;
    }


    function StreamLexer() {
      this.reset("");
    }

    StreamLexer.prototype.reset = function(data, state) {
        this.buffer = data;
        this.index = 0;
        this.line = state ? state.line : 1;
        this.lastLineBreak = state ? -state.col : 0;
    }

    StreamLexer.prototype.next = function() {
        if (this.index < this.buffer.length) {
            var ch = this.buffer[this.index++];
            if (ch === '\n') {
              this.line += 1;
              this.lastLineBreak = this.index;
            }
            return {value: ch};
        }
    }

    StreamLexer.prototype.save = function() {
      return {
        line: this.line,
        col: this.index - this.lastLineBreak,
      }
    }

    StreamLexer.prototype.formatError = function(token, message) {
        // nb. this gets called after consuming the offending token,
        // so the culprit is index-1
        var buffer = this.buffer;
        if (typeof buffer === 'string') {
            var nextLineBreak = buffer.indexOf('\n', this.index);
            if (nextLineBreak === -1) nextLineBreak = buffer.length;
            var line = buffer.substring(this.lastLineBreak, nextLineBreak)
            var col = this.index - this.lastLineBreak;
            message += " at line " + this.line + " col " + col + ":\n\n";
            message += "  " + line + "\n"
            message += "  " + Array(col).join(" ") + "^"
            return message;
        } else {
            return message + " at index " + (this.index - 1);
        }
    }


    function Parser(rules, start, options) {
        if (rules instanceof Grammar) {
            var grammar = rules;
            var options = start;
        } else {
            var grammar = Grammar.fromCompiled(rules, start);
        }
        this.grammar = grammar;

        // Read options
        this.options = {
            keepHistory: false,
            lexer: grammar.lexer || new StreamLexer,
        };
        for (var key in (options || {})) {
            this.options[key] = options[key];
        }

        // Setup lexer
        this.lexer = this.options.lexer;
        this.lexerState = undefined;

        // Setup a table
        var column = new Column(grammar, 0);
        var table = this.table = [column];

        // I could be expecting anything.
        column.wants[grammar.start] = [];
        column.predict(grammar.start);
        // TODO what if start rule is nullable?
        column.process();
        this.current = 0; // token index
    }

    // create a reserved token for indicating a parse fail
    Parser.fail = {};

    Parser.prototype.feed = function(chunk) {
        var lexer = this.lexer;
        lexer.reset(chunk, this.lexerState);

        var token;
        while (token = lexer.next()) {
            // We add new states to table[current+1]
            var column = this.table[this.current];

            // GC unused states
            if (!this.options.keepHistory) {
                delete this.table[this.current - 1];
            }

            var n = this.current + 1;
            var nextColumn = new Column(this.grammar, n);
            this.table.push(nextColumn);

            // Advance all tokens that expect the symbol
            var literal = token.text !== undefined ? token.text : token.value;
            var value = lexer.constructor === StreamLexer ? token.value : token;
            var scannable = column.scannable;
            for (var w = scannable.length; w--; ) {
                var state = scannable[w];
                var expect = state.rule.symbols[state.dot];
                // Try to consume the token
                // either regex or literal
                if (expect.test ? expect.test(value) :
                    expect.type ? expect.type === token.type
                                : expect.literal === literal) {
                    // Add it
                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});
                    nextColumn.states.push(next);
                }
            }

            // Next, for each of the rules, we either
            // (a) complete it, and try to see if the reference row expected that
            //     rule
            // (b) predict the next nonterminal it expects by adding that
            //     nonterminal's start state
            // To prevent duplication, we also keep track of rules we have already
            // added

            nextColumn.process();

            // If needed, throw an error:
            if (nextColumn.states.length === 0) {
                // No states at all! This is not good.
                var message = this.lexer.formatError(token, "invalid syntax") + "\n";
                message += "Unexpected " + (token.type ? token.type + " token: " : "");
                message += JSON.stringify(token.value !== undefined ? token.value : token) + "\n";
                var err = new Error(message);
                err.offset = this.current;
                err.token = token;
                throw err;
            }

            // maybe save lexer state
            if (this.options.keepHistory) {
              column.lexerState = lexer.save()
            }

            this.current++;
        }
        if (column) {
          this.lexerState = lexer.save()
        }

        // Incrementally keep track of results
        this.results = this.finish();

        // Allow chaining, for whatever it's worth
        return this;
    };

    Parser.prototype.save = function() {
        var column = this.table[this.current];
        column.lexerState = this.lexerState;
        return column;
    };

    Parser.prototype.restore = function(column) {
        var index = column.index;
        this.current = index;
        this.table[index] = column;
        this.table.splice(index + 1);
        this.lexerState = column.lexerState;

        // Incrementally keep track of results
        this.results = this.finish();
    };

    // nb. deprecated: use save/restore instead!
    Parser.prototype.rewind = function(index) {
        if (!this.options.keepHistory) {
            throw new Error('set option `keepHistory` to enable rewinding')
        }
        // nb. recall column (table) indicies fall between token indicies.
        //        col 0   --   token 0   --   col 1
        this.restore(this.table[index]);
    };

    Parser.prototype.finish = function() {
        // Return the possible parsings
        var considerations = [];
        var start = this.grammar.start;
        var column = this.table[this.table.length - 1]
        column.states.forEach(function (t) {
            if (t.rule.name === start
                    && t.dot === t.rule.symbols.length
                    && t.reference === 0
                    && t.data !== Parser.fail) {
                considerations.push(t);
            }
        });
        return considerations.map(function(c) {return c.data; });
    };

    return {
        Parser: Parser,
        Grammar: Grammar,
        Rule: Rule,
    };

}));

},{}],3:[function(require,module,exports){
(function (global){
"use strict";

// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
exports.default = global.fetch.bind(global);

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_String = require("../CSS.String/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Visible = function (visible) {
    this.visible = visible;
};
var Unset = function (unset) {
    this.unset = unset;
};
var URL = function (url) {
    this.url = url;
};
var Top = function (top) {
    this.top = top;
};
var Other = function (other) {
    this.other = other;
};
var Normal = function (normal) {
    this.normal = normal;
};
var None = function (none) {
    this.none = none;
};
var Middle = function (middle) {
    this.middle = middle;
};
var Initial = function (initial) {
    this.initial = initial;
};
var Inherit = function (inherit) {
    this.inherit = inherit;
};
var Hidden = function (hidden) {
    this.hidden = hidden;
};
var Center = function (center) {
    this.center = center;
};
var Bottom = function (bottom) {
    this.bottom = bottom;
};
var Baseline = function (baseline) {
    this.baseline = baseline;
};
var Auto = function (auto) {
    this.auto = auto;
};
var All = function (all) {
    this.all = all;
};
var visibleValue = new Visible(CSS_String.fromString(CSS_Property.isStringValue)("visible"));
var visible = function (dict) {
    return dict.visible;
};
var urlValue = new URL(function (s) {
    return CSS_String.fromString(CSS_Property.isStringValue)("url(\"" + (s + "\")"));
});
var url = function (dict) {
    return dict.url;
};
var unsetValue = new Unset(CSS_String.fromString(CSS_Property.isStringValue)("unset"));
var unset = function (dict) {
    return dict.unset;
};
var topValue = new Top(CSS_String.fromString(CSS_Property.isStringValue)("top"));
var top = function (dict) {
    return dict.top;
};
var otherValue = new Other(Control_Category.identity(Control_Category.categoryFn));
var other = function (dict) {
    return dict.other;
};
var normalValue = new Normal(CSS_String.fromString(CSS_Property.isStringValue)("normal"));
var normal = function (dict) {
    return dict.normal;
};
var noneValue = new None(CSS_String.fromString(CSS_Property.isStringValue)("none"));
var none = function (dict) {
    return dict.none;
};
var middleValue = new Middle(CSS_String.fromString(CSS_Property.isStringValue)("middle"));
var middle = function (dict) {
    return dict.middle;
};
var initialValue = new Initial(CSS_String.fromString(CSS_Property.isStringValue)("initial"));
var initial = function (dict) {
    return dict.initial;
};
var inheritValue = new Inherit(CSS_String.fromString(CSS_Property.isStringValue)("inherit"));
var inherit = function (dict) {
    return dict.inherit;
};
var hiddenValue = new Hidden(CSS_String.fromString(CSS_Property.isStringValue)("hidden"));
var hidden = function (dict) {
    return dict.hidden;
};
var centerValue = new Center(CSS_String.fromString(CSS_Property.isStringValue)("center"));
var center = function (dict) {
    return dict.center;
};
var call = function (dictIsString) {
    return function (dictMonoid) {
        return function (fn) {
            return function (arg) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(fn)(Data_Semigroup.append(dictMonoid.Semigroup0())(CSS_String.fromString(dictIsString)("("))(Data_Semigroup.append(dictMonoid.Semigroup0())(arg)(CSS_String.fromString(dictIsString)(")"))));
            };
        };
    };
};
var browsers = new CSS_Property.Prefixed([ new Data_Tuple.Tuple("-webkit-", ""), new Data_Tuple.Tuple("-moz-", ""), new Data_Tuple.Tuple("-ms-", ""), new Data_Tuple.Tuple("-o-", ""), new Data_Tuple.Tuple("", "") ]);
var bottomValue = new Bottom(CSS_String.fromString(CSS_Property.isStringValue)("bottom"));
var bottom = function (dict) {
    return dict.bottom;
};
var baselineValue = new Baseline(CSS_String.fromString(CSS_Property.isStringValue)("baseline"));
var baseline = function (dict) {
    return dict.baseline;
};
var autoValue = new Auto(CSS_String.fromString(CSS_Property.isStringValue)("auto"));
var auto = function (dict) {
    return dict.auto;
};
var allValue = new All(CSS_String.fromString(CSS_Property.isStringValue)("all"));
var all = function (dict) {
    return dict.all;
};
module.exports = {
    all: all,
    auto: auto,
    baseline: baseline,
    bottom: bottom,
    center: center,
    hidden: hidden,
    inherit: inherit,
    initial: initial,
    middle: middle,
    none: none,
    normal: normal,
    other: other,
    top: top,
    unset: unset,
    url: url,
    visible: visible,
    All: All,
    Auto: Auto,
    Baseline: Baseline,
    Center: Center,
    Inherit: Inherit,
    None: None,
    Normal: Normal,
    Visible: Visible,
    Hidden: Hidden,
    Initial: Initial,
    Unset: Unset,
    Top: Top,
    Middle: Middle,
    Bottom: Bottom,
    URL: URL,
    Other: Other,
    browsers: browsers,
    call: call,
    allValue: allValue,
    autoValue: autoValue,
    baselineValue: baselineValue,
    centerValue: centerValue,
    inheritValue: inheritValue,
    normalValue: normalValue,
    noneValue: noneValue,
    visibleValue: visibleValue,
    hiddenValue: hiddenValue,
    otherValue: otherValue,
    initialValue: initialValue,
    unsetValue: unsetValue,
    topValue: topValue,
    middleValue: middleValue,
    bottomValue: bottomValue,
    urlValue: urlValue
};

},{"../CSS.Property/index.js":7,"../CSS.String/index.js":11,"../Control.Category/index.js":24,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251}],5:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Common = require("../CSS.Common/index.js");
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var GenericFontFamily = function (x) {
    return x;
};
var FontWeight = function (x) {
    return x;
};
var FontStyle = function (x) {
    return x;
};
var weight = function (i) {
    return FontWeight(CSS_Property.value(CSS_Property.valNumber)(i));
};
var valGenericFontFamily = new CSS_Property.Val(function (v) {
    return v;
});
var valFontWeight = new CSS_Property.Val(function (v) {
    return v;
});
var valFontStyle = new CSS_Property.Val(function (v) {
    return v;
});
var unsetFontWeight = new CSS_Common.Unset(CSS_String.fromString(CSS_Property.isStringValue)("unset"));
var unsetFontStyle = new CSS_Common.Unset(CSS_String.fromString(CSS_Property.isStringValue)("unset"));
var sansSerif = GenericFontFamily(CSS_String.fromString(CSS_Property.isStringValue)("sans-serif"));
var oblique = FontStyle(CSS_String.fromString(CSS_Property.isStringValue)("oblique"));
var normalFontWeight = new CSS_Common.Normal(CSS_String.fromString(CSS_Property.isStringValue)("normal"));
var normalFontStyle = new CSS_Common.Normal(CSS_String.fromString(CSS_Property.isStringValue)("normal"));
var lighter = FontWeight(CSS_String.fromString(CSS_Property.isStringValue)("lighter"));
var italic = FontStyle(CSS_String.fromString(CSS_Property.isStringValue)("italic"));
var initialFontWeight = new CSS_Common.Initial(CSS_String.fromString(CSS_Property.isStringValue)("initial"));
var initialFontStyle = new CSS_Common.Initial(CSS_String.fromString(CSS_Property.isStringValue)("initial"));
var inheritFontWeight = new CSS_Common.Inherit(CSS_String.fromString(CSS_Property.isStringValue)("inherit"));
var inheritFontStyle = new CSS_Common.Inherit(CSS_String.fromString(CSS_Property.isStringValue)("inherit"));
var genericGenericFontFamily = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericFontWeight = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericFontStyle = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var fontWeight = CSS_Stylesheet.key(valFontWeight)(CSS_String.fromString(CSS_Property.isStringKey)("font-weight"));
var fontStyle = CSS_Stylesheet.key(valFontStyle)(CSS_String.fromString(CSS_Property.isStringKey)("font-style"));
var fontSize = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("font-size"));
var fontFamily = function (a) {
    return function (b) {
        return CSS_Stylesheet.key(CSS_Property.valValue)(CSS_String.fromString(CSS_Property.isStringKey)("font-family"))(CSS_Property.value(CSS_Property.valList(CSS_Property.valValue))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)((function () {
            var $54 = CSS_Property.value(CSS_Property.valString);
            return function ($55) {
                return $54(CSS_Property.quote($55));
            };
        })())(a))(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(CSS_Property.value(valGenericFontFamily))(b)))));
    };
};
var eqGenericFontFamily = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
    };
});
var ordGenericFontFamily = new Data_Ord.Ord(function () {
    return eqGenericFontFamily;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
    };
});
var eqFontWeight = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
    };
});
var ordFontWeight = new Data_Ord.Ord(function () {
    return eqFontWeight;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
    };
});
var eqFontStyle = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
    };
});
var ordFontStyle = new Data_Ord.Ord(function () {
    return eqFontStyle;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
    };
});
var color = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("color"));
var bolder = FontWeight(CSS_String.fromString(CSS_Property.isStringValue)("bolder"));
var bold = FontWeight(CSS_String.fromString(CSS_Property.isStringValue)("bold"));
module.exports = {
    color: color,
    GenericFontFamily: GenericFontFamily,
    sansSerif: sansSerif,
    fontFamily: fontFamily,
    fontSize: fontSize,
    FontWeight: FontWeight,
    bold: bold,
    bolder: bolder,
    lighter: lighter,
    weight: weight,
    fontWeight: fontWeight,
    FontStyle: FontStyle,
    italic: italic,
    oblique: oblique,
    fontStyle: fontStyle,
    eqGenericFontFamily: eqGenericFontFamily,
    ordGenericFontFamily: ordGenericFontFamily,
    genericGenericFontFamily: genericGenericFontFamily,
    valGenericFontFamily: valGenericFontFamily,
    eqFontWeight: eqFontWeight,
    ordFontWeight: ordFontWeight,
    genericFontWeight: genericFontWeight,
    valFontWeight: valFontWeight,
    normalFontWeight: normalFontWeight,
    initialFontWeight: initialFontWeight,
    inheritFontWeight: inheritFontWeight,
    unsetFontWeight: unsetFontWeight,
    eqFontStyle: eqFontStyle,
    ordFontStyle: ordFontStyle,
    genericFontStyle: genericFontStyle,
    valFontStyle: valFontStyle,
    normalFontStyle: normalFontStyle,
    initialFontStyle: initialFontStyle,
    inheritFontStyle: inheritFontStyle,
    unsetFontStyle: unsetFontStyle
};

},{"../CSS.Common/index.js":4,"../CSS.Property/index.js":7,"../CSS.Size/index.js":10,"../CSS.String/index.js":11,"../CSS.Stylesheet/index.js":12,"../Control.Alternative/index.js":15,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Generic.Rep/index.js":147,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221}],6:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Data_Tuple_Nested = require("../Data.Tuple.Nested/index.js");
var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));
var top = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("top"));
var right = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("right"));
var paddingTop = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-top"));
var paddingRight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-right"));
var paddingLeft = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-left"));
var paddingBottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("padding-bottom"));
var padding = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("padding"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
            };
        };
    };
};
var minWidth = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("min-width"));
var minHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("min-height"));
var maxWidth = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("max-width"));
var maxHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("max-height"));
var marginTop = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-top"));
var marginRight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-right"));
var marginLeft = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-left"));
var marginBottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("margin-bottom"));
var margin = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("margin"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
            };
        };
    };
};
var lineHeight = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("line-height"));
var left = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("left"));
var height = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("height"));
var bottom = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("bottom"));
module.exports = {
    width: width,
    height: height,
    minWidth: minWidth,
    minHeight: minHeight,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    top: top,
    bottom: bottom,
    left: left,
    right: right,
    padding: padding,
    paddingTop: paddingTop,
    paddingBottom: paddingBottom,
    paddingLeft: paddingLeft,
    paddingRight: paddingRight,
    margin: margin,
    marginTop: marginTop,
    marginBottom: marginBottom,
    marginLeft: marginLeft,
    marginRight: marginRight,
    lineHeight: lineHeight
};

},{"../CSS.Property/index.js":7,"../CSS.Size/index.js":10,"../CSS.String/index.js":11,"../CSS.Stylesheet/index.js":12,"../Data.Tuple.Nested/index.js":250}],7:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_String = require("../CSS.String/index.js");
var Color = require("../Color/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Prefixed = (function () {
    function Prefixed(value0) {
        this.value0 = value0;
    };
    Prefixed.create = function (value0) {
        return new Prefixed(value0);
    };
    return Prefixed;
})();
var Plain = (function () {
    function Plain(value0) {
        this.value0 = value0;
    };
    Plain.create = function (value0) {
        return new Plain(value0);
    };
    return Plain;
})();
var Value = function (x) {
    return x;
};
var Literal = function (x) {
    return x;
};
var Key = function (x) {
    return x;
};
var Val = function (value) {
    this.value = value;
};
var value = function (dict) {
    return dict.value;
};
var valValue = new Val(Control_Category.identity(Control_Category.categoryFn));
var semigroupPrefixed = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Plain && v1 instanceof Plain) {
            return Plain.create(v.value0 + v1.value0);
        };
        if (v instanceof Plain && v1 instanceof Prefixed) {
            return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                return v.value0 + v2;
            }))(v1.value0));
        };
        if (v instanceof Prefixed && v1 instanceof Plain) {
            return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                return v1.value0 + v2;
            }))(v.value0));
        };
        if (v instanceof Prefixed && v1 instanceof Prefixed) {
            return Prefixed.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
        };
        throw new Error("Failed pattern match at CSS.Property (line 25, column 1 - line 29, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var semigroupValue = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Value(Data_Semigroup.append(semigroupPrefixed)(v)(v1));
    };
});
var quote = function (s) {
    return "\"" + (s + "\"");
};
var plain = function (v) {
    if (v instanceof Prefixed) {
        return Data_Maybe.fromMaybe("")(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)("")(v.value0));
    };
    if (v instanceof Plain) {
        return v.value0;
    };
    throw new Error("Failed pattern match at CSS.Property (line 34, column 1 - line 34, column 28): " + [ v.constructor.name ]);
};
var monoidPrefixed = new Data_Monoid.Monoid(function () {
    return semigroupPrefixed;
}, new Plain(Data_Monoid.mempty(Data_Monoid.monoidString)));
var monoidValue = new Data_Monoid.Monoid(function () {
    return semigroupValue;
}, Data_Monoid.mempty(monoidPrefixed));
var isStringPrefixed = new CSS_String.IsString(Plain.create);
var isStringValue = new CSS_String.IsString((function () {
    var $123 = CSS_String.fromString(isStringPrefixed);
    return function ($124) {
        return Value($123($124));
    };
})());
var noCommas = function (dictVal) {
    var $125 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(CSS_String.fromString(isStringValue)(" "));
    return function ($126) {
        return $125((function (v) {
            return Data_Functor.map(Data_Functor.functorArray)(value(dictVal))(v);
        })($126));
    };
};
var valColor = new Val((function () {
    var $127 = CSS_String.fromString(isStringValue);
    return function ($128) {
        return $127(Color.cssStringHSLA($128));
    };
})());
var valList = function (dictVal) {
    return new Val((function () {
        var $129 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(CSS_String.fromString(isStringValue)(", "));
        return function ($130) {
            return $129((function (v) {
                return Data_Functor.map(Data_Functor.functorArray)(value(dictVal))(v);
            })($130));
        };
    })());
};
var valNonEmpty = function (dictVal) {
    return new Val((function () {
        var $131 = value(valList(dictVal));
        var $132 = Data_NonEmpty.oneOf(Control_Alternative.alternativeArray);
        return function ($133) {
            return $131($132($133));
        };
    })());
};
var valLiteral = new Val(function (v) {
    return CSS_String.fromString(isStringValue)(quote(v));
});
var valNumber = new Val((function () {
    var $134 = CSS_String.fromString(isStringValue);
    var $135 = Data_Show.show(Data_Show.showNumber);
    return function ($136) {
        return $134($135($136));
    };
})());
var valString = new Val(CSS_String.fromString(isStringValue));
var valTuple = function (dictVal) {
    return function (dictVal1) {
        return new Val(function (v) {
            return Data_Semigroup.append(semigroupValue)(value(dictVal)(v.value0))(Data_Semigroup.append(semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(dictVal1)(v.value1)));
        });
    };
};
var valUnit = new Val(function (u) {
    return CSS_String.fromString(isStringValue)("");
});
var isStringKey = new CSS_String.IsString((function () {
    var $137 = CSS_String.fromString(isStringPrefixed);
    return function ($138) {
        return Key($137($138));
    };
})());
var genericValue = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericPrefixed = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Prefixed) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Plain) {
        return new Data_Generic_Rep.Inr(x.value0);
    };
    throw new Error("Failed pattern match at CSS.Property (line 20, column 1 - line 20, column 54): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Prefixed(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return new Plain(x.value0);
    };
    throw new Error("Failed pattern match at CSS.Property (line 20, column 1 - line 20, column 54): " + [ x.constructor.name ]);
});
var genericLiteral = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericKey = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var eqPrefixed = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Prefixed && y instanceof Prefixed) {
            return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Eq.eqString)))(x.value0)(y.value0);
        };
        if (x instanceof Plain && y instanceof Plain) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqValue = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqPrefixed)(x)(y);
    };
});
var ordPrefixed = new Data_Ord.Ord(function () {
    return eqPrefixed;
}, function (x) {
    return function (y) {
        if (x instanceof Prefixed && y instanceof Prefixed) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Ord.ordString)))(x.value0)(y.value0);
        };
        if (x instanceof Prefixed) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Prefixed) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Plain && y instanceof Plain) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Property (line 19, column 1 - line 19, column 44): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordValue = new Data_Ord.Ord(function () {
    return eqValue;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(ordPrefixed)(x)(y);
    };
});
var eqLiteral = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordLiteral = new Data_Ord.Ord(function () {
    return eqLiteral;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqKey = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(eqPrefixed)(x)(y);
        };
    });
};
var ordKey = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqKey(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(ordPrefixed)(x)(y);
        };
    });
};
var cast = function (v) {
    return v;
};
module.exports = {
    value: value,
    Prefixed: Prefixed,
    Plain: Plain,
    plain: plain,
    quote: quote,
    Key: Key,
    cast: cast,
    Value: Value,
    Val: Val,
    Literal: Literal,
    noCommas: noCommas,
    eqPrefixed: eqPrefixed,
    ordPrefixed: ordPrefixed,
    genericPrefixed: genericPrefixed,
    isStringPrefixed: isStringPrefixed,
    semigroupPrefixed: semigroupPrefixed,
    monoidPrefixed: monoidPrefixed,
    eqKey: eqKey,
    ordKey: ordKey,
    genericKey: genericKey,
    isStringKey: isStringKey,
    eqValue: eqValue,
    ordValue: ordValue,
    genericValue: genericValue,
    isStringValue: isStringValue,
    semigroupValue: semigroupValue,
    monoidValue: monoidValue,
    eqLiteral: eqLiteral,
    ordLiteral: ordLiteral,
    genericLiteral: genericLiteral,
    valLiteral: valLiteral,
    valValue: valValue,
    valString: valString,
    valUnit: valUnit,
    valTuple: valTuple,
    valNumber: valNumber,
    valList: valList,
    valNonEmpty: valNonEmpty,
    valColor: valColor
};

},{"../CSS.String/index.js":11,"../Color/index.js":13,"../Control.Alternative/index.js":15,"../Control.Category/index.js":24,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.Generic.Rep/index.js":147,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Tuple/index.js":251}],8:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Selector = require("../CSS.Selector/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Sheet = function (x) {
    return x;
};
var Inline = function (x) {
    return x;
};
var sepWith = function (s) {
    return function (a) {
        return function (b) {
            return a + (s + b);
        };
    };
};
var semigroupInline = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupFile = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var properties = function (xs) {
    var sheetRules = Data_Either.either(function (v) {
        return Data_Monoid.mempty(Data_Monoid.monoidString);
    })(function (v) {
        return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ v.value0, ": ", v.value1 ]);
    });
    return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Data_Functor.map(Data_Functor.functorArray)(sheetRules)(xs));
};
var predicate = function (v) {
    if (v instanceof CSS_Selector.Id) {
        return "#" + v.value0;
    };
    if (v instanceof CSS_Selector.Class) {
        return "." + v.value0;
    };
    if (v instanceof CSS_Selector.Attr) {
        return "[" + (v.value0 + "]");
    };
    if (v instanceof CSS_Selector.AttrVal) {
        return "[" + (v.value0 + ("='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrBegins) {
        return "[" + (v.value0 + ("^='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrEnds) {
        return "[" + (v.value0 + ("$='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrContains) {
        return "[" + (v.value0 + ("*='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrSpace) {
        return "[" + (v.value0 + ("~='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.AttrHyph) {
        return "[" + (v.value0 + ("|='" + (v.value1 + "']")));
    };
    if (v instanceof CSS_Selector.Pseudo) {
        return ":" + v.value0;
    };
    if (v instanceof CSS_Selector.PseudoFunc) {
        return ":" + (v.value0 + ("(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at CSS.Render (line 177, column 1 - line 177, column 33): " + [ v.constructor.name ]);
};
var selector$prime$prime = function (v) {
    return function (v1) {
        if (v.length === 0 && v1 instanceof CSS_Selector.Star) {
            return [ "*" ];
        };
        if (v1 instanceof CSS_Selector.Star) {
            return [ "" ];
        };
        if (v1 instanceof CSS_Selector.Elem) {
            return [ v1.value0 ];
        };
        if (v1 instanceof CSS_Selector.PathChild) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" > "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Deep) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Adjacent) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" + "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
        };
        if (v1 instanceof CSS_Selector.Combined) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(selector$prime(v1.value0))(selector$prime(v1.value1));
        };
        throw new Error("Failed pattern match at CSS.Render (line 143, column 1 - line 143, column 63): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var selector$prime = function (v) {
    return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return v1 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(CSS_Selector.ordPredicate)(v.value0));
    })(selector$prime$prime(v.value0)(v.value1));
};
var selector = (function () {
    var $175 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ");
    return function ($176) {
        return $175(selector$prime($176));
    };
})();
var nel = function (v) {
    if (v.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return new Data_NonEmpty.NonEmpty(v1.head, v1.tail);
    })(Data_Array.uncons(v));
};
var monoidInline = new Data_Monoid.Monoid(function () {
    return semigroupInline;
}, Data_Monoid.mempty(Data_Monoid.monoidString));
var monoidFile = new Data_Monoid.Monoid(function () {
    return semigroupFile;
}, Data_Monoid.mempty(Data_Monoid.monoidString));
var merger = function (v) {
    if (v.value0 instanceof CSS_Stylesheet.Child) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.child(merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Sub) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.deep(merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Root) {
        return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
            return CSS_Selector.deep(v.value0.value0)(merger(xs$prime));
        })(nel(v.value1));
    };
    if (v.value0 instanceof CSS_Stylesheet.Pop) {
        return Data_Maybe.maybe(CSS_Selector.element("TODO"))(merger)(nel(Data_Array.drop(v.value0.value0)(Data_Array.cons(v.value0)(v.value1))));
    };
    if (v.value0 instanceof CSS_Stylesheet.Self) {
        return Data_Maybe.maybe(CSS_Selector["with"](CSS_Selector.star)(v.value0.value0))(function (xs$prime) {
            return CSS_Selector["with"](merger(xs$prime))(v.value0.value0);
        })(nel(v.value1));
    };
    throw new Error("Failed pattern match at CSS.Render (line 170, column 3 - line 175, column 106): " + [ v.value0.constructor.name ]);
};
var mediaType = function (v) {
    return CSS_Property.plain(v);
};
var imp = function (t) {
    return Data_Maybe.Just.create(Data_These.That.create(Sheet(CSS_String.fromString(CSS_String.isStringString)("@import url(" + (t + ");\x0a")))));
};
var getSheet = function (v) {
    return v;
};
var renderedSheet = function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)((function () {
        var $177 = Data_Functor.map(Data_Maybe.functorMaybe)(getSheet);
        return function ($178) {
            return $177(Data_These.theseRight($178));
        };
    })());
};
var getInline = function (v) {
    return v;
};
var renderedInline = function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)((function () {
        var $179 = Data_Functor.map(Data_Maybe.functorMaybe)(getInline);
        return function ($180) {
            return $179(Data_These.theseLeft($180));
        };
    })());
};
var genericSheet = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericInline = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var feature = function (v) {
    return Data_Maybe.maybe(v.value0)(function (v1) {
        return "(" + (v.value0 + (": " + (CSS_Property.plain(v1) + ")")));
    })(v.value1);
};
var mediaQuery = function (v) {
    return "@media " + (mediaType(v.value1) + Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(function ($181) {
        return (function (v1) {
            return " and " + v1;
        })(feature($181));
    })(v.value2)));
};
var eqSheet = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordSheet = new Data_Ord.Ord(function () {
    return eqSheet;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var eqInline = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordInline = new Data_Ord.Ord(function () {
    return eqInline;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
var collect$prime = function (v) {
    return function (v1) {
        if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Plain) {
            return [ new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v1.value0)) ];
        };
        if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Plain) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                return Data_Either.Right.create(new Data_Tuple.Tuple(v3.value0 + v3.value1, v1.value0));
            })(v.value0);
        };
        if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Prefixed) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v2.value0 + v2.value1));
            })(v1.value0);
        };
        if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Prefixed) {
            return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                return Data_Maybe.maybe(new Data_Either.Left(v2.value0 + v2.value1))((function () {
                    var $182 = Data_Tuple.Tuple.create(v2.value0 + v2.value1);
                    return function ($183) {
                        return Data_Either.Right.create($182((function (v3) {
                            return v2.value0 + v3;
                        })($183)));
                    };
                })())(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2.value0)(v1.value0));
            })(v.value0);
        };
        throw new Error("Failed pattern match at CSS.Render (line 158, column 1 - line 158, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var collect = function (v) {
    return collect$prime(v.value0)(v.value1);
};
var rule$prime = function (sel) {
    return function (props) {
        var p = Control_Bind.bind(Control_Bind.bindArray)(props)(collect);
        var q = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
            var $184 = Data_NonEmpty.oneOf(Control_Alternative.alternativeArray);
            return function ($185) {
                return Data_These.This.create(Inline(properties($184($185))));
            };
        })())(nel(p));
        var o = function (sel$prime) {
            return Data_Maybe.Just.create(Data_These.That.create(Sheet(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}\x0a" ]))));
        };
        return Data_Maybe.maybe(q)(o)(nel(sel));
    };
};
var rules = function (sel) {
    return function (rs) {
        var queries = function (v) {
            if (v instanceof CSS_Stylesheet.Query) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var queryRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Tuple.uncurry(Data_Function.flip(query$prime)(sel)))(Data_Array.mapMaybe(queries)(rs));
        var property = function (v) {
            if (v instanceof CSS_Stylesheet.Property) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var topRules = (function () {
            var rs$prime = Data_Array.mapMaybe(property)(rs);
            var $162 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])(rs$prime);
            if ($162) {
                return rule$prime(sel)(rs$prime);
            };
            return Data_Maybe.Nothing.value;
        })();
        var nestedRules = function (a) {
            return rules(Data_Array.cons(a)(sel));
        };
        var nested = function (v) {
            if (v instanceof CSS_Stylesheet.Nested) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
            };
            return Data_Maybe.Nothing.value;
        };
        var nestedSheets = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
        var kframes = function (v) {
            if (v instanceof CSS_Stylesheet.Keyframe) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var keyframeRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(kframe)(Data_Array.mapMaybe(kframes)(rs));
        var imports = function (v) {
            if (v instanceof CSS_Stylesheet.Import) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var importRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(imp)(Data_Array.mapMaybe(imports)(rs));
        var faces = function (v) {
            if (v instanceof CSS_Stylesheet.Face) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        };
        var faceRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(face)(Data_Array.mapMaybe(faces)(rs));
        return Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(importRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(keyframeRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(faceRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(nestedSheets)(queryRules)))));
    };
};
var query$prime = function (q) {
    return function (sel) {
        return function (rs) {
            return Data_Maybe.Just.create(Data_These.That.create(Sheet(mediaQuery(q) + (" { " + (Data_Maybe.fromMaybe("")(renderedSheet(rules(sel)(rs))) + " }\x0a")))));
        };
    };
};
var kframe = function (v) {
    var renderContent = " " + (v.value0 + (" { " + (Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Tuple.uncurry(frame))(v.value1)) + " }\x0a")));
    var keywords = [ "@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes" ];
    var allKeywordsWithContent = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return v1 + renderContent;
    })(keywords));
    return Data_Maybe.Just.create(Data_These.That.create(Sheet(allKeywordsWithContent)));
};
var frame = function (p) {
    return function (rs) {
        var x = Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs)));
        return Data_Show.show(Data_Show.showNumber)(p) + ("% " + ("{ " + (x + " }")));
    };
};
var face = function (rs) {
    return Data_Maybe.Just.create(Data_These.That.create(Sheet("@font-face { " + (Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs))) + " }\x0a"))));
};
var render = (function () {
    var $186 = rules([  ]);
    return function ($187) {
        return $186(CSS_Stylesheet.runS($187));
    };
})();
var putInline = function (s) {
    return Effect_Console.log(Data_Maybe.fromMaybe("")(renderedInline(render(s))));
};
var putStyleSheet = function (s) {
    return Effect_Console.log(Data_Maybe.fromMaybe("")(renderedSheet(render(s))));
};
module.exports = {
    Inline: Inline,
    getInline: getInline,
    Sheet: Sheet,
    getSheet: getSheet,
    renderedInline: renderedInline,
    renderedSheet: renderedSheet,
    render: render,
    putInline: putInline,
    putStyleSheet: putStyleSheet,
    kframe: kframe,
    frame: frame,
    "query'": query$prime,
    mediaQuery: mediaQuery,
    mediaType: mediaType,
    feature: feature,
    face: face,
    rules: rules,
    imp: imp,
    "rule'": rule$prime,
    selector: selector,
    "selector'": selector$prime,
    "selector''": selector$prime$prime,
    sepWith: sepWith,
    collect: collect,
    "collect'": collect$prime,
    properties: properties,
    merger: merger,
    predicate: predicate,
    nel: nel,
    eqInline: eqInline,
    ordInline: ordInline,
    genericInline: genericInline,
    semigroupInline: semigroupInline,
    monoidInline: monoidInline,
    eqSheet: eqSheet,
    ordSheet: ordSheet,
    genericSheet: genericSheet,
    semigroupFile: semigroupFile,
    monoidFile: monoidFile
};

},{"../CSS.Property/index.js":7,"../CSS.Selector/index.js":9,"../CSS.String/index.js":11,"../CSS.Stylesheet/index.js":12,"../Control.Alternative/index.js":15,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Data.Array/index.js":91,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Generic.Rep/index.js":147,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.These/index.js":242,"../Data.Tuple/index.js":251,"../Effect.Console/index.js":301}],9:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_String = require("../CSS.String/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Id = (function () {
    function Id(value0) {
        this.value0 = value0;
    };
    Id.create = function (value0) {
        return new Id(value0);
    };
    return Id;
})();
var Class = (function () {
    function Class(value0) {
        this.value0 = value0;
    };
    Class.create = function (value0) {
        return new Class(value0);
    };
    return Class;
})();
var Attr = (function () {
    function Attr(value0) {
        this.value0 = value0;
    };
    Attr.create = function (value0) {
        return new Attr(value0);
    };
    return Attr;
})();
var AttrVal = (function () {
    function AttrVal(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrVal.create = function (value0) {
        return function (value1) {
            return new AttrVal(value0, value1);
        };
    };
    return AttrVal;
})();
var AttrBegins = (function () {
    function AttrBegins(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrBegins.create = function (value0) {
        return function (value1) {
            return new AttrBegins(value0, value1);
        };
    };
    return AttrBegins;
})();
var AttrEnds = (function () {
    function AttrEnds(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrEnds.create = function (value0) {
        return function (value1) {
            return new AttrEnds(value0, value1);
        };
    };
    return AttrEnds;
})();
var AttrContains = (function () {
    function AttrContains(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrContains.create = function (value0) {
        return function (value1) {
            return new AttrContains(value0, value1);
        };
    };
    return AttrContains;
})();
var AttrSpace = (function () {
    function AttrSpace(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrSpace.create = function (value0) {
        return function (value1) {
            return new AttrSpace(value0, value1);
        };
    };
    return AttrSpace;
})();
var AttrHyph = (function () {
    function AttrHyph(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AttrHyph.create = function (value0) {
        return function (value1) {
            return new AttrHyph(value0, value1);
        };
    };
    return AttrHyph;
})();
var Pseudo = (function () {
    function Pseudo(value0) {
        this.value0 = value0;
    };
    Pseudo.create = function (value0) {
        return new Pseudo(value0);
    };
    return Pseudo;
})();
var PseudoFunc = (function () {
    function PseudoFunc(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PseudoFunc.create = function (value0) {
        return function (value1) {
            return new PseudoFunc(value0, value1);
        };
    };
    return PseudoFunc;
})();
var Refinement = function (x) {
    return x;
};
var Star = (function () {
    function Star() {

    };
    Star.value = new Star();
    return Star;
})();
var Elem = (function () {
    function Elem(value0) {
        this.value0 = value0;
    };
    Elem.create = function (value0) {
        return new Elem(value0);
    };
    return Elem;
})();
var PathChild = (function () {
    function PathChild(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PathChild.create = function (value0) {
        return function (value1) {
            return new PathChild(value0, value1);
        };
    };
    return PathChild;
})();
var Deep = (function () {
    function Deep(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Deep.create = function (value0) {
        return function (value1) {
            return new Deep(value0, value1);
        };
    };
    return Deep;
})();
var Adjacent = (function () {
    function Adjacent(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Adjacent.create = function (value0) {
        return function (value1) {
            return new Adjacent(value0, value1);
        };
    };
    return Adjacent;
})();
var Combined = (function () {
    function Combined(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Combined.create = function (value0) {
        return function (value1) {
            return new Combined(value0, value1);
        };
    };
    return Combined;
})();
var Selector = (function () {
    function Selector(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Selector.create = function (value0) {
        return function (value1) {
            return new Selector(value0, value1);
        };
    };
    return Selector;
})();
var $$with = function (v) {
    return function (v1) {
        return new Selector(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1), v.value1);
    };
};
var star = new Selector([  ], Star.value);
var isStringSelector = new CSS_String.IsString(function (s) {
    var v = Data_String_CodePoints.take(1)(s);
    if (v === "#") {
        return new Selector([ Id.create(Data_String_CodePoints.drop(1)(s)) ], Star.value);
    };
    if (v === ".") {
        return new Selector([ Class.create(Data_String_CodePoints.drop(1)(s)) ], Star.value);
    };
    return new Selector([  ], new Elem(s));
});
var isStringRefinement = new CSS_String.IsString(function (s) {
    return [ (function () {
        var v = Data_String_CodePoints.take(1)(s);
        if (v === "#") {
            return Id.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === ".") {
            return Class.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === ":") {
            return Pseudo.create(Data_String_CodePoints.drop(1)(s));
        };
        if (v === "@") {
            return Attr.create(Data_String_CodePoints.drop(1)(s));
        };
        return new Attr(s);
    })() ];
});
var genericSelector = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Selector(x.value0, x.value1);
});
var genericRefinement = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericPredicate = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Id) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Class) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof Attr) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof AttrVal) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
    };
    if (x instanceof AttrBegins) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
    };
    if (x instanceof AttrEnds) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))));
    };
    if (x instanceof AttrContains) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))));
    };
    if (x instanceof AttrSpace) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))));
    };
    if (x instanceof AttrHyph) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))))));
    };
    if (x instanceof Pseudo) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))));
    };
    if (x instanceof PseudoFunc) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)))))))))));
    };
    throw new Error("Failed pattern match at CSS.Selector (line 25, column 1 - line 25, column 56): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Id(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Class(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Attr(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new AttrVal(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return new AttrBegins(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
        return new AttrEnds(x.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
        return new AttrContains(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
        return new AttrSpace(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
        return new AttrHyph(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
        return new Pseudo(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))) {
        return new PseudoFunc(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
    };
    throw new Error("Failed pattern match at CSS.Selector (line 25, column 1 - line 25, column 56): " + [ x.constructor.name ]);
});
var genericPath = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        if (x instanceof Star) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Elem) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof PathChild) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
        };
        if (x instanceof Deep) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
        };
        if (x instanceof Adjacent) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
        };
        if (x instanceof Combined) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1))))));
        };
        throw new Error("Failed pattern match at CSS.Selector (line 54, column 1 - line 54, column 69): " + [ x.constructor.name ]);
    }, function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Star.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new Elem(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new PathChild(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new Deep(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return new Adjacent(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
            return new Combined(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
        };
        throw new Error("Failed pattern match at CSS.Selector (line 54, column 1 - line 54, column 69): " + [ x.constructor.name ]);
    });
};
var eqPredicate = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Id && y instanceof Id) {
            return x.value0 === y.value0;
        };
        if (x instanceof Class && y instanceof Class) {
            return x.value0 === y.value0;
        };
        if (x instanceof Attr && y instanceof Attr) {
            return x.value0 === y.value0;
        };
        if (x instanceof AttrVal && y instanceof AttrVal) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrBegins && y instanceof AttrBegins) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrEnds && y instanceof AttrEnds) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrContains && y instanceof AttrContains) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrSpace && y instanceof AttrSpace) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof AttrHyph && y instanceof AttrHyph) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof Pseudo && y instanceof Pseudo) {
            return x.value0 === y.value0;
        };
        if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
            return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.value1)(y.value1);
        };
        return false;
    };
});
var eqRefinement = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Eq.eqArray(eqPredicate))(x)(y);
    };
});
var ordPredicate = new Data_Ord.Ord(function () {
    return eqPredicate;
}, function (x) {
    return function (y) {
        if (x instanceof Id && y instanceof Id) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Id) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Id) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Class && y instanceof Class) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Class) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Class) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Attr && y instanceof Attr) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Attr) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Attr) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrVal && y instanceof AttrVal) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrVal) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrVal) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrBegins && y instanceof AttrBegins) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrBegins) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrBegins) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrEnds && y instanceof AttrEnds) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrEnds) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrEnds) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrContains && y instanceof AttrContains) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrContains) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrContains) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrSpace && y instanceof AttrSpace) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrSpace) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrSpace) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AttrHyph && y instanceof AttrHyph) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof AttrHyph) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AttrHyph) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Pseudo && y instanceof Pseudo) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Pseudo) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Pseudo) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordString))(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at CSS.Selector (line 24, column 1 - line 24, column 46): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordRefinement = new Data_Ord.Ord(function () {
    return eqRefinement;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordArray(ordPredicate))(x)(y);
    };
});
var eqPath = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Star && y instanceof Star) {
                return true;
            };
            if (x instanceof Elem && y instanceof Elem) {
                return x.value0 === y.value0;
            };
            if (x instanceof PathChild && y instanceof PathChild) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Deep && y instanceof Deep) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Adjacent && y instanceof Adjacent) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Combined && y instanceof Combined) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            return false;
        };
    });
};
var eqSelector = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqRefinement)(x.value0)(y.value0) && Data_Eq.eq(eqPath(eqSelector))(x.value1)(y.value1);
    };
});
var ordPath = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPath(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Star && y instanceof Star) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Star) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Star) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Elem && y instanceof Elem) {
                return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            };
            if (x instanceof Elem) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Elem) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof PathChild && y instanceof PathChild) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof PathChild) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PathChild) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Deep && y instanceof Deep) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Deep) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Deep) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Adjacent && y instanceof Adjacent) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Adjacent) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Adjacent) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Combined && y instanceof Combined) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at CSS.Selector (line 53, column 1 - line 53, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var ordSelector = new Data_Ord.Ord(function () {
    return eqSelector;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(ordRefinement)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(ordPath(ordSelector))(x.value1)(y.value1);
    };
});
var element = function (e) {
    return new Selector([  ], new Elem(e));
};
var deep = function (a) {
    return function (b) {
        return new Selector([  ], new Deep(a, b));
    };
};
var child = function (a) {
    return function (b) {
        return new Selector([  ], new PathChild(a, b));
    };
};
module.exports = {
    Id: Id,
    Class: Class,
    Attr: Attr,
    AttrVal: AttrVal,
    AttrBegins: AttrBegins,
    AttrEnds: AttrEnds,
    AttrContains: AttrContains,
    AttrSpace: AttrSpace,
    AttrHyph: AttrHyph,
    Pseudo: Pseudo,
    PseudoFunc: PseudoFunc,
    Refinement: Refinement,
    Star: Star,
    Elem: Elem,
    PathChild: PathChild,
    Deep: Deep,
    Adjacent: Adjacent,
    Combined: Combined,
    Selector: Selector,
    star: star,
    element: element,
    deep: deep,
    child: child,
    "with": $$with,
    eqPredicate: eqPredicate,
    ordPredicate: ordPredicate,
    genericPredicate: genericPredicate,
    eqRefinement: eqRefinement,
    ordRefinement: ordRefinement,
    genericRefinement: genericRefinement,
    isStringRefinement: isStringRefinement,
    eqPath: eqPath,
    ordPath: ordPath,
    genericPath: genericPath,
    eqSelector: eqSelector,
    ordSelector: ordSelector,
    genericSelector: genericSelector,
    isStringSelector: isStringSelector
};

},{"../CSS.String/index.js":11,"../Data.Eq/index.js":123,"../Data.Generic.Rep/index.js":147,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.String.CodePoints/index.js":228}],10:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Common = require("../CSS.Common/index.js");
var CSS_Property = require("../CSS.Property/index.js");
var CSS_String = require("../CSS.String/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Size = function (x) {
    return x;
};
var Angle = function (x) {
    return x;
};
var vw = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vw"));
};
var vmin = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vmin"));
};
var vmax = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vmax"));
};
var vh = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("vh"));
};
var valSize = new CSS_Property.Val(function (v) {
    return v;
});
var valAngle = new CSS_Property.Val(function (v) {
    return v;
});
var sym = function (f) {
    return function (a) {
        return f(a)(a)(a)(a);
    };
};
var rem = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("rem"));
};
var rad = function (i) {
    return Angle(Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("rad")));
};
var px = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
};
var pt = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("pt"));
};
var pct = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("%"));
};
var nil = Size(CSS_String.fromString(CSS_Property.isStringValue)("0"));
var isStringSize = new CSS_String.IsString((function () {
    var $42 = CSS_String.fromString(CSS_Property.isStringValue);
    return function ($43) {
        return Size($42($43));
    };
})());
var genericSize = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var genericAngle = function (dictGeneric) {
    return new Data_Generic_Rep.Generic(function (x) {
        return x;
    }, function (x) {
        return x;
    });
};
var ex = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("ex"));
};
var eqSize = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
        };
    });
};
var ordSize = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqSize(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
        };
    });
};
var eqAngle = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
        };
    });
};
var ordAngle = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqAngle(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
        };
    });
};
var em = function (i) {
    return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("em"));
};
var deg = function (i) {
    return Angle(Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("deg")));
};
var autoSize = new CSS_Common.Auto(CSS_String.fromString(isStringSize)("auto"));
module.exports = {
    Size: Size,
    nil: nil,
    px: px,
    pt: pt,
    em: em,
    ex: ex,
    pct: pct,
    rem: rem,
    vw: vw,
    vh: vh,
    vmin: vmin,
    vmax: vmax,
    sym: sym,
    Angle: Angle,
    deg: deg,
    rad: rad,
    eqSize: eqSize,
    ordSize: ordSize,
    genericSize: genericSize,
    isStringSize: isStringSize,
    valSize: valSize,
    autoSize: autoSize,
    eqAngle: eqAngle,
    ordAngle: ordAngle,
    genericAngle: genericAngle,
    valAngle: valAngle
};

},{"../CSS.Common/index.js":4,"../CSS.Property/index.js":7,"../CSS.String/index.js":11,"../Data.Eq/index.js":123,"../Data.Generic.Rep/index.js":147,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221}],11:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var IsString = function (fromString) {
    this.fromString = fromString;
};
var isStringString = new IsString(Control_Category.identity(Control_Category.categoryFn));
var fromString = function (dict) {
    return dict.fromString;
};
module.exports = {
    fromString: fromString,
    IsString: IsString,
    isStringString: isStringString
};

},{"../Control.Category/index.js":24}],12:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Selector = require("../CSS.Selector/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Writer = require("../Control.Monad.Writer/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Not = (function () {
    function Not() {

    };
    Not.value = new Not();
    return Not;
})();
var Only = (function () {
    function Only() {

    };
    Only.value = new Only();
    return Only;
})();
var MediaType = function (x) {
    return x;
};
var Feature = (function () {
    function Feature(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Feature.create = function (value0) {
        return function (value1) {
            return new Feature(value0, value1);
        };
    };
    return Feature;
})();
var MediaQuery = (function () {
    function MediaQuery(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    MediaQuery.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new MediaQuery(value0, value1, value2);
            };
        };
    };
    return MediaQuery;
})();
var Self = (function () {
    function Self(value0) {
        this.value0 = value0;
    };
    Self.create = function (value0) {
        return new Self(value0);
    };
    return Self;
})();
var Root = (function () {
    function Root(value0) {
        this.value0 = value0;
    };
    Root.create = function (value0) {
        return new Root(value0);
    };
    return Root;
})();
var Pop = (function () {
    function Pop(value0) {
        this.value0 = value0;
    };
    Pop.create = function (value0) {
        return new Pop(value0);
    };
    return Pop;
})();
var Child = (function () {
    function Child(value0) {
        this.value0 = value0;
    };
    Child.create = function (value0) {
        return new Child(value0);
    };
    return Child;
})();
var Sub = (function () {
    function Sub(value0) {
        this.value0 = value0;
    };
    Sub.create = function (value0) {
        return new Sub(value0);
    };
    return Sub;
})();
var Property = (function () {
    function Property(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Property.create = function (value0) {
        return function (value1) {
            return new Property(value0, value1);
        };
    };
    return Property;
})();
var Nested = (function () {
    function Nested(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Nested.create = function (value0) {
        return function (value1) {
            return new Nested(value0, value1);
        };
    };
    return Nested;
})();
var Query = (function () {
    function Query(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Query.create = function (value0) {
        return function (value1) {
            return new Query(value0, value1);
        };
    };
    return Query;
})();
var Face = (function () {
    function Face(value0) {
        this.value0 = value0;
    };
    Face.create = function (value0) {
        return new Face(value0);
    };
    return Face;
})();
var Keyframe = (function () {
    function Keyframe(value0) {
        this.value0 = value0;
    };
    Keyframe.create = function (value0) {
        return new Keyframe(value0);
    };
    return Keyframe;
})();
var Import = (function () {
    function Import(value0) {
        this.value0 = value0;
    };
    Import.create = function (value0) {
        return new Import(value0);
    };
    return Import;
})();
var Keyframes = (function () {
    function Keyframes(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Keyframes.create = function (value0) {
        return function (value1) {
            return new Keyframes(value0, value1);
        };
    };
    return Keyframes;
})();
var S = function (x) {
    return x;
};
var runS = function (v) {
    return Control_Monad_Writer.execWriter(v);
};
var rule = (function () {
    var $403 = Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity));
    return function ($404) {
        return S($403(Data_Array.singleton($404)));
    };
})();
var select = function (sel) {
    return function (rs) {
        return rule(new Nested(new Sub(sel), runS(rs)));
    };
};
var query = function (ty) {
    return function (fs) {
        var $405 = Query.create(new MediaQuery(Data_Maybe.Nothing.value, ty, fs));
        return function ($406) {
            return rule($405(runS($406)));
        };
    };
};
var keyframes = function (n) {
    return function (xs) {
        return rule(new Keyframe(new Keyframes(n, Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(runS))(xs))));
    };
};
var keyframesFromTo = function (n) {
    return function (a) {
        return function (b) {
            return keyframes(n)(new Data_NonEmpty.NonEmpty(new Data_Tuple.Tuple(0.0, a), [ new Data_Tuple.Tuple(100.0, b) ]));
        };
    };
};
var key = function (dictVal) {
    return function (k) {
        return function (v) {
            return rule(new Property(CSS_Property.cast(k), CSS_Property.value(dictVal)(v)));
        };
    };
};
var prefixed = function (dictVal) {
    return function (xs) {
        return key(dictVal)(xs);
    };
};
var importUrl = function ($407) {
    return rule(Import.create($407));
};
var genericRule = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Property) {
        return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
    };
    if (x instanceof Nested) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
    };
    if (x instanceof Query) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
    };
    if (x instanceof Face) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
    };
    if (x instanceof Keyframe) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
    };
    if (x instanceof Import) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))));
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 69, column 1 - line 69, column 46): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Property(x.value0.value0, x.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Nested(x.value0.value0.value0, x.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Query(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new Face(x.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
        return new Keyframe(x.value0.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
        return new Import(x.value0.value0.value0.value0.value0);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 69, column 1 - line 69, column 46): " + [ x.constructor.name ]);
});
var genericNotOrOnly = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Not) {
        return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
    };
    if (x instanceof Only) {
        return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 28, column 1 - line 28, column 56): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return Not.value;
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return Only.value;
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 28, column 1 - line 28, column 56): " + [ x.constructor.name ]);
});
var genericMediaType = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var genericMediaQuery = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
}, function (x) {
    return new MediaQuery(x.value0, x.value1.value0, x.value1.value1);
});
var genericKeyframes = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Keyframes(x.value0, x.value1);
});
var genericFeature = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Feature(x.value0, x.value1);
});
var genericApp = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof Self) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof Root) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof Pop) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
    };
    if (x instanceof Child) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
    };
    if (x instanceof Sub) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 51, column 1 - line 51, column 44): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new Self(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new Root(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
        return new Pop(x.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
        return new Child(x.value0.value0.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
        return new Sub(x.value0.value0.value0.value0);
    };
    throw new Error("Failed pattern match at CSS.Stylesheet (line 51, column 1 - line 51, column 44): " + [ x.constructor.name ]);
});
var functorStyleM = new Data_Functor.Functor(function (f) {
    return function (v) {
        return S(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v));
    };
});
var fontFace = function ($408) {
    return rule(Face.create(runS($408)));
};
var eqNotOrOnly = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Not && y instanceof Not) {
            return true;
        };
        if (x instanceof Only && y instanceof Only) {
            return true;
        };
        return false;
    };
});
var ordNotOrOnly = new Data_Ord.Ord(function () {
    return eqNotOrOnly;
}, function (x) {
    return function (y) {
        if (x instanceof Not && y instanceof Not) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Not) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Not) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Only && y instanceof Only) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 27, column 1 - line 27, column 45): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqMediaType = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(CSS_Property.eqValue)(x)(y);
    };
});
var ordMediaType = new Data_Ord.Ord(function () {
    return eqMediaType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(CSS_Property.ordValue)(x)(y);
    };
});
var eqFeature = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Data_Maybe.eqMaybe(CSS_Property.eqValue))(x.value1)(y.value1);
    };
});
var eqMediaQuery = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(eqNotOrOnly))(x.value0)(y.value0) && Data_Eq.eq(eqMediaType)(x.value1)(y.value1) && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(eqFeature))(x.value2)(y.value2);
    };
});
var ordFeature = new Data_Ord.Ord(function () {
    return eqFeature;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Maybe.ordMaybe(CSS_Property.ordValue))(x.value1)(y.value1);
    };
});
var ordMediaQuery = new Data_Ord.Ord(function () {
    return eqMediaQuery;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Maybe.ordMaybe(ordNotOrOnly))(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(ordMediaType)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_NonEmpty.ordNonEmpty(Data_Ord.ord1Array)(ordFeature))(x.value2)(y.value2);
    };
});
var eqApp = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Self && y instanceof Self) {
            return Data_Eq.eq(CSS_Selector.eqRefinement)(x.value0)(y.value0);
        };
        if (x instanceof Root && y instanceof Root) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        if (x instanceof Pop && y instanceof Pop) {
            return x.value0 === y.value0;
        };
        if (x instanceof Child && y instanceof Child) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        if (x instanceof Sub && y instanceof Sub) {
            return Data_Eq.eq(CSS_Selector.eqSelector)(x.value0)(y.value0);
        };
        return false;
    };
});
var eqRule = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Property && y instanceof Property) {
            return Data_Eq.eq(CSS_Property.eqKey(Data_Eq.eqUnit))(x.value0)(y.value0) && Data_Eq.eq(CSS_Property.eqValue)(x.value1)(y.value1);
        };
        if (x instanceof Nested && y instanceof Nested) {
            return Data_Eq.eq(eqApp)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value1)(y.value1);
        };
        if (x instanceof Query && y instanceof Query) {
            return Data_Eq.eq(eqMediaQuery)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value1)(y.value1);
        };
        if (x instanceof Face && y instanceof Face) {
            return Data_Eq.eq(Data_Eq.eqArray(eqRule))(x.value0)(y.value0);
        };
        if (x instanceof Keyframe && y instanceof Keyframe) {
            return Data_Eq.eq(eqKeyframes)(x.value0)(y.value0);
        };
        if (x instanceof Import && y instanceof Import) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var eqKeyframes = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(Data_Tuple.eqTuple(Data_Eq.eqNumber)(Data_Eq.eqArray(eqRule))))(x.value1)(y.value1);
    };
});
var ordApp = new Data_Ord.Ord(function () {
    return eqApp;
}, function (x) {
    return function (y) {
        if (x instanceof Self && y instanceof Self) {
            return Data_Ord.compare(CSS_Selector.ordRefinement)(x.value0)(y.value0);
        };
        if (x instanceof Self) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Self) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Root && y instanceof Root) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        if (x instanceof Root) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Root) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Pop && y instanceof Pop) {
            return Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
        };
        if (x instanceof Pop) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Pop) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Child && y instanceof Child) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        if (x instanceof Child) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Child) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sub && y instanceof Sub) {
            return Data_Ord.compare(CSS_Selector.ordSelector)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 50, column 1 - line 50, column 34): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordRule = new Data_Ord.Ord(function () {
    return eqRule;
}, function (x) {
    return function (y) {
        if (x instanceof Property && y instanceof Property) {
            var v = Data_Ord.compare(CSS_Property.ordKey(Data_Ord.ordUnit))(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(CSS_Property.ordValue)(x.value1)(y.value1);
        };
        if (x instanceof Property) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Property) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Nested && y instanceof Nested) {
            var v = Data_Ord.compare(ordApp)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value1)(y.value1);
        };
        if (x instanceof Nested) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Nested) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Query && y instanceof Query) {
            var v = Data_Ord.compare(ordMediaQuery)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value1)(y.value1);
        };
        if (x instanceof Query) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Query) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Face && y instanceof Face) {
            return Data_Ord.compare(Data_Ord.ordArray(ordRule))(x.value0)(y.value0);
        };
        if (x instanceof Face) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Face) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Keyframe && y instanceof Keyframe) {
            return Data_Ord.compare(ordKeyframes)(x.value0)(y.value0);
        };
        if (x instanceof Keyframe) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Keyframe) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Import && y instanceof Import) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at CSS.Stylesheet (line 68, column 1 - line 68, column 36): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordKeyframes = new Data_Ord.Ord(function () {
    return eqKeyframes;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_NonEmpty.ordNonEmpty(Data_Ord.ord1Array)(Data_Tuple.ordTuple(Data_Ord.ordNumber)(Data_Ord.ordArray(ordRule))))(x.value1)(y.value1);
    };
});
var applyStyleM = new Control_Apply.Apply(function () {
    return functorStyleM;
}, function (v) {
    return function (v1) {
        return S(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1));
    };
});
var bindStyleM = new Control_Bind.Bind(function () {
    return applyStyleM;
}, function (v) {
    return function (f) {
        return S(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Data_Identity.bindIdentity))(v)(function ($409) {
            return (function (v1) {
                return v1;
            })(f($409));
        }));
    };
});
var semigroupCSS = new Data_Semigroup.Semigroup(Control_Apply.applySecond(applyStyleM));
var applicativeStyleM = new Control_Applicative.Applicative(function () {
    return applyStyleM;
}, (function () {
    var $410 = Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Data_Identity.applicativeIdentity));
    return function ($411) {
        return S($410($411));
    };
})());
var monadStyleM = new Control_Monad.Monad(function () {
    return applicativeStyleM;
}, function () {
    return bindStyleM;
});
module.exports = {
    MediaType: MediaType,
    Not: Not,
    Only: Only,
    MediaQuery: MediaQuery,
    Feature: Feature,
    Self: Self,
    Root: Root,
    Pop: Pop,
    Child: Child,
    Sub: Sub,
    Keyframes: Keyframes,
    Property: Property,
    Nested: Nested,
    Query: Query,
    Face: Face,
    Keyframe: Keyframe,
    Import: Import,
    S: S,
    runS: runS,
    rule: rule,
    key: key,
    prefixed: prefixed,
    select: select,
    query: query,
    keyframes: keyframes,
    keyframesFromTo: keyframesFromTo,
    fontFace: fontFace,
    importUrl: importUrl,
    eqMediaType: eqMediaType,
    ordMediaType: ordMediaType,
    genericMediaType: genericMediaType,
    eqNotOrOnly: eqNotOrOnly,
    ordNotOrOnly: ordNotOrOnly,
    genericNotOrOnly: genericNotOrOnly,
    eqMediaQuery: eqMediaQuery,
    ordMediaQuery: ordMediaQuery,
    genericMediaQuery: genericMediaQuery,
    eqFeature: eqFeature,
    ordFeature: ordFeature,
    genericFeature: genericFeature,
    eqApp: eqApp,
    ordApp: ordApp,
    genericApp: genericApp,
    eqKeyframes: eqKeyframes,
    ordKeyframes: ordKeyframes,
    genericKeyframes: genericKeyframes,
    eqRule: eqRule,
    ordRule: ordRule,
    genericRule: genericRule,
    functorStyleM: functorStyleM,
    applyStyleM: applyStyleM,
    bindStyleM: bindStyleM,
    applicativeStyleM: applicativeStyleM,
    monadStyleM: monadStyleM,
    semigroupCSS: semigroupCSS
};

},{"../CSS.Property/index.js":7,"../CSS.Selector/index.js":9,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad.Writer.Trans/index.js":58,"../Control.Monad.Writer/index.js":59,"../Control.Monad/index.js":60,"../Data.Array/index.js":91,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Generic.Rep/index.js":147,"../Data.Identity/index.js":150,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251}],13:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var $$Math = require("../Math/index.js");
var UnclippedHue = function (x) {
    return x;
};
var RGB = (function () {
    function RGB() {

    };
    RGB.value = new RGB();
    return RGB;
})();
var HSL = (function () {
    function HSL() {

    };
    HSL.value = new HSL();
    return HSL;
})();
var LCh = (function () {
    function LCh() {

    };
    LCh.value = new LCh();
    return LCh;
})();
var Lab = (function () {
    function Lab() {

    };
    Lab.value = new Lab();
    return Lab;
})();
var HSLA = (function () {
    function HSLA(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    HSLA.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new HSLA(value0, value1, value2, value3);
                };
            };
        };
    };
    return HSLA;
})();
var modPos = function (x) {
    return function (y) {
        return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
    };
};
var rgba = function (red$prime) {
    return function (green$prime) {
        return function (blue$prime) {
            return function (alpha) {
                var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                var r = Data_Int.toNumber(red) / 255.0;
                var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                var g = Data_Int.toNumber(green) / 255.0;
                var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                var chroma = maxChroma - minChroma | 0;
                var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                var saturation = (function () {
                    if (chroma === 0) {
                        return 0.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                    };
                    throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                })();
                var b = Data_Int.toNumber(blue) / 255.0;
                var hue$prime = function (v) {
                    if (v === 0) {
                        return 0.0;
                    };
                    if (maxChroma === red) {
                        return modPos((g - b) / chroma$prime)(6.0);
                    };
                    if (maxChroma === green) {
                        return (b - r) / chroma$prime + 2.0;
                    };
                    if (Data_Boolean.otherwise) {
                        return (r - g) / chroma$prime + 4.0;
                    };
                    throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [ v.constructor.name ]);
                };
                var hue = 60.0 * hue$prime(chroma);
                return new HSLA(hue, saturation, lightness, alpha);
            };
        };
    };
};
var rgb = function (r) {
    return function (g) {
        return function (b) {
            return rgba(r)(g)(b)(1.0);
        };
    };
};
var rgba$prime = function (r) {
    return function (g) {
        return function (b) {
            return function (a) {
                return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
            };
        };
    };
};
var rgb$prime = function (r) {
    return function (g) {
        return function (b) {
            return rgba$prime(r)(g)(b)(1.0);
        };
    };
};
var xyz = function (x) {
    return function (y) {
        return function (z) {
            var f = function (c) {
                if (c <= 3.1308e-3) {
                    return 12.92 * c;
                };
                if (Data_Boolean.otherwise) {
                    return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.5e-2;
                };
                throw new Error("Failed pattern match at Color (line 224, column 5 - line 225, column 65): " + [ c.constructor.name ]);
            };
            var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
            var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
            var b = f((5.57e-2 * x - 0.204 * y) + 1.057 * z);
            return rgb$prime(r)(g)(b);
        };
    };
};
var interpolate = function (fraction) {
    return function (a) {
        return function (b) {
            return a + fraction * (b - a);
        };
    };
};
var interpolateAngle = function (fraction) {
    return function (a) {
        return function (b) {
            var paths = [ {
                from: a,
                to: b
            }, {
                from: a,
                to: b + 360.0
            }, {
                from: a + 360.0,
                to: b
            } ];
            var dist = function (v) {
                return $$Math.abs(v.to - v.from);
            };
            var shortest = Data_Maybe.fromJust()(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Data_Ord.ordNumber)(dist))(paths));
            return interpolate(fraction)(shortest.from)(shortest.to);
        };
    };
};
var mixCubehelix = function (gamma) {
    return function (v) {
        return function (v1) {
            var radians = $$Math.pi / 180.0;
            var bs = v1.value1 - v.value1;
            var bl = v1.value2 - v.value2;
            var ah = (v.value0 + 120.0) * radians;
            var bh = (v1.value0 + 120.0) * radians - ah;
            return function (t) {
                var fract = $$Math.pow(v.value2 + bl * t)(gamma);
                var angle = ah + bh * t;
                var amp = (v.value1 + bs * t) * fract * (1.0 - fract);
                var b = fract + amp * (1.97294 * $$Math.cos(angle));
                var g = fract + amp * (-0.29227 * $$Math.cos(angle) - 0.90649 * $$Math.sin(angle));
                var r = fract + amp * (-0.14861 * $$Math.cos(angle) + 1.78277 * $$Math.sin(angle));
                var a = interpolate(t)(v.value3)(v1.value3);
                return rgba$prime(r)(g)(b)(a);
            };
        };
    };
};
var hsla = function (h) {
    return function (s) {
        return function (l) {
            return function (a) {
                var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                return new HSLA(h, s$prime, l$prime, a$prime);
            };
        };
    };
};
var hsva = function (h) {
    return function (v) {
        return function (v1) {
            return function (a) {
                var s = v;
                if (v1 === 0.0) {
                    return hsla(h)(s / (2.0 - s))(0.0)(a);
                };
                if (v === 0.0 && v1 === 1.0) {
                    return hsla(h)(0.0)(1.0)(a);
                };
                var tmp = (2.0 - v) * v1;
                var s = (v * v1) / (function () {
                    var $41 = tmp < 1.0;
                    if ($41) {
                        return tmp;
                    };
                    return 2.0 - tmp;
                })();
                var l = tmp / 2.0;
                return hsla(h)(s)(l)(a);
            };
        };
    };
};
var hsv = function (h) {
    return function (s) {
        return function (v) {
            return hsva(h)(s)(v)(1.0);
        };
    };
};
var lighten = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
    };
};
var rotateHue = function (angle) {
    return function (v) {
        return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
    };
};
var saturate = function (f) {
    return function (v) {
        return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
    };
};
var hsl = function (h) {
    return function (s) {
        return function (l) {
            return hsla(h)(s)(l)(1.0);
        };
    };
};
var white = hsl(0.0)(0.0)(1.0);
var graytone = function (l) {
    return hsl(0.0)(0.0)(l);
};
var fromInt = function (m) {
    var n = Data_Ord.clamp(Data_Ord.ordInt)(0)(16777215)(m);
    var r = n >> 16 & 255;
    var g = n >> 8 & 255;
    var b = n & 255;
    return rgb(r)(g)(b);
};
var fromHexString = function (str) {
    var parseHex = (function () {
        var $111 = Data_Maybe.fromMaybe(0);
        var $112 = Data_Int.fromStringAs(Data_Int.hexadecimal);
        return function ($113) {
            return $111($112($113));
        };
    })();
    var isShort = Data_String_CodePoints.length(str) === 4;
    var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
    var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
    var single = "(" + ("[0-9a-f]" + ")");
    var variant = (function () {
        if (isShort) {
            return single + (single + single);
        };
        return pair + (pair + pair);
    })();
    var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
    return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(v)(str))(function (v1) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(1))))(function (v2) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(2))))(function (v3) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array_NonEmpty.index(v1)(3))))(function (v4) {
                        if (isShort) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0)((16 * v4 | 0) + v4 | 0));
                        };
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(v2)(v3)(v4));
                    });
                });
            });
        });
    });
};
var desaturate = function (f) {
    return saturate(-f);
};
var darken = function (f) {
    return lighten(-f);
};
var d65 = {
    xn: 0.95047,
    yn: 1.0,
    zn: 1.08883
};
var lab = function (l) {
    return function (a) {
        return function (b) {
            var l$prime = (l + 16.0) / 116.0;
            var delta = 6.0 / 29.0;
            var finv = function (t) {
                if (t > delta) {
                    return $$Math.pow(t)(3.0);
                };
                if (Data_Boolean.otherwise) {
                    return 3.0 * delta * delta * (t - 4.0 / 29.0);
                };
                throw new Error("Failed pattern match at Color (line 249, column 5 - line 250, column 64): " + [ t.constructor.name ]);
            };
            var x = d65.xn * finv(l$prime + a / 500.0);
            var y = d65.yn * finv(l$prime);
            var z = d65.zn * finv(l$prime - b / 200.0);
            return xyz(x)(y)(z);
        };
    };
};
var lch = function (l) {
    return function (c) {
        return function (h) {
            var deg2rad = $$Math.pi / 180.0;
            var b = c * $$Math.sin(h * deg2rad);
            var a = c * $$Math.cos(h * deg2rad);
            return lab(l)(a)(b);
        };
    };
};
var cssStringHSLA = function (v) {
    var toString = function (n) {
        return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
    };
    var saturation = toString(v.value1 * 100.0) + "%";
    var lightness = toString(v.value2 * 100.0) + "%";
    var hue = toString(v.value0);
    var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
    var $69 = v.value3 === 1.0;
    if ($69) {
        return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
    };
    return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
};
var complementary = rotateHue(180.0);
var clipHue = function (v) {
    var $75 = 360.0 === v;
    if ($75) {
        return v;
    };
    return modPos(v)(360.0);
};
var toHSLA = function (v) {
    return {
        h: clipHue(v.value0),
        s: v.value1,
        l: v.value2,
        a: v.value3
    };
};
var toHSVA = function (v) {
    var s = v.value1;
    if (v.value2 === 0.0) {
        return {
            h: clipHue(v.value0),
            s: (2.0 * s) / (1.0 + s),
            v: 0.0,
            a: v.value3
        };
    };
    if (v.value1 === 0.0 && v.value2 === 1.0) {
        return {
            h: clipHue(v.value0),
            s: 0.0,
            v: 1.0,
            a: v.value3
        };
    };
    var tmp = v.value1 * (function () {
        var $90 = v.value2 < 0.5;
        if ($90) {
            return v.value2;
        };
        return 1.0 - v.value2;
    })();
    var v1 = v.value2 + tmp;
    var s = (2.0 * tmp) / (v.value2 + tmp);
    return {
        h: clipHue(v.value0),
        s: s,
        v: v1,
        a: v.value3
    };
};
var toRGBA$prime = function (v) {
    var h$prime = clipHue(v.value0) / 60.0;
    var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
    var m = v.value2 - chr / 2.0;
    var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
    var col = (function () {
        if (h$prime < 1.0) {
            return {
                r: chr,
                g: x,
                b: 0.0
            };
        };
        if (1.0 <= h$prime && h$prime < 2.0) {
            return {
                r: x,
                g: chr,
                b: 0.0
            };
        };
        if (2.0 <= h$prime && h$prime < 3.0) {
            return {
                r: 0.0,
                g: chr,
                b: x
            };
        };
        if (3.0 <= h$prime && h$prime < 4.0) {
            return {
                r: 0.0,
                g: x,
                b: chr
            };
        };
        if (4.0 <= h$prime && h$prime < 5.0) {
            return {
                r: x,
                g: 0.0,
                b: chr
            };
        };
        if (Data_Boolean.otherwise) {
            return {
                r: chr,
                g: 0.0,
                b: x
            };
        };
        throw new Error("Failed pattern match at Color (line 342, column 5 - line 347, column 61): " + [  ]);
    })();
    return {
        r: col.r + m,
        g: col.g + m,
        b: col.b + m,
        a: v.value3
    };
};
var luminance = function (col) {
    var val = toRGBA$prime(col);
    var f = function (c) {
        if (c <= 3.928e-2) {
            return c / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color (line 604, column 9 - line 605, column 61): " + [ c.constructor.name ]);
    };
    var g = f(val.g);
    var r = f(val.r);
    var b = f(val.b);
    return 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
};
var contrast = function (c1) {
    return function (c2) {
        var l2 = luminance(c2);
        var l1 = luminance(c1);
        var $101 = l1 > l2;
        if ($101) {
            return (l1 + 5.0e-2) / (l2 + 5.0e-2);
        };
        return (l2 + 5.0e-2) / (l1 + 5.0e-2);
    };
};
var isReadable = function (c1) {
    return function (c2) {
        return contrast(c1)(c2) > 4.5;
    };
};
var toRGBA = function (col) {
    var c = toRGBA$prime(col);
    var g = Data_Int.round(255.0 * c.g);
    var r = Data_Int.round(255.0 * c.r);
    var b = Data_Int.round(255.0 * c.b);
    return {
        r: r,
        g: g,
        b: b,
        a: c.a
    };
};
var cssStringRGBA = function (col) {
    var c = toRGBA(col);
    var green = Data_Show.show(Data_Show.showInt)(c.g);
    var red = Data_Show.show(Data_Show.showInt)(c.r);
    var blue = Data_Show.show(Data_Show.showInt)(c.b);
    var alpha = Data_Show.show(Data_Show.showNumber)(c.a);
    var $102 = c.a === 1.0;
    if ($102) {
        return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
    };
    return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
};
var eqColor = new Data_Eq.Eq(function (c1) {
    return function (c2) {
        var rgb2 = toRGBA(c2);
        var rgb1 = toRGBA(c1);
        return rgb1.r === rgb2.r && (rgb1.g === rgb2.g && (rgb1.b === rgb2.b && rgb1.a === rgb2.a));
    };
});
var showColor = new Data_Show.Show(function (c) {
    var col = toRGBA(c);
    return "rgba " + (Data_Show.show(Data_Show.showInt)(col.r) + (" " + (Data_Show.show(Data_Show.showInt)(col.g) + (" " + (Data_Show.show(Data_Show.showInt)(col.b) + (" " + Data_Show.show(Data_Show.showNumber)(col.a)))))));
});
var toHexString = function (color) {
    var toHex = function (num) {
        var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
        var $103 = Data_String_CodePoints.length(repr) === 1;
        if ($103) {
            return "0" + repr;
        };
        return repr;
    };
    var c = toRGBA(color);
    return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
};
var toXYZ = function (c) {
    var rec = toRGBA$prime(c);
    var finv = function (c$prime) {
        if (c$prime <= 4.045e-2) {
            return c$prime / 12.92;
        };
        if (Data_Boolean.otherwise) {
            return $$Math.pow((c$prime + 5.5e-2) / 1.055)(2.4);
        };
        throw new Error("Failed pattern match at Color (line 366, column 5 - line 367, column 63): " + [ c$prime.constructor.name ]);
    };
    var g = finv(rec.g);
    var r = finv(rec.r);
    var b = finv(rec.b);
    var x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
    var y = 0.2126 * r + 0.7152 * g + 7.22e-2 * b;
    var z = 1.93e-2 * r + 0.1192 * g + 0.9505 * b;
    return {
        x: x,
        y: y,
        z: z
    };
};
var toLab = function (col) {
    var rec = toXYZ(col);
    var cut = $$Math.pow(6.0 / 29.0)(3.0);
    var f = function (t) {
        if (t > cut) {
            return $$Math.pow(t)(1.0 / 3.0);
        };
        if (Data_Boolean.otherwise) {
            return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
        };
        throw new Error("Failed pattern match at Color (line 384, column 5 - line 385, column 76): " + [ t.constructor.name ]);
    };
    var fy = f(rec.y / d65.yn);
    var l = 116.0 * fy - 16.0;
    var b = 200.0 * (fy - f(rec.z / d65.zn));
    var a = 500.0 * (f(rec.x / d65.xn) - fy);
    return {
        l: l,
        a: a,
        b: b
    };
};
var distance = function (col1) {
    return function (col2) {
        var sq = function (x) {
            return $$Math.pow(x)(2.0);
        };
        var c2 = toLab(col2);
        var c1 = toLab(col1);
        return $$Math.sqrt(sq(c1.l - c2.l) + sq(c1.a - c2.a) + sq(c1.b - c2.b));
    };
};
var toLCh = function (col) {
    var rec = toLab(col);
    var rad2deg = 180.0 / $$Math.pi;
    var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
    var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
    return {
        l: rec.l,
        c: c,
        h: h
    };
};
var mix = function (v) {
    return function (c1) {
        return function (c2) {
            return function (frac) {
                if (v instanceof HSL) {
                    var t = toHSLA(c2);
                    var f = toHSLA(c1);
                    return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof RGB) {
                    var t = toRGBA$prime(c2);
                    var f = toRGBA$prime(c1);
                    return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                };
                if (v instanceof LCh) {
                    var t = toLCh(c2);
                    var f = toLCh(c1);
                    return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                };
                if (v instanceof Lab) {
                    var t = toLab(c2);
                    var f = toLab(c1);
                    return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                };
                throw new Error("Failed pattern match at Color (line 520, column 1 - line 520, column 34): " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
            };
        };
    };
};
var toGray = function (col) {
    var res = toLCh(col);
    return desaturate(1.0)(lch(res.l)(0.0)(0.0));
};
var brightness = function (col) {
    var c = toRGBA$prime(col);
    return (299.0 * c.r + 587.0 * c.g + 114.0 * c.b) / 1000.0;
};
var isLight = function (c) {
    return brightness(c) > 0.5;
};
var black = hsl(0.0)(0.0)(0.0);
var textColor = function (c) {
    if (isLight(c)) {
        return black;
    };
    if (Data_Boolean.otherwise) {
        return white;
    };
    throw new Error("Failed pattern match at Color (line 643, column 1 - line 643, column 28): " + [ c.constructor.name ]);
};
module.exports = {
    RGB: RGB,
    HSL: HSL,
    LCh: LCh,
    Lab: Lab,
    rgba: rgba,
    rgb: rgb,
    "rgba'": rgba$prime,
    "rgb'": rgb$prime,
    hsla: hsla,
    hsl: hsl,
    hsva: hsva,
    hsv: hsv,
    xyz: xyz,
    lab: lab,
    lch: lch,
    fromHexString: fromHexString,
    fromInt: fromInt,
    toHSLA: toHSLA,
    toHSVA: toHSVA,
    toRGBA: toRGBA,
    "toRGBA'": toRGBA$prime,
    toXYZ: toXYZ,
    toLab: toLab,
    toLCh: toLCh,
    toHexString: toHexString,
    cssStringHSLA: cssStringHSLA,
    cssStringRGBA: cssStringRGBA,
    black: black,
    white: white,
    graytone: graytone,
    rotateHue: rotateHue,
    complementary: complementary,
    lighten: lighten,
    darken: darken,
    saturate: saturate,
    desaturate: desaturate,
    toGray: toGray,
    mix: mix,
    mixCubehelix: mixCubehelix,
    brightness: brightness,
    luminance: luminance,
    contrast: contrast,
    isLight: isLight,
    isReadable: isReadable,
    textColor: textColor,
    distance: distance,
    showColor: showColor,
    eqColor: eqColor
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Data.Array.NonEmpty/index.js":86,"../Data.Boolean/index.js":100,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"../Data.String.CodePoints/index.js":228,"../Data.String.Regex/index.js":236,"../Math/index.js":354}],14:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Alt = function (Functor0, alt) {
    this.Functor0 = Functor0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Data_Functor.functorArray;
}, Data_Semigroup.append(Data_Semigroup.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
module.exports = {
    Alt: Alt,
    alt: alt,
    altArray: altArray
};

},{"../Data.Functor/index.js":143,"../Data.Semigroup/index.js":221}],15:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Alternative = function (Applicative0, Plus1) {
    this.Applicative0 = Applicative0;
    this.Plus1 = Plus1;
};
var alternativeArray = new Alternative(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Plus.plusArray;
});
module.exports = {
    Alternative: Alternative,
    alternativeArray: alternativeArray
};

},{"../Control.Applicative/index.js":17,"../Control.Plus/index.js":65}],16:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Pure = (function () {
    function Pure(value0) {
        this.value0 = value0;
    };
    Pure.create = function (value0) {
        return new Pure(value0);
    };
    return Pure;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var Ap = (function () {
    function Ap(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Ap.create = function (value0) {
        return function (value1) {
            return new Ap(value0, value1);
        };
    };
    return Ap;
})();
var mkAp = function (fba) {
    return function (fb) {
        return new Ap(fba, fb);
    };
};
var liftFreeAp = Lift.create;
var goLeft = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_valStack) {
            return function ($copy_nat) {
                return function ($copy_func) {
                    return function ($copy_count) {
                        var $tco_var_dictApplicative = $copy_dictApplicative;
                        var $tco_var_fStack = $copy_fStack;
                        var $tco_var_valStack = $copy_valStack;
                        var $tco_var_nat = $copy_nat;
                        var $tco_var_func = $copy_func;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                            if (func instanceof Pure) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: Control_Applicative.pure(dictApplicative)(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Lift) {
                                $tco_done = true;
                                return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                    func: nat(func.value0),
                                    count: count
                                }, fStack), valStack);
                            };
                            if (func instanceof Ap) {
                                $tco_var_dictApplicative = dictApplicative;
                                $tco_var_fStack = fStack;
                                $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                $tco_var_nat = nat;
                                $tco_var_func = func.value0;
                                $copy_count = count + 1 | 0;
                                return;
                            };
                            throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                        };
                        return $tco_result;
                    };
                };
            };
        };
    };
};
var goApply = function ($copy_dictApplicative) {
    return function ($copy_fStack) {
        return function ($copy_vals) {
            return function ($copy_gVal) {
                var $tco_var_dictApplicative = $copy_dictApplicative;
                var $tco_var_fStack = $copy_fStack;
                var $tco_var_vals = $copy_vals;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictApplicative, fStack, vals, gVal) {
                    if (fStack instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return new Data_Either.Left(gVal);
                    };
                    if (fStack instanceof Data_List_Types.Cons) {
                        var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                        var $14 = fStack.value0.count === 1;
                        if ($14) {
                            if (fStack.value1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return new Data_Either.Left(gRes);
                            };
                            $tco_var_dictApplicative = dictApplicative;
                            $tco_var_fStack = fStack.value1;
                            $tco_var_vals = vals;
                            $copy_gVal = gRes;
                            return;
                        };
                        if (vals instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Data_Either.Left(gRes);
                        };
                        if (vals instanceof Data_List_Types.Cons) {
                            $tco_done = true;
                            return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                func: gRes,
                                count: fStack.value0.count - 1 | 0
                            }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                };
                return $tco_result;
            };
        };
    };
};
var functorFreeAp = new Data_Functor.Functor(function (f) {
    return function (x) {
        return mkAp(new Pure(f))(x);
    };
});
var foldFreeAp = function (dictApplicative) {
    return function (nat) {
        return function (z) {
            var go = function ($copy_v) {
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v) {
                    if (v.value1.value0 instanceof Pure) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Lift) {
                        var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                        if (v1 instanceof Data_Either.Left) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (v1 instanceof Data_Either.Right) {
                            $copy_v = v1.value0;
                            return;
                        };
                        throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                    };
                    if (v.value1.value0 instanceof Ap) {
                        var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                        $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                        return;
                    };
                    throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($copy_v);
                };
                return $tco_result;
            };
            return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
        };
    };
};
var retractFreeAp = function (dictApplicative) {
    return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
};
var applyFreeAp = new Control_Apply.Apply(function () {
    return functorFreeAp;
}, function (fba) {
    return function (fb) {
        return mkAp(fba)(fb);
    };
});
var applicativeFreeAp = new Control_Applicative.Applicative(function () {
    return applyFreeAp;
}, Pure.create);
var hoistFreeAp = function (f) {
    return foldFreeAp(applicativeFreeAp)(function ($37) {
        return liftFreeAp(f($37));
    });
};
var analyzeFreeAp = function (dictMonoid) {
    return function (k) {
        var $38 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        var $39 = foldFreeAp(Data_Const.applicativeConst(dictMonoid))(function ($41) {
            return Data_Const.Const(k($41));
        });
        return function ($40) {
            return $38($39($40));
        };
    };
};
module.exports = {
    liftFreeAp: liftFreeAp,
    retractFreeAp: retractFreeAp,
    foldFreeAp: foldFreeAp,
    hoistFreeAp: hoistFreeAp,
    analyzeFreeAp: analyzeFreeAp,
    functorFreeAp: functorFreeAp,
    applyFreeAp: applyFreeAp,
    applicativeFreeAp: applicativeFreeAp
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.List.NonEmpty/index.js":181,"../Data.List.Types/index.js":182,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Tuple/index.js":251}],17:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Applicative = function (Apply0, pure) {
    this.Apply0 = Apply0;
    this.pure = pure;
};
var pure = function (dict) {
    return dict.pure;
};
var unless = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var when = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return pure(dictApplicative)(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return Control_Apply.applyFn;
}, function (x) {
    return function (v) {
        return x;
    };
});
var applicativeArray = new Applicative(function () {
    return Control_Apply.applyArray;
}, function (x) {
    return [ x ];
});
module.exports = {
    Applicative: Applicative,
    pure: pure,
    liftA1: liftA1,
    unless: unless,
    when: when,
    applicativeFn: applicativeFn,
    applicativeArray: applicativeArray
};

},{"../Control.Apply/index.js":19,"../Data.Unit/index.js":257}],18:[function(require,module,exports){
"use strict";

exports.arrayApply = function (fs) {
  return function (xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l*k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

},{}],19:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Apply = function (Functor0, apply) {
    this.Functor0 = Functor0;
    this.apply = apply;
};
var applyFn = new Apply(function () {
    return Data_Functor.functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var applyArray = new Apply(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayApply);
var apply = function (dict) {
    return dict.apply;
};
var applyFirst = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
    };
};
var applySecond = function (dictApply) {
    return function (a) {
        return function (b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Apply: Apply,
    apply: apply,
    applyFirst: applyFirst,
    applySecond: applySecond,
    lift2: lift2,
    lift3: lift3,
    lift4: lift4,
    lift5: lift5,
    applyFn: applyFn,
    applyArray: applyArray
};

},{"../Control.Category/index.js":24,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"./foreign.js":18}],20:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Biapplicative = function (Biapply0, bipure) {
    this.Biapply0 = Biapply0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    bipure: bipure,
    Biapplicative: Biapplicative
};

},{}],21:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Function = require("../Data.Function/index.js");
var Biapply = function (Bifunctor0, biapply) {
    this.Bifunctor0 = Bifunctor0;
    this.biapply = biapply;
};
var biapply = function (dict) {
    return dict.biapply;
};
var biapplyFirst = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
        };
    };
};
var biapplySecond = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
    };
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
module.exports = {
    biapply: biapply,
    Biapply: Biapply,
    biapplyFirst: biapplyFirst,
    biapplySecond: biapplySecond,
    bilift2: bilift2,
    bilift3: bilift3
};

},{"../Control.Category/index.js":24,"../Data.Bifunctor/index.js":98,"../Data.Function/index.js":132}],22:[function(require,module,exports){
"use strict";

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

},{}],23:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Function = require("../Data.Function/index.js");
var Discard = function (discard) {
    this.discard = discard;
};
var Bind = function (Apply0, bind) {
    this.Apply0 = Apply0;
    this.bind = bind;
};
var discard = function (dict) {
    return dict.discard;
};
var bindFn = new Bind(function () {
    return Control_Apply.applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var bindArray = new Bind(function () {
    return Control_Apply.applyArray;
}, $foreign.arrayBind);
var bind = function (dict) {
    return dict.bind;
};
var bindFlipped = function (dictBind) {
    return Data_Function.flip(bind(dictBind));
};
var composeKleisliFlipped = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bindFlipped(dictBind)(f)(g(a));
            };
        };
    };
};
var composeKleisli = function (dictBind) {
    return function (f) {
        return function (g) {
            return function (a) {
                return bind(dictBind)(f(a))(g);
            };
        };
    };
};
var discardUnit = new Discard(function (dictBind) {
    return bind(dictBind);
});
var ifM = function (dictBind) {
    return function (cond) {
        return function (t) {
            return function (f) {
                return bind(dictBind)(cond)(function (cond$prime) {
                    if (cond$prime) {
                        return t;
                    };
                    return f;
                });
            };
        };
    };
};
var join = function (dictBind) {
    return function (m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Bind: Bind,
    bind: bind,
    bindFlipped: bindFlipped,
    Discard: Discard,
    discard: discard,
    join: join,
    composeKleisli: composeKleisli,
    composeKleisliFlipped: composeKleisliFlipped,
    ifM: ifM,
    bindFn: bindFn,
    bindArray: bindArray,
    discardUnit: discardUnit
};

},{"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Function/index.js":132,"./foreign.js":22}],24:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Category = function (Semigroupoid0, identity) {
    this.Semigroupoid0 = Semigroupoid0;
    this.identity = identity;
};
var identity = function (dict) {
    return dict.identity;
};
var categoryFn = new Category(function () {
    return Control_Semigroupoid.semigroupoidFn;
}, function (x) {
    return x;
});
module.exports = {
    Category: Category,
    identity: identity,
    categoryFn: categoryFn
};

},{"../Control.Semigroupoid/index.js":68}],25:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cofree = function (x) {
    return x;
};
var tail = function (v) {
    return Data_Tuple.snd(Data_Lazy.force(v));
};
var mkCofree = function (a) {
    return function (t) {
        return Data_Lazy.defer(function (v) {
            return new Data_Tuple.Tuple(a, t);
        });
    };
};
var lazyCofree = new Control_Lazy.Lazy(function (k) {
    return Data_Lazy.defer(function (v) {
        var v1 = k(Data_Unit.unit);
        return Data_Lazy.force(v1);
    });
});
var hoistCofree = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_Tuple.functorTuple)((function () {
                var $64 = Data_Functor.map(dictFunctor)(hoistCofree(dictFunctor)(nat));
                return function ($65) {
                    return nat($64($65));
                };
            })()))(v);
        };
    };
};
var head = function (v) {
    return Data_Tuple.fst(Data_Lazy.force(v));
};
var functorCofree = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        var loop = function (v) {
            return Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                return new Data_Tuple.Tuple(f(v1.value0), Data_Functor.map(dictFunctor)(loop)(v1.value1));
            })(v);
        };
        return loop;
    });
};
var foldableCofree = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            var go = function (fa) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(head(fa)))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(tail(fa)));
            };
            return go;
        };
    }, function (f) {
        var go = function (b) {
            return function (fa) {
                return Data_Foldable.foldl(dictFoldable)(go)(f(b)(head(fa)))(tail(fa));
            };
        };
        return go;
    }, function (f) {
        var go = function (fa) {
            return function (b) {
                return f(head(fa))(Data_Foldable.foldr(dictFoldable)(go)(b)(tail(fa)));
            };
        };
        return Data_Function.flip(go);
    });
};
var traversableCofree = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableCofree(dictTraversable.Foldable1());
    }, function () {
        return functorCofree(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return Data_Traversable.traverse(traversableCofree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictApplicative) {
        return function (f) {
            var loop = function (ta) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(mkCofree)(f(head(ta))))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(loop)(tail(ta)));
            };
            return loop;
        };
    });
};
var extendCofree = function (dictFunctor) {
    return new Control_Extend.Extend(function () {
        return functorCofree(dictFunctor);
    }, function (f) {
        var loop = function (v) {
            return Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                return new Data_Tuple.Tuple(f(v), Data_Functor.map(dictFunctor)(loop)(v1.value1));
            })(v);
        };
        return loop;
    });
};
var eqCofree = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(head(x))(head(y)) && Data_Eq.eq1(dictEq1)(eqCofree(dictEq1)(dictEq))(tail(x))(tail(y));
            };
        });
    };
};
var ordCofree = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqCofree(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(head(x))(head(y));
                if (v instanceof Data_Ordering.EQ) {
                    return Data_Ord.compare1(dictOrd1)(ordCofree(dictOrd1)(dictOrd))(tail(x))(tail(y));
                };
                return v;
            };
        });
    };
};
var eq1Cofree = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqCofree(dictEq1)(dictEq));
    });
};
var ord1Cofree = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1Cofree(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordCofree(dictOrd1)(dictOrd));
    });
};
var deferCofree = function ($66) {
    return Cofree(Data_Lazy.defer($66));
};
var comonadCofree = function (dictFunctor) {
    return new Control_Comonad.Comonad(function () {
        return extendCofree(dictFunctor);
    }, head);
};
var explore = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (pair) {
            return function (m) {
                return function (w) {
                    var step = function (ff) {
                        return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (cof) {
                            return pair(Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create)(ff))(tail(cof));
                        });
                    };
                    var v = Control_Monad_State.runState(Control_Monad_Free.runFreeM(dictFunctor)(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity))(step)(m))(w);
                    return v.value0(Control_Comonad.extract(comonadCofree(dictFunctor1))(v.value1));
                };
            };
        };
    };
};
var exploreM = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictMonadRec) {
            return function (pair) {
                return function (m) {
                    return function (w) {
                        var step = function (ff) {
                            return function (cof) {
                                return pair(Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create)(ff))(tail(cof));
                            };
                        };
                        var $$eval = function (v) {
                            return v.value0(Control_Comonad.extract(comonadCofree(dictFunctor1))(v.value1));
                        };
                        return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())($$eval)(Control_Monad_State_Trans.runStateT(Control_Monad_Free.runFreeM(dictFunctor)(Control_Monad_State_Trans.monadRecStateT(dictMonadRec))(step)(m))(w));
                    };
                };
            };
        };
    };
};
var buildCofree = function (dictFunctor) {
    return function (k) {
        return function (s) {
            return Data_Lazy.defer(function (v) {
                return Data_Functor.map(Data_Tuple.functorTuple)(Data_Functor.map(dictFunctor)(buildCofree(dictFunctor)(k)))(k(s));
            });
        };
    };
};
var unfoldCofree = function (dictFunctor) {
    return function (e) {
        return function (n) {
            return buildCofree(dictFunctor)(function (s) {
                return new Data_Tuple.Tuple(e(s), n(s));
            });
        };
    };
};
var monadCofree = function (dictAlternative) {
    return new Control_Monad.Monad(function () {
        return applicativeCofree(dictAlternative);
    }, function () {
        return bindCofree(dictAlternative);
    });
};
var bindCofree = function (dictAlternative) {
    return new Control_Bind.Bind(function () {
        return applyCofree(dictAlternative);
    }, function (fa) {
        return function (f) {
            var loop = function (fa$prime) {
                var fh = f(head(fa$prime));
                return mkCofree(head(fh))(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(tail(fh))(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(loop)(tail(fa$prime))));
            };
            return loop(fa);
        };
    });
};
var applyCofree = function (dictAlternative) {
    return new Control_Apply.Apply(function () {
        return functorCofree(((dictAlternative.Plus1()).Alt0()).Functor0());
    }, Control_Monad.ap(monadCofree(dictAlternative)));
};
var applicativeCofree = function (dictAlternative) {
    return new Control_Applicative.Applicative(function () {
        return applyCofree(dictAlternative);
    }, function (a) {
        return mkCofree(a)(Control_Plus.empty(dictAlternative.Plus1()));
    });
};
module.exports = {
    deferCofree: deferCofree,
    mkCofree: mkCofree,
    head: head,
    tail: tail,
    hoistCofree: hoistCofree,
    unfoldCofree: unfoldCofree,
    buildCofree: buildCofree,
    explore: explore,
    exploreM: exploreM,
    eqCofree: eqCofree,
    eq1Cofree: eq1Cofree,
    ordCofree: ordCofree,
    ord1Cofree: ord1Cofree,
    functorCofree: functorCofree,
    foldableCofree: foldableCofree,
    traversableCofree: traversableCofree,
    extendCofree: extendCofree,
    comonadCofree: comonadCofree,
    applyCofree: applyCofree,
    applicativeCofree: applicativeCofree,
    bindCofree: bindCofree,
    monadCofree: monadCofree,
    lazyCofree: lazyCofree
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Lazy/index.js":34,"../Control.Monad.Free/index.js":42,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.State.Trans/index.js":54,"../Control.Monad.State/index.js":55,"../Control.Monad/index.js":60,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Lazy/index.js":156,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],26:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Trans_Class = require("../Control.Comonad.Trans.Class/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var EnvT = function (x) {
    return x;
};
var withEnvT = function (f) {
    return function (v) {
        return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
    };
};
var runEnvT = function (v) {
    return v;
};
var newtypeEnvT = new Data_Newtype.Newtype(function (n) {
    return n;
}, EnvT);
var mapEnvT = function (f) {
    return function (v) {
        return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
    };
};
var functorEnvT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictFunctor)(f)(v.value1)));
        };
    });
};
var foldableEnvT = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (fn) {
            return function (v) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(fn)(v.value1);
            };
        };
    }, function (fn) {
        return function (a) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(fn)(a)(v.value1);
            };
        };
    }, function (fn) {
        return function (a) {
            return function (v) {
                return Data_Foldable.foldr(dictFoldable)(fn)(a)(v.value1);
            };
        };
    });
};
var traversableEnvT = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableEnvT(dictTraversable.Foldable1());
    }, function () {
        return functorEnvT(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(EnvT)(Data_Tuple.Tuple.create(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var extendEnvT = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorEnvT(dictExtend.Functor0());
    }, function (f) {
        return function (v) {
            return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictExtend.Functor0())(f)(Control_Extend.extend(dictExtend)((function () {
                var $68 = Data_Tuple.Tuple.create(v.value0);
                return function ($69) {
                    return EnvT($68($69));
                };
            })())(v.value1))));
        };
    });
};
var comonadTransEnvT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
    return function (v) {
        return v.value1;
    };
});
var comonadEnvT = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendEnvT(dictComonad.Extend0());
    }, function (v) {
        return Control_Comonad.extract(dictComonad)(v.value1);
    });
};
module.exports = {
    EnvT: EnvT,
    runEnvT: runEnvT,
    withEnvT: withEnvT,
    mapEnvT: mapEnvT,
    newtypeEnvT: newtypeEnvT,
    functorEnvT: functorEnvT,
    extendEnvT: extendEnvT,
    comonadEnvT: comonadEnvT,
    comonadTransEnvT: comonadTransEnvT,
    foldableEnvT: foldableEnvT,
    traversableEnvT: traversableEnvT
};

},{"../Control.Comonad.Trans.Class/index.js":29,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251}],27:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Trans_Class = require("../Control.Comonad.Trans.Class/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var StoreT = function (x) {
    return x;
};
var runStoreT = function (v) {
    return v;
};
var newtypeStoreT = new Data_Newtype.Newtype(function (n) {
    return n;
}, StoreT);
var functorStoreT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return StoreT(new Data_Tuple.Tuple(Data_Functor.map(dictFunctor)(function (h) {
                return function ($28) {
                    return f(h($28));
                };
            })(v.value0), v.value1));
        };
    });
};
var extendStoreT = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorStoreT(dictExtend.Functor0());
    }, function (f) {
        return function (v) {
            return StoreT(new Data_Tuple.Tuple(Control_Extend.extend(dictExtend)(function (w$prime) {
                return function (s$prime) {
                    return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                };
            })(v.value0), v.value1));
        };
    });
};
var comonadTransStoreT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
    return function (v) {
        return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (v1) {
            return v1(v.value1);
        })(v.value0);
    };
});
var comonadStoreT = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendStoreT(dictComonad.Extend0());
    }, function (v) {
        return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
    });
};
module.exports = {
    StoreT: StoreT,
    runStoreT: runStoreT,
    newtypeStoreT: newtypeStoreT,
    functorStoreT: functorStoreT,
    extendStoreT: extendStoreT,
    comonadStoreT: comonadStoreT,
    comonadTransStoreT: comonadTransStoreT
};

},{"../Control.Comonad.Trans.Class/index.js":29,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251}],28:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad_Store_Trans = require("../Control.Comonad.Store.Trans/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var store = function (f) {
    return function (x) {
        return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
    };
};
var runStore = function (v) {
    return Data_Tuple.swap(Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))(Data_Tuple.swap(v)));
};
module.exports = {
    runStore: runStore,
    store: store
};

},{"../Control.Comonad.Store.Trans/index.js":27,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251}],29:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var ComonadTrans = function (lower) {
    this.lower = lower;
};
var lower = function (dict) {
    return dict.lower;
};
module.exports = {
    lower: lower,
    ComonadTrans: ComonadTrans
};

},{}],30:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Comonad = function (Extend0, extract) {
    this.Extend0 = Extend0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad,
    extract: extract
};

},{}],31:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Transform = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var CoTransform = (function () {
    function CoTransform(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoTransform.create = function (value0) {
        return function (value1) {
            return new CoTransform(value0, value1);
        };
    };
    return CoTransform;
})();
var Await = function (x) {
    return x;
};
var runProcess = function (dictMonadRec) {
    return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)((function () {
        var $186 = Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0());
        var $187 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($188) {
            return $186($187($188));
        };
    })());
};
var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
        };
    };
});
var loop = function (dictFunctor) {
    return function (dictMonad) {
        return function (me) {
            return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
            })(Data_Unit.unit);
        };
    };
};
var fuseWithL = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (zap) {
                    return function (fs) {
                        return function (gs) {
                            var go = function (v) {
                                return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (v1) {
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (v2) {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                            return Control_Monad_Free_Trans.freeT(function (v3) {
                                                return go(t);
                                            });
                                        })(zap(Data_Tuple.Tuple.create)(v1)(v2)));
                                    });
                                }));
                            };
                            return Control_Monad_Free_Trans.freeT(function (v) {
                                return go(new Data_Tuple.Tuple(fs, gs));
                            });
                        };
                    };
                };
            };
        };
    };
};
var fuseWith = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (dictParallel) {
                    return function (zap) {
                        return function (fs) {
                            return function (gs) {
                                var go = function (v) {
                                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                        if (v1 instanceof Data_Either.Left) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(v1.value0));
                                        };
                                        if (v1 instanceof Data_Either.Right) {
                                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                return Control_Monad_Free_Trans.freeT(function (v2) {
                                                    return go(t);
                                                });
                                            })(v1.value0)));
                                        };
                                        throw new Error("Failed pattern match at Control.Coroutine (line 79, column 5 - line 81, column 63): " + [ v1.constructor.name ]);
                                    });
                                };
                                return Control_Monad_Free_Trans.freeT(function (v) {
                                    return go(new Data_Tuple.Tuple(fs, gs));
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
var joinConsumers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (v2) {
                        return f(v(v2.value0))(v1(v2.value1));
                    };
                };
            };
        });
    };
};
var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            var $189 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g);
            return function ($190) {
                return $189(v($190));
            };
        };
    };
});
var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));
var composeTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        var v3 = v1(v2.value0);
                        return new Data_Tuple.Tuple(v3.value0, f(v2.value1)(v3.value1));
                    };
                };
            };
        });
    };
};
var transform = function (dictMonad) {
    return function (f) {
        return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
            return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
        });
    };
};
var transformConsumer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return function (i) {
                        var v2 = v(i);
                        return f(v2.value1)(v1(v2.value0));
                    };
                };
            };
        });
    };
};
var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Emit(f(v.value0), g(v.value1));
        };
    };
});
var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
var connect = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return f(v.value1)(v1(v.value0));
                };
            };
        });
    };
};
var emit = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
    };
};
var joinProducers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
                };
            };
        });
    };
};
var producer = function (dictMonad) {
    return function (recv) {
        return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
            };
            throw new Error("Failed pattern match at Control.Coroutine (line 125, column 3 - line 127, column 29): " + [ v.constructor.name ]);
        }));
    };
};
var pullFrom = function (dictMonadRec) {
    return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
            };
        };
    });
};
var transformProducer = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new Emit(v2.value0, f(v.value1)(v2.value1));
                };
            };
        });
    };
};
var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new CoTransform(f(v.value0), function ($191) {
                return g(v.value1($191));
            });
        };
    };
});
var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));
var composeCoTransformers = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i) {
                        return f(v.value1(i))(v1.value1(v.value0));
                    });
                };
            };
        });
    };
};
var cotransform = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.freeT(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
        });
    };
};
var fuseCoTransform = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v(v1.value0);
                    return f(v2.value1)(v1.value1(v2.value0));
                };
            };
        });
    };
};
var transformCoTransformL = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    return new CoTransform(v1.value0, function (i1) {
                        var v2 = v(i1);
                        return f(v2.value1)(v1.value1(v2.value0));
                    });
                };
            };
        });
    };
};
var transformCoTransformR = function (dictMonadRec) {
    return function (dictParallel) {
        return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(dictParallel)(function (f) {
            return function (v) {
                return function (v1) {
                    var v2 = v1(v.value0);
                    return new CoTransform(v2.value0, function ($192) {
                        return (function (v3) {
                            return f(v3)(v2.value1);
                        })(v.value1($192));
                    });
                };
            };
        });
    };
};
var $$await = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var consumer = function (dictMonad) {
    return function (send) {
        return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (v) {
            return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(v));
        }));
    };
};
module.exports = {
    loop: loop,
    runProcess: runProcess,
    fuseWith: fuseWith,
    fuseWithL: fuseWithL,
    Emit: Emit,
    emit: emit,
    producer: producer,
    Await: Await,
    "await": $$await,
    consumer: consumer,
    Transform: Transform,
    transform: transform,
    CoTransform: CoTransform,
    cotransform: cotransform,
    connect: connect,
    pullFrom: pullFrom,
    transformProducer: transformProducer,
    transformConsumer: transformConsumer,
    composeTransformers: composeTransformers,
    composeCoTransformers: composeCoTransformers,
    fuseCoTransform: fuseCoTransform,
    transformCoTransformL: transformCoTransformL,
    transformCoTransformR: transformCoTransformR,
    joinProducers: joinProducers,
    joinConsumers: joinConsumers,
    bifunctorEmit: bifunctorEmit,
    functorEmit: functorEmit,
    profunctorAwait: profunctorAwait,
    functorAwait: functorAwait,
    bifunctorTransform: bifunctorTransform,
    functorTransform: functorTransform,
    bifunctorCoTransform: bifunctorCoTransform,
    functorCoTransform: functorCoTransform
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Free.Trans/index.js":41,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.Trans.Class/index.js":56,"../Control.Parallel.Class/index.js":63,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],32:[function(require,module,exports){
"use strict";

exports.arrayExtend = function(f) {
  return function(xs) {
    return xs.map(function (_, i, xs) {
      return f(xs.slice(i));
    });
  };
};

},{}],33:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Extend = function (Functor0, extend) {
    this.Functor0 = Functor0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Data_Functor.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extendArray = new Extend(function () {
    return Data_Functor.functorArray;
}, $foreign.arrayExtend);
var extend = function (dict) {
    return dict.extend;
};
var extendFlipped = function (dictExtend) {
    return function (w) {
        return function (f) {
            return extend(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
};
var composeCoKleisliFlipped = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f(extend(dictExtend)(g)(w));
            };
        };
    };
};
var composeCoKleisli = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g(extend(dictExtend)(f)(w));
            };
        };
    };
};
module.exports = {
    Extend: Extend,
    extend: extend,
    extendFlipped: extendFlipped,
    composeCoKleisli: composeCoKleisli,
    composeCoKleisliFlipped: composeCoKleisliFlipped,
    duplicate: duplicate,
    extendFn: extendFn,
    extendArray: extendArray
};

},{"../Control.Category/index.js":24,"../Data.Functor/index.js":143,"../Data.Semigroup/index.js":221,"./foreign.js":32}],34:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Unit = require("../Data.Unit/index.js");
var Lazy = function (defer) {
    this.defer = defer;
};
var lazyUnit = new Lazy(function (v) {
    return Data_Unit.unit;
});
var lazyFn = new Lazy(function (f) {
    return function (x) {
        return f(Data_Unit.unit)(x);
    };
});
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        var go = defer(dictLazy)(function (v) {
            return f(go);
        });
        return go;
    };
};
module.exports = {
    defer: defer,
    Lazy: Lazy,
    fix: fix,
    lazyFn: lazyFn,
    lazyUnit: lazyUnit
};

},{"../Data.Unit/index.js":257}],35:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var MonadCont = function (Monad0, callCC) {
    this.Monad0 = Monad0;
    this.callCC = callCC;
};
var callCC = function (dict) {
    return dict.callCC;
};
module.exports = {
    MonadCont: MonadCont,
    callCC: callCC
};

},{}],36:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ContT = function (x) {
    return x;
};
var withContT = function (f) {
    return function (v) {
        return function (k) {
            return v(f(k));
        };
    };
};
var runContT = function (v) {
    return function (k) {
        return v(k);
    };
};
var newtypeContT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ContT);
var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(k);
        };
    };
});
var mapContT = function (f) {
    return function (v) {
        return function (k) {
            return f(v(k));
        };
    };
};
var functorContT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (k) {
                return v(function (a) {
                    return k(f(a));
                });
            };
        };
    });
};
var applyContT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorContT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (k) {
                return v(function (g) {
                    return v1(function (a) {
                        return k(g(a));
                    });
                });
            };
        };
    });
};
var bindContT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyContT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (k$prime) {
                return v(function (a) {
                    var v1 = k(a);
                    return v1(k$prime);
                });
            };
        };
    });
};
var applicativeContT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyContT(dictApplicative.Apply0());
    }, function (a) {
        return function (k) {
            return k(a);
        };
    });
};
var monadContT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeContT(dictMonad.Applicative0());
    }, function () {
        return bindContT(dictMonad.Bind1());
    });
};
var monadAskContT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadContT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderContT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskContT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return function (v) {
            return function (k) {
                return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (v1) {
                    return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v((function () {
                        var $45 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](v1));
                        return function ($46) {
                            return $45(k($46));
                        };
                    })()));
                });
            };
        };
    });
};
var monadContContT = function (dictMonad) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadContT(dictMonad);
    }, function (f) {
        return function (k) {
            var v = f(function (a) {
                return function (v1) {
                    return k(a);
                };
            });
            return v(k);
        };
    });
};
var monadEffectContT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadContT(dictMonadEffect.Monad0());
    }, (function () {
        var $47 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
        var $48 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($49) {
            return $47($48($49));
        };
    })());
};
var monadStateContT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadContT(dictMonadState.Monad0());
    }, (function () {
        var $50 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
        var $51 = Control_Monad_State_Class.state(dictMonadState);
        return function ($52) {
            return $50($51($52));
        };
    })());
};
module.exports = {
    ContT: ContT,
    runContT: runContT,
    mapContT: mapContT,
    withContT: withContT,
    newtypeContT: newtypeContT,
    monadContContT: monadContContT,
    functorContT: functorContT,
    applyContT: applyContT,
    applicativeContT: applicativeContT,
    bindContT: bindContT,
    monadContT: monadContT,
    monadTransContT: monadTransContT,
    monadEffectContT: monadEffectContT,
    monadAskContT: monadAskContT,
    monadReaderContT: monadReaderContT,
    monadStateContT: monadStateContT
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad/index.js":60,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Effect.Class/index.js":299}],37:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var MonadThrow = function (Monad0, throwError) {
    this.Monad0 = Monad0;
    this.throwError = throwError;
};
var MonadError = function (MonadThrow0, catchError) {
    this.MonadThrow0 = MonadThrow0;
    this.catchError = catchError;
};
var throwError = function (dict) {
    return dict.throwError;
};
var monadThrowMaybe = new MonadThrow(function () {
    return Data_Maybe.monadMaybe;
}, Data_Function["const"](Data_Maybe.Nothing.value));
var monadThrowEither = new MonadThrow(function () {
    return Data_Either.monadEither;
}, Data_Either.Left.create);
var monadThrowEffect = new MonadThrow(function () {
    return Effect.monadEffect;
}, Effect_Exception.throwException);
var monadErrorMaybe = new MonadError(function () {
    return monadThrowMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
            return v1(Data_Unit.unit);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEither = new MonadError(function () {
    return monadThrowEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Either.Left) {
            return v1(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(v.value0);
        };
        throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var monadErrorEffect = new MonadError(function () {
    return monadThrowEffect;
}, Data_Function.flip(Effect_Exception.catchException));
var catchError = function (dict) {
    return dict.catchError;
};
var catchJust = function (dictMonadError) {
    return function (p) {
        return function (act) {
            return function (handler) {
                var handle = function (e) {
                    var v = p(e);
                    if (v instanceof Data_Maybe.Nothing) {
                        return throwError(dictMonadError.MonadThrow0())(e);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return handler(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [ v.constructor.name ]);
                };
                return catchError(dictMonadError)(act)(handle);
            };
        };
    };
};
var $$try = function (dictMonadError) {
    return function (a) {
        return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
            var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
            return function ($22) {
                return $21(Data_Either.Left.create($22));
            };
        })());
    };
};
var withResource = function (dictMonadError) {
    return function (acquire) {
        return function (release) {
            return function (kleisli) {
                return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (v) {
                    return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())($$try(dictMonadError)(kleisli(v)))(function (v1) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(v))(function () {
                            return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(v1);
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    catchError: catchError,
    throwError: throwError,
    MonadThrow: MonadThrow,
    MonadError: MonadError,
    catchJust: catchJust,
    "try": $$try,
    withResource: withResource,
    monadThrowEither: monadThrowEither,
    monadErrorEither: monadErrorEither,
    monadThrowMaybe: monadThrowMaybe,
    monadErrorMaybe: monadErrorMaybe,
    monadThrowEffect: monadThrowEffect,
    monadErrorEffect: monadErrorEffect
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257,"../Effect.Exception/index.js":303,"../Effect/index.js":309}],38:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ExceptT = function (x) {
    return x;
};
var withExceptT = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var mapLeft = function (v1) {
                return function (v2) {
                    if (v2 instanceof Data_Either.Right) {
                        return new Data_Either.Right(v2.value0);
                    };
                    if (v2 instanceof Data_Either.Left) {
                        return new Data_Either.Left(v1(v2.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                };
            };
            return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
        };
    };
};
var runExceptT = function (v) {
    return v;
};
var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ExceptT);
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
        });
    };
});
var mapExceptT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorExceptT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
    });
};
var except = function (dictApplicative) {
    var $96 = Control_Applicative.pure(dictApplicative);
    return function ($97) {
        return ExceptT($96($97));
    };
};
var monadExceptT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeExceptT(dictMonad);
    }, function () {
        return bindExceptT(dictMonad);
    });
};
var bindExceptT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                var $98 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($99) {
                    return $98(Data_Either.Left.create($99));
                };
            })())(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    });
};
var applyExceptT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadExceptT(dictMonad)));
};
var applicativeExceptT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyExceptT(dictMonad);
    }, (function () {
        var $100 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($101) {
            return ExceptT($100(Data_Either.Right.create($101)));
        };
    })());
};
var monadAskExceptT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadExceptT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderExceptT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskExceptT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContExceptT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadExceptT(dictMonadCont.Monad0());
    }, function (f) {
        return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return ExceptT(c(new Data_Either.Right(a)));
            });
            return v;
        }));
    });
};
var monadEffectExceptT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadExceptT(dictMonadEffect.Monad0());
    }, (function () {
        var $102 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
        var $103 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($104) {
            return $102($103($104));
        };
    })());
};
var monadRecExceptT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadExceptT(dictMonadRec.Monad0());
    }, function (f) {
        var $105 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
            var v = f(a);
            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                    if (m$prime instanceof Data_Either.Left) {
                        return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                    };
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                        return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                    };
                    if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                        return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 74, column 14 - line 77, column 43): " + [ m$prime.constructor.name ]);
                })());
            });
        });
        return function ($106) {
            return ExceptT($105($106));
        };
    });
};
var monadStateExceptT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadExceptT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellExceptT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadExceptT(dictMonadTell.Monad0());
    }, (function () {
        var $107 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0());
        var $108 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($109) {
            return $107($108($109));
        };
    })());
};
var monadWriterExceptT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellExceptT(dictMonadWriter.MonadTell0());
    }, mapExceptT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapExceptT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (v instanceof Data_Either.Left) {
                    return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Control_Category.identity(Control_Category.categoryFn));
                };
                if (v instanceof Data_Either.Right) {
                    return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 136, column 10 - line 138, column 45): " + [ v.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadExceptT(dictMonad);
    }, (function () {
        var $110 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($111) {
            return ExceptT($110(Data_Either.Left.create($111)));
        };
    })());
};
var monadErrorExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                var v1 = k(a);
                return v1;
            })((function () {
                var $112 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($113) {
                    return $112(Data_Either.Right.create($113));
                };
            })()));
        };
    });
};
var altExceptT = function (dictSemigroup) {
    return function (dictMonad) {
        return new Control_Alt.Alt(function () {
            return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                    if (v2 instanceof Data_Either.Right) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                    };
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                            if (v3 instanceof Data_Either.Right) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                            };
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ v3.constructor.name ]);
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ v2.constructor.name ]);
                });
            };
        });
    };
};
var plusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Plus.Plus(function () {
            return altExceptT(dictMonoid.Semigroup0())(dictMonad);
        }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
    };
};
var alternativeExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Alternative.Alternative(function () {
            return applicativeExceptT(dictMonad);
        }, function () {
            return plusExceptT(dictMonoid)(dictMonad);
        });
    };
};
var monadZeroExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeExceptT(dictMonoid)(dictMonad);
        }, function () {
            return monadExceptT(dictMonad);
        });
    };
};
var monadPlusExceptT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroExceptT(dictMonoid)(dictMonad);
        });
    };
};
module.exports = {
    ExceptT: ExceptT,
    runExceptT: runExceptT,
    withExceptT: withExceptT,
    mapExceptT: mapExceptT,
    except: except,
    newtypeExceptT: newtypeExceptT,
    functorExceptT: functorExceptT,
    applyExceptT: applyExceptT,
    applicativeExceptT: applicativeExceptT,
    bindExceptT: bindExceptT,
    monadExceptT: monadExceptT,
    monadRecExceptT: monadRecExceptT,
    altExceptT: altExceptT,
    plusExceptT: plusExceptT,
    alternativeExceptT: alternativeExceptT,
    monadPlusExceptT: monadPlusExceptT,
    monadZeroExceptT: monadZeroExceptT,
    monadTransExceptT: monadTransExceptT,
    monadEffectExceptT: monadEffectExceptT,
    monadContExceptT: monadContExceptT,
    monadThrowExceptT: monadThrowExceptT,
    monadErrorExceptT: monadErrorExceptT,
    monadAskExceptT: monadAskExceptT,
    monadReaderExceptT: monadReaderExceptT,
    monadStateExceptT: monadStateExceptT,
    monadTellExceptT: monadTellExceptT,
    monadWriterExceptT: monadWriterExceptT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Effect.Class/index.js":299}],39:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
var runExcept = (function () {
    var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($1) {
        return $0(Control_Monad_Except_Trans.runExceptT($1));
    };
})();
var mapExcept = function (f) {
    return Control_Monad_Except_Trans.mapExceptT((function () {
        var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($3) {
            return Data_Identity.Identity(f($2($3)));
        };
    })());
};
module.exports = {
    runExcept: runExcept,
    mapExcept: mapExcept,
    withExcept: withExcept
};

},{"../Control.Monad.Except.Trans/index.js":38,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197}],40:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Completed = (function () {
    function Completed(value0) {
        this.value0 = value0;
    };
    Completed.create = function (value0) {
        return new Completed(value0);
    };
    return Completed;
})();
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
    this.Functor1 = Functor1;
    this.Monad0 = Monad0;
    this.fork = fork;
    this.join = join;
    this.suspend = suspend;
};
var MonadKill = function (MonadFork0, MonadThrow1, kill) {
    this.MonadFork0 = MonadFork0;
    this.MonadThrow1 = MonadThrow1;
    this.kill = kill;
};
var MonadBracket = function (MonadError1, MonadKill0, bracket, never, uninterruptible) {
    this.MonadError1 = MonadError1;
    this.MonadKill0 = MonadKill0;
    this.bracket = bracket;
    this.never = never;
    this.uninterruptible = uninterruptible;
};
var uninterruptible = function (dict) {
    return dict.uninterruptible;
};
var suspend = function (dict) {
    return dict.suspend;
};
var never = function (dict) {
    return dict.never;
};
var monadForkAff = new MonadFork(function () {
    return Effect_Aff.functorFiber;
}, function () {
    return Effect_Aff.monadAff;
}, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
var monadKillAff = new MonadKill(function () {
    return monadForkAff;
}, function () {
    return Effect_Aff.monadThrowAff;
}, Effect_Aff.killFiber);
var monadBracketAff = new MonadBracket(function () {
    return Effect_Aff.monadErrorAff;
}, function () {
    return monadKillAff;
}, function (acquire) {
    return function (release) {
        return function (run) {
            return Effect_Aff.generalBracket(acquire)({
                completed: function ($11) {
                    return release(Completed.create($11));
                },
                failed: function ($12) {
                    return release(Failed.create($12));
                },
                killed: function ($13) {
                    return release(Killed.create($13));
                }
            })(run);
        };
    };
}, Effect_Aff.never, Effect_Aff.invincible);
var kill = function (dict) {
    return dict.kill;
};
var join = function (dict) {
    return dict.join;
};
var fork = function (dict) {
    return dict.fork;
};
var monadForkReaderT = function (dictMonadFork) {
    return new MonadFork(dictMonadFork.Functor1, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictMonadFork.Monad0());
    }, function (v) {
        var $14 = fork(dictMonadFork);
        return function ($15) {
            return $14(v($15));
        };
    }, (function () {
        var $16 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonadFork.Monad0());
        var $17 = join(dictMonadFork);
        return function ($18) {
            return $16($17($18));
        };
    })(), function (v) {
        var $19 = suspend(dictMonadFork);
        return function ($20) {
            return $19(v($20));
        };
    });
};
var monadKillReaderT = function (dictMonadKill) {
    return new MonadKill(function () {
        return monadForkReaderT(dictMonadKill.MonadFork0());
    }, function () {
        return Control_Monad_Reader_Trans.monadThrowReaderT(dictMonadKill.MonadThrow1());
    }, function (e) {
        var $21 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadKill.MonadThrow1()).Monad0());
        var $22 = kill(dictMonadKill)(e);
        return function ($23) {
            return $21($22($23));
        };
    });
};
var bracket = function (dict) {
    return dict.bracket;
};
var monadBracketReaderT = function (dictMonadBracket) {
    return new MonadBracket(function () {
        return Control_Monad_Reader_Trans.monadErrorReaderT(dictMonadBracket.MonadError1());
    }, function () {
        return monadKillReaderT(dictMonadBracket.MonadKill0());
    }, function (v) {
        return function (release) {
            return function (run) {
                return function (r) {
                    return bracket(dictMonadBracket)(v(r))(function (c) {
                        return function (a) {
                            return Control_Monad_Reader_Trans.runReaderT(release(c)(a))(r);
                        };
                    })(function (a) {
                        return Control_Monad_Reader_Trans.runReaderT(run(a))(r);
                    });
                };
            };
        };
    }, Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(((dictMonadBracket.MonadError1()).MonadThrow0()).Monad0())(never(dictMonadBracket)), function (k) {
        return function (r) {
            return uninterruptible(dictMonadBracket)(Control_Monad_Reader_Trans.runReaderT(k)(r));
        };
    });
};
module.exports = {
    bracket: bracket,
    fork: fork,
    join: join,
    kill: kill,
    never: never,
    suspend: suspend,
    uninterruptible: uninterruptible,
    MonadFork: MonadFork,
    MonadKill: MonadKill,
    Completed: Completed,
    Failed: Failed,
    Killed: Killed,
    MonadBracket: MonadBracket,
    monadForkAff: monadForkAff,
    monadForkReaderT: monadForkReaderT,
    monadKillAff: monadKillAff,
    monadKillReaderT: monadKillReaderT,
    monadBracketAff: monadBracketAff,
    monadBracketReaderT: monadBracketReaderT
};

},{"../Control.Monad.Reader.Trans/index.js":49,"../Control.Monad.Trans.Class/index.js":56,"../Effect.Aff/index.js":297}],41:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Bound = (function () {
    function Bound(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bound.create = function (value0) {
        return function (value1) {
            return new Bound(value0, value1);
        };
    };
    return Bound;
})();
var FreeT = (function () {
    function FreeT(value0) {
        this.value0 = value0;
    };
    FreeT.create = function (value0) {
        return new FreeT(value0);
    };
    return FreeT;
})();
var Bind = (function () {
    function Bind(value0) {
        this.value0 = value0;
    };
    Bind.create = function (value0) {
        return new Bind(value0);
    };
    return Bind;
})();
var monadTransFreeT = function (dictFunctor) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (ma) {
            return new FreeT(function (v) {
                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
            });
        };
    });
};
var freeT = FreeT.create;
var bound = function (m) {
    return function (f) {
        return new Bind(Data_Exists.mkExists(new Bound(m, f)));
    };
};
var functorFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                if (v instanceof FreeT) {
                    return new FreeT(function (v1) {
                        return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                    });
                };
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)((function () {
                            var $104 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                            return function ($105) {
                                return $104(v1.value1($105));
                            };
                        })());
                    })(v.value0);
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 57, column 1 - line 59, column 71): " + [ f.constructor.name, v.constructor.name ]);
            };
        });
    };
};
var bimapFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return function (nm) {
                return function (v) {
                    if (v instanceof Bind) {
                        return Data_Exists.runExists(function (v1) {
                            return bound((function () {
                                var $106 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                return function ($107) {
                                    return $106(v1.value0($107));
                                };
                            })())((function () {
                                var $108 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                return function ($109) {
                                    return $108(v1.value1($109));
                                };
                            })());
                        })(v.value0);
                    };
                    if (v instanceof FreeT) {
                        return new FreeT(function (v1) {
                            return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)((function () {
                                var $110 = Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm));
                                return function ($111) {
                                    return nf($110($111));
                                };
                            })()))(nm(v.value0(Data_Unit.unit)));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 118, column 1 - line 118, column 109): " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                };
            };
        };
    };
};
var hoistFreeT = function (dictFunctor) {
    return function (dictFunctor1) {
        return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var interpret = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (nf) {
            return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var monadFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeFreeT(dictFunctor)(dictMonad);
        }, function () {
            return bindFreeT(dictFunctor)(dictMonad);
        });
    };
};
var bindFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Bind.Bind(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (v) {
            return function (f) {
                if (v instanceof Bind) {
                    return Data_Exists.runExists(function (v1) {
                        return bound(v1.value0)(function (x) {
                            return bound(function (v2) {
                                return v1.value1(x);
                            })(f);
                        });
                    })(v.value0);
                };
                return bound(function (v1) {
                    return v;
                })(f);
            };
        });
    };
};
var applyFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Apply.Apply(function () {
            return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
        }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
    };
};
var applicativeFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Applicative.Applicative(function () {
            return applyFreeT(dictFunctor)(dictMonad);
        }, function (a) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
            });
        });
    };
};
var liftFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (fa) {
            return new FreeT(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
            });
        };
    };
};
var resume = function (dictFunctor) {
    return function (dictMonadRec) {
        var go = function (v) {
            if (v instanceof FreeT) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
            };
            if (v instanceof Bind) {
                return Data_Exists.runExists(function (v1) {
                    var v2 = v1.value0(Data_Unit.unit);
                    if (v2 instanceof FreeT) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                            };
                            if (v3 instanceof Data_Either.Right) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                    return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                })(v3.value0))));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 20 - line 54, column 67): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v2 instanceof Bind) {
                        return Data_Exists.runExists(function (v3) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                            })));
                        })(v2.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 50, column 5 - line 55, column 98): " + [ v2.constructor.name ]);
                })(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 47, column 3 - line 47, column 75): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var runFreeT = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (interp) {
            var go = function (v) {
                if (v instanceof Data_Either.Left) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                };
                if (v instanceof Data_Either.Right) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 126, column 3 - line 126, column 63): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
        };
    };
};
var semigroupFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictSemigroup) {
            return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyFreeT(dictFunctor)(dictMonad))(Data_Semigroup.append(dictSemigroup)));
        };
    };
};
var monadAskFreeT = function (dictFunctor) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadFreeT(dictFunctor)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadEffectFreeT = function (dictFunctor) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadFreeT(dictFunctor)(dictMonadEffect.Monad0());
        }, (function () {
            var $112 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadEffect.Monad0());
            var $113 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($114) {
                return $112($113($114));
            };
        })());
    };
};
var monadStateFreeT = function (dictFunctor) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadFreeT(dictFunctor)(dictMonadState.Monad0());
        }, (function () {
            var $115 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadState.Monad0());
            var $116 = Control_Monad_State_Class.state(dictMonadState);
            return function ($117) {
                return $115($116($117));
            };
        })());
    };
};
var monadTellFreeT = function (dictFunctor) {
    return function (dictMonadTell) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadFreeT(dictFunctor)(dictMonadTell.Monad0());
        }, (function () {
            var $118 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadTell.Monad0());
            var $119 = Control_Monad_Writer_Class.tell(dictMonadTell);
            return function ($120) {
                return $118($119($120));
            };
        })());
    };
};
var monadThrowFreeT = function (dictFunctor) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadFreeT(dictFunctor)(dictMonadThrow.Monad0());
        }, (function () {
            var $121 = Control_Monad_Trans_Class.lift(monadTransFreeT(dictFunctor))(dictMonadThrow.Monad0());
            var $122 = Control_Monad_Error_Class.throwError(dictMonadThrow);
            return function ($123) {
                return $121($122($123));
            };
        })());
    };
};
var monadRecFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadFreeT(dictFunctor)(dictMonad);
        }, function (f) {
            var go = function (s) {
                return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                    if (v instanceof Control_Monad_Rec_Class.Loop) {
                        return go(v.value0);
                    };
                    if (v instanceof Control_Monad_Rec_Class.Done) {
                        return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 80, column 15 - line 82, column 25): " + [ v.constructor.name ]);
                });
            };
            return go;
        });
    };
};
var monoidFreeT = function (dictFunctor) {
    return function (dictMonad) {
        return function (dictMonoid) {
            return new Data_Monoid.Monoid(function () {
                return semigroupFreeT(dictFunctor)(dictMonad)(dictMonoid.Semigroup0());
            }, Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(Data_Monoid.mempty(dictMonoid)));
        };
    };
};
module.exports = {
    freeT: freeT,
    liftFreeT: liftFreeT,
    hoistFreeT: hoistFreeT,
    interpret: interpret,
    bimapFreeT: bimapFreeT,
    resume: resume,
    runFreeT: runFreeT,
    functorFreeT: functorFreeT,
    applyFreeT: applyFreeT,
    applicativeFreeT: applicativeFreeT,
    bindFreeT: bindFreeT,
    monadFreeT: monadFreeT,
    monadTransFreeT: monadTransFreeT,
    monadRecFreeT: monadRecFreeT,
    semigroupFreeT: semigroupFreeT,
    monoidFreeT: monoidFreeT,
    monadEffectFreeT: monadEffectFreeT,
    monadAskFreeT: monadAskFreeT,
    monadTellFreeT: monadTellFreeT,
    monadStateFreeT: monadStateFreeT,
    monadThrowFreeT: monadThrowFreeT
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Exists/index.js":126,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299}],42:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_CatList = require("../Data.CatList/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ExpF = function (x) {
    return x;
};
var Free = (function () {
    function Free(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Free.create = function (value0) {
        return function (value1) {
            return new Free(value0, value1);
        };
    };
    return Free;
})();
var Return = (function () {
    function Return(value0) {
        this.value0 = value0;
    };
    Return.create = function (value0) {
        return new Return(value0);
    };
    return Return;
})();
var Bind = (function () {
    function Bind(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Bind.create = function (value0) {
        return function (value1) {
            return new Bind(value0, value1);
        };
    };
    return Bind;
})();
var toView = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        var runExpF = function (v2) {
            return v2;
        };
        var concatF = function (v2) {
            return function (r) {
                return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
            };
        };
        if (v.value0 instanceof Return) {
            var v2 = Data_CatList.uncons(v.value1);
            if (v2 instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return new Return(v.value0.value0);
            };
            if (v2 instanceof Data_Maybe.Just) {
                $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                return;
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
        };
        if (v.value0 instanceof Bind) {
            $tco_done = true;
            return new Bind(v.value0.value0, function (a) {
                return concatF(v.value0.value1(a))(v.value1);
            });
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var runFreeM = function (dictFunctor) {
    return function (dictMonadRec) {
        return function (k) {
            var go = function (f) {
                var v = toView(f);
                if (v instanceof Return) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
                };
                if (v instanceof Bind) {
                    return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [ v.constructor.name ]);
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
        };
    };
};
var runFree = function (dictFunctor) {
    return function (k) {
        var go = function ($copy_f) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(f) {
                var v = toView(f);
                if (v instanceof Return) {
                    $tco_done = true;
                    return v.value0;
                };
                if (v instanceof Bind) {
                    $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
                    return;
                };
                throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_f);
            };
            return $tco_result;
        };
        return go;
    };
};
var resume$prime = function (k) {
    return function (j) {
        return function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return j(v.value0);
            };
            if (v instanceof Bind) {
                return k(v.value0)(v.value1);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
        };
    };
};
var resume = function (dictFunctor) {
    return resume$prime(function (g) {
        return function (i) {
            return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
        };
    })(Data_Either.Right.create);
};
var fromView = function (f) {
    return new Free(f, Data_CatList.empty);
};
var wrap = function (f) {
    return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
};
var suspendF = function (dictApplicative) {
    return function (f) {
        return wrap(Control_Applicative.pure(dictApplicative)(f));
    };
};
var freeMonad = new Control_Monad.Monad(function () {
    return freeApplicative;
}, function () {
    return freeBind;
});
var freeFunctor = new Data_Functor.Functor(function (k) {
    return function (f) {
        return Control_Bind.bindFlipped(freeBind)((function () {
            var $120 = Control_Applicative.pure(freeApplicative);
            return function ($121) {
                return $120(k($121));
            };
        })())(f);
    };
});
var freeBind = new Control_Bind.Bind(function () {
    return freeApply;
}, function (v) {
    return function (k) {
        return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
    };
});
var freeApply = new Control_Apply.Apply(function () {
    return freeFunctor;
}, Control_Monad.ap(freeMonad));
var freeApplicative = new Control_Applicative.Applicative(function () {
    return freeApply;
}, function ($122) {
    return fromView(Return.create($122));
});
var semigroupFree = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup)));
};
var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
    return freeMonad;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(freeBind)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(freeApplicative)(v.value0);
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
        });
    };
});
var liftF = function (f) {
    return fromView(new Bind(f, (function () {
        var $123 = Control_Applicative.pure(freeApplicative);
        return function ($124) {
            return $123($124);
        };
    })()));
};
var freeMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftF;
});
var monoidFree = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFree(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)));
};
var substFree = function (k) {
    var go = function (f) {
        var v = toView(f);
        if (v instanceof Return) {
            return Control_Applicative.pure(freeApplicative)(v.value0);
        };
        if (v instanceof Bind) {
            return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
        };
        throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [ v.constructor.name ]);
    };
    return go;
};
var hoistFree = function (k) {
    return substFree(function ($125) {
        return liftF(k($125));
    });
};
var foldableFree = function (dictFunctor) {
    return function (dictFoldable) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                var go = (function () {
                    var $126 = resume(dictFunctor);
                    return function ($127) {
                        return (function (v) {
                            if (v instanceof Data_Either.Left) {
                                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
                            };
                            if (v instanceof Data_Either.Right) {
                                return f(v.value0);
                            };
                            throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [ v.constructor.name ]);
                        })($126($127));
                    };
                })();
                return go;
            };
        }, function (f) {
            var go = function (r) {
                var $128 = resume(dictFunctor);
                return function ($129) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(r)(v.value0);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [ v.constructor.name ]);
                    })($128($129));
                };
            };
            return go;
        }, function (f) {
            var go = function (r) {
                var $130 = resume(dictFunctor);
                return function ($131) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return f(v.value0)(r);
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [ v.constructor.name ]);
                    })($130($131));
                };
            };
            return go;
        });
    };
};
var traversableFree = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
    }, function () {
        return freeFunctor;
    }, function (dictApplicative) {
        return function (tma) {
            return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
        };
    }, function (dictApplicative) {
        return function (f) {
            var go = (function () {
                var $132 = resume(dictTraversable.Functor0());
                return function ($133) {
                    return (function (v) {
                        if (v instanceof Data_Either.Left) {
                            return Data_Functor.map((dictApplicative.Apply0()).Functor0())((function () {
                                var $134 = Control_Bind.join(freeBind);
                                return function ($135) {
                                    return $134(liftF($135));
                                };
                            })())(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
                        };
                        if (v instanceof Data_Either.Right) {
                            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
                        };
                        throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [ v.constructor.name ]);
                    })($132($133));
                };
            })();
            return go;
        };
    });
};
var foldFree = function (dictMonadRec) {
    return function (k) {
        var go = function (f) {
            var v = toView(f);
            if (v instanceof Return) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
            };
            if (v instanceof Bind) {
                return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                    return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                })(k(v.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
    };
};
var eqFree = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                    };
                    return false;
                };
            });
        };
    };
};
var ordFree = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    var v = resume(dictFunctor)(y);
                    var v1 = resume(dictFunctor)(x);
                    if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                        return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
                    };
                    if (v1 instanceof Data_Either.Left) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Either.Left) {
                        return Data_Ordering.GT.value;
                    };
                    if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                        return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [ v1.constructor.name, v.constructor.name ]);
                };
            });
        };
    };
};
var eq1Free = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Free = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord1(function () {
                return eq1Free(dictFunctor)(dictOrd1.Eq10());
            }, function (dictOrd2) {
                return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd2));
            });
        };
    };
};
module.exports = {
    suspendF: suspendF,
    wrap: wrap,
    liftF: liftF,
    hoistFree: hoistFree,
    foldFree: foldFree,
    substFree: substFree,
    runFree: runFree,
    runFreeM: runFreeM,
    resume: resume,
    "resume'": resume$prime,
    eqFree: eqFree,
    eq1Free: eq1Free,
    ordFree: ordFree,
    ord1Free: ord1Free,
    freeFunctor: freeFunctor,
    freeBind: freeBind,
    freeApplicative: freeApplicative,
    freeApply: freeApply,
    freeMonad: freeMonad,
    freeMonadTrans: freeMonadTrans,
    freeMonadRec: freeMonadRec,
    foldableFree: foldableFree,
    traversableFree: traversableFree,
    semigroupFree: semigroupFree,
    monoidFree: monoidFree
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad/index.js":60,"../Data.CatList/index.js":104,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Traversable/index.js":248,"../Unsafe.Coerce/index.js":391}],43:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var MonadGen = function (Monad0, chooseBool, chooseFloat, chooseInt, resize, sized) {
    this.Monad0 = Monad0;
    this.chooseBool = chooseBool;
    this.chooseFloat = chooseFloat;
    this.chooseInt = chooseInt;
    this.resize = resize;
    this.sized = sized;
};
var sized = function (dict) {
    return dict.sized;
};
var resize = function (dict) {
    return dict.resize;
};
var chooseInt = function (dict) {
    return dict.chooseInt;
};
var chooseFloat = function (dict) {
    return dict.chooseFloat;
};
var chooseBool = function (dict) {
    return dict.chooseBool;
};
module.exports = {
    chooseBool: chooseBool,
    chooseFloat: chooseFloat,
    chooseInt: chooseInt,
    resize: resize,
    sized: sized,
    MonadGen: MonadGen
};

},{}],44:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var FreqSemigroup = function (x) {
    return x;
};
var AtIndex = function (x) {
    return x;
};
var unfoldable = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (dictUnfoldable) {
            return function (gen) {
                var unfold = function (v) {
                    if (v instanceof Nil) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v instanceof Cons) {
                        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 101, column 12 - line 103, column 35): " + [ v.constructor.name ]);
                };
                var loopGen = function (v) {
                    if (v.value1 <= 0) {
                        return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                    };
                    if (Data_Boolean.otherwise) {
                        return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(gen)(function (v1) {
                            return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(new Cons(v1, v.value0), v.value1 - 1 | 0)));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 93, column 3 - line 93, column 68): " + [ v.constructor.name ]);
                };
                return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Unfoldable.unfoldr(dictUnfoldable)(unfold))(Control_Monad_Gen_Class.sized(dictMonadGen)((function () {
                    var $59 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(loopGen);
                    var $60 = Data_Tuple.Tuple.create(Nil.value);
                    return function ($61) {
                        return $59($60($61));
                    };
                })()));
            };
        };
    };
};
var semigroupFreqSemigroup = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (pos) {
            var v2 = v(pos);
            if (v2.value0 instanceof Data_Maybe.Just) {
                return v1(v2.value0.value0);
            };
            return v2;
        };
    };
});
var semigroupAtIndex = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (i) {
            var $46 = i <= 0;
            if ($46) {
                return v(i);
            };
            return v1(i - 1 | 0);
        };
    };
});
var getFreqVal = function (v) {
    return function ($62) {
        return Data_Tuple.snd(v($62));
    };
};
var getAtIndex = function (v) {
    return v;
};
var freqSemigroup = function (v) {
    return function (pos) {
        var $50 = pos >= v.value0;
        if ($50) {
            return new Data_Tuple.Tuple(new Data_Maybe.Just(pos - v.value0), v.value1);
        };
        return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, v.value1);
    };
};
var frequency = function (dictMonadGen) {
    return function (dictFoldable1) {
        return function (xs) {
            var total = Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeAdditive)(Data_Newtype.newtypeAdditive)(Data_Monoid_Additive.Additive)(Data_Foldable.foldMap(dictFoldable1.Foldable0())(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber)))(Data_Tuple.fst)(xs);
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(0.0)(total))(getFreqVal(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupFreqSemigroup)(freqSemigroup)(xs)));
        };
    };
};
var filtered = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (gen) {
            var go = function (v) {
                return Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                    if (a instanceof Data_Maybe.Nothing) {
                        return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                    };
                    if (a instanceof Data_Maybe.Just) {
                        return new Control_Monad_Rec_Class.Done(a.value0);
                    };
                    throw new Error("Failed pattern match at Control.Monad.Gen (line 117, column 24 - line 119, column 23): " + [ a.constructor.name ]);
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_Unit.unit);
        };
    };
};
var suchThat = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (gen) {
            return function (pred) {
                return filtered(dictMonadRec)(dictMonadGen)(Data_Functor.mapFlipped((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(gen)(function (a) {
                    var $55 = pred(a);
                    if ($55) {
                        return new Data_Maybe.Just(a);
                    };
                    return Data_Maybe.Nothing.value;
                }));
            };
        };
    };
};
var choose = function (dictMonadGen) {
    return function (genA) {
        return function (genB) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseBool(dictMonadGen))(function (v) {
                if (v) {
                    return genA;
                };
                return genB;
            });
        };
    };
};
var atIndex = function ($63) {
    return AtIndex(Data_Function["const"]($63));
};
var fromIndex = function (dictFoldable1) {
    return function (i) {
        return function (xs) {
            return getAtIndex(Data_Semigroup_Foldable.foldMap1(dictFoldable1)(semigroupAtIndex)(atIndex)(xs))(i);
        };
    };
};
var elements = function (dictMonadGen) {
    return function (dictFoldable1) {
        return function (xs) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (v) {
                return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(fromIndex(dictFoldable1)(v)(xs));
            });
        };
    };
};
var oneOf = function (dictMonadGen) {
    return function (dictFoldable1) {
        return function (xs) {
            return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(Data_Foldable.length(dictFoldable1.Foldable0())(Data_Semiring.semiringInt)(xs) - 1 | 0))(function (v) {
                return fromIndex(dictFoldable1)(v)(xs);
            });
        };
    };
};
module.exports = {
    choose: choose,
    oneOf: oneOf,
    frequency: frequency,
    elements: elements,
    unfoldable: unfoldable,
    suchThat: suchThat,
    filtered: filtered
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Monad.Gen.Class/index.js":43,"../Control.Monad.Rec.Class/index.js":50,"../Data.Boolean/index.js":100,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Monoid.Additive/index.js":189,"../Data.Newtype/index.js":197,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unit/index.js":257}],45:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Yield = (function () {
    function Yield(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Yield.create = function (value0) {
        return function (value1) {
            return new Yield(value0, value1);
        };
    };
    return Yield;
})();
var Skip = (function () {
    function Skip(value0) {
        this.value0 = value0;
    };
    Skip.create = function (value0) {
        return new Skip(value0);
    };
    return Skip;
})();
var Done = (function () {
    function Done() {

    };
    Done.value = new Done();
    return Done;
})();
var ListT = function (x) {
    return x;
};
var wrapLazy = function (dictApplicative) {
    return function (v) {
        return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
    };
};
var wrapEffect = function (dictFunctor) {
    return function (v) {
        return ListT(Data_Functor.map(dictFunctor)(function ($187) {
            return Skip.create(Data_Lazy.defer(Data_Function["const"]($187)));
        })(v));
    };
};
var unfold = function (dictMonad) {
    return function (f) {
        return function (z) {
            var g = function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                        return unfold(dictMonad)(f)(v.value0.value0);
                    }));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 130, column 3 - line 130, column 60): " + [ v.constructor.name ]);
            };
            return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
        };
    };
};
var uncons = function (dictMonad) {
    return function (v) {
        var g = function (v1) {
            if (v1 instanceof Yield) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
            };
            if (v1 instanceof Skip) {
                return uncons(dictMonad)(Data_Lazy.force(v1.value0));
            };
            if (v1 instanceof Done) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 195, column 3 - line 195, column 50): " + [ v1.constructor.name ]);
        };
        return Control_Bind.bind(dictMonad.Bind1())(v)(g);
    };
};
var tail = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
    };
};
var stepMap = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return ListT(Data_Functor.map(dictFunctor)(f)(v));
        };
    };
};
var takeWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $101 = f(v.value0);
                if ($101) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                };
                return Done.value;
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 154, column 3 - line 154, column 68): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var scanl = function (dictMonad) {
    return function (f) {
        return function (b) {
            return function (l) {
                var g = function (v) {
                    var h = function (v1) {
                        if (v1 instanceof Yield) {
                            var b$prime$prime = f(v.value0)(v1.value0);
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                        };
                        if (v1 instanceof Skip) {
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                        };
                        if (v1 instanceof Done) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Control.Monad.List.Trans (line 248, column 5 - line 248, column 78): " + [ v1.constructor.name ]);
                    };
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                };
                return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
            };
        };
    };
};
var prepend$prime = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
        };
    };
};
var prepend = function (dictApplicative) {
    return function (h) {
        return function (t) {
            return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
        };
    };
};
var nil = function (dictApplicative) {
    return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
};
var singleton = function (dictApplicative) {
    return function (a) {
        return prepend(dictApplicative)(a)(nil(dictApplicative));
    };
};
var take = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return nil(dictApplicative);
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 147, column 3 - line 147, column 47): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var zipWith$prime = function (dictMonad) {
    return function (f) {
        var g = function (v) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                };
                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                        return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                    })))(f(v.value0.value0)(v1.value0.value0));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 260, column 3 - line 260, column 25): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        var loop = function (fa) {
            return function (fb) {
                return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (v1) {
                        return g(v)(v1);
                    });
                }));
            };
        };
        return loop;
    };
};
var zipWith = function (dictMonad) {
    return function (f) {
        var g = function (a) {
            return function (b) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
            };
        };
        return zipWith$prime(dictMonad)(g);
    };
};
var newtypeListT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ListT);
var mapMaybe = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 183, column 3 - line 183, column 72): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var iterate = function (dictMonad) {
    return function (f) {
        return function (a) {
            var g = function (x) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
            };
            return unfold(dictMonad)(g)(a);
        };
    };
};
var repeat = function (dictMonad) {
    return iterate(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var head = function (dictMonad) {
    return function (l) {
        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
    };
};
var functorListT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
            };
            if (v instanceof Skip) {
                return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 280, column 5 - line 280, column 48): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    });
};
var fromEffect = function (dictApplicative) {
    return function (fa) {
        return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
            return nil(dictApplicative);
        })))(fa));
    };
};
var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return fromEffect(dictMonad.Applicative0());
});
var foldlRec$prime = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                a: b$prime,
                                b: v.value0.value1
                            }));
                        });
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 221, column 5 - line 221, column 45): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var runListTRec = function (dictMonadRec) {
    return foldlRec$prime(dictMonadRec)(function (v) {
        return function (v1) {
            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldlRec = function (dictMonadRec) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                            a: f(b)(v.value0.value0),
                            b: v.value0.value1
                        }));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 239, column 7 - line 239, column 47): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
    };
};
var foldl$prime = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 212, column 5 - line 212, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var runListT = function (dictMonad) {
    return foldl$prime(dictMonad)(function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
        };
    })(Data_Unit.unit);
};
var foldl = function (dictMonad) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(b);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return loop(f(b)(v.value0.value0))(v.value0.value1);
                    };
                    throw new Error("Failed pattern match at Control.Monad.List.Trans (line 229, column 5 - line 229, column 35): " + [ v.constructor.name ]);
                };
                return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
            };
        };
        return loop;
    };
};
var filter = function (dictFunctor) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                var $154 = f(v.value0);
                if ($154) {
                    return new Yield(v.value0, s$prime);
                };
                return new Skip(s$prime);
            };
            if (v instanceof Skip) {
                var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                return new Skip(s$prime);
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 176, column 3 - line 176, column 80): " + [ v.constructor.name ]);
        };
        return stepMap(dictFunctor)(g);
    };
};
var dropWhile = function (dictApplicative) {
    return function (f) {
        var g = function (v) {
            if (v instanceof Yield) {
                var $159 = f(v.value0);
                if ($159) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                };
                return new Yield(v.value0, v.value1);
            };
            if (v instanceof Skip) {
                return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
            };
            if (v instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match at Control.Monad.List.Trans (line 169, column 3 - line 169, column 70): " + [ v.constructor.name ]);
        };
        return stepMap((dictApplicative.Apply0()).Functor0())(g);
    };
};
var drop = function (dictApplicative) {
    return function (v) {
        return function (fa) {
            if (v === 0) {
                return fa;
            };
            var f = function (v1) {
                if (v1 instanceof Yield) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                };
                if (v1 instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                };
                if (v1 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 162, column 3 - line 162, column 44): " + [ v1.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
        };
    };
};
var cons = function (dictApplicative) {
    return function (lh) {
        return function (t) {
            return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
        };
    };
};
var unfoldable1ListT = function (dictMonad) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            var go = function (v) {
                if (v.value1 instanceof Data_Maybe.Nothing) {
                    return singleton(dictMonad.Applicative0())(v.value0);
                };
                if (v.value1 instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value1.value0));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 294, column 12 - line 296, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var unfoldableListT = function (dictMonad) {
    return new Data_Unfoldable.Unfoldable(function () {
        return unfoldable1ListT(dictMonad);
    }, function (f) {
        return function (b) {
            var go = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return nil(dictMonad.Applicative0());
                };
                if (v instanceof Data_Maybe.Just) {
                    return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                        return go(f(v.value0.value1));
                    }));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 287, column 12 - line 289, column 67): " + [ v.constructor.name ]);
            };
            return go(f(b));
        };
    });
};
var semigroupListT = function (dictApplicative) {
    return new Data_Semigroup.Semigroup(concat(dictApplicative));
};
var concat = function (dictApplicative) {
    return function (x) {
        return function (y) {
            var f = function (v) {
                if (v instanceof Yield) {
                    return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 106, column 3 - line 106, column 43): " + [ v.constructor.name ]);
            };
            return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
        };
    };
};
var monoidListT = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupListT(dictApplicative);
    }, nil(dictApplicative));
};
var catMaybes = function (dictFunctor) {
    return mapMaybe(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};
var monadListT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return bindListT(dictMonad);
    });
};
var bindListT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyListT(dictMonad);
    }, function (fa) {
        return function (f) {
            var g = function (v) {
                if (v instanceof Yield) {
                    var h = function (s$prime) {
                        return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                    };
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                };
                if (v instanceof Skip) {
                    return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                        return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                    })(v.value0));
                };
                if (v instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match at Control.Monad.List.Trans (line 306, column 5 - line 308, column 31): " + [ v.constructor.name ]);
            };
            return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
        };
    });
};
var applyListT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadListT(dictMonad)));
};
var applicativeListT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyListT(dictMonad);
    }, singleton(dictMonad.Applicative0()));
};
var monadEffectListT = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadListT(dictMonadEffect.Monad0());
    }, (function () {
        var $188 = Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEffect.Monad0());
        var $189 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($190) {
            return $188($189($190));
        };
    })());
};
var altListT = function (dictApplicative) {
    return new Control_Alt.Alt(function () {
        return functorListT((dictApplicative.Apply0()).Functor0());
    }, concat(dictApplicative));
};
var plusListT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altListT(dictMonad.Applicative0());
    }, nil(dictMonad.Applicative0()));
};
var alternativeListT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeListT(dictMonad);
    }, function () {
        return plusListT(dictMonad);
    });
};
var monadZeroListT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeListT(dictMonad);
    }, function () {
        return monadListT(dictMonad);
    });
};
var monadPlusListT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroListT(dictMonad);
    });
};
module.exports = {
    ListT: ListT,
    Yield: Yield,
    Skip: Skip,
    Done: Done,
    catMaybes: catMaybes,
    cons: cons,
    drop: drop,
    dropWhile: dropWhile,
    filter: filter,
    foldl: foldl,
    foldlRec: foldlRec,
    "foldl'": foldl$prime,
    "foldlRec'": foldlRec$prime,
    fromEffect: fromEffect,
    head: head,
    iterate: iterate,
    mapMaybe: mapMaybe,
    nil: nil,
    prepend: prepend,
    "prepend'": prepend$prime,
    repeat: repeat,
    runListT: runListT,
    runListTRec: runListTRec,
    scanl: scanl,
    singleton: singleton,
    tail: tail,
    take: take,
    takeWhile: takeWhile,
    uncons: uncons,
    unfold: unfold,
    wrapEffect: wrapEffect,
    wrapLazy: wrapLazy,
    zipWith: zipWith,
    "zipWith'": zipWith$prime,
    newtypeListT: newtypeListT,
    semigroupListT: semigroupListT,
    monoidListT: monoidListT,
    functorListT: functorListT,
    unfoldableListT: unfoldableListT,
    unfoldable1ListT: unfoldable1ListT,
    applyListT: applyListT,
    applicativeListT: applicativeListT,
    bindListT: bindListT,
    monadListT: monadListT,
    monadTransListT: monadTransListT,
    altListT: altListT,
    plusListT: plusListT,
    alternativeListT: alternativeListT,
    monadZeroListT: monadZeroListT,
    monadPlusListT: monadPlusListT,
    monadEffectListT: monadEffectListT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Lazy/index.js":156,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299}],46:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var MaybeT = function (x) {
    return x;
};
var runMaybeT = function (v) {
    return v;
};
var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
    return n;
}, MaybeT);
var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    var $75 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
    return function ($76) {
        return MaybeT($75($76));
    };
});
var mapMaybeT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorMaybeT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
        };
    });
};
var monadMaybeT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return bindMaybeT(dictMonad);
    });
};
var bindMaybeT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyMaybeT(dictMonad);
    }, function (v) {
        return function (f) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                };
                if (v1 instanceof Data_Maybe.Just) {
                    var v2 = f(v1.value0);
                    return v2;
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [ v1.constructor.name ]);
            });
        };
    });
};
var applyMaybeT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadMaybeT(dictMonad)));
};
var applicativeMaybeT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyMaybeT(dictMonad);
    }, (function () {
        var $77 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($78) {
            return MaybeT($77(Data_Maybe.Just.create($78)));
        };
    })());
};
var monadAskMaybeT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadMaybeT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderMaybeT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskMaybeT(dictMonadReader.MonadAsk0());
    }, function (f) {
        return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadContMaybeT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadMaybeT(dictMonadCont.Monad0());
    }, function (f) {
        return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
            var v = f(function (a) {
                return MaybeT(c(new Data_Maybe.Just(a)));
            });
            return v;
        }));
    });
};
var monadEffectMaybe = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadMaybeT(dictMonadEffect.Monad0());
    }, (function () {
        var $79 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
        var $80 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($81) {
            return $79($80($81));
        };
    })());
};
var monadRecMaybeT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadMaybeT(dictMonadRec.Monad0());
    }, function (f) {
        var $82 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
            var v = f(a);
            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v)(function (m$prime) {
                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                    if (m$prime instanceof Data_Maybe.Nothing) {
                        return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                    };
                    if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                        return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                    };
                    if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                        return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                    };
                    throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 84, column 16 - line 87, column 43): " + [ m$prime.constructor.name ]);
                })());
            });
        });
        return function ($83) {
            return MaybeT($82($83));
        };
    });
};
var monadStateMaybeT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadMaybeT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadTellMaybeT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadMaybeT(dictMonadTell.Monad0());
    }, (function () {
        var $84 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0());
        var $85 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($86) {
            return $84($85($86));
        };
    })());
};
var monadWriterMaybeT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellMaybeT(dictMonadWriter.MonadTell0());
    }, mapMaybeT(function (m) {
        return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
        });
    }), mapMaybeT(function (m) {
        return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
            return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                };
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 121, column 10 - line 123, column 43): " + [ v.constructor.name ]);
            })());
        }));
    }));
};
var monadThrowMaybeT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadMaybeT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorMaybeT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowMaybeT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                var v1 = h(a);
                return v1;
            }));
        };
    });
};
var altMaybeT = function (dictMonad) {
    return new Control_Alt.Alt(function () {
        return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                if (v2 instanceof Data_Maybe.Nothing) {
                    return v1;
                };
                return Control_Applicative.pure(dictMonad.Applicative0())(v2);
            });
        };
    });
};
var plusMaybeT = function (dictMonad) {
    return new Control_Plus.Plus(function () {
        return altMaybeT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
};
var alternativeMaybeT = function (dictMonad) {
    return new Control_Alternative.Alternative(function () {
        return applicativeMaybeT(dictMonad);
    }, function () {
        return plusMaybeT(dictMonad);
    });
};
var monadZeroMaybeT = function (dictMonad) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeMaybeT(dictMonad);
    }, function () {
        return monadMaybeT(dictMonad);
    });
};
var monadPlusMaybeT = function (dictMonad) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroMaybeT(dictMonad);
    });
};
module.exports = {
    MaybeT: MaybeT,
    runMaybeT: runMaybeT,
    mapMaybeT: mapMaybeT,
    newtypeMaybeT: newtypeMaybeT,
    functorMaybeT: functorMaybeT,
    applyMaybeT: applyMaybeT,
    applicativeMaybeT: applicativeMaybeT,
    bindMaybeT: bindMaybeT,
    monadMaybeT: monadMaybeT,
    monadTransMaybeT: monadTransMaybeT,
    altMaybeT: altMaybeT,
    plusMaybeT: plusMaybeT,
    alternativeMaybeT: alternativeMaybeT,
    monadPlusMaybeT: monadPlusMaybeT,
    monadZeroMaybeT: monadZeroMaybeT,
    monadRecMaybeT: monadRecMaybeT,
    monadEffectMaybe: monadEffectMaybe,
    monadContMaybeT: monadContMaybeT,
    monadThrowMaybeT: monadThrowMaybeT,
    monadErrorMaybeT: monadErrorMaybeT,
    monadAskMaybeT: monadAskMaybeT,
    monadReaderMaybeT: monadReaderMaybeT,
    monadStateMaybeT: monadStateMaybeT,
    monadTellMaybeT: monadTellMaybeT,
    monadWriterMaybeT: monadWriterMaybeT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251,"../Effect.Class/index.js":299}],47:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var RWSResult = (function () {
    function RWSResult(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    RWSResult.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new RWSResult(value0, value1, value2);
            };
        };
    };
    return RWSResult;
})();
var RWST = function (x) {
    return x;
};
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(m)(f(r)(s));
            };
        };
    };
};
var runRWST = function (v) {
    return v;
};
var newtypeRWST = new Data_Newtype.Newtype(function (n) {
    return n;
}, RWST);
var monadTransRWST = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return function (v) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    });
                };
            };
        };
    });
};
var mapRWST = function (f) {
    return function (v) {
        return function (r) {
            return function (s) {
                return f(v(r)(s));
            };
        };
    };
};
var lazyRWST = new Control_Lazy.Lazy(function (f) {
    return function (r) {
        return function (s) {
            var v = f(Data_Unit.unit);
            return v(r)(s);
        };
    };
});
var functorRWST = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (r) {
                return function (s) {
                    return Data_Functor.map(dictFunctor)(function (v1) {
                        return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                    })(v(r)(s));
                };
            };
        };
    });
};
var execRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                });
            };
        };
    };
};
var evalRWST = function (dictMonad) {
    return function (v) {
        return function (r) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                });
            };
        };
    };
};
var applyRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Apply.Apply(function () {
            return functorRWST((dictBind.Apply0()).Functor0());
        }, function (v) {
            return function (v1) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var bindRWST = function (dictBind) {
    return function (dictMonoid) {
        return new Control_Bind.Bind(function () {
            return applyRWST(dictBind)(dictMonoid);
        }, function (v) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                            var v2 = f(v1.value1);
                            return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                            });
                        });
                    };
                };
            };
        });
    };
};
var applicativeRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Applicative.Applicative(function () {
            return applyRWST(dictMonad.Bind1())(dictMonoid);
        }, function (a) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad.Monad(function () {
            return applicativeRWST(dictMonad)(dictMonoid);
        }, function () {
            return bindRWST(dictMonad.Bind1())(dictMonoid);
        });
    };
};
var monadAskRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (r) {
            return function (s) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
            };
        });
    };
};
var monadReaderRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return m(f(r))(s);
                    };
                };
            };
        });
    };
};
var monadEffectRWS = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadRWST(dictMonadEffect.Monad0())(dictMonoid);
        }, (function () {
            var $155 = Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEffect.Monad0());
            var $156 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($157) {
                return $155($156($157));
            };
        })());
    };
};
var monadRecRWST = function (dictMonadRec) {
    return function (dictMonoid) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadRWST(dictMonadRec.Monad0())(dictMonoid);
        }, function (k) {
            return function (a) {
                var k$prime = function (r) {
                    return function (v) {
                        var v1 = k(v.value1);
                        return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                    return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                    return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                };
                                throw new Error("Failed pattern match at Control.Monad.RWS.Trans (line 127, column 16 - line 129, column 68): " + [ v2.value1.constructor.name ]);
                            })());
                        });
                    };
                };
                return function (r) {
                    return function (s) {
                        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                    };
                };
            };
        });
    };
};
var monadStateRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (f) {
            return function (v) {
                return function (s) {
                    var v1 = f(s);
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                };
            };
        });
    };
};
var monadTellRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadRWST(dictMonad)(dictMonoid);
        }, function (w) {
            return function (v) {
                return function (s) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                };
            };
        });
    };
};
var monadWriterRWST = function (dictMonad) {
    return function (dictMonoid) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellRWST(dictMonad)(dictMonoid);
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                    });
                };
            };
        }, function (m) {
            return function (r) {
                return function (s) {
                    return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                    });
                };
            };
        });
    };
};
var monadThrowRWST = function (dictMonadThrow) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorRWST = function (dictMonadError) {
    return function (dictMonoid) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
        }, function (m) {
            return function (h) {
                return RWST(function (r) {
                    return function (s) {
                        return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                            var v = h(e);
                            return v(r)(s);
                        });
                    };
                });
            };
        });
    };
};
var altRWST = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorRWST(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return RWST(function (r) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                };
            });
        };
    });
};
var plusRWST = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altRWST(dictPlus.Alt0());
    }, function (v) {
        return function (v1) {
            return Control_Plus.empty(dictPlus);
        };
    });
};
var alternativeRWST = function (dictMonoid) {
    return function (dictAlternative) {
        return function (dictMonad) {
            return new Control_Alternative.Alternative(function () {
                return applicativeRWST(dictMonad)(dictMonoid);
            }, function () {
                return plusRWST(dictAlternative.Plus1());
            });
        };
    };
};
module.exports = {
    RWSResult: RWSResult,
    RWST: RWST,
    runRWST: runRWST,
    evalRWST: evalRWST,
    execRWST: execRWST,
    mapRWST: mapRWST,
    withRWST: withRWST,
    newtypeRWST: newtypeRWST,
    functorRWST: functorRWST,
    applyRWST: applyRWST,
    altRWST: altRWST,
    alternativeRWST: alternativeRWST,
    bindRWST: bindRWST,
    applicativeRWST: applicativeRWST,
    monadRWST: monadRWST,
    monadTransRWST: monadTransRWST,
    lazyRWST: lazyRWST,
    monadEffectRWS: monadEffectRWS,
    monadAskRWST: monadAskRWST,
    monadReaderRWST: monadReaderRWST,
    monadStateRWST: monadStateRWST,
    monadTellRWST: monadTellRWST,
    monadWriterRWST: monadWriterRWST,
    monadThrowRWST: monadThrowRWST,
    monadErrorRWST: monadErrorRWST,
    monadRecRWST: monadRecRWST,
    plusRWST: plusRWST
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Lazy/index.js":34,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.Plus/index.js":65,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299}],48:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var MonadAsk = function (Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};
var MonadReader = function (MonadAsk0, local) {
    this.MonadAsk0 = MonadAsk0;
    this.local = local;
};
var monadAskFun = new MonadAsk(function () {
    return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
var local = function (dict) {
    return dict.local;
};
var ask = function (dict) {
    return dict.ask;
};
var asks = function (dictMonadAsk) {
    return function (f) {
        return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    ask: ask,
    local: local,
    MonadAsk: MonadAsk,
    asks: asks,
    MonadReader: MonadReader,
    monadAskFun: monadAskFun,
    monadReaderFun: monadReaderFun
};

},{"../Control.Category/index.js":24,"../Control.Monad/index.js":60,"../Control.Semigroupoid/index.js":68,"../Data.Functor/index.js":143}],49:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ReaderT = function (x) {
    return x;
};
var withReaderT = function (f) {
    return function (v) {
        return function ($66) {
            return v(f($66));
        };
    };
};
var runReaderT = function (v) {
    return v;
};
var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
    return n;
}, ReaderT);
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($67) {
        return ReaderT(Data_Function["const"]($67));
    };
});
var mapReaderT = function (f) {
    return function (v) {
        return function ($68) {
            return f(v($68));
        };
    };
};
var functorReaderT = function (dictFunctor) {
    return new Data_Functor.Functor((function () {
        var $69 = Data_Functor.map(dictFunctor);
        return function ($70) {
            return mapReaderT($69($70));
        };
    })());
};
var distributiveReaderT = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorReaderT(dictDistributive.Functor0());
    }, function (dictFunctor) {
        return function (f) {
            var $71 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
            var $72 = Data_Functor.map(dictFunctor)(f);
            return function ($73) {
                return $71($72($73));
            };
        };
    }, function (dictFunctor) {
        return function (a) {
            return function (e) {
                return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                    return r(e);
                })(a);
            };
        };
    });
};
var applyReaderT = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorReaderT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Apply.apply(dictApply)(v(r))(v1(r));
            };
        };
    });
};
var bindReaderT = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyReaderT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (r) {
                return Control_Bind.bind(dictBind)(v(r))(function (a) {
                    var v1 = k(a);
                    return v1(r);
                });
            };
        };
    });
};
var semigroupReaderT = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup)));
    };
};
var applicativeReaderT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyReaderT(dictApplicative.Apply0());
    }, (function () {
        var $74 = Control_Applicative.pure(dictApplicative);
        return function ($75) {
            return ReaderT(Data_Function["const"]($74($75)));
        };
    })());
};
var monadReaderT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeReaderT(dictMonad.Applicative0());
    }, function () {
        return bindReaderT(dictMonad.Bind1());
    });
};
var monadAskReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadReaderT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var monadReaderReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskReaderT(dictMonad);
    }, withReaderT);
};
var monadContReaderT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadReaderT(dictMonadCont.Monad0());
    }, function (f) {
        return function (r) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function ($76) {
                    return ReaderT(Data_Function["const"](c($76)));
                });
                return v(r);
            });
        };
    });
};
var monadEffectReader = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadReaderT(dictMonadEffect.Monad0());
    }, (function () {
        var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
        var $78 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($79) {
            return $77($78($79));
        };
    })());
};
var monadRecReaderT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadReaderT(dictMonadRec.Monad0());
    }, function (k) {
        return function (a) {
            var k$prime = function (r) {
                return function (a$prime) {
                    var v = k(a$prime);
                    return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                };
            };
            return function (r) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
            };
        };
    });
};
var monadStateReaderT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadReaderT(dictMonadState.Monad0());
    }, (function () {
        var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
        var $81 = Control_Monad_State_Class.state(dictMonadState);
        return function ($82) {
            return $80($81($82));
        };
    })());
};
var monadTellReaderT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadReaderT(dictMonadTell.Monad0());
    }, (function () {
        var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0());
        var $84 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($85) {
            return $83($84($85));
        };
    })());
};
var monadWriterReaderT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellReaderT(dictMonadWriter.MonadTell0());
    }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
};
var monadThrowReaderT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadReaderT(dictMonadThrow.Monad0());
    }, (function () {
        var $86 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
        var $87 = Control_Monad_Error_Class.throwError(dictMonadThrow);
        return function ($88) {
            return $86($87($88));
        };
    })());
};
var monadErrorReaderT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowReaderT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (r) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                    var v1 = h(e);
                    return v1(r);
                });
            };
        };
    });
};
var monoidReaderT = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)));
    };
};
var altReaderT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorReaderT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Alt.alt(dictAlt)(v(r))(v1(r));
            };
        };
    });
};
var plusReaderT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altReaderT(dictPlus.Alt0());
    }, Data_Function["const"](Control_Plus.empty(dictPlus)));
};
var alternativeReaderT = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeReaderT(dictAlternative.Applicative0());
    }, function () {
        return plusReaderT(dictAlternative.Plus1());
    });
};
var monadZeroReaderT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeReaderT(dictMonadZero.Alternative1());
    }, function () {
        return monadReaderT(dictMonadZero.Monad0());
    });
};
var monadPlusReaderT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroReaderT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    ReaderT: ReaderT,
    runReaderT: runReaderT,
    withReaderT: withReaderT,
    mapReaderT: mapReaderT,
    newtypeReaderT: newtypeReaderT,
    functorReaderT: functorReaderT,
    applyReaderT: applyReaderT,
    applicativeReaderT: applicativeReaderT,
    altReaderT: altReaderT,
    plusReaderT: plusReaderT,
    alternativeReaderT: alternativeReaderT,
    bindReaderT: bindReaderT,
    monadReaderT: monadReaderT,
    monadZeroReaderT: monadZeroReaderT,
    semigroupReaderT: semigroupReaderT,
    monoidReaderT: monoidReaderT,
    monadPlusReaderT: monadPlusReaderT,
    monadTransReaderT: monadTransReaderT,
    monadEffectReader: monadEffectReader,
    monadContReaderT: monadContReaderT,
    monadThrowReaderT: monadThrowReaderT,
    monadErrorReaderT: monadErrorReaderT,
    monadAskReaderT: monadAskReaderT,
    monadReaderReaderT: monadReaderReaderT,
    monadStateReaderT: monadStateReaderT,
    monadTellReaderT: monadTellReaderT,
    monadWriterReaderT: monadWriterReaderT,
    distributiveReaderT: distributiveReaderT,
    monadRecReaderT: monadRecReaderT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Distributive/index.js":117,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Effect.Class/index.js":299}],50:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Loop = (function () {
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    return Loop;
})();
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var MonadRec = function (Monad0, tailRecM) {
    this.Monad0 = Monad0;
    this.tailRecM = tailRecM;
};
var tailRecM = function (dict) {
    return dict.tailRecM;
};
var tailRecM2 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return tailRecM(dictMonadRec)(function (o) {
                    return f(o.a)(o.b);
                })({
                    a: a,
                    b: b
                });
            };
        };
    };
};
var tailRecM3 = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return tailRecM(dictMonadRec)(function (o) {
                        return f(o.a)(o.b)(o.c);
                    })({
                        a: a,
                        b: b,
                        c: c
                    });
                };
            };
        };
    };
};
var tailRec = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Loop) {
                $copy_v = f(v.value0);
                return;
            };
            if (v instanceof Done) {
                $tco_done = true;
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 91, column 3 - line 91, column 25): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($53) {
        return go(f($53));
    };
};
var monadRecMaybe = new MonadRec(function () {
    return Data_Maybe.monadMaybe;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return new Done(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                return new Done(new Data_Maybe.Just(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 127, column 7 - line 127, column 31): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecIdentity = new MonadRec(function () {
    return Data_Identity.monadIdentity;
}, function (f) {
    var runIdentity = function (v) {
        return v;
    };
    var $54 = tailRec(function ($56) {
        return runIdentity(f($56));
    });
    return function ($55) {
        return Data_Identity.Identity($54($55));
    };
});
var monadRecFunction = new MonadRec(function () {
    return Control_Monad.monadFn;
}, function (f) {
    return function (a0) {
        return function (e) {
            return tailRec(function (a) {
                return f(a)(e);
            })(a0);
        };
    };
});
var monadRecEither = new MonadRec(function () {
    return Data_Either.monadEither;
}, function (f) {
    return function (a0) {
        var g = function (v) {
            if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
            };
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 119, column 7 - line 119, column 33): " + [ v.constructor.name ]);
        };
        return tailRec(g)(f(a0));
    };
});
var monadRecEffect = new MonadRec(function () {
    return Effect.monadEffect;
}, function (f) {
    return function (a) {
        var fromDone = function (v) {
            if (v instanceof Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 111, column 30 - line 111, column 44): " + [ v.constructor.name ]);
        };
        return function __do() {
            var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
            (function () {
                while (!(function __do() {
                    var v1 = Effect_Ref.read(v)();
                    if (v1 instanceof Loop) {
                        var v2 = f(v1.value0)();
                        var v3 = Effect_Ref.write(v2)(v)();
                        return false;
                    };
                    if (v1 instanceof Done) {
                        return true;
                    };
                    throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 102, column 22 - line 107, column 28): " + [ v1.constructor.name ]);
                })()) {

                };
                return {};
            })();
            return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
        };
    };
});
var functorStep = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Loop) {
            return new Loop(m.value0);
        };
        if (m instanceof Done) {
            return new Done(f(m.value0));
        };
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 25, column 1 - line 25, column 48): " + [ m.constructor.name ]);
    };
});
var forever = function (dictMonadRec) {
    return function (ma) {
        return tailRecM(dictMonadRec)(function (u) {
            return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
    };
};
var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
            };
            if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 29, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
module.exports = {
    Loop: Loop,
    Done: Done,
    MonadRec: MonadRec,
    tailRec: tailRec,
    tailRecM: tailRecM,
    tailRecM2: tailRecM2,
    tailRecM3: tailRecM3,
    forever: forever,
    functorStep: functorStep,
    bifunctorStep: bifunctorStep,
    monadRecIdentity: monadRecIdentity,
    monadRecEffect: monadRecEffect,
    monadRecFunction: monadRecFunction,
    monadRecEither: monadRecEither,
    monadRecMaybe: monadRecMaybe
};

},{"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257,"../Effect.Ref/index.js":305,"../Effect/index.js":309}],51:[function(require,module,exports){
"use strict";

exports.map_ = function (f) {
  return function (a) {
    return function () {
      return f(a());
    };
  };
};

exports.pure_ = function (a) {
  return function () {
    return a;
  };
};

exports.bind_ = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.run = function (f) {
  return f();
};

exports["while"] = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
    };
  };
};

exports["for"] = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreach = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (a) {
  return function (ref) {
    return function () {
      return ref.value = a; // eslint-disable-line no-return-assign
    };
  };
};

},{}],52:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var functorST = new Data_Functor.Functor($foreign.map_);
var monadST = new Control_Monad.Monad(function () {
    return applicativeST;
}, function () {
    return bindST;
});
var bindST = new Control_Bind.Bind(function () {
    return applyST;
}, $foreign.bind_);
var applyST = new Control_Apply.Apply(function () {
    return functorST;
}, Control_Monad.ap(monadST));
var applicativeST = new Control_Applicative.Applicative(function () {
    return applyST;
}, $foreign.pure_);
var monadRecST = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadST;
}, function (f) {
    return function (a) {
        var isLooping = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return true;
            };
            return false;
        };
        var fromDone = function (v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 54, column 32 - line 54, column 46): " + [ v.constructor.name ]);
        };
        return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (v) {
            return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(v)))(Control_Bind.bind(bindST)($foreign.read(v))(function (v1) {
                if (v1 instanceof Control_Monad_Rec_Class.Loop) {
                    return Control_Bind.bind(bindST)(f(v1.value0))(function (v2) {
                        return Data_Functor["void"](functorST)($foreign.write(v2)(v));
                    });
                };
                if (v1 instanceof Control_Monad_Rec_Class.Done) {
                    return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                };
                throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 46, column 18 - line 50, column 28): " + [ v1.constructor.name ]);
            })))(function () {
                return Data_Functor.map(functorST)(fromDone)($foreign.read(v));
            });
        });
    };
});
module.exports = {
    modify: modify,
    functorST: functorST,
    applyST: applyST,
    applicativeST: applicativeST,
    bindST: bindST,
    monadST: monadST,
    monadRecST: monadRecST,
    map_: $foreign.map_,
    pure_: $foreign.pure_,
    bind_: $foreign.bind_,
    run: $foreign.run,
    "while": $foreign["while"],
    "for": $foreign["for"],
    foreach: $foreign.foreach,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad/index.js":60,"../Data.Functor/index.js":143,"../Data.Unit/index.js":257,"./foreign.js":51}],53:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadState = function (Monad0, state) {
    this.Monad0 = Monad0;
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};
var put = function (dictMonadState) {
    return function (s) {
        return state(dictMonadState)(function (v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
    };
};
var modify_ = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
    };
};
var modify = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            var s$prime = f(s);
            return new Data_Tuple.Tuple(s$prime, s$prime);
        });
    };
};
var gets = function (dictMonadState) {
    return function (f) {
        return state(dictMonadState)(function (s) {
            return new Data_Tuple.Tuple(f(s), s);
        });
    };
};
var get = function (dictMonadState) {
    return state(dictMonadState)(function (s) {
        return new Data_Tuple.Tuple(s, s);
    });
};
module.exports = {
    state: state,
    MonadState: MonadState,
    get: get,
    gets: gets,
    put: put,
    modify: modify,
    modify_: modify_
};

},{"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],54:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var StateT = function (x) {
    return x;
};
var withStateT = function (f) {
    return function (v) {
        return function ($107) {
            return v(f($107));
        };
    };
};
var runStateT = function (v) {
    return v;
};
var newtypeStateT = new Data_Newtype.Newtype(function (n) {
    return n;
}, StateT);
var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (s) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
            });
        };
    };
});
var mapStateT = function (f) {
    return function (v) {
        return function ($108) {
            return f(v($108));
        };
    };
};
var lazyStateT = new Control_Lazy.Lazy(function (f) {
    return function (s) {
        var v = f(Data_Unit.unit);
        return v(s);
    };
});
var functorStateT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return function (s) {
                return Data_Functor.map(dictFunctor)(function (v1) {
                    return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                })(v(s));
            };
        };
    });
};
var execStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
        };
    };
};
var evalStateT = function (dictFunctor) {
    return function (v) {
        return function (s) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
        };
    };
};
var monadStateT = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeStateT(dictMonad);
    }, function () {
        return bindStateT(dictMonad);
    });
};
var bindStateT = function (dictMonad) {
    return new Control_Bind.Bind(function () {
        return applyStateT(dictMonad);
    }, function (v) {
        return function (f) {
            return function (s) {
                return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                    var v3 = f(v1.value0);
                    return v3(v1.value1);
                });
            };
        };
    });
};
var applyStateT = function (dictMonad) {
    return new Control_Apply.Apply(function () {
        return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadStateT(dictMonad)));
};
var applicativeStateT = function (dictMonad) {
    return new Control_Applicative.Applicative(function () {
        return applyStateT(dictMonad);
    }, function (a) {
        return function (s) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
        };
    });
};
var monadAskStateT = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadStateT(dictMonadAsk.Monad0());
    }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
};
var monadReaderStateT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadAskStateT(dictMonadReader.MonadAsk0());
    }, (function () {
        var $109 = Control_Monad_Reader_Class.local(dictMonadReader);
        return function ($110) {
            return mapStateT($109($110));
        };
    })());
};
var monadContStateT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadStateT(dictMonadCont.Monad0());
    }, function (f) {
        return function (s) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return function (s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    };
                });
                return v(s);
            });
        };
    });
};
var monadEffectState = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadStateT(dictMonadEffect.Monad0());
    }, (function () {
        var $111 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
        var $112 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($113) {
            return $111($112($113));
        };
    })());
};
var monadRecStateT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadStateT(dictMonadRec.Monad0());
    }, function (f) {
        return function (a) {
            var f$prime = function (v) {
                var v1 = f(v.value0);
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(v.value1))(function (v2) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                            return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        };
                        if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                            return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, v2.value1));
                        };
                        throw new Error("Failed pattern match at Control.Monad.State.Trans (line 87, column 16 - line 89, column 40): " + [ v2.value0.constructor.name ]);
                    })());
                });
            };
            return function (s) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
            };
        };
    });
};
var monadStateStateT = function (dictMonad) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadStateT(dictMonad);
    }, function (f) {
        return StateT((function () {
            var $114 = Control_Applicative.pure(dictMonad.Applicative0());
            return function ($115) {
                return $114(f($115));
            };
        })());
    });
};
var monadTellStateT = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadStateT(dictMonadTell.Monad0());
    }, (function () {
        var $116 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0());
        var $117 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($118) {
            return $116($117($118));
        };
    })());
};
var monadWriterStateT = function (dictMonadWriter) {
    return new Control_Monad_Writer_Class.MonadWriter(function () {
        return monadTellStateT(dictMonadWriter.MonadTell0());
    }, function (m) {
        return function (s) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            });
        };
    }, function (m) {
        return function (s) {
            return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m(s))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
            }));
        };
    });
};
var monadThrowStateT = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadStateT(dictMonadThrow.Monad0());
    }, function (e) {
        return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
    });
};
var monadErrorStateT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadThrowStateT(dictMonadError.MonadThrow0());
    }, function (v) {
        return function (h) {
            return function (s) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                    var v1 = h(e);
                    return v1(s);
                });
            };
        };
    });
};
var altStateT = function (dictMonad) {
    return function (dictAlt) {
        return new Control_Alt.Alt(function () {
            return functorStateT(dictAlt.Functor0());
        }, function (v) {
            return function (v1) {
                return function (s) {
                    return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                };
            };
        });
    };
};
var plusStateT = function (dictMonad) {
    return function (dictPlus) {
        return new Control_Plus.Plus(function () {
            return altStateT(dictMonad)(dictPlus.Alt0());
        }, function (v) {
            return Control_Plus.empty(dictPlus);
        });
    };
};
var alternativeStateT = function (dictMonad) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeStateT(dictMonad);
        }, function () {
            return plusStateT(dictMonad)(dictAlternative.Plus1());
        });
    };
};
var monadZeroStateT = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
    }, function () {
        return monadStateT(dictMonadZero.Monad0());
    });
};
var monadPlusStateT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroStateT(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    StateT: StateT,
    runStateT: runStateT,
    evalStateT: evalStateT,
    execStateT: execStateT,
    mapStateT: mapStateT,
    withStateT: withStateT,
    newtypeStateT: newtypeStateT,
    functorStateT: functorStateT,
    applyStateT: applyStateT,
    applicativeStateT: applicativeStateT,
    altStateT: altStateT,
    plusStateT: plusStateT,
    alternativeStateT: alternativeStateT,
    bindStateT: bindStateT,
    monadStateT: monadStateT,
    monadRecStateT: monadRecStateT,
    monadZeroStateT: monadZeroStateT,
    monadPlusStateT: monadPlusStateT,
    monadTransStateT: monadTransStateT,
    lazyStateT: lazyStateT,
    monadEffectState: monadEffectState,
    monadContStateT: monadContStateT,
    monadThrowStateT: monadThrowStateT,
    monadErrorStateT: monadErrorStateT,
    monadAskStateT: monadAskStateT,
    monadReaderStateT: monadReaderStateT,
    monadStateStateT: monadStateStateT,
    monadTellStateT: monadTellStateT,
    monadWriterStateT: monadWriterStateT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Lazy/index.js":34,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299}],55:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var withState = Control_Monad_State_Trans.withStateT;
var runState = function (v) {
    var $16 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($17) {
        return $16(v($17));
    };
};
var mapState = function (f) {
    return Control_Monad_State_Trans.mapStateT((function () {
        var $18 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($19) {
            return Data_Identity.Identity(f($18($19)));
        };
    })());
};
var execState = function (v) {
    return function (s) {
        var v1 = v(s);
        return v1.value1;
    };
};
var evalState = function (v) {
    return function (s) {
        var v1 = v(s);
        return v1.value0;
    };
};
module.exports = {
    runState: runState,
    evalState: evalState,
    execState: execState,
    mapState: mapState,
    withState: withState
};

},{"../Control.Monad.State.Trans/index.js":54,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197}],56:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var MonadTrans = function (lift) {
    this.lift = lift;
};
var lift = function (dict) {
    return dict.lift;
};
module.exports = {
    lift: lift,
    MonadTrans: MonadTrans
};

},{}],57:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var MonadTell = function (Monad0, tell) {
    this.Monad0 = Monad0;
    this.tell = tell;
};
var MonadWriter = function (MonadTell0, listen, pass) {
    this.MonadTell0 = MonadTell0;
    this.listen = listen;
    this.pass = pass;
};
var tell = function (dict) {
    return dict.tell;
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};
var listens = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};
var censor = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v, f));
            }));
        };
    };
};
module.exports = {
    listen: listen,
    pass: pass,
    tell: tell,
    MonadTell: MonadTell,
    MonadWriter: MonadWriter,
    listens: listens,
    censor: censor
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Data.Tuple/index.js":251}],58:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var WriterT = function (x) {
    return x;
};
var runWriterT = function (v) {
    return v;
};
var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
    return n;
}, WriterT);
var monadTransWriterT = function (dictMonoid) {
    return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
            });
        };
    });
};
var mapWriterT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWriterT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
            return new Data_Tuple.Tuple(f(v.value0), v.value1);
        }));
    });
};
var execWriterT = function (dictFunctor) {
    return function (v) {
        return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
    };
};
var applyWriterT = function (dictSemigroup) {
    return function (dictApply) {
        return new Control_Apply.Apply(function () {
            return functorWriterT(dictApply.Functor0());
        }, function (v) {
            return function (v1) {
                var k = function (v3) {
                    return function (v4) {
                        return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                    };
                };
                return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
            };
        });
    };
};
var bindWriterT = function (dictSemigroup) {
    return function (dictBind) {
        return new Control_Bind.Bind(function () {
            return applyWriterT(dictSemigroup)(dictBind.Apply0());
        }, function (v) {
            return function (k) {
                return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                    var v2 = k(v1.value0);
                    return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                        return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                    })(v2);
                }));
            };
        });
    };
};
var applicativeWriterT = function (dictMonoid) {
    return function (dictApplicative) {
        return new Control_Applicative.Applicative(function () {
            return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
        }, function (a) {
            return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
        });
    };
};
var monadWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad.Monad(function () {
            return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
        }, function () {
            return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
        });
    };
};
var monadAskWriterT = function (dictMonoid) {
    return function (dictMonadAsk) {
        return new Control_Monad_Reader_Class.MonadAsk(function () {
            return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
        }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
    };
};
var monadReaderWriterT = function (dictMonoid) {
    return function (dictMonadReader) {
        return new Control_Monad_Reader_Class.MonadReader(function () {
            return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
        }, function (f) {
            return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
        });
    };
};
var monadContWriterT = function (dictMonoid) {
    return function (dictMonadCont) {
        return new Control_Monad_Cont_Class.MonadCont(function () {
            return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
        }, function (f) {
            return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                var v = f(function (a) {
                    return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                });
                return v;
            }));
        });
    };
};
var monadEffectWriter = function (dictMonoid) {
    return function (dictMonadEffect) {
        return new Effect_Class.MonadEffect(function () {
            return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
        }, (function () {
            var $123 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
            var $124 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($125) {
                return $123($124($125));
            };
        })());
    };
};
var monadRecWriterT = function (dictMonoid) {
    return function (dictMonadRec) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
        }, function (f) {
            return function (a) {
                var f$prime = function (v) {
                    var v1 = f(v.value0);
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1)(function (v2) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                            if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                            };
                            if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                                return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                            };
                            throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 83, column 16 - line 85, column 47): " + [ v2.value0.constructor.name ]);
                        })());
                    });
                };
                return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
            };
        });
    };
};
var monadStateWriterT = function (dictMonoid) {
    return function (dictMonadState) {
        return new Control_Monad_State_Class.MonadState(function () {
            return monadWriterT(dictMonoid)(dictMonadState.Monad0());
        }, function (f) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
        });
    };
};
var monadTellWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadTell(function () {
            return monadWriterT(dictMonoid)(dictMonad);
        }, (function () {
            var $126 = Control_Applicative.pure(dictMonad.Applicative0());
            var $127 = Data_Tuple.Tuple.create(Data_Unit.unit);
            return function ($128) {
                return WriterT($126($127($128)));
            };
        })());
    };
};
var monadWriterWriterT = function (dictMonoid) {
    return function (dictMonad) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadTellWriterT(dictMonoid)(dictMonad);
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
            });
        }, function (v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
            });
        });
    };
};
var monadThrowWriterT = function (dictMonoid) {
    return function (dictMonadThrow) {
        return new Control_Monad_Error_Class.MonadThrow(function () {
            return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
        }, function (e) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        });
    };
};
var monadErrorWriterT = function (dictMonoid) {
    return function (dictMonadError) {
        return new Control_Monad_Error_Class.MonadError(function () {
            return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
        }, function (v) {
            return function (h) {
                return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                    var v1 = h(e);
                    return v1;
                }));
            };
        });
    };
};
var altWriterT = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorWriterT(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var plusWriterT = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altWriterT(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var alternativeWriterT = function (dictMonoid) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
        }, function () {
            return plusWriterT(dictAlternative.Plus1());
        });
    };
};
var monadZeroWriterT = function (dictMonoid) {
    return function (dictMonadZero) {
        return new Control_MonadZero.MonadZero(function () {
            return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
        }, function () {
            return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
        });
    };
};
var monadPlusWriterT = function (dictMonoid) {
    return function (dictMonadPlus) {
        return new Control_MonadPlus.MonadPlus(function () {
            return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
        });
    };
};
module.exports = {
    WriterT: WriterT,
    runWriterT: runWriterT,
    execWriterT: execWriterT,
    mapWriterT: mapWriterT,
    newtypeWriterT: newtypeWriterT,
    functorWriterT: functorWriterT,
    applyWriterT: applyWriterT,
    applicativeWriterT: applicativeWriterT,
    altWriterT: altWriterT,
    plusWriterT: plusWriterT,
    alternativeWriterT: alternativeWriterT,
    bindWriterT: bindWriterT,
    monadWriterT: monadWriterT,
    monadRecWriterT: monadRecWriterT,
    monadZeroWriterT: monadZeroWriterT,
    monadPlusWriterT: monadPlusWriterT,
    monadTransWriterT: monadTransWriterT,
    monadEffectWriter: monadEffectWriter,
    monadContWriterT: monadContWriterT,
    monadThrowWriterT: monadThrowWriterT,
    monadErrorWriterT: monadErrorWriterT,
    monadAskWriterT: monadAskWriterT,
    monadReaderWriterT: monadReaderWriterT,
    monadStateWriterT: monadStateWriterT,
    monadTellWriterT: monadTellWriterT,
    monadWriterWriterT: monadWriterWriterT
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Cont.Class/index.js":35,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299}],59:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var writer = (function () {
    var $0 = Control_Applicative.pure(Data_Identity.applicativeIdentity);
    return function ($1) {
        return Control_Monad_Writer_Trans.WriterT($0($1));
    };
})();
var runWriter = (function () {
    var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($3) {
        return $2(Control_Monad_Writer_Trans.runWriterT($3));
    };
})();
var mapWriter = function (f) {
    return Control_Monad_Writer_Trans.mapWriterT((function () {
        var $4 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
        return function ($5) {
            return Data_Identity.Identity(f($4($5)));
        };
    })());
};
var execWriter = function (m) {
    return Data_Tuple.snd(runWriter(m));
};
module.exports = {
    writer: writer,
    runWriter: runWriter,
    execWriter: execWriter,
    mapWriter: mapWriter
};

},{"../Control.Applicative/index.js":17,"../Control.Monad.Writer.Trans/index.js":58,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251}],60:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Monad = function (Applicative0, Bind1) {
    this.Applicative0 = Applicative0;
    this.Bind1 = Bind1;
};
var whenM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var unlessM = function (dictMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
            });
        };
    };
};
var monadFn = new Monad(function () {
    return Control_Applicative.applicativeFn;
}, function () {
    return Control_Bind.bindFn;
});
var monadArray = new Monad(function () {
    return Control_Applicative.applicativeArray;
}, function () {
    return Control_Bind.bindArray;
});
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
            });
        };
    };
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                });
            });
        };
    };
};
module.exports = {
    Monad: Monad,
    liftM1: liftM1,
    ap: ap,
    whenM: whenM,
    unlessM: unlessM,
    monadFn: monadFn,
    monadArray: monadArray
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23}],61:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var MonadPlus = function (MonadZero0) {
    this.MonadZero0 = MonadZero0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_MonadZero.monadZeroArray;
});
module.exports = {
    MonadPlus: MonadPlus,
    monadPlusArray: monadPlusArray
};

},{"../Control.MonadZero/index.js":62}],62:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var MonadZero = function (Alternative1, Monad0) {
    this.Alternative1 = Alternative1;
    this.Monad0 = Monad0;
};
var monadZeroArray = new MonadZero(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Control_Monad.monadArray;
});
var guard = function (dictMonadZero) {
    return function (v) {
        if (v) {
            return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
        };
        throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadZero: MonadZero,
    guard: guard,
    monadZeroArray: monadZeroArray
};

},{"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Monad/index.js":60,"../Control.Plus/index.js":65,"../Data.Unit/index.js":257}],63:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var ParCont = function (x) {
    return x;
};
var Parallel = function (Applicative1, Monad0, parallel, sequential) {
    this.Applicative1 = Applicative1;
    this.Monad0 = Monad0;
    this.parallel = parallel;
    this.sequential = sequential;
};
var sequential = function (dict) {
    return dict.sequential;
};
var parallel = function (dict) {
    return dict.parallel;
};
var newtypeParCont = new Data_Newtype.Newtype(function (n) {
    return n;
}, ParCont);
var monadParWriterT = function (dictMonoid) {
    return function (dictParallel) {
        return new Parallel(function () {
            return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
        }, function () {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
        }, Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)), Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)));
    };
};
var monadParReaderT = function (dictParallel) {
    return new Parallel(function () {
        return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
    }, function () {
        return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
    }, Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)), Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)));
};
var monadParMaybeT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
    }, function () {
        return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParExceptT = function (dictParallel) {
    return new Parallel(function () {
        return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
    }, function () {
        return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
    }, function (v) {
        return parallel(dictParallel)(v);
    }, function (v) {
        return sequential(dictParallel)(v);
    });
};
var monadParParCont = function (dictMonadEffect) {
    return new Parallel(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
    }, ParCont, function (v) {
        return v;
    });
};
var functorParCont = function (dictMonadEffect) {
    return new Data_Functor.Functor(function (f) {
        var $54 = parallel(monadParParCont(dictMonadEffect));
        var $55 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(f);
        var $56 = sequential(monadParParCont(dictMonadEffect));
        return function ($57) {
            return $54($55($56($57)));
        };
    });
};
var applyParCont = function (dictMonadEffect) {
    return new Control_Apply.Apply(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v2) {
                    return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v3)))(function (v4) {
                                if (v4 instanceof Data_Maybe.Nothing) {
                                    return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(v2));
                                };
                                if (v4 instanceof Data_Maybe.Just) {
                                    return k(a(v4.value0));
                                };
                                throw new Error("Failed pattern match at Control.Parallel.Class (line 71, column 7 - line 73, column 26): " + [ v4.constructor.name ]);
                            });
                        }))(function () {
                            return Control_Monad_Cont_Trans.runContT(v1)(function (b) {
                                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v4) {
                                    if (v4 instanceof Data_Maybe.Nothing) {
                                        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(v3));
                                    };
                                    if (v4 instanceof Data_Maybe.Just) {
                                        return k(v4.value0(b));
                                    };
                                    throw new Error("Failed pattern match at Control.Parallel.Class (line 77, column 7 - line 79, column 26): " + [ v4.constructor.name ]);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var applicativeParCont = function (dictMonadEffect) {
    return new Control_Applicative.Applicative(function () {
        return applyParCont(dictMonadEffect);
    }, (function () {
        var $58 = parallel(monadParParCont(dictMonadEffect));
        var $59 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT((dictMonadEffect.Monad0()).Applicative0()));
        return function ($60) {
            return $58($59($60));
        };
    })());
};
var altParCont = function (dictMonadEffect) {
    return new Control_Alt.Alt(function () {
        return functorParCont(dictMonadEffect);
    }, function (v) {
        return function (v1) {
            return ParCont(function (k) {
                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function (v2) {
                    return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Cont_Trans.runContT(v)(function (a) {
                        return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                            if (v3) {
                                return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                            };
                            return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                return k(a);
                            });
                        });
                    }))(function () {
                        return Control_Monad_Cont_Trans.runContT(v1)(function (a) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(v2)))(function (v3) {
                                if (v3) {
                                    return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
                                };
                                return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(v2)))(function () {
                                    return k(a);
                                });
                            });
                        });
                    });
                });
            });
        };
    });
};
var plusParCont = function (dictMonadEffect) {
    return new Control_Plus.Plus(function () {
        return altParCont(dictMonadEffect);
    }, ParCont(function (v) {
        return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Unit.unit);
    }));
};
var alternativeParCont = function (dictMonadEffect) {
    return new Control_Alternative.Alternative(function () {
        return applicativeParCont(dictMonadEffect);
    }, function () {
        return plusParCont(dictMonadEffect);
    });
};
module.exports = {
    parallel: parallel,
    sequential: sequential,
    Parallel: Parallel,
    ParCont: ParCont,
    monadParExceptT: monadParExceptT,
    monadParReaderT: monadParReaderT,
    monadParWriterT: monadParWriterT,
    monadParMaybeT: monadParMaybeT,
    newtypeParCont: newtypeParCont,
    functorParCont: functorParCont,
    applyParCont: applyParCont,
    applicativeParCont: applicativeParCont,
    altParCont: altParCont,
    plusParCont: plusParCont,
    alternativeParCont: alternativeParCont,
    monadParParCont: monadParParCont
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Cont.Trans/index.js":36,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Maybe.Trans/index.js":46,"../Control.Monad.Reader.Trans/index.js":49,"../Control.Monad.Writer.Trans/index.js":58,"../Control.Plus/index.js":65,"../Data.Either/index.js":119,"../Data.Functor.Compose/index.js":134,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299,"../Effect.Ref/index.js":305}],64:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var parTraverse_ = function (dictParallel) {
    return function (dictFoldable) {
        return function (f) {
            var $17 = Control_Parallel_Class.sequential(dictParallel);
            var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                var $20 = Control_Parallel_Class.parallel(dictParallel);
                return function ($21) {
                    return $20(f($21));
                };
            })());
            return function ($19) {
                return $17($18($19));
            };
        };
    };
};
var parTraverse = function (dictParallel) {
    return function (dictTraversable) {
        return function (f) {
            var $22 = Control_Parallel_Class.sequential(dictParallel);
            var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())((function () {
                var $25 = Control_Parallel_Class.parallel(dictParallel);
                return function ($26) {
                    return $25(f($26));
                };
            })());
            return function ($24) {
                return $22($23($24));
            };
        };
    };
};
var parSequence_ = function (dictParallel) {
    return function (dictFoldable) {
        return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parSequence = function (dictParallel) {
    return function (dictTraversable) {
        return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var parOneOfMap = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                return function (f) {
                    var $27 = Control_Parallel_Class.sequential(dictParallel);
                    var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())((function () {
                        var $30 = Control_Parallel_Class.parallel(dictParallel);
                        return function ($31) {
                            return $30(f($31));
                        };
                    })());
                    return function ($29) {
                        return $27($28($29));
                    };
                };
            };
        };
    };
};
var parOneOf = function (dictParallel) {
    return function (dictAlternative) {
        return function (dictFoldable) {
            return function (dictFunctor) {
                var $32 = Control_Parallel_Class.sequential(dictParallel);
                var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
                return function ($34) {
                    return $32($33($34));
                };
            };
        };
    };
};
var parApply = function (dictParallel) {
    return function (mf) {
        return function (ma) {
            return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
        };
    };
};
module.exports = {
    parApply: parApply,
    parTraverse: parTraverse,
    parTraverse_: parTraverse_,
    parSequence: parSequence,
    parSequence_: parSequence_,
    parOneOf: parOneOf,
    parOneOfMap: parOneOfMap
};

},{"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Control.Parallel.Class/index.js":63,"../Data.Foldable/index.js":128,"../Data.Traversable/index.js":248}],65:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Plus = function (Alt0, empty) {
    this.Alt0 = Alt0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus,
    empty: empty,
    plusArray: plusArray
};

},{"../Control.Alt/index.js":14}],66:[function(require,module,exports){
// module Control.Promise

exports.promise = function (f) {
  return function () {
    return new Promise(function (success, error) {
      var succF = function (s) { return function() { return success(s); } };
      var failF = function (s) { return function() { return error(s); } };

      // This indicates the aff was wrong?
      try { f(succF)(failF)(); }
      catch (e) {
        error(e);
      }
    });
  };
};

exports.thenImpl = function(promise) {
  return function(errCB) {
    return function(succCB) {
      return function() {
        promise.then(succCB, errCB);
      };
    };
  };
};

},{}],67:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Foreign = require("../Foreign/index.js");
var toAff$prime = function (customCoerce) {
    return function (p) {
        return Effect_Aff.makeAff(function (cb) {
            return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                return cb(Data_Either.Left.create(customCoerce($1)))();
            })(function ($2) {
                return cb(Data_Either.Right.create($2))();
            }));
        });
    };
};
var fromAff = function (aff) {
    return $foreign.promise(function (succ) {
        return function (err) {
            return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
        };
    });
};
var coerce = function (fn) {
    return Data_Either.either(function (v) {
        return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
    })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(fn)))));
};
var toAff = toAff$prime(coerce);
var toAffE = function (f) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
};
module.exports = {
    fromAff: fromAff,
    toAff: toAff,
    "toAff'": toAff$prime,
    toAffE: toAffE
};

},{"../Control.Alt/index.js":14,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Except/index.js":39,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.List.Types/index.js":182,"../Data.Monoid/index.js":195,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect/index.js":309,"../Foreign/index.js":317,"./foreign.js":66}],68:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var compose = function (dict) {
    return dict.compose;
};
var composeFlipped = function (dictSemigroupoid) {
    return function (f) {
        return function (g) {
            return compose(dictSemigroupoid)(g)(f);
        };
    };
};
module.exports = {
    compose: compose,
    Semigroupoid: Semigroupoid,
    composeFlipped: composeFlipped,
    semigroupoidFn: semigroupoidFn
};

},{}],69:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var ButtonButton = (function () {
    function ButtonButton() {

    };
    ButtonButton.value = new ButtonButton();
    return ButtonButton;
})();
var ButtonSubmit = (function () {
    function ButtonSubmit() {

    };
    ButtonSubmit.value = new ButtonSubmit();
    return ButtonSubmit;
})();
var ButtonReset = (function () {
    function ButtonReset() {

    };
    ButtonReset.value = new ButtonReset();
    return ButtonReset;
})();
var renderButtonType = function (v) {
    if (v instanceof ButtonButton) {
        return "button";
    };
    if (v instanceof ButtonSubmit) {
        return "submit";
    };
    if (v instanceof ButtonReset) {
        return "reset";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType (line 9, column 20 - line 12, column 25): " + [ v.constructor.name ]);
};
module.exports = {
    ButtonButton: ButtonButton,
    ButtonSubmit: ButtonSubmit,
    ButtonReset: ButtonReset,
    renderButtonType: renderButtonType
};

},{}],70:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Anonymous = (function () {
    function Anonymous() {

    };
    Anonymous.value = new Anonymous();
    return Anonymous;
})();
var UseCredentials = (function () {
    function UseCredentials() {

    };
    UseCredentials.value = new UseCredentials();
    return UseCredentials;
})();
var renderCrossOriginValue = function (v) {
    if (v instanceof Anonymous) {
        return "anonymous";
    };
    if (v instanceof UseCredentials) {
        return "use-credentials";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.CrossOriginValue (line 8, column 26 - line 10, column 38): " + [ v.constructor.name ]);
};
module.exports = {
    Anonymous: Anonymous,
    UseCredentials: UseCredentials,
    renderCrossOriginValue: renderCrossOriginValue
};

},{}],71:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var DirLTR = (function () {
    function DirLTR() {

    };
    DirLTR.value = new DirLTR();
    return DirLTR;
})();
var DirRTL = (function () {
    function DirRTL() {

    };
    DirRTL.value = new DirRTL();
    return DirRTL;
})();
var DirAuto = (function () {
    function DirAuto() {

    };
    DirAuto.value = new DirAuto();
    return DirAuto;
})();
var renderDirValue = function (v) {
    if (v instanceof DirLTR) {
        return "ltr";
    };
    if (v instanceof DirRTL) {
        return "rtl";
    };
    if (v instanceof DirAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.DirValue (line 9, column 18 - line 12, column 20): " + [ v.constructor.name ]);
};
module.exports = {
    DirLTR: DirLTR,
    DirRTL: DirRTL,
    DirAuto: DirAuto,
    renderDirValue: renderDirValue
};

},{}],72:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var renderFormMethod = function (v) {
    if (v instanceof POST) {
        return "post";
    };
    if (v instanceof GET) {
        return "get";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.FormMethod (line 8, column 20 - line 10, column 15): " + [ v.constructor.name ]);
};
module.exports = {
    POST: POST,
    GET: GET,
    renderFormMethod: renderFormMethod
};

},{}],73:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var AcceptMediaType = (function () {
    function AcceptMediaType(value0) {
        this.value0 = value0;
    };
    AcceptMediaType.create = function (value0) {
        return new AcceptMediaType(value0);
    };
    return AcceptMediaType;
})();
var AcceptFileExtension = (function () {
    function AcceptFileExtension(value0) {
        this.value0 = value0;
    };
    AcceptFileExtension.create = function (value0) {
        return new AcceptFileExtension(value0);
    };
    return AcceptFileExtension;
})();
var InputAcceptType = function (x) {
    return x;
};
var semigroupInputAcceptType = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v1);
    };
});
var renderInputAcceptTypeAtom = function (v) {
    if (v instanceof AcceptMediaType) {
        return v.value0;
    };
    if (v instanceof AcceptFileExtension) {
        return v.value0;
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputAcceptType (line 28, column 29 - line 30, column 33): " + [ v.constructor.name ]);
};
var renderInputAcceptType = function (v) {
    return Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(renderInputAcceptTypeAtom)(v));
};
var mediaType = function (mt) {
    return [ new AcceptMediaType(mt) ];
};
var extension = function (ext) {
    return [ new AcceptFileExtension(ext) ];
};
module.exports = {
    InputAcceptType: InputAcceptType,
    mediaType: mediaType,
    extension: extension,
    AcceptMediaType: AcceptMediaType,
    AcceptFileExtension: AcceptFileExtension,
    renderInputAcceptType: renderInputAcceptType,
    renderInputAcceptTypeAtom: renderInputAcceptTypeAtom,
    semigroupInputAcceptType: semigroupInputAcceptType
};

},{"../Data.Functor/index.js":143,"../Data.Semigroup/index.js":221,"../Data.String.Common/index.js":232}],74:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var InputButton = (function () {
    function InputButton() {

    };
    InputButton.value = new InputButton();
    return InputButton;
})();
var InputCheckbox = (function () {
    function InputCheckbox() {

    };
    InputCheckbox.value = new InputCheckbox();
    return InputCheckbox;
})();
var InputColor = (function () {
    function InputColor() {

    };
    InputColor.value = new InputColor();
    return InputColor;
})();
var InputDate = (function () {
    function InputDate() {

    };
    InputDate.value = new InputDate();
    return InputDate;
})();
var InputDatetimeLocal = (function () {
    function InputDatetimeLocal() {

    };
    InputDatetimeLocal.value = new InputDatetimeLocal();
    return InputDatetimeLocal;
})();
var InputEmail = (function () {
    function InputEmail() {

    };
    InputEmail.value = new InputEmail();
    return InputEmail;
})();
var InputFile = (function () {
    function InputFile() {

    };
    InputFile.value = new InputFile();
    return InputFile;
})();
var InputHidden = (function () {
    function InputHidden() {

    };
    InputHidden.value = new InputHidden();
    return InputHidden;
})();
var InputImage = (function () {
    function InputImage() {

    };
    InputImage.value = new InputImage();
    return InputImage;
})();
var InputMonth = (function () {
    function InputMonth() {

    };
    InputMonth.value = new InputMonth();
    return InputMonth;
})();
var InputNumber = (function () {
    function InputNumber() {

    };
    InputNumber.value = new InputNumber();
    return InputNumber;
})();
var InputPassword = (function () {
    function InputPassword() {

    };
    InputPassword.value = new InputPassword();
    return InputPassword;
})();
var InputRadio = (function () {
    function InputRadio() {

    };
    InputRadio.value = new InputRadio();
    return InputRadio;
})();
var InputRange = (function () {
    function InputRange() {

    };
    InputRange.value = new InputRange();
    return InputRange;
})();
var InputReset = (function () {
    function InputReset() {

    };
    InputReset.value = new InputReset();
    return InputReset;
})();
var InputSearch = (function () {
    function InputSearch() {

    };
    InputSearch.value = new InputSearch();
    return InputSearch;
})();
var InputSubmit = (function () {
    function InputSubmit() {

    };
    InputSubmit.value = new InputSubmit();
    return InputSubmit;
})();
var InputTel = (function () {
    function InputTel() {

    };
    InputTel.value = new InputTel();
    return InputTel;
})();
var InputText = (function () {
    function InputText() {

    };
    InputText.value = new InputText();
    return InputText;
})();
var InputTime = (function () {
    function InputTime() {

    };
    InputTime.value = new InputTime();
    return InputTime;
})();
var InputUrl = (function () {
    function InputUrl() {

    };
    InputUrl.value = new InputUrl();
    return InputUrl;
})();
var InputWeek = (function () {
    function InputWeek() {

    };
    InputWeek.value = new InputWeek();
    return InputWeek;
})();
var renderInputType = function (v) {
    if (v instanceof InputButton) {
        return "button";
    };
    if (v instanceof InputCheckbox) {
        return "checkbox";
    };
    if (v instanceof InputColor) {
        return "color";
    };
    if (v instanceof InputDate) {
        return "date";
    };
    if (v instanceof InputDatetimeLocal) {
        return "datetime-local";
    };
    if (v instanceof InputEmail) {
        return "email";
    };
    if (v instanceof InputFile) {
        return "file";
    };
    if (v instanceof InputHidden) {
        return "hidden";
    };
    if (v instanceof InputImage) {
        return "image";
    };
    if (v instanceof InputMonth) {
        return "month";
    };
    if (v instanceof InputNumber) {
        return "number";
    };
    if (v instanceof InputPassword) {
        return "password";
    };
    if (v instanceof InputRadio) {
        return "radio";
    };
    if (v instanceof InputRange) {
        return "range";
    };
    if (v instanceof InputReset) {
        return "reset";
    };
    if (v instanceof InputSearch) {
        return "search";
    };
    if (v instanceof InputSubmit) {
        return "submit";
    };
    if (v instanceof InputTel) {
        return "tel";
    };
    if (v instanceof InputText) {
        return "text";
    };
    if (v instanceof InputTime) {
        return "time";
    };
    if (v instanceof InputUrl) {
        return "url";
    };
    if (v instanceof InputWeek) {
        return "week";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [ v.constructor.name ]);
};
module.exports = {
    InputButton: InputButton,
    InputCheckbox: InputCheckbox,
    InputColor: InputColor,
    InputDate: InputDate,
    InputDatetimeLocal: InputDatetimeLocal,
    InputEmail: InputEmail,
    InputFile: InputFile,
    InputHidden: InputHidden,
    InputImage: InputImage,
    InputMonth: InputMonth,
    InputNumber: InputNumber,
    InputPassword: InputPassword,
    InputRadio: InputRadio,
    InputRange: InputRange,
    InputReset: InputReset,
    InputSearch: InputSearch,
    InputSubmit: InputSubmit,
    InputTel: InputTel,
    InputText: InputText,
    InputTime: InputTime,
    InputUrl: InputUrl,
    InputWeek: InputWeek,
    renderInputType: renderInputType
};

},{}],75:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var KindSubtitles = (function () {
    function KindSubtitles() {

    };
    KindSubtitles.value = new KindSubtitles();
    return KindSubtitles;
})();
var KindCaptions = (function () {
    function KindCaptions() {

    };
    KindCaptions.value = new KindCaptions();
    return KindCaptions;
})();
var KindDescriptions = (function () {
    function KindDescriptions() {

    };
    KindDescriptions.value = new KindDescriptions();
    return KindDescriptions;
})();
var KindChapters = (function () {
    function KindChapters() {

    };
    KindChapters.value = new KindChapters();
    return KindChapters;
})();
var KindMetadata = (function () {
    function KindMetadata() {

    };
    KindMetadata.value = new KindMetadata();
    return KindMetadata;
})();
var renderKindValue = function (v) {
    if (v instanceof KindSubtitles) {
        return "subtitles";
    };
    if (v instanceof KindCaptions) {
        return "captions";
    };
    if (v instanceof KindDescriptions) {
        return "descriptions";
    };
    if (v instanceof KindChapters) {
        return "chapters";
    };
    if (v instanceof KindMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.KindValue (line 11, column 19 - line 16, column 29): " + [ v.constructor.name ]);
};
module.exports = {
    KindSubtitles: KindSubtitles,
    KindCaptions: KindCaptions,
    KindDescriptions: KindDescriptions,
    KindChapters: KindChapters,
    KindMetadata: KindMetadata,
    renderKindValue: renderKindValue
};

},{}],76:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var MenuList = (function () {
    function MenuList() {

    };
    MenuList.value = new MenuList();
    return MenuList;
})();
var MenuContext = (function () {
    function MenuContext() {

    };
    MenuContext.value = new MenuContext();
    return MenuContext;
})();
var MenuToolbar = (function () {
    function MenuToolbar() {

    };
    MenuToolbar.value = new MenuToolbar();
    return MenuToolbar;
})();
var renderMenuType = function (v) {
    if (v instanceof MenuList) {
        return "list";
    };
    if (v instanceof MenuContext) {
        return "context";
    };
    if (v instanceof MenuToolbar) {
        return "toolbar";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuType (line 9, column 18 - line 12, column 27): " + [ v.constructor.name ]);
};
module.exports = {
    MenuList: MenuList,
    MenuContext: MenuContext,
    MenuToolbar: MenuToolbar,
    renderMenuType: renderMenuType
};

},{}],77:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var MenuitemCommand = (function () {
    function MenuitemCommand() {

    };
    MenuitemCommand.value = new MenuitemCommand();
    return MenuitemCommand;
})();
var MenuitemCheckbox = (function () {
    function MenuitemCheckbox() {

    };
    MenuitemCheckbox.value = new MenuitemCheckbox();
    return MenuitemCheckbox;
})();
var MenuitemRadio = (function () {
    function MenuitemRadio() {

    };
    MenuitemRadio.value = new MenuitemRadio();
    return MenuitemRadio;
})();
var renderMenuitemType = function (v) {
    if (v instanceof MenuitemCommand) {
        return "command";
    };
    if (v instanceof MenuitemCheckbox) {
        return "checkbox";
    };
    if (v instanceof MenuitemRadio) {
        return "radio";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.MenuitemType (line 9, column 22 - line 12, column 27): " + [ v.constructor.name ]);
};
module.exports = {
    MenuitemCommand: MenuitemCommand,
    MenuitemCheckbox: MenuitemCheckbox,
    MenuitemRadio: MenuitemRadio,
    renderMenuitemType: renderMenuitemType
};

},{}],78:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var On = (function () {
    function On() {

    };
    On.value = new On();
    return On;
})();
var Off = (function () {
    function Off() {

    };
    Off.value = new Off();
    return Off;
})();
var renderOnOff = function (v) {
    if (v instanceof On) {
        return "on";
    };
    if (v instanceof Off) {
        return "off";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OnOff (line 8, column 15 - line 10, column 15): " + [ v.constructor.name ]);
};
module.exports = {
    On: On,
    Off: Off,
    renderOnOff: renderOnOff
};

},{}],79:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Uppercase = (function () {
    function Uppercase() {

    };
    Uppercase.value = new Uppercase();
    return Uppercase;
})();
var Lowercase = (function () {
    function Lowercase() {

    };
    Lowercase.value = new Lowercase();
    return Lowercase;
})();
var NumeralDecimal = (function () {
    function NumeralDecimal() {

    };
    NumeralDecimal.value = new NumeralDecimal();
    return NumeralDecimal;
})();
var NumeralRoman = (function () {
    function NumeralRoman(value0) {
        this.value0 = value0;
    };
    NumeralRoman.create = function (value0) {
        return new NumeralRoman(value0);
    };
    return NumeralRoman;
})();
var OrderedListNumeric = (function () {
    function OrderedListNumeric(value0) {
        this.value0 = value0;
    };
    OrderedListNumeric.create = function (value0) {
        return new OrderedListNumeric(value0);
    };
    return OrderedListNumeric;
})();
var OrderedListAlphabetic = (function () {
    function OrderedListAlphabetic(value0) {
        this.value0 = value0;
    };
    OrderedListAlphabetic.create = function (value0) {
        return new OrderedListAlphabetic(value0);
    };
    return OrderedListAlphabetic;
})();
var renderOrderedListType = function (v) {
    if (v instanceof OrderedListNumeric && v.value0 instanceof NumeralDecimal) {
        return "1";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Lowercase)) {
        return "i";
    };
    if (v instanceof OrderedListNumeric && (v.value0 instanceof NumeralRoman && v.value0.value0 instanceof Uppercase)) {
        return "I";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Lowercase) {
        return "a";
    };
    if (v instanceof OrderedListAlphabetic && v.value0 instanceof Uppercase) {
        return "A";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.OrderedListType (line 16, column 25 - line 21, column 41): " + [ v.constructor.name ]);
};
module.exports = {
    Uppercase: Uppercase,
    Lowercase: Lowercase,
    NumeralDecimal: NumeralDecimal,
    NumeralRoman: NumeralRoman,
    OrderedListNumeric: OrderedListNumeric,
    OrderedListAlphabetic: OrderedListAlphabetic,
    renderOrderedListType: renderOrderedListType
};

},{}],80:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var PreloadNone = (function () {
    function PreloadNone() {

    };
    PreloadNone.value = new PreloadNone();
    return PreloadNone;
})();
var PreloadAuto = (function () {
    function PreloadAuto() {

    };
    PreloadAuto.value = new PreloadAuto();
    return PreloadAuto;
})();
var PreloadMetadata = (function () {
    function PreloadMetadata() {

    };
    PreloadMetadata.value = new PreloadMetadata();
    return PreloadMetadata;
})();
var renderPreloadValue = function (v) {
    if (v instanceof PreloadNone) {
        return "none";
    };
    if (v instanceof PreloadAuto) {
        return "auto";
    };
    if (v instanceof PreloadMetadata) {
        return "metadata";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.PreloadValue (line 9, column 22 - line 12, column 32): " + [ v.constructor.name ]);
};
module.exports = {
    PreloadNone: PreloadNone,
    PreloadAuto: PreloadAuto,
    PreloadMetadata: PreloadMetadata,
    renderPreloadValue: renderPreloadValue
};

},{}],81:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var ScopeRow = (function () {
    function ScopeRow() {

    };
    ScopeRow.value = new ScopeRow();
    return ScopeRow;
})();
var ScopeCol = (function () {
    function ScopeCol() {

    };
    ScopeCol.value = new ScopeCol();
    return ScopeCol;
})();
var ScopeRowGroup = (function () {
    function ScopeRowGroup() {

    };
    ScopeRowGroup.value = new ScopeRowGroup();
    return ScopeRowGroup;
})();
var ScopeColGroup = (function () {
    function ScopeColGroup() {

    };
    ScopeColGroup.value = new ScopeColGroup();
    return ScopeColGroup;
})();
var ScopeAuto = (function () {
    function ScopeAuto() {

    };
    ScopeAuto.value = new ScopeAuto();
    return ScopeAuto;
})();
var renderScopeValue = function (v) {
    if (v instanceof ScopeRow) {
        return "row";
    };
    if (v instanceof ScopeCol) {
        return "col";
    };
    if (v instanceof ScopeRowGroup) {
        return "rowgroup";
    };
    if (v instanceof ScopeColGroup) {
        return "colgroup";
    };
    if (v instanceof ScopeAuto) {
        return "auto";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.ScopeValue (line 11, column 20 - line 16, column 22): " + [ v.constructor.name ]);
};
module.exports = {
    ScopeRow: ScopeRow,
    ScopeCol: ScopeCol,
    ScopeRowGroup: ScopeRowGroup,
    ScopeColGroup: ScopeColGroup,
    ScopeAuto: ScopeAuto,
    renderScopeValue: renderScopeValue
};

},{}],82:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Any = (function () {
    function Any() {

    };
    Any.value = new Any();
    return Any;
})();
var Step = (function () {
    function Step(value0) {
        this.value0 = value0;
    };
    Step.create = function (value0) {
        return new Step(value0);
    };
    return Step;
})();
var renderStepValue = function (v) {
    if (v instanceof Any) {
        return "any";
    };
    if (v instanceof Step) {
        return Data_Show.show(Data_Show.showNumber)(v.value0);
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.StepValue (line 10, column 19 - line 12, column 19): " + [ v.constructor.name ]);
};
module.exports = {
    Any: Any,
    Step: Step,
    renderStepValue: renderStepValue
};

},{"../Data.Show/index.js":226}],83:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Hard = (function () {
    function Hard() {

    };
    Hard.value = new Hard();
    return Hard;
})();
var Soft = (function () {
    function Soft() {

    };
    Soft.value = new Soft();
    return Soft;
})();
var renderWrapValue = function (v) {
    if (v instanceof Hard) {
        return "hard";
    };
    if (v instanceof Soft) {
        return "soft";
    };
    throw new Error("Failed pattern match at DOM.HTML.Indexed.WrapValue (line 8, column 19 - line 10, column 17): " + [ v.constructor.name ]);
};
module.exports = {
    Hard: Hard,
    Soft: Soft,
    renderWrapValue: renderWrapValue
};

},{}],84:[function(require,module,exports){
"use strict";

exports.fold1Impl = function (f) {
  return function (xs) {
    var acc = xs[0];
    var len = xs.length;
    for (var i = 1; i < len; i++) {
      acc = f(acc)(xs[i]);
    }
    return acc;
  };
};

exports.traverse1Impl = function () {
  function Cont(fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function finalCell(head) {
    return new ConsCell(head, emptyList);
  }

  function consList(x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (f) {
        var buildFrom = function (x, ys) {
          return apply(map(consList)(f(x)))(ys);
        };

        var go = function (acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last = xs[currentLen - 1];
            return new Cont(function () {
              var built = go(buildFrom(last, acc), currentLen - 1, xs);
              return built;
            });
          }
        };

        return function (array) {
          var acc = map(finalCell)(f(array[array.length - 1]));
          var result = go(acc, array.length - 1, array);
          while (result instanceof Cont) {
            result = result.fn();
          }

          return map(listToArray)(result);
        };
      };
    };
  };
}();

},{}],85:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmptyArray = function (x) {
    return x;
};
var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableNonEmptyArray = Data_Traversable.traversableArray;
var showNonEmptyArray = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
    });
};
var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
var ordNonEmptyArray = function (dictOrd) {
    return Data_Ord.ordArray(dictOrd);
};
var ord1NonEmptyArray = Data_Ord.ord1Array;
var monadNonEmptyArray = Control_Monad.monadArray;
var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
var functorNonEmptyArray = Data_Functor.functorArray;
var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableNonEmptyArray = Data_Foldable.foldableArray;
var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableNonEmptyArray;
}, function (dictSemigroup) {
    return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
});
var traversable1NonEmptyArray = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyArray;
}, function () {
    return traversableNonEmptyArray;
}, function (dictApply) {
    return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
}, function (dictApply) {
    return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
});
var eqNonEmptyArray = function (dictEq) {
    return Data_Eq.eqArray(dictEq);
};
var eq1NonEmptyArray = Data_Eq.eq1Array;
var bindNonEmptyArray = Control_Bind.bindArray;
var applyNonEmptyArray = Control_Apply.applyArray;
var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
var altNonEmptyArray = Control_Alt.altArray;
module.exports = {
    showNonEmptyArray: showNonEmptyArray,
    eqNonEmptyArray: eqNonEmptyArray,
    eq1NonEmptyArray: eq1NonEmptyArray,
    ordNonEmptyArray: ordNonEmptyArray,
    ord1NonEmptyArray: ord1NonEmptyArray,
    semigroupNonEmptyArray: semigroupNonEmptyArray,
    functorNonEmptyArray: functorNonEmptyArray,
    functorWithIndexNonEmptyArray: functorWithIndexNonEmptyArray,
    foldableNonEmptyArray: foldableNonEmptyArray,
    foldableWithIndexNonEmptyArray: foldableWithIndexNonEmptyArray,
    foldable1NonEmptyArray: foldable1NonEmptyArray,
    unfoldable1NonEmptyArray: unfoldable1NonEmptyArray,
    traversableNonEmptyArray: traversableNonEmptyArray,
    traversableWithIndexNonEmptyArray: traversableWithIndexNonEmptyArray,
    traversable1NonEmptyArray: traversable1NonEmptyArray,
    applyNonEmptyArray: applyNonEmptyArray,
    applicativeNonEmptyArray: applicativeNonEmptyArray,
    bindNonEmptyArray: bindNonEmptyArray,
    monadNonEmptyArray: monadNonEmptyArray,
    altNonEmptyArray: altNonEmptyArray
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Ord/index.js":205,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup.Traversable/index.js":219,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Unfoldable1/index.js":255,"./foreign.js":84}],86:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
var toArray = Unsafe_Coerce.unsafeCoerce;
var unionBy$prime = function (eq) {
    return function (xs) {
        var $39 = Data_Array.unionBy(eq)(toArray(xs));
        return function ($40) {
            return unsafeFromArray($39($40));
        };
    };
};
var union$prime = function (dictEq) {
    return unionBy$prime(Data_Eq.eq(dictEq));
};
var unionBy = function (eq) {
    return function (xs) {
        var $41 = unionBy$prime(eq)(xs);
        return function ($42) {
            return $41(toArray($42));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var unzip = (function () {
    var $43 = Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
    return function ($44) {
        return $43(Data_Array.unzip(toArray($44)));
    };
})();
var updateAt = function (i) {
    return function (x) {
        var $45 = Data_Array.updateAt(i)(x);
        return function ($46) {
            return unsafeFromArrayF($45(toArray($46)));
        };
    };
};
var zip = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
            };
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        var $47 = Data_Array.some(dictAlternative)(dictLazy);
        return function ($48) {
            return unsafeFromArrayF($47($48));
        };
    };
};
var snoc$prime = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(xs)(x));
    };
};
var snoc = function (xs) {
    return function (x) {
        return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
    };
};
var singleton = function ($49) {
    return unsafeFromArray(Data_Array.singleton($49));
};
var replicate = function (i) {
    return function (x) {
        return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
    };
};
var range = function (x) {
    return function (y) {
        return unsafeFromArray(Data_Array.range(x)(y));
    };
};
var modifyAt = function (i) {
    return function (f) {
        var $50 = Data_Array.modifyAt(i)(f);
        return function ($51) {
            return unsafeFromArrayF($50(toArray($51)));
        };
    };
};
var intersectBy$prime = function (eq) {
    return function (xs) {
        return Data_Array.intersectBy(eq)(toArray(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        var $52 = intersectBy$prime(eq)(xs);
        return function ($53) {
            return $52(toArray($53));
        };
    };
};
var intersect$prime = function (dictEq) {
    return intersectBy$prime(Data_Eq.eq(dictEq));
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var insertAt = function (i) {
    return function (x) {
        var $54 = Data_Array.insertAt(i)(x);
        return function ($55) {
            return unsafeFromArrayF($54(toArray($55)));
        };
    };
};
var fromFoldable1 = function (dictFoldable1) {
    var $56 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
    return function ($57) {
        return unsafeFromArray($56($57));
    };
};
var fromArray = function (xs) {
    if (Data_Array.length(xs) > 0) {
        return new Data_Maybe.Just(unsafeFromArray(xs));
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    var $58 = Data_Array.fromFoldable(dictFoldable);
    return function ($59) {
        return fromArray($58($59));
    };
};
var difference$prime = function (dictEq) {
    return function (xs) {
        return Data_Array.difference(dictEq)(toArray(xs));
    };
};
var cons$prime = function (x) {
    return function (xs) {
        return unsafeFromArray(Data_Array.cons(x)(xs));
    };
};
var fromNonEmpty = function (v) {
    return cons$prime(v.value0)(v.value1);
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
var concat = (function () {
    var $60 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
    return function ($61) {
        return unsafeFromArray(Data_Array.concat(toArray($60($61))));
    };
})();
var appendArray = function (xs) {
    return function (ys) {
        return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
    };
};
var alterAt = function (i) {
    return function (f) {
        var $62 = Data_Array.alterAt(i)(f);
        return function ($63) {
            return $62(toArray($63));
        };
    };
};
var adaptMaybe = function (f) {
    var $64 = Data_Maybe.fromJust();
    return function ($65) {
        return $64(f(toArray($65)));
    };
};
var head = adaptMaybe(Data_Array.head);
var init = adaptMaybe(Data_Array.init);
var last = adaptMaybe(Data_Array.last);
var tail = adaptMaybe(Data_Array.tail);
var uncons = adaptMaybe(Data_Array.uncons);
var toNonEmpty = function ($66) {
    return (function (v) {
        return new Data_NonEmpty.NonEmpty(v.head, v.tail);
    })(uncons($66));
};
var unsnoc = adaptMaybe(Data_Array.unsnoc);
var adaptAny = function (f) {
    return function ($67) {
        return f(toArray($67));
    };
};
var catMaybes = adaptAny(Data_Array.catMaybes);
var $$delete = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array["delete"](dictEq)(x));
    };
};
var deleteAt = function (i) {
    return adaptAny(Data_Array.deleteAt(i));
};
var deleteBy = function (f) {
    return function (x) {
        return adaptAny(Data_Array.deleteBy(f)(x));
    };
};
var difference = function (dictEq) {
    return function (xs) {
        return adaptAny(difference$prime(dictEq)(xs));
    };
};
var drop = function (i) {
    return adaptAny(Data_Array.drop(i));
};
var dropEnd = function (i) {
    return adaptAny(Data_Array.dropEnd(i));
};
var dropWhile = function (f) {
    return adaptAny(Data_Array.dropWhile(f));
};
var elemIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemIndex(dictEq)(x));
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
    };
};
var filter = function (f) {
    return adaptAny(Data_Array.filter(f));
};
var filterA = function (dictApplicative) {
    return function (f) {
        return adaptAny(Data_Array.filterA(dictApplicative)(f));
    };
};
var findIndex = function (x) {
    return adaptAny(Data_Array.findIndex(x));
};
var findLastIndex = function (x) {
    return adaptAny(Data_Array.findLastIndex(x));
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
        };
    };
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (acc) {
            return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
        };
    };
};
var index = adaptAny(Data_Array.index);
var length = adaptAny(Data_Array.length);
var mapMaybe = function (f) {
    return adaptAny(Data_Array.mapMaybe(f));
};
var partition = function (f) {
    return adaptAny(Data_Array.partition(f));
};
var slice = function (start) {
    return function (end) {
        return adaptAny(Data_Array.slice(start)(end));
    };
};
var span = function (f) {
    return adaptAny(Data_Array.span(f));
};
var take = function (i) {
    return adaptAny(Data_Array.take(i));
};
var takeEnd = function (i) {
    return adaptAny(Data_Array.takeEnd(i));
};
var takeWhile = function (f) {
    return adaptAny(Data_Array.takeWhile(f));
};
var toUnfoldable = function (dictUnfoldable) {
    return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
};
var unsafeAdapt = function (f) {
    var $68 = adaptAny(f);
    return function ($69) {
        return unsafeFromArray($68($69));
    };
};
var cons = function (x) {
    return unsafeAdapt(Data_Array.cons(x));
};
var insert = function (dictOrd) {
    return function (x) {
        return unsafeAdapt(Data_Array.insert(dictOrd)(x));
    };
};
var insertBy = function (f) {
    return function (x) {
        return unsafeAdapt(Data_Array.insertBy(f)(x));
    };
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
        };
    };
};
var nub = function (dictOrd) {
    return unsafeAdapt(Data_Array.nub(dictOrd));
};
var nubBy = function (f) {
    return unsafeAdapt(Data_Array.nubBy(f));
};
var nubByEq = function (f) {
    return unsafeAdapt(Data_Array.nubByEq(f));
};
var nubEq = function (dictEq) {
    return unsafeAdapt(Data_Array.nubEq(dictEq));
};
var reverse = unsafeAdapt(Data_Array.reverse);
var sort = function (dictOrd) {
    return unsafeAdapt(Data_Array.sort(dictOrd));
};
var sortBy = function (f) {
    return unsafeAdapt(Data_Array.sortBy(f));
};
var sortWith = function (dictOrd) {
    return function (f) {
        return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
    };
};
var updateAtIndices = function (dictFoldable) {
    return function (pairs) {
        return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
    };
};
var unsafeIndex = function (dictPartial) {
    return adaptAny(Data_Array.unsafeIndex(dictPartial));
};
var toUnfoldable1 = function (dictUnfoldable1) {
    return function (xs) {
        var len = length(xs);
        var f = function (i) {
            return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))((function () {
                var $38 = i < (len - 1 | 0);
                if ($38) {
                    return new Data_Maybe.Just(i + 1 | 0);
                };
                return Data_Maybe.Nothing.value;
            })());
        };
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
    };
};
module.exports = {
    fromArray: fromArray,
    fromNonEmpty: fromNonEmpty,
    toArray: toArray,
    toNonEmpty: toNonEmpty,
    fromFoldable: fromFoldable,
    fromFoldable1: fromFoldable1,
    toUnfoldable: toUnfoldable,
    toUnfoldable1: toUnfoldable1,
    singleton: singleton,
    range: range,
    replicate: replicate,
    some: some,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    appendArray: appendArray,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    partition: partition,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    nub: nub,
    nubBy: nubBy,
    nubEq: nubEq,
    nubByEq: nubByEq,
    union: union,
    "union'": union$prime,
    unionBy: unionBy,
    "unionBy'": unionBy$prime,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    "difference'": difference$prime,
    intersect: intersect,
    "intersect'": intersect$prime,
    intersectBy: intersectBy,
    "intersectBy'": intersectBy$prime,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex
};

},{"../Control.Bind/index.js":23,"../Data.Array.NonEmpty.Internal/index.js":85,"../Data.Array/index.js":91,"../Data.Bifunctor/index.js":98,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unfoldable1/index.js":255,"../Unsafe.Coerce/index.js":391}],87:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Iterator = (function () {
    function Iterator(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Iterator.create = function (value0) {
        return function (value1) {
            return new Iterator(value0, value1);
        };
    };
    return Iterator;
})();
var peek = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST_Internal.read(v.value1)();
        return v.value0(v1);
    };
};
var next = function (v) {
    return function __do() {
        var v1 = Control_Monad_ST_Internal.read(v.value1)();
        var v2 = Control_Monad_ST_Internal.modify(function (v2) {
            return v2 + 1 | 0;
        })(v.value1)();
        return v.value0(v1);
    };
};
var pushWhile = function (p) {
    return function (iter) {
        return function (array) {
            return function __do() {
                var v = Control_Monad_ST_Internal["new"](false)();
                while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                    (function __do() {
                        var v1 = peek(iter)();
                        if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                            var v2 = Data_Array_ST.push(v1.value0)(array)();
                            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                        };
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                    })();
                };
                return {};
            };
        };
    };
};
var pushAll = pushWhile(Data_Function["const"](true));
var iterator = function (f) {
    return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
};
var iterate = function (iter) {
    return function (f) {
        return function __do() {
            var v = Control_Monad_ST_Internal["new"](false)();
            while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v))()) {
                (function __do() {
                    var v1 = next(iter)();
                    if (v1 instanceof Data_Maybe.Just) {
                        return f(v1.value0)();
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v))();
                    };
                    throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ v1.constructor.name ]);
                })();
            };
            return {};
        };
    };
};
var exhausted = (function () {
    var $27 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
    return function ($28) {
        return $27(peek($28));
    };
})();
module.exports = {
    iterator: iterator,
    iterate: iterate,
    next: next,
    peek: peek,
    exhausted: exhausted,
    pushWhile: pushWhile,
    pushAll: pushAll
};

},{"../Control.Monad.ST.Internal/index.js":52,"../Data.Array.ST/index.js":89,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187}],88:[function(require,module,exports){
"use strict";

exports.empty = function () {
  return [];
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (i) {
      return function (xs) {
        return function () {
          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (i) {
  return function (a) {
    return function (xs) {
      return function () {
        var ret = i >= 0 && i < xs.length;
        if (ret) xs[i] = a;
        return ret;
      };
    };
  };
};

exports.popImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.pop()) : nothing;
      };
    };
  };
};

exports.pushAll = function (as) {
  return function (xs) {
    return function () {
      return xs.push.apply(xs, as);
    };
  };
};

exports.shiftImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function () {
        return xs.length > 0 ? just(xs.shift()) : nothing;
      };
    };
  };
};

exports.unshiftAll = function (as) {
  return function (xs) {
    return function () {
      return xs.unshift.apply(xs, as);
    };
  };
};

exports.splice = function (i) {
  return function (howMany) {
    return function (bs) {
      return function (xs) {
        return function () {
          return xs.splice.apply(xs, [i, howMany].concat(bs));
        };
      };
    };
  };
};

exports.copyImpl = function (xs) {
  return function () {
    return xs.slice();
  };
};

exports.sortByImpl = function (comp) {
  return function (xs) {
    return function () {
      return xs.sort(function (x, y) {
        return comp(x)(y);
      });
    };
  };
};

exports.toAssocArray = function (xs) {
  return function () {
    var n = xs.length;
    var as = new Array(n);
    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
    return as;
  };
};

},{}],89:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var unshift = function (a) {
    return $foreign.unshiftAll([ a ]);
};
var unsafeThaw = (function () {
    var $11 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
    return function ($12) {
        return $11($12);
    };
})();
var unsafeFreeze = (function () {
    var $13 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
    return function ($14) {
        return $13($14);
    };
})();
var thaw = $foreign.copyImpl;
var withArray = function (f) {
    return function (xs) {
        return function __do() {
            var v = thaw(xs)();
            var v1 = f(v)();
            return unsafeFreeze(v)();
        };
    };
};
var sortBy = function (comp) {
    var comp$prime = function (x) {
        return function (y) {
            var v = comp(x)(y);
            if (v instanceof Data_Ordering.GT) {
                return 1;
            };
            if (v instanceof Data_Ordering.EQ) {
                return 0;
            };
            if (v instanceof Data_Ordering.LT) {
                return -1 | 0;
            };
            throw new Error("Failed pattern match at Data.Array.ST (line 109, column 15 - line 112, column 13): " + [ v.constructor.name ]);
        };
    };
    return $foreign.sortByImpl(comp$prime);
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return sortBy(Data_Ord.compare(dictOrd));
};
var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var run = function (st) {
    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)(unsafeFreeze)();
};
var push = function (a) {
    return $foreign.pushAll([ a ]);
};
var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var modify = function (i) {
    return function (f) {
        return function (xs) {
            return function __do() {
                var v = peek(i)(xs)();
                if (v instanceof Data_Maybe.Just) {
                    return $foreign.poke(i)(f(v.value0))(xs)();
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Array.ST (line 195, column 3 - line 197, column 26): " + [ v.constructor.name ]);
            };
        };
    };
};
var freeze = $foreign.copyImpl;
module.exports = {
    run: run,
    withArray: withArray,
    peek: peek,
    modify: modify,
    pop: pop,
    push: push,
    shift: shift,
    unshift: unshift,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    freeze: freeze,
    thaw: thaw,
    unsafeFreeze: unsafeFreeze,
    unsafeThaw: unsafeThaw,
    empty: $foreign.empty,
    poke: $foreign.poke,
    pushAll: $foreign.pushAll,
    unshiftAll: $foreign.unshiftAll,
    splice: $foreign.splice,
    toAssocArray: $foreign.toAssocArray
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Monad.ST.Internal/index.js":52,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"./foreign.js":88}],90:[function(require,module,exports){
"use strict";

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = new Array(step * (end - start) + 1);
    var i = start, n = 0;
    while (i !== end) {
      result[n++] = i;
      i += step;
    }
    result[n] = i;
    return result;
  };
};

var replicateFill = function (count) {
  return function (value) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value);
  };
};

var replicatePolyfill = function (count) {
  return function (value) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }
    return result;
  };
};

// In browsers that have Array.prototype.fill we use it, as it's faster.
exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

exports.fromFoldableImpl = (function () {
  function Cons(head, tail) {
    this.head = head;
    this.tail = tail;
  }
  var emptyList = {};

  function curryCons(head) {
    return function (tail) {
      return new Cons(head, tail);
    };
  }

  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }

  return function (foldr) {
    return function (xs) {
      return listToArray(foldr(curryCons)(emptyList)(xs));
    };
  };
})();

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  if (xss.length <= 10000) {
    // This method is faster, but it crashes on big arrays.
    // So we use it when can and fallback to simple variant otherwise.
    return Array.prototype.concat.apply([], xss);
  }

  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

exports.partition = function (f) {
  return function (xs) {
    var yes = [];
    var no  = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes: yes, no: no };
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.take = function (n) {
  return function (l) {
    return n < 1 ? [] : l.slice(0, n);
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

//------------------------------------------------------------------------------
// Partial ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.unsafeIndexImpl = function (xs) {
  return function (n) {
    return xs[n];
  };
};

},{}],91:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAtIndices = function (dictFoldable) {
    return function (us) {
        return function (xs) {
            return Data_Array_ST.withArray(function (res) {
                return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                    return Data_Array_ST.poke(v.value0)(v.value1)(res);
                })(us);
            })(xs)();
        };
    };
};
var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x,
            tail: xs
        });
    };
});
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubByEq = function (eq) {
    return function (xs) {
        return (function __do() {
            var v = Data_Array_ST.empty();
            Control_Monad_ST_Internal.foreach(xs)(function (x) {
                return function __do() {
                    var v1 = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                        var $113 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                        var $114 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                            return eq(v1)(x);
                        });
                        return function ($115) {
                            return $113($114($115));
                        };
                    })())(Data_Array_ST.unsafeFreeze(v))();
                    return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(v1)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(v)))();
                };
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        })();
    };
};
var nubEq = function (dictEq) {
    return nubByEq(Data_Eq.eq(dictEq));
};
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return function (xs) {
                return Data_Array_ST.withArray(function (res) {
                    return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                        return Data_Array_ST.modify(i)(f)(res);
                    })(is);
                })(xs)();
            };
        };
    };
};
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};
var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v,
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
var span = function (p) {
    return function (arr) {
        var go = function ($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $77 = p(v.value0);
                    if ($77) {
                        $copy_i = i + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_i);
            };
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ],
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr),
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr,
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
    };
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var unzip = function (xs) {
    return (function __do() {
        var v = Data_Array_ST.empty();
        var v1 = Data_Array_ST.empty();
        var v2 = Data_Array_ST_Iterator.iterator(function (v2) {
            return index(xs)(v2);
        })();
        Data_Array_ST_Iterator.iterate(v2)(function (v3) {
            return function __do() {
                Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value0)(v))();
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value1)(v1))();
            };
        })();
        var v3 = Data_Array_ST.unsafeFreeze(v)();
        var v4 = Data_Array_ST.unsafeFreeze(v1)();
        return new Data_Tuple.Tuple(v3, v4);
    })();
};
var head = function (xs) {
    return index(xs)(0);
};
var nubBy = function (comp) {
    return function (xs) {
        var indexedAndSorted = sortBy(function (x) {
            return function (y) {
                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
            };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                var v1 = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v2) {
                    return function __do() {
                        var v3 = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                            var $116 = (function (dictPartial) {
                                var $118 = Data_Maybe.fromJust(dictPartial);
                                return function ($119) {
                                    return $118(last($119));
                                };
                            })();
                            return function ($117) {
                                return Data_Tuple.snd($116($117));
                            };
                        })())(Data_Array_ST.unsafeFreeze(v1))();
                        return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(v3)(v2.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v2)(v1)))();
                    };
                })();
                return Data_Array_ST.unsafeFreeze(v1)();
            })()));
        };
        throw new Error("Failed pattern match at Data.Array (line 903, column 17 - line 911, column 29): " + [ v.constructor.name ]);
    };
};
var nub = function (dictOrd) {
    return nubBy(Data_Ord.compare(dictOrd));
};
var groupBy = function (op) {
    return function (xs) {
        return (function __do() {
            var v = Data_Array_ST.empty();
            var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                return index(xs)(v1);
            })();
            Data_Array_ST_Iterator.iterate(v1)(function (x) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                    var v2 = Data_Array_ST.empty();
                    var v3 = Data_Array_ST.push(x)(v2)();
                    Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                    var v4 = Data_Array_ST.unsafeFreeze(v2)();
                    return Data_Array_ST.push(v4)(v)();
                });
            })();
            return Data_Array_ST.unsafeFreeze(v)();
        })();
    };
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    var $120 = group(dictOrd.Eq0());
    var $121 = sort(dictOrd);
    return function ($122) {
        return $120($121($122));
    };
};
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: v,
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array (line 1101, column 3 - line 1105, column 42): " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var dropEnd = function (n) {
    return function (xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};
var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
var mapMaybe = function (f) {
    return concatMap((function () {
        var $123 = Data_Maybe.maybe([  ])(singleton);
        return function ($124) {
            return $123(f($124));
        };
    })());
};
var filterA = function (dictApplicative) {
    return function (p) {
        var $125 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
            if (v.value1) {
                return new Data_Maybe.Just(v.value0);
            };
            return Data_Maybe.Nothing.value;
        }));
        var $126 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
        });
        return function ($127) {
            return $125($126($127));
        };
    };
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    singleton: singleton,
    some: some,
    many: many,
    "null": $$null,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    concatMap: concatMap,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    nub: nub,
    nubEq: nubEq,
    nubBy: nubBy,
    nubByEq: nubByEq,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex,
    range: $foreign.range,
    replicate: $foreign.replicate,
    length: $foreign.length,
    cons: $foreign.cons,
    snoc: $foreign.snoc,
    reverse: $foreign.reverse,
    concat: $foreign.concat,
    filter: $foreign.filter,
    partition: $foreign.partition,
    slice: $foreign.slice,
    take: $foreign.take,
    drop: $foreign.drop,
    zipWith: $foreign.zipWith
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Lazy/index.js":34,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.ST.Internal/index.js":52,"../Data.Array.ST.Iterator/index.js":87,"../Data.Array.ST/index.js":89,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"./foreign.js":90}],92:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)((function () {
                    var $97 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function ($98) {
                        return $97(f($98));
                    };
                })())((function () {
                    var $99 = Control_Apply.applySecond(dictApplicative.Apply0());
                    return function ($100) {
                        return $99(g($100));
                    };
                })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldableJoker = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                };
            };
        };
    }, function (v) {
        return function (r) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                };
            };
        };
    });
};
var bifoldableClown = function (dictFoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                };
            };
        };
    }, function (l) {
        return function (v) {
            return function (u) {
                return function (v1) {
                    return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                };
            };
        };
    });
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)((function () {
                    var $101 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function ($102) {
                        return $101(f($102));
                    };
                })())((function () {
                    var $103 = Data_Semigroup.append(dictMonoid.Semigroup0());
                    return function ($104) {
                        return $103(g($104));
                    };
                })())(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return bifoldl(dictBifoldable)(function (m) {
                    return function (a) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                    };
                })(function (m) {
                    return function (b) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                    };
                })(Data_Monoid.mempty(dictMonoid));
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldableFlip = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (r) {
        return function (l) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldableWrap = function (dictBifoldable) {
    return new Bifoldable(function (dictMonoid) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldl(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    }, function (l) {
        return function (r) {
            return function (u) {
                return function (v) {
                    return bifoldr(dictBifoldable)(l)(r)(u)(v);
                };
            };
        };
    });
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                        var $105 = Data_Function.flip(f);
                        return function ($106) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($105($106)));
                        };
                    })())((function () {
                        var $107 = Data_Function.flip(g);
                        return function ($108) {
                            return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($107($108)));
                        };
                    })())(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($109) {
                        return Data_Monoid_Endo.Endo(f($109));
                    })(function ($110) {
                        return Data_Monoid_Endo.Endo(g($110));
                    })(p))(z);
                };
            };
        };
    };
};
var bifoldableProduct = function (dictBifoldable) {
    return function (dictBifoldable1) {
        return new Bifoldable(function (dictMonoid) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        }, function (l) {
            return function (r) {
                return function (u) {
                    return function (m) {
                        return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                    };
                };
            };
        });
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                var $111 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
                var $112 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($114) {
                    return Data_Monoid_Disj.Disj(p($114));
                })(function ($115) {
                    return Data_Monoid_Disj.Disj(q($115));
                });
                return function ($113) {
                    return $111($112($113));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                var $116 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
                var $117 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($119) {
                    return Data_Monoid_Conj.Conj(p($119));
                })(function ($120) {
                    return Data_Monoid_Conj.Conj(q($120));
                });
                return function ($118) {
                    return $116($117($118));
                };
            };
        };
    };
};
module.exports = {
    bifoldMap: bifoldMap,
    bifoldl: bifoldl,
    bifoldr: bifoldr,
    Bifoldable: Bifoldable,
    bifoldrDefault: bifoldrDefault,
    bifoldlDefault: bifoldlDefault,
    bifoldMapDefaultR: bifoldMapDefaultR,
    bifoldMapDefaultL: bifoldMapDefaultL,
    bifold: bifold,
    bitraverse_: bitraverse_,
    bifor_: bifor_,
    bisequence_: bisequence_,
    biany: biany,
    biall: biall,
    bifoldableClown: bifoldableClown,
    bifoldableJoker: bifoldableJoker,
    bifoldableFlip: bifoldableFlip,
    bifoldableProduct: bifoldableProduct,
    bifoldableWrap: bifoldableWrap
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257}],93:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Clown = function (x) {
    return x;
};
var showClown = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordClown = function (dictOrd) {
    return dictOrd;
};
var newtypeClown = new Data_Newtype.Newtype(function (n) {
    return n;
}, Clown);
var functorClown = new Data_Functor.Functor(function (v) {
    return function (v1) {
        return v1;
    };
});
var eqClown = function (dictEq) {
    return dictEq;
};
var bifunctorClown = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(f)(v1);
            };
        };
    });
};
var biapplyClown = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorClown(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeClown = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyClown(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
module.exports = {
    Clown: Clown,
    newtypeClown: newtypeClown,
    eqClown: eqClown,
    ordClown: ordClown,
    showClown: showClown,
    functorClown: functorClown,
    bifunctorClown: bifunctorClown,
    biapplyClown: biapplyClown,
    biapplicativeClown: biapplicativeClown
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Data.Bifunctor/index.js":98,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Show/index.js":226}],94:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Flip = function (x) {
    return x;
};
var showFlip = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordFlip = function (dictOrd) {
    return dictOrd;
};
var newtypeFlip = new Data_Newtype.Newtype(function (n) {
    return n;
}, Flip);
var functorFlip = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
        };
    });
};
var eqFlip = function (dictEq) {
    return dictEq;
};
var bifunctorFlip = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
        };
    });
};
var biapplyFlip = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorFlip(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeFlip = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyFlip(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
        };
    });
};
module.exports = {
    Flip: Flip,
    newtypeFlip: newtypeFlip,
    eqFlip: eqFlip,
    ordFlip: ordFlip,
    showFlip: showFlip,
    functorFlip: functorFlip,
    bifunctorFlip: bifunctorFlip,
    biapplyFlip: biapplyFlip,
    biapplicativeFlip: biapplicativeFlip
};

},{"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Data.Bifunctor/index.js":98,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Show/index.js":226}],95:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Joker = function (x) {
    return x;
};
var showJoker = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordJoker = function (dictOrd) {
    return dictOrd;
};
var newtypeJoker = new Data_Newtype.Newtype(function (n) {
    return n;
}, Joker);
var functorJoker = function (dictFunctor) {
    return new Data_Functor.Functor(function (g) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(g)(v);
        };
    });
};
var eqJoker = function (dictEq) {
    return dictEq;
};
var bifunctorJoker = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (v) {
        return function (g) {
            return function (v1) {
                return Data_Functor.map(dictFunctor)(g)(v1);
            };
        };
    });
};
var biapplyJoker = function (dictApply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorJoker(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
        };
    });
};
var biapplicativeJoker = function (dictApplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyJoker(dictApplicative.Apply0());
    }, function (v) {
        return function (b) {
            return Control_Applicative.pure(dictApplicative)(b);
        };
    });
};
module.exports = {
    Joker: Joker,
    newtypeJoker: newtypeJoker,
    eqJoker: eqJoker,
    ordJoker: ordJoker,
    showJoker: showJoker,
    functorJoker: functorJoker,
    bifunctorJoker: bifunctorJoker,
    biapplyJoker: biapplyJoker,
    biapplicativeJoker: biapplicativeJoker
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Data.Bifunctor/index.js":98,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Show/index.js":226}],96:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var showProduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var eqProduct = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordProduct = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var bifunctorProduct = function (dictBifunctor) {
    return function (dictBifunctor1) {
        return new Data_Bifunctor.Bifunctor(function (f) {
            return function (g) {
                return function (v) {
                    return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                };
            };
        });
    };
};
var biapplyProduct = function (dictBiapply) {
    return function (dictBiapply1) {
        return new Control_Biapply.Biapply(function () {
            return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
        }, function (v) {
            return function (v1) {
                return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
        });
    };
};
var biapplicativeProduct = function (dictBiapplicative) {
    return function (dictBiapplicative1) {
        return new Control_Biapplicative.Biapplicative(function () {
            return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
        }, function (a) {
            return function (b) {
                return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
        });
    };
};
module.exports = {
    Product: Product,
    eqProduct: eqProduct,
    ordProduct: ordProduct,
    showProduct: showProduct,
    bifunctorProduct: bifunctorProduct,
    biapplyProduct: biapplyProduct,
    biapplicativeProduct: biapplicativeProduct
};

},{"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Data.Bifunctor/index.js":98,"../Data.Eq/index.js":123,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226}],97:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Wrap = function (x) {
    return x;
};
var showWrap = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var ordWrap = function (dictOrd) {
    return dictOrd;
};
var newtypeWrap = new Data_Newtype.Newtype(function (n) {
    return n;
}, Wrap);
var functorWrap = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
        };
    });
};
var eqWrap = function (dictEq) {
    return dictEq;
};
var bifunctorWrap = function (dictBifunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
            };
        };
    });
};
var biapplyWrap = function (dictBiapply) {
    return new Control_Biapply.Biapply(function () {
        return bifunctorWrap(dictBiapply.Bifunctor0());
    }, function (v) {
        return function (v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
        };
    });
};
var biapplicativeWrap = function (dictBiapplicative) {
    return new Control_Biapplicative.Biapplicative(function () {
        return biapplyWrap(dictBiapplicative.Biapply0());
    }, function (a) {
        return function (b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
        };
    });
};
module.exports = {
    Wrap: Wrap,
    newtypeWrap: newtypeWrap,
    eqWrap: eqWrap,
    ordWrap: ordWrap,
    showWrap: showWrap,
    functorWrap: functorWrap,
    bifunctorWrap: bifunctorWrap,
    biapplyWrap: biapplyWrap,
    biapplicativeWrap: biapplicativeWrap
};

},{"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Data.Bifunctor/index.js":98,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Show/index.js":226}],98:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
};
module.exports = {
    bimap: bimap,
    Bifunctor: Bifunctor,
    lmap: lmap,
    rmap: rmap
};

},{"../Control.Category/index.js":24}],99:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Clown = require("../Data.Bifunctor.Clown/index.js");
var Data_Bifunctor_Flip = require("../Data.Bifunctor.Flip/index.js");
var Data_Bifunctor_Joker = require("../Data.Bifunctor.Joker/index.js");
var Data_Bifunctor_Product = require("../Data.Bifunctor.Product/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
    this.Bifoldable1 = Bifoldable1;
    this.Bifunctor0 = Bifunctor0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var lfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
            };
        };
    };
};
var ltraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
    };
};
var rfor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
            };
        };
    };
};
var rtraverse = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
    };
};
var bitraversableJoker = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (v) {
            return function (r) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                };
            };
        };
    });
};
var bitraversableClown = function (dictTraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
    }, function () {
        return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                };
            };
        };
    });
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraversableFlip = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (r) {
            return function (l) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraversableProduct = function (dictBitraversable) {
    return function (dictBitraversable1) {
        return new Bitraversable(function () {
            return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
        }, function () {
            return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (l) {
                return function (r) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                    };
                };
            };
        });
    };
};
var bitraversableWrap = function (dictBitraversable) {
    return new Bitraversable(function () {
        return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
    }, function () {
        return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
    }, function (dictApplicative) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
        };
    }, function (dictApplicative) {
        return function (l) {
            return function (r) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                };
            };
        };
    });
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable,
    bitraverse: bitraverse,
    bisequence: bisequence,
    bitraverseDefault: bitraverseDefault,
    bisequenceDefault: bisequenceDefault,
    ltraverse: ltraverse,
    rtraverse: rtraverse,
    bifor: bifor,
    lfor: lfor,
    rfor: rfor,
    bitraversableClown: bitraversableClown,
    bitraversableJoker: bitraversableJoker,
    bitraversableFlip: bitraversableFlip,
    bitraversableProduct: bitraversableProduct,
    bitraversableWrap: bitraversableWrap
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor.Clown/index.js":93,"../Data.Bifunctor.Flip/index.js":94,"../Data.Bifunctor.Joker/index.js":95,"../Data.Bifunctor.Product/index.js":96,"../Data.Bifunctor.Wrap/index.js":97,"../Data.Bifunctor/index.js":98,"../Data.Functor/index.js":143,"../Data.Traversable/index.js":248}],100:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var otherwise = true;
module.exports = {
    otherwise: otherwise
};

},{}],101:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {
    this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;
};
var BooleanAlgebra = function (HeytingAlgebra0) {
    this.HeytingAlgebra0 = HeytingAlgebra0;
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraUnit;
});
var booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {
    return Data_HeytingAlgebra.heytingAlgebraRecordNil;
});
var booleanAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictBooleanAlgebraRecord) {
            return function (dictBooleanAlgebra) {
                return new BooleanAlgebraRecord(function () {
                    return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)(dictCons)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());
                });
            };
        };
    };
};
var booleanAlgebraRecord = function (dictRowToList) {
    return function (dictBooleanAlgebraRecord) {
        return new BooleanAlgebra(function () {
            return Data_HeytingAlgebra.heytingAlgebraRecord(dictRowToList)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());
        });
    };
};
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return Data_HeytingAlgebra.heytingAlgebraBoolean;
});
module.exports = {
    BooleanAlgebra: BooleanAlgebra,
    BooleanAlgebraRecord: BooleanAlgebraRecord,
    booleanAlgebraBoolean: booleanAlgebraBoolean,
    booleanAlgebraUnit: booleanAlgebraUnit,
    booleanAlgebraFn: booleanAlgebraFn,
    booleanAlgebraRecord: booleanAlgebraRecord,
    booleanAlgebraRecordNil: booleanAlgebraRecordNil,
    booleanAlgebraRecordCons: booleanAlgebraRecordCons
};

},{"../Data.HeytingAlgebra/index.js":149}],102:[function(require,module,exports){
"use strict";

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

exports.topNumber = Number.POSITIVE_INFINITY;
exports.bottomNumber = Number.NEGATIVE_INFINITY;

},{}],103:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Bounded = function (Ord0, bottom, top) {
    this.Ord0 = Ord0;
    this.bottom = bottom;
    this.top = top;
};
var top = function (dict) {
    return dict.top;
};
var boundedUnit = new Bounded(function () {
    return Data_Ord.ordUnit;
}, Data_Unit.unit, Data_Unit.unit);
var boundedOrdering = new Bounded(function () {
    return Data_Ord.ordOrdering;
}, Data_Ordering.LT.value, Data_Ordering.GT.value);
var boundedNumber = new Bounded(function () {
    return Data_Ord.ordNumber;
}, $foreign.bottomNumber, $foreign.topNumber);
var boundedInt = new Bounded(function () {
    return Data_Ord.ordInt;
}, $foreign.bottomInt, $foreign.topInt);
var boundedChar = new Bounded(function () {
    return Data_Ord.ordChar;
}, $foreign.bottomChar, $foreign.topChar);
var boundedBoolean = new Bounded(function () {
    return Data_Ord.ordBoolean;
}, false, true);
var bottom = function (dict) {
    return dict.bottom;
};
module.exports = {
    Bounded: Bounded,
    bottom: bottom,
    top: top,
    boundedBoolean: boundedBoolean,
    boundedInt: boundedInt,
    boundedChar: boundedChar,
    boundedOrdering: boundedOrdering,
    boundedUnit: boundedUnit,
    boundedNumber: boundedNumber
};

},{"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Unit/index.js":257,"./foreign.js":102}],104:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_CatQueue = require("../Data.CatQueue/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatNil = (function () {
    function CatNil() {

    };
    CatNil.value = new CatNil();
    return CatNil;
})();
var CatCons = (function () {
    function CatCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatCons.create = function (value0) {
        return function (value1) {
            return new CatCons(value0, value1);
        };
    };
    return CatCons;
})();
var showCatList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof CatNil) {
            return "CatNil";
        };
        if (v instanceof CatCons) {
            return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
        };
        throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 150, column 71): " + [ v.constructor.name ]);
    });
};
var $$null = function (v) {
    if (v instanceof CatNil) {
        return true;
    };
    return false;
};
var link = function (v) {
    return function (v1) {
        if (v instanceof CatNil) {
            return v1;
        };
        if (v1 instanceof CatNil) {
            return v;
        };
        if (v instanceof CatCons) {
            return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var foldr = function (k) {
    return function (b) {
        return function (q) {
            var foldl = function ($copy_v) {
                return function ($copy_c) {
                    return function ($copy_v1) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_c = $copy_c;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, c, v1) {
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return c;
                            };
                            if (v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v;
                                $tco_var_c = v(c)(v1.value0);
                                $copy_v1 = v1.value1;
                                return;
                            };
                            throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                        };
                        return $tco_result;
                    };
                };
            };
            var go = function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_xs = $copy_xs;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(xs, ys) {
                        var v = Data_CatQueue.uncons(xs);
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return foldl(function (x) {
                                return function (i) {
                                    return i(x);
                                };
                            })(b)(ys);
                        };
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_xs = v.value0.value1;
                            $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                            return;
                        };
                        throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                    };
                    return $tco_result;
                };
            };
            return go(q)(Data_List_Types.Nil.value);
        };
    };
};
var uncons = function (v) {
    if (v instanceof CatNil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof CatCons) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
            var $44 = Data_CatQueue["null"](v.value1);
            if ($44) {
                return CatNil.value;
            };
            return foldr(link)(CatNil.value)(v.value1);
        })()));
    };
    throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
};
var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (s) {
        return function (l) {
            return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
        };
    };
});
var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);
var foldMap = function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof CatNil) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof CatCons) {
                var d = (function () {
                    var $53 = Data_CatQueue["null"](v.value1);
                    if ($53) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v.value1);
                })();
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
};
var empty = CatNil.value;
var append = link;
var cons = function (a) {
    return function (cat) {
        return append(new CatCons(a, Data_CatQueue.empty))(cat);
    };
};
var functorCatList = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof CatNil) {
            return CatNil.value;
        };
        if (v1 instanceof CatCons) {
            var d = (function () {
                var $58 = Data_CatQueue["null"](v1.value1);
                if ($58) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v1.value1);
            })();
            return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 189, column 26): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var singleton = function (a) {
    return cons(a)(CatNil.value);
};
var traversableCatList = new Data_Traversable.Traversable(function () {
    return foldableCatList;
}, function () {
    return functorCatList;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof CatNil) {
            return Control_Applicative.pure(dictApplicative)(CatNil.value);
        };
        if (v instanceof CatCons) {
            var d = (function () {
                var $62 = Data_CatQueue["null"](v.value1);
                if ($62) {
                    return CatNil.value;
                };
                return foldr(link)(CatNil.value)(v.value1);
            })();
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
        };
        throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof CatNil) {
                return Control_Applicative.pure(dictApplicative)(CatNil.value);
            };
            if (v1 instanceof CatCons) {
                var d = (function () {
                    var $67 = Data_CatQueue["null"](v1.value1);
                    if ($67) {
                        return CatNil.value;
                    };
                    return foldr(link)(CatNil.value)(v1.value1);
                })();
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
            };
            throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var semigroupCatList = new Data_Semigroup.Semigroup(append);
var monoidCatList = new Data_Monoid.Monoid(function () {
    return semigroupCatList;
}, CatNil.value);
var monadCatList = new Control_Monad.Monad(function () {
    return applicativeCatList;
}, function () {
    return bindCatList;
});
var bindCatList = new Control_Bind.Bind(function () {
    return applyCatList;
}, Data_Function.flip(foldMap(monoidCatList)));
var applyCatList = new Control_Apply.Apply(function () {
    return functorCatList;
}, Control_Monad.ap(monadCatList));
var applicativeCatList = new Control_Applicative.Applicative(function () {
    return applyCatList;
}, singleton);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
    };
};
var snoc = function (cat) {
    return function (a) {
        return append(cat)(new CatCons(a, Data_CatQueue.empty));
    };
};
var unfoldable1CatList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var unfoldableCatList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatList;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(CatNil.value);
    };
});
var altCatList = new Control_Alt.Alt(function () {
    return functorCatList;
}, append);
var plusCatList = new Control_Plus.Plus(function () {
    return altCatList;
}, empty);
var alternativeCatList = new Control_Alternative.Alternative(function () {
    return applicativeCatList;
}, function () {
    return plusCatList;
});
var monadZeroCatList = new Control_MonadZero.MonadZero(function () {
    return alternativeCatList;
}, function () {
    return monadCatList;
});
var monadPlusCatList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatList;
});
module.exports = {
    CatNil: CatNil,
    CatCons: CatCons,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    append: append,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    fromFoldable: fromFoldable,
    semigroupCatList: semigroupCatList,
    monoidCatList: monoidCatList,
    showCatList: showCatList,
    foldableCatList: foldableCatList,
    unfoldableCatList: unfoldableCatList,
    unfoldable1CatList: unfoldable1CatList,
    traversableCatList: traversableCatList,
    functorCatList: functorCatList,
    applyCatList: applyCatList,
    applicativeCatList: applicativeCatList,
    bindCatList: bindCatList,
    monadCatList: monadCatList,
    altCatList: altCatList,
    plusCatList: plusCatList,
    alternativeCatList: alternativeCatList,
    monadZeroCatList: monadZeroCatList,
    monadPlusCatList: monadPlusCatList
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.CatQueue/index.js":105,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255}],105:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var CatQueue = (function () {
    function CatQueue(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CatQueue.create = function (value0) {
        return function (value1) {
            return new CatQueue(value0, value1);
        };
    };
    return CatQueue;
})();
var unsnoc = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value1 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
        };
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value1 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
            return;
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var uncons = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        if (v.value0 instanceof Data_List_Types.Nil) {
            $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
            return;
        };
        if (v.value0 instanceof Data_List_Types.Cons) {
            $tco_done = true;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
        };
        throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var snoc = function (v) {
    return function (a) {
        return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
    };
};
var showCatQueue = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
    });
};
var $$null = function (v) {
    if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var length = function (v) {
    return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
};
var functorCatQueue = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
    };
});
var foldableCatQueue = new Data_Foldable.Foldable(function (dictMonoid) {
    return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
}, function (f) {
    var go = function ($copy_acc) {
        return function ($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
                var v = uncons(q);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_acc = f(acc)(v.value0.value0);
                    $copy_q = v.value0.value1;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_q);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return Data_Foldable.foldrDefault(foldableCatQueue)(f);
});
var semigroupCatQueue = new Data_Semigroup.Semigroup(Data_Foldable.foldl(foldableCatQueue)(snoc));
var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
var monoidCatQueue = new Data_Monoid.Monoid(function () {
    return semigroupCatQueue;
}, empty);
var singleton = snoc(empty);
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
    };
};
var traversableCatQueue = new Data_Traversable.Traversable(function () {
    return foldableCatQueue;
}, function () {
    return functorCatQueue;
}, function (dictApplicative) {
    return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
}, function (dictApplicative) {
    return function (f) {
        var $100 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty));
        var $101 = Data_Foldable.foldl(foldableCatQueue)(function (acc) {
            var $103 = Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc);
            return function ($104) {
                return $103(f($104));
            };
        })(Control_Applicative.pure(dictApplicative)(empty));
        return function ($102) {
            return $100($101($102));
        };
    };
});
var unfoldable1CatQueue = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return snoc(memo)(v.value0);
                    };
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = snoc(memo)(v.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var unfoldableCatQueue = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1CatQueue;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return memo;
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = snoc(memo)(v.value0.value0);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(empty);
    };
});
var cqEq = function (dictEq) {
    var elemEq = Data_Eq.eq(dictEq);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0))) {
                    $tco_var_xs = v1.value0.value1;
                    $copy_ys = v.value0.value1;
                    return;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return true;
                };
                $tco_done = true;
                return false;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var eqCatQueue = function (dictEq) {
    return new Data_Eq.Eq(cqEq(dictEq));
};
var cqCompare = function (dictOrd) {
    var elemCompare = Data_Ord.compare(dictOrd);
    var go = function ($copy_xs) {
        return function ($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
                var v = uncons(ys);
                var v1 = uncons(xs);
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
                    var v2 = elemCompare(v1.value0.value0)(v.value0.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_var_xs = v1.value0.value1;
                        $copy_ys = v.value0.value1;
                        return;
                    };
                    $tco_done = true;
                    return v2;
                };
                if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.GT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Ordering.EQ.value;
                };
                throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [ v1.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            };
            return $tco_result;
        };
    };
    return go;
};
var ordCatQueue = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqCatQueue(dictOrd.Eq0());
    }, cqCompare(dictOrd));
};
var cons = function (a) {
    return function (v) {
        return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
    };
};
var monadCatQueue = new Control_Monad.Monad(function () {
    return applicativeCatQueue;
}, function () {
    return bindCatQueue;
});
var bindCatQueue = new Control_Bind.Bind(function () {
    return applyCatQueue;
}, Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)));
var applyCatQueue = new Control_Apply.Apply(function () {
    return functorCatQueue;
}, Control_Monad.ap(monadCatQueue));
var applicativeCatQueue = new Control_Applicative.Applicative(function () {
    return applyCatQueue;
}, singleton);
var altCatQueue = new Control_Alt.Alt(function () {
    return functorCatQueue;
}, Data_Semigroup.append(semigroupCatQueue));
var plusCatQueue = new Control_Plus.Plus(function () {
    return altCatQueue;
}, empty);
var alternativeCatQueue = new Control_Alternative.Alternative(function () {
    return applicativeCatQueue;
}, function () {
    return plusCatQueue;
});
var monadZeroCatQueue = new Control_MonadZero.MonadZero(function () {
    return alternativeCatQueue;
}, function () {
    return monadCatQueue;
});
var monadPlusCatQueue = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroCatQueue;
});
module.exports = {
    CatQueue: CatQueue,
    empty: empty,
    "null": $$null,
    singleton: singleton,
    length: length,
    cons: cons,
    snoc: snoc,
    uncons: uncons,
    unsnoc: unsnoc,
    fromFoldable: fromFoldable,
    eqCatQueue: eqCatQueue,
    ordCatQueue: ordCatQueue,
    semigroupCatQueue: semigroupCatQueue,
    monoidCatQueue: monoidCatQueue,
    showCatQueue: showCatQueue,
    foldableCatQueue: foldableCatQueue,
    unfoldable1CatQueue: unfoldable1CatQueue,
    unfoldableCatQueue: unfoldableCatQueue,
    traversableCatQueue: traversableCatQueue,
    functorCatQueue: functorCatQueue,
    applyCatQueue: applyCatQueue,
    applicativeCatQueue: applicativeCatQueue,
    bindCatQueue: bindCatQueue,
    monadCatQueue: monadCatQueue,
    altCatQueue: altCatQueue,
    plusCatQueue: plusCatQueue,
    alternativeCatQueue: alternativeCatQueue,
    monadZeroCatQueue: monadZeroCatQueue,
    monadPlusCatQueue: monadPlusCatQueue
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255}],106:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_Gen = require("../Control.Monad.Gen/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var genUnicodeChar = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(65536));
};
var genDigitChar = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(48)(57));
};
var genAsciiChar$prime = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(0)(127));
};
var genAsciiChar = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(32)(127));
};
var genAlphaUppercase = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(65)(90));
};
var genAlphaLowercase = function (dictMonadGen) {
    return Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar)))(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(97)(122));
};
var genAlpha = function (dictMonadGen) {
    return Control_Monad_Gen.oneOf(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(genAlphaLowercase(dictMonadGen), [ genAlphaUppercase(dictMonadGen) ]));
};
module.exports = {
    genUnicodeChar: genUnicodeChar,
    genAsciiChar: genAsciiChar,
    "genAsciiChar'": genAsciiChar$prime,
    genDigitChar: genDigitChar,
    genAlpha: genAlpha,
    genAlphaLowercase: genAlphaLowercase,
    genAlphaUppercase: genAlphaUppercase
};

},{"../Control.Monad.Gen.Class/index.js":43,"../Control.Monad.Gen/index.js":44,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.NonEmpty/index.js":198}],107:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var CommutativeRingRecord = function (RingRecord0) {
    this.RingRecord0 = RingRecord0;
};
var CommutativeRing = function (Ring0) {
    this.Ring0 = Ring0;
};
var commutativeRingUnit = new CommutativeRing(function () {
    return Data_Ring.ringUnit;
});
var commutativeRingRecordNil = new CommutativeRingRecord(function () {
    return Data_Ring.ringRecordNil;
});
var commutativeRingRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCommutativeRingRecord) {
            return function (dictCommutativeRing) {
                return new CommutativeRingRecord(function () {
                    return Data_Ring.ringRecordCons(dictIsSymbol)(dictCons)(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                });
            };
        };
    };
};
var commutativeRingRecord = function (dictRowToList) {
    return function (dictCommutativeRingRecord) {
        return new CommutativeRing(function () {
            return Data_Ring.ringRecord(dictRowToList)(dictCommutativeRingRecord.RingRecord0());
        });
    };
};
var commutativeRingNumber = new CommutativeRing(function () {
    return Data_Ring.ringNumber;
});
var commutativeRingInt = new CommutativeRing(function () {
    return Data_Ring.ringInt;
});
var commutativeRingFn = function (dictCommutativeRing) {
    return new CommutativeRing(function () {
        return Data_Ring.ringFn(dictCommutativeRing.Ring0());
    });
};
module.exports = {
    CommutativeRing: CommutativeRing,
    CommutativeRingRecord: CommutativeRingRecord,
    commutativeRingInt: commutativeRingInt,
    commutativeRingNumber: commutativeRingNumber,
    commutativeRingUnit: commutativeRingUnit,
    commutativeRingFn: commutativeRingFn,
    commutativeRingRecord: commutativeRingRecord,
    commutativeRingRecordNil: commutativeRingRecordNil,
    commutativeRingRecordCons: commutativeRingRecordCons
};

},{"../Data.Ring/index.js":215}],108:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Const = function (x) {
    return x;
};
var showConst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Const " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConst = function (dictSemiring) {
    return dictSemiring;
};
var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return v1;
    };
});
var semigroupConst = function (dictSemigroup) {
    return dictSemigroup;
};
var ringConst = function (dictRing) {
    return dictRing;
};
var ordConst = function (dictOrd) {
    return dictOrd;
};
var newtypeConst = new Data_Newtype.Newtype(function (n) {
    return n;
}, Const);
var monoidConst = function (dictMonoid) {
    return dictMonoid;
};
var heytingAlgebraConst = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorConst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return m;
    };
});
var functorWithIndexConst = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorConst;
}, function (v) {
    return function (v1) {
        return v1;
    };
});
var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var foldableWithIndexConst = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableConst;
}, function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Monoid.mempty(dictMonoid);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            return z;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (dictApplicative) {
    return function (v) {
        return Control_Applicative.pure(dictApplicative)(v);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var traversableWithIndexConst = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexConst;
}, function () {
    return functorWithIndexConst;
}, function () {
    return traversableConst;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
        };
    };
});
var euclideanRingConst = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqConst = function (dictEq) {
    return dictEq;
};
var eq1Const = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqConst(dictEq));
    });
};
var ord1Const = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Const(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordConst(dictOrd));
    });
};
var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
    return function (v1) {
        return v1;
    };
});
var commutativeRingConst = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedConst = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraConst = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var bifunctorConst = new Data_Bifunctor.Bifunctor(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var bifoldableConst = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return f(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(z)(v1);
            };
        };
    };
}, function (f) {
    return function (v) {
        return function (z) {
            return function (v1) {
                return f(v1)(z);
            };
        };
    };
});
var bitraversableConst = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableConst;
}, function () {
    return bifunctorConst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Const)(f(v1));
            };
        };
    };
});
var applyConst = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorConst;
    }, function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v)(v1);
        };
    });
};
var applicativeConst = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyConst(dictMonoid.Semigroup0());
    }, function (v) {
        return Data_Monoid.mempty(dictMonoid);
    });
};
module.exports = {
    Const: Const,
    newtypeConst: newtypeConst,
    eqConst: eqConst,
    eq1Const: eq1Const,
    ordConst: ordConst,
    ord1Const: ord1Const,
    boundedConst: boundedConst,
    showConst: showConst,
    semigroupoidConst: semigroupoidConst,
    semigroupConst: semigroupConst,
    monoidConst: monoidConst,
    semiringConst: semiringConst,
    ringConst: ringConst,
    euclideanRingConst: euclideanRingConst,
    commutativeRingConst: commutativeRingConst,
    heytingAlgebraConst: heytingAlgebraConst,
    booleanAlgebraConst: booleanAlgebraConst,
    functorConst: functorConst,
    bifunctorConst: bifunctorConst,
    functorWithIndexConst: functorWithIndexConst,
    invariantConst: invariantConst,
    contravariantConst: contravariantConst,
    applyConst: applyConst,
    applicativeConst: applicativeConst,
    foldableConst: foldableConst,
    foldableWithIndexConst: foldableWithIndexConst,
    bifoldableConst: bifoldableConst,
    traversableConst: traversableConst,
    traversableWithIndexConst: traversableWithIndexConst,
    bitraversableConst: bitraversableConst
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Semigroupoid/index.js":68,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor/index.js":98,"../Data.Bitraversable/index.js":99,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor.Contravariant/index.js":135,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249}],109:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var CoyonedaF = (function () {
    function CoyonedaF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoyonedaF.create = function (value0) {
        return function (value1) {
            return new CoyonedaF(value0, value1);
        };
    };
    return CoyonedaF;
})();
var Coyoneda = function (x) {
    return x;
};
var unCoyoneda = function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return f(v1.value0)(v1.value1);
        })(v);
    };
};
var lowerCoyoneda = function (dictFunctor) {
    return unCoyoneda(Data_Functor.map(dictFunctor));
};
var foldableCoyoneda = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(function ($80) {
                    return f(k($80));
                });
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldl(dictFoldable)(function (x) {
                    var $81 = f(x);
                    return function ($82) {
                        return $81(k($82));
                    };
                })(z);
            });
        };
    }, function (f) {
        return function (z) {
            return unCoyoneda(function (k) {
                return Data_Foldable.foldr(dictFoldable)(function ($83) {
                    return f(k($83));
                })(z);
            });
        };
    });
};
var foldable1Coyoneda = function (dictFoldable1) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableCoyoneda(dictFoldable1.Foldable0());
    }, function (dictSemigroup) {
        return unCoyoneda(function (k) {
            return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(k);
        });
    }, function (dictSemigroup) {
        return function (f) {
            return unCoyoneda(function (k) {
                return Data_Semigroup_Foldable.foldMap1(dictFoldable1)(dictSemigroup)(function ($84) {
                    return f(k($84));
                });
            });
        };
    });
};
var eqCoyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (x) {
                return function (y) {
                    return Data_Eq.eq1(dictEq1)(dictEq)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var ordCoyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCoyoneda(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }, function (x) {
                return function (y) {
                    return Data_Ord.compare1(dictOrd1)(dictOrd)(lowerCoyoneda(dictFunctor)(x))(lowerCoyoneda(dictFunctor)(y));
                };
            });
        };
    };
};
var eq1Coyoneda = function (dictFunctor) {
    return function (dictEq1) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCoyoneda(dictFunctor)(dictEq1)(dictEq));
        });
    };
};
var ord1Coyoneda = function (dictFunctor) {
    return function (dictOrd1) {
        return new Data_Ord.Ord1(function () {
            return eq1Coyoneda(dictFunctor)(dictOrd1.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCoyoneda(dictFunctor)(dictOrd1)(dictOrd));
        });
    };
};
var coyoneda = function (k) {
    return function (fi) {
        return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
    };
};
var functorCoyoneda = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(function ($85) {
                return f(v1.value0($85));
            })(v1.value1);
        })(v);
    };
});
var invatiantCoyoneda = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCoyoneda));
var hoistCoyoneda = function (nat) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(v1.value0)(nat(v1.value1));
        })(v);
    };
};
var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
var distributiveCoyoneda = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorCoyoneda;
    }, function (dictFunctor) {
        return function (f) {
            var $86 = Data_Distributive.collect(dictDistributive)(dictFunctor)((function () {
                var $88 = lowerCoyoneda(dictDistributive.Functor0());
                return function ($89) {
                    return $88(f($89));
                };
            })());
            return function ($87) {
                return liftCoyoneda($86($87));
            };
        };
    }, function (dictFunctor) {
        var $90 = Data_Distributive.collect(dictDistributive)(dictFunctor)(lowerCoyoneda(dictDistributive.Functor0()));
        return function ($91) {
            return liftCoyoneda($90($91));
        };
    });
};
var extendCoyoneda = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (v) {
            return Data_Exists.runExists(function (v1) {
                return liftCoyoneda(Control_Extend.extend(dictExtend)((function () {
                    var $92 = coyoneda(v1.value0);
                    return function ($93) {
                        return f($92($93));
                    };
                })())(v1.value1));
            })(v);
        };
    });
};
var monadTransCoyoneda = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return liftCoyoneda;
});
var traversableCoyoneda = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableCoyoneda(dictTraversable.Foldable1());
    }, function () {
        return functorCoyoneda;
    }, function (dictApplicative) {
        return unCoyoneda(function (k) {
            var $94 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda);
            var $95 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(k);
            return function ($96) {
                return $94($95($96));
            };
        });
    }, function (dictApplicative) {
        return function (f) {
            return unCoyoneda(function (k) {
                var $97 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(liftCoyoneda);
                var $98 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(function ($100) {
                    return f(k($100));
                });
                return function ($99) {
                    return $97($98($99));
                };
            });
        };
    });
};
var traversable1Coyoneda = function (dictTraversable1) {
    return new Data_Semigroup_Traversable.Traversable1(function () {
        return foldable1Coyoneda(dictTraversable1.Foldable10());
    }, function () {
        return traversableCoyoneda(dictTraversable1.Traversable1());
    }, function (dictApply) {
        return unCoyoneda(function (k) {
            var $101 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
            var $102 = Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply);
            var $103 = Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(k);
            return function ($104) {
                return $101($102($103($104)));
            };
        });
    }, function (dictApply) {
        return function (f) {
            return unCoyoneda(function (k) {
                var $105 = Data_Functor.map(dictApply.Functor0())(liftCoyoneda);
                var $106 = Data_Semigroup_Traversable.traverse1(dictTraversable1)(dictApply)(function ($108) {
                    return f(k($108));
                });
                return function ($107) {
                    return $105($106($107));
                };
            });
        };
    });
};
var comonadCoyoneda = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendCoyoneda(dictComonad.Extend0());
    }, function (v) {
        return Data_Exists.runExists(function (v1) {
            return v1.value0(Control_Comonad.extract(dictComonad)(v1.value1));
        })(v);
    });
};
var applyCoyoneda = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (g) {
            return liftCoyoneda(Control_Apply.apply(dictApply)(lowerCoyoneda(dictApply.Functor0())(f))(lowerCoyoneda(dictApply.Functor0())(g)));
        };
    });
};
var bindCoyoneda = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyCoyoneda(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return liftCoyoneda(Data_Exists.runExists(function (v1) {
                return Control_Bind.bindFlipped(dictBind)((function () {
                    var $109 = lowerCoyoneda((dictBind.Apply0()).Functor0());
                    return function ($110) {
                        return $109(f(v1.value0($110)));
                    };
                })())(v1.value1);
            })(v));
        };
    });
};
var applicativeCoyoneda = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyCoyoneda(dictApplicative.Apply0());
    }, (function () {
        var $111 = Control_Applicative.pure(dictApplicative);
        return function ($112) {
            return liftCoyoneda($111($112));
        };
    })());
};
var monadCoyoneda = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeCoyoneda(dictMonad.Applicative0());
    }, function () {
        return bindCoyoneda(dictMonad.Bind1());
    });
};
var altCoyoneda = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorCoyoneda;
    }, function (x) {
        return function (y) {
            return liftCoyoneda(Control_Alt.alt(dictAlt)(lowerCoyoneda(dictAlt.Functor0())(x))(lowerCoyoneda(dictAlt.Functor0())(y)));
        };
    });
};
var plusCoyoneda = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altCoyoneda(dictPlus.Alt0());
    }, liftCoyoneda(Control_Plus.empty(dictPlus)));
};
var alternativeCoyoneda = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeCoyoneda(dictAlternative.Applicative0());
    }, function () {
        return plusCoyoneda(dictAlternative.Plus1());
    });
};
var monadZeroCoyoneda = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeCoyoneda(dictMonadZero.Alternative1());
    }, function () {
        return monadCoyoneda(dictMonadZero.Monad0());
    });
};
var monadPlusCoyoneda = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroCoyoneda(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    Coyoneda: Coyoneda,
    coyoneda: coyoneda,
    unCoyoneda: unCoyoneda,
    liftCoyoneda: liftCoyoneda,
    lowerCoyoneda: lowerCoyoneda,
    hoistCoyoneda: hoistCoyoneda,
    eqCoyoneda: eqCoyoneda,
    eq1Coyoneda: eq1Coyoneda,
    ordCoyoneda: ordCoyoneda,
    ord1Coyoneda: ord1Coyoneda,
    functorCoyoneda: functorCoyoneda,
    invatiantCoyoneda: invatiantCoyoneda,
    applyCoyoneda: applyCoyoneda,
    applicativeCoyoneda: applicativeCoyoneda,
    altCoyoneda: altCoyoneda,
    plusCoyoneda: plusCoyoneda,
    alternativeCoyoneda: alternativeCoyoneda,
    bindCoyoneda: bindCoyoneda,
    monadCoyoneda: monadCoyoneda,
    monadTransCoyoneda: monadTransCoyoneda,
    monadZeroCoyoneda: monadZeroCoyoneda,
    monadPlusCoyoneda: monadPlusCoyoneda,
    extendCoyoneda: extendCoyoneda,
    comonadCoyoneda: comonadCoyoneda,
    foldableCoyoneda: foldableCoyoneda,
    traversableCoyoneda: traversableCoyoneda,
    foldable1Coyoneda: foldable1Coyoneda,
    traversable1Coyoneda: traversable1Coyoneda,
    distributiveCoyoneda: distributiveCoyoneda
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Distributive/index.js":117,"../Data.Eq/index.js":123,"../Data.Exists/index.js":126,"../Data.Foldable/index.js":128,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.Ord/index.js":205,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup.Traversable/index.js":219,"../Data.Traversable/index.js":248}],110:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Year = function (x) {
    return x;
};
var Monday = (function () {
    function Monday() {

    };
    Monday.value = new Monday();
    return Monday;
})();
var Tuesday = (function () {
    function Tuesday() {

    };
    Tuesday.value = new Tuesday();
    return Tuesday;
})();
var Wednesday = (function () {
    function Wednesday() {

    };
    Wednesday.value = new Wednesday();
    return Wednesday;
})();
var Thursday = (function () {
    function Thursday() {

    };
    Thursday.value = new Thursday();
    return Thursday;
})();
var Friday = (function () {
    function Friday() {

    };
    Friday.value = new Friday();
    return Friday;
})();
var Saturday = (function () {
    function Saturday() {

    };
    Saturday.value = new Saturday();
    return Saturday;
})();
var Sunday = (function () {
    function Sunday() {

    };
    Sunday.value = new Sunday();
    return Sunday;
})();
var January = (function () {
    function January() {

    };
    January.value = new January();
    return January;
})();
var February = (function () {
    function February() {

    };
    February.value = new February();
    return February;
})();
var March = (function () {
    function March() {

    };
    March.value = new March();
    return March;
})();
var April = (function () {
    function April() {

    };
    April.value = new April();
    return April;
})();
var May = (function () {
    function May() {

    };
    May.value = new May();
    return May;
})();
var June = (function () {
    function June() {

    };
    June.value = new June();
    return June;
})();
var July = (function () {
    function July() {

    };
    July.value = new July();
    return July;
})();
var August = (function () {
    function August() {

    };
    August.value = new August();
    return August;
})();
var September = (function () {
    function September() {

    };
    September.value = new September();
    return September;
})();
var October = (function () {
    function October() {

    };
    October.value = new October();
    return October;
})();
var November = (function () {
    function November() {

    };
    November.value = new November();
    return November;
})();
var December = (function () {
    function December() {

    };
    December.value = new December();
    return December;
})();
var Day = function (x) {
    return x;
};
var showYear = new Data_Show.Show(function (v) {
    return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showWeekday = new Data_Show.Show(function (v) {
    if (v instanceof Monday) {
        return "Monday";
    };
    if (v instanceof Tuesday) {
        return "Tuesday";
    };
    if (v instanceof Wednesday) {
        return "Wednesday";
    };
    if (v instanceof Thursday) {
        return "Thursday";
    };
    if (v instanceof Friday) {
        return "Friday";
    };
    if (v instanceof Saturday) {
        return "Saturday";
    };
    if (v instanceof Sunday) {
        return "Sunday";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 191, column 25): " + [ v.constructor.name ]);
});
var showMonth = new Data_Show.Show(function (v) {
    if (v instanceof January) {
        return "January";
    };
    if (v instanceof February) {
        return "February";
    };
    if (v instanceof March) {
        return "March";
    };
    if (v instanceof April) {
        return "April";
    };
    if (v instanceof May) {
        return "May";
    };
    if (v instanceof June) {
        return "June";
    };
    if (v instanceof July) {
        return "July";
    };
    if (v instanceof August) {
        return "August";
    };
    if (v instanceof September) {
        return "September";
    };
    if (v instanceof October) {
        return "October";
    };
    if (v instanceof November) {
        return "November";
    };
    if (v instanceof December) {
        return "December";
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [ v.constructor.name ]);
});
var showDay = new Data_Show.Show(function (v) {
    return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordYear = Data_Ord.ordInt;
var ordDay = Data_Ord.ordInt;
var eqYear = Data_Eq.eqInt;
var eqWeekday = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return true;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return true;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return true;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return true;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return true;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return true;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return true;
        };
        return false;
    };
});
var ordWeekday = new Data_Ord.Ord(function () {
    return eqWeekday;
}, function (x) {
    return function (y) {
        if (x instanceof Monday && y instanceof Monday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Monday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Monday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Tuesday && y instanceof Tuesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Tuesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Tuesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Wednesday && y instanceof Wednesday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Wednesday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Wednesday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Thursday && y instanceof Thursday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Thursday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Thursday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Friday && y instanceof Friday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Friday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Friday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Saturday && y instanceof Saturday) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Saturday) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Saturday) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sunday && y instanceof Sunday) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 154, column 1 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqMonth = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return true;
        };
        if (x instanceof February && y instanceof February) {
            return true;
        };
        if (x instanceof March && y instanceof March) {
            return true;
        };
        if (x instanceof April && y instanceof April) {
            return true;
        };
        if (x instanceof May && y instanceof May) {
            return true;
        };
        if (x instanceof June && y instanceof June) {
            return true;
        };
        if (x instanceof July && y instanceof July) {
            return true;
        };
        if (x instanceof August && y instanceof August) {
            return true;
        };
        if (x instanceof September && y instanceof September) {
            return true;
        };
        if (x instanceof October && y instanceof October) {
            return true;
        };
        if (x instanceof November && y instanceof November) {
            return true;
        };
        if (x instanceof December && y instanceof December) {
            return true;
        };
        return false;
    };
});
var ordMonth = new Data_Ord.Ord(function () {
    return eqMonth;
}, function (x) {
    return function (y) {
        if (x instanceof January && y instanceof January) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof January) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof January) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof February && y instanceof February) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof February) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof February) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof March && y instanceof March) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof March) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof March) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof April && y instanceof April) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof April) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof April) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof May && y instanceof May) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof May) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof May) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof June && y instanceof June) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof June) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof June) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof July && y instanceof July) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof July) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof July) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof August && y instanceof August) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof August) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof August) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof September && y instanceof September) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof September) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof September) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof October && y instanceof October) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof October) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof October) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof November && y instanceof November) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof November) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof November) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof December && y instanceof December) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqDay = Data_Eq.eqInt;
var boundedYear = new Data_Bounded.Bounded(function () {
    return ordYear;
}, -271820 | 0, 275759);
var boundedWeekday = new Data_Bounded.Bounded(function () {
    return ordWeekday;
}, Monday.value, Sunday.value);
var boundedMonth = new Data_Bounded.Bounded(function () {
    return ordMonth;
}, January.value, December.value);
var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
    return boundedYear;
}, function () {
    return enumYear;
}, 547580, function (v) {
    return v;
}, function (n) {
    if (n >= (-271820 | 0) && n <= 275759) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [ n.constructor.name ]);
});
var enumYear = new Data_Enum.Enum(function () {
    return ordYear;
}, (function () {
    var $46 = Data_Enum.toEnum(boundedEnumYear);
    var $47 = Data_Enum.fromEnum(boundedEnumYear);
    return function ($48) {
        return $46((function (v) {
            return v - 1 | 0;
        })($47($48)));
    };
})(), (function () {
    var $49 = Data_Enum.toEnum(boundedEnumYear);
    var $50 = Data_Enum.fromEnum(boundedEnumYear);
    return function ($51) {
        return $49((function (v) {
            return v + 1 | 0;
        })($50($51)));
    };
})());
var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
    return boundedWeekday;
}, function () {
    return enumWeekday;
}, 7, function (v) {
    if (v instanceof Monday) {
        return 1;
    };
    if (v instanceof Tuesday) {
        return 2;
    };
    if (v instanceof Wednesday) {
        return 3;
    };
    if (v instanceof Thursday) {
        return 4;
    };
    if (v instanceof Friday) {
        return 5;
    };
    if (v instanceof Saturday) {
        return 6;
    };
    if (v instanceof Sunday) {
        return 7;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(Monday.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Tuesday.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Wednesday.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(Thursday.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(Friday.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(Saturday.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(Sunday.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumWeekday = new Data_Enum.Enum(function () {
    return ordWeekday;
}, (function () {
    var $52 = Data_Enum.toEnum(boundedEnumWeekday);
    var $53 = Data_Enum.fromEnum(boundedEnumWeekday);
    return function ($54) {
        return $52((function (v) {
            return v - 1 | 0;
        })($53($54)));
    };
})(), (function () {
    var $55 = Data_Enum.toEnum(boundedEnumWeekday);
    var $56 = Data_Enum.fromEnum(boundedEnumWeekday);
    return function ($57) {
        return $55((function (v) {
            return v + 1 | 0;
        })($56($57)));
    };
})());
var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
    return boundedMonth;
}, function () {
    return enumMonth;
}, 12, function (v) {
    if (v instanceof January) {
        return 1;
    };
    if (v instanceof February) {
        return 2;
    };
    if (v instanceof March) {
        return 3;
    };
    if (v instanceof April) {
        return 4;
    };
    if (v instanceof May) {
        return 5;
    };
    if (v instanceof June) {
        return 6;
    };
    if (v instanceof July) {
        return 7;
    };
    if (v instanceof August) {
        return 8;
    };
    if (v instanceof September) {
        return 9;
    };
    if (v instanceof October) {
        return 10;
    };
    if (v instanceof November) {
        return 11;
    };
    if (v instanceof December) {
        return 12;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(January.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(February.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(March.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(April.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(May.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(June.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(July.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(August.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(September.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(October.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(November.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(December.value);
    };
    return Data_Maybe.Nothing.value;
});
var enumMonth = new Data_Enum.Enum(function () {
    return ordMonth;
}, (function () {
    var $58 = Data_Enum.toEnum(boundedEnumMonth);
    var $59 = Data_Enum.fromEnum(boundedEnumMonth);
    return function ($60) {
        return $58((function (v) {
            return v - 1 | 0;
        })($59($60)));
    };
})(), (function () {
    var $61 = Data_Enum.toEnum(boundedEnumMonth);
    var $62 = Data_Enum.fromEnum(boundedEnumMonth);
    return function ($63) {
        return $61((function (v) {
            return v + 1 | 0;
        })($62($63)));
    };
})());
var boundedDay = new Data_Bounded.Bounded(function () {
    return ordDay;
}, 1, 31);
var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
    return boundedDay;
}, function () {
    return enumDay;
}, 31, function (v) {
    return v;
}, function (n) {
    if (n >= 1 && n <= 31) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [ n.constructor.name ]);
});
var enumDay = new Data_Enum.Enum(function () {
    return ordDay;
}, (function () {
    var $64 = Data_Enum.toEnum(boundedEnumDay);
    var $65 = Data_Enum.fromEnum(boundedEnumDay);
    return function ($66) {
        return $64((function (v) {
            return v - 1 | 0;
        })($65($66)));
    };
})(), (function () {
    var $67 = Data_Enum.toEnum(boundedEnumDay);
    var $68 = Data_Enum.fromEnum(boundedEnumDay);
    return function ($69) {
        return $67((function (v) {
            return v + 1 | 0;
        })($68($69)));
    };
})());
module.exports = {
    January: January,
    February: February,
    March: March,
    April: April,
    May: May,
    June: June,
    July: July,
    August: August,
    September: September,
    October: October,
    November: November,
    December: December,
    Monday: Monday,
    Tuesday: Tuesday,
    Wednesday: Wednesday,
    Thursday: Thursday,
    Friday: Friday,
    Saturday: Saturday,
    Sunday: Sunday,
    eqYear: eqYear,
    ordYear: ordYear,
    boundedYear: boundedYear,
    enumYear: enumYear,
    boundedEnumYear: boundedEnumYear,
    showYear: showYear,
    eqMonth: eqMonth,
    ordMonth: ordMonth,
    boundedMonth: boundedMonth,
    enumMonth: enumMonth,
    boundedEnumMonth: boundedEnumMonth,
    showMonth: showMonth,
    eqDay: eqDay,
    ordDay: ordDay,
    boundedDay: boundedDay,
    enumDay: enumDay,
    boundedEnumDay: boundedEnumDay,
    showDay: showDay,
    eqWeekday: eqWeekday,
    ordWeekday: ordWeekday,
    boundedWeekday: boundedWeekday,
    enumWeekday: enumWeekday,
    boundedEnumWeekday: boundedEnumWeekday,
    showWeekday: showWeekday
};

},{"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226}],111:[function(require,module,exports){
"use strict";

var createDate = function (y, m, d) {
  var date = new Date(Date.UTC(y, m, d));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date;
};

exports.canonicalDateImpl = function (ctor, y, m, d) {
  var date = createDate(y, m - 1, d);
  return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
};

exports.calcWeekday = function (y, m, d) {
  return createDate(y, m - 1, d).getUTCDay();
};

exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
  var dt1 = createDate(y1, m1 - 1, d1);
  var dt2 = createDate(y2, m2 - 1, d2);
  return dt1.getTime() - dt2.getTime();
};

},{}],112:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var $$Date = (function () {
    function $$Date(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    $$Date.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new $$Date(value0, value1, value2);
            };
        };
    };
    return $$Date;
})();
var year = function (v) {
    return v.value0;
};
var weekday = function (v) {
    var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
    var $41 = n === 0;
    if ($41) {
        return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
    };
    return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
};
var showDate = new Data_Show.Show(function (v) {
    return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
});
var month = function (v) {
    return v.value1;
};
var isLeapYear = function (y) {
    var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
    return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
};
var lastDayOfMonth = function (y) {
    return function (m) {
        var unsafeDay = (function () {
            var $108 = Data_Maybe.fromJust();
            var $109 = Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
            return function ($110) {
                return $108($109($110));
            };
        })();
        if (m instanceof Data_Date_Component.January) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.February) {
            if (isLeapYear(y)) {
                return unsafeDay(29);
            };
            if (Data_Boolean.otherwise) {
                return unsafeDay(28);
            };
        };
        if (m instanceof Data_Date_Component.March) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.April) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.May) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.June) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.July) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.August) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.September) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.October) {
            return unsafeDay(31);
        };
        if (m instanceof Data_Date_Component.November) {
            return unsafeDay(30);
        };
        if (m instanceof Data_Date_Component.December) {
            return unsafeDay(31);
        };
        throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [ m.constructor.name ]);
    };
};
var eqDate = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
    };
});
var ordDate = new Data_Ord.Ord(function () {
    return eqDate;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
    };
});
var enumDate = new Data_Enum.Enum(function () {
    return ordDate;
}, function (v) {
    var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
    var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
    var y$prime = (function () {
        var $73 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
        if ($73) {
            return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var m$prime = (function () {
        var $74 = Data_Maybe.isNothing(pd);
        if ($74) {
            return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
        };
        return v.value1;
    })();
    var l = lastDayOfMonth(v.value0)(m$prime);
    var d$prime = (function () {
        var $75 = Data_Maybe.isNothing(pd);
        if ($75) {
            return new Data_Maybe.Just(l);
        };
        return pd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
}, function (v) {
    var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
    var l = lastDayOfMonth(v.value0)(v.value1);
    var sd = (function () {
        var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
        var $80 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
        if ($80) {
            return Data_Maybe.Nothing.value;
        };
        return v1;
    })();
    var m$prime = (function () {
        var $81 = Data_Maybe.isNothing(sd);
        if ($81) {
            return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
        };
        return v.value1;
    })();
    var y$prime = (function () {
        var $82 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
        if ($82) {
            return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
        };
        return new Data_Maybe.Just(v.value0);
    })();
    var d$prime = (function () {
        var $83 = Data_Maybe.isNothing(sd);
        if ($83) {
            return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
        };
        return sd;
    })();
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
});
var diff = function (dictDuration) {
    return function (v) {
        return function (v1) {
            return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
        };
    };
};
var day = function (v) {
    return v.value2;
};
var canonicalDate = function (y) {
    return function (m) {
        return function (d) {
            var mkDate = function (y$prime) {
                return function (m$prime) {
                    return function (d$prime) {
                        return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                    };
                };
            };
            return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
        };
    };
};
var exactDate = function (y) {
    return function (m) {
        return function (d) {
            var dt = new $$Date(y, m, d);
            var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
            if ($99) {
                return new Data_Maybe.Just(dt);
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var boundedDate = new Data_Bounded.Bounded(function () {
    return ordDate;
}, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
var adjust = function (v) {
    return function (date) {
        var adj = function (v1) {
            return function (v2) {
                if (v1 === 0) {
                    return new Data_Maybe.Just(v2);
                };
                var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
                var low = j < 1;
                var l = lastDayOfMonth(v2.value0)((function () {
                    if (low) {
                        return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
                    };
                    return v2.value1;
                })());
                var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
                var i$prime = (function () {
                    if (low) {
                        return j;
                    };
                    if (hi) {
                        return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
                    };
                    if (Data_Boolean.otherwise) {
                        return 0;
                    };
                    throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 103, column 28): " + [  ]);
                })();
                var dt$prime = (function () {
                    if (low) {
                        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
                    };
                    if (hi) {
                        return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
                    };
                    if (Data_Boolean.otherwise) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
                    };
                    throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + [  ]);
                })();
                return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
            };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
    };
};
module.exports = {
    canonicalDate: canonicalDate,
    exactDate: exactDate,
    year: year,
    month: month,
    day: day,
    weekday: weekday,
    diff: diff,
    isLeapYear: isLeapYear,
    lastDayOfMonth: lastDayOfMonth,
    adjust: adjust,
    eqDate: eqDate,
    ordDate: ordDate,
    boundedDate: boundedDate,
    showDate: showDate,
    enumDate: enumDate
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Date.Component/index.js":110,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.EuclideanRing/index.js":125,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226,"../Data.Time.Duration/index.js":244,"./foreign.js":111}],113:[function(require,module,exports){
"use strict";

var createDateTime = function (y, m, d, h, mi, s, ms) {
  var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));
  if (y >= 0 && y < 100) {
    dateTime.setUTCFullYear(y);
  }
  return dateTime;
};

exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
  return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
};

exports.toDateTimeImpl = function (ctor) {
  return function (instant) {
    var dt = new Date(instant);
    return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
  };
};

},{}],114:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Instant = function (x) {
    return x;
};
var unInstant = function (v) {
    return v;
};
var toDateTime = (function () {
    var mkDateTime = function (y) {
        return function (mo) {
            return function (d) {
                return function (h) {
                    return function (mi) {
                        return function (s) {
                            return function (ms) {
                                return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                            };
                        };
                    };
                };
            };
        };
    };
    return $foreign.toDateTimeImpl(mkDateTime);
})();
var showInstant = new Data_Show.Show(function (v) {
    return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
});
var ordDateTime = Data_Time_Duration.ordMilliseconds;
var instant = function (v) {
    if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
        return new Data_Maybe.Just(v);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [ v.constructor.name ]);
};
var fromDateTime = function (v) {
    return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
};
var fromDate = function (d) {
    return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
};
var eqDateTime = Data_Time_Duration.eqMilliseconds;
var boundedInstant = new Data_Bounded.Bounded(function () {
    return ordDateTime;
}, -8.6399778816e15, 8.639977881599999e15);
module.exports = {
    instant: instant,
    unInstant: unInstant,
    fromDateTime: fromDateTime,
    fromDate: fromDate,
    toDateTime: toDateTime,
    eqDateTime: eqDateTime,
    ordDateTime: ordDateTime,
    boundedInstant: boundedInstant,
    showInstant: showInstant
};

},{"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Date.Component/index.js":110,"../Data.Date/index.js":112,"../Data.DateTime/index.js":116,"../Data.Enum/index.js":121,"../Data.Maybe/index.js":187,"../Data.Show/index.js":226,"../Data.Time.Component/index.js":243,"../Data.Time.Duration/index.js":244,"../Data.Time/index.js":245,"./foreign.js":113}],115:[function(require,module,exports){
"use strict";

var createUTC = function (y, mo, d, h, m, s, ms) {
  var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date.getTime();
};

exports.calcDiff = function (rec1, rec2) {
  var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
  var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
  return msUTC1 - msUTC2;
};

exports.adjustImpl = function (just) {
  return function (nothing) {
    return function (offset) {
      return function (rec) {
        var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
        var dt = new Date(msUTC + offset);
        return isNaN(dt.getTime()) ? nothing : just({
          year: dt.getUTCFullYear(),
          month: dt.getUTCMonth() + 1,
          day: dt.getUTCDate(),
          hour: dt.getUTCHours(),
          minute: dt.getUTCMinutes(),
          second: dt.getUTCSeconds(),
          millisecond: dt.getUTCMilliseconds()
        });
      };
    };
  };
};

},{}],116:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var DateTime = (function () {
    function DateTime(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DateTime.create = function (value0) {
        return function (value1) {
            return new DateTime(value0, value1);
        };
    };
    return DateTime;
})();
var toRecord = function (v) {
    return {
        year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
        month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
        day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
        hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
        minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
        second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
        millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
    };
};
var time = function (v) {
    return v.value1;
};
var showDateTime = new Data_Show.Show(function (v) {
    return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
});
var modifyTimeF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
        };
    };
};
var modifyTime = function (f) {
    return function (v) {
        return new DateTime(v.value0, f(v.value1));
    };
};
var modifyDateF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
        };
    };
};
var modifyDate = function (f) {
    return function (v) {
        return new DateTime(f(v.value0), v.value1);
    };
};
var eqDateTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
    };
});
var ordDateTime = new Data_Ord.Ord(function () {
    return eqDateTime;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
    };
});
var diff = function (dictDuration) {
    return function (dt1) {
        return function (dt2) {
            return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
        };
    };
};
var date = function (v) {
    return v.value0;
};
var boundedDateTime = new Data_Bounded.Bounded(function () {
    return ordDateTime;
}, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
var adjust = function (dictDuration) {
    return function (d) {
        return function (dt) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
            });
        };
    };
};
module.exports = {
    DateTime: DateTime,
    date: date,
    modifyDate: modifyDate,
    modifyDateF: modifyDateF,
    time: time,
    modifyTime: modifyTime,
    modifyTimeF: modifyTimeF,
    adjust: adjust,
    diff: diff,
    eqDateTime: eqDateTime,
    ordDateTime: ordDateTime,
    boundedDateTime: boundedDateTime,
    showDateTime: showDateTime
};

},{"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Data.Bounded/index.js":103,"../Data.Date.Component/index.js":110,"../Data.Date/index.js":112,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226,"../Data.Time.Component/index.js":243,"../Data.Time.Duration/index.js":244,"../Data.Time/index.js":245,"./foreign.js":115}],117:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Distributive = function (Functor0, collect, distribute) {
    this.Functor0 = Functor0;
    this.collect = collect;
    this.distribute = distribute;
};
var distributiveIdentity = new Distributive(function () {
    return Data_Identity.functorIdentity;
}, function (dictFunctor) {
    return function (f) {
        var $11 = Data_Functor.map(dictFunctor)((function () {
            var $13 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
            return function ($14) {
                return $13(f($14));
            };
        })());
        return function ($12) {
            return Data_Identity.Identity($11($12));
        };
    };
}, function (dictFunctor) {
    var $15 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
    return function ($16) {
        return Data_Identity.Identity($15($16));
    };
});
var distribute = function (dict) {
    return dict.distribute;
};
var distributiveFunction = new Distributive(function () {
    return Data_Functor.functorFn;
}, function (dictFunctor) {
    return function (f) {
        var $17 = distribute(distributiveFunction)(dictFunctor);
        var $18 = Data_Functor.map(dictFunctor)(f);
        return function ($19) {
            return $17($18($19));
        };
    };
}, function (dictFunctor) {
    return function (a) {
        return function (e) {
            return Data_Functor.map(dictFunctor)(function (v) {
                return v(e);
            })(a);
        };
    };
});
var cotraverse = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            var $20 = Data_Functor.map(dictDistributive.Functor0())(f);
            var $21 = distribute(dictDistributive)(dictFunctor);
            return function ($22) {
                return $20($21($22));
            };
        };
    };
};
var collectDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return function (f) {
            var $23 = distribute(dictDistributive)(dictFunctor);
            var $24 = Data_Functor.map(dictFunctor)(f);
            return function ($25) {
                return $23($24($25));
            };
        };
    };
};
var collect = function (dict) {
    return dict.collect;
};
var distributeDefault = function (dictDistributive) {
    return function (dictFunctor) {
        return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    collect: collect,
    distribute: distribute,
    Distributive: Distributive,
    distributeDefault: distributeDefault,
    collectDefault: collectDefault,
    cotraverse: cotraverse,
    distributiveIdentity: distributiveIdentity,
    distributiveFunction: distributiveFunction
};

},{"../Control.Category/index.js":24,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197}],118:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var DivisionRing = function (Ring0, recip) {
    this.Ring0 = Ring0;
    this.recip = recip;
};
var recip = function (dict) {
    return dict.recip;
};
var rightDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));
        };
    };
};
var leftDiv = function (dictDivisionRing) {
    return function (a) {
        return function (b) {
            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);
        };
    };
};
var divisionringNumber = new DivisionRing(function () {
    return Data_Ring.ringNumber;
}, function (x) {
    return 1.0 / x;
});
module.exports = {
    DivisionRing: DivisionRing,
    recip: recip,
    leftDiv: leftDiv,
    rightDiv: rightDiv,
    divisionringNumber: divisionringNumber
};

},{"../Data.Ring/index.js":215,"../Data.Semiring/index.js":223}],119:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Left) {
                return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either (line 163, column 1 - line 165, column 46): " + [ v.constructor.name ]);
        });
    };
};
var note$prime = function (f) {
    return Data_Maybe["maybe'"](function ($198) {
        return Left.create(f($198));
    })(Right.create);
};
var note = function (a) {
    return Data_Maybe.maybe(new Left(a))(Right.create);
};
var functorEither = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Left) {
            return new Left(m.value0);
        };
        if (m instanceof Right) {
            return new Right(f(m.value0));
        };
        throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
    };
});
var functorWithIndexEither = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorEither;
}, function (f) {
    return Data_Functor.map(functorEither)(f(Data_Unit.unit));
});
var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
var fromRight = function (dictPartial) {
    return function (v) {
        if (v instanceof Right) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
    };
};
var fromLeft = function (dictPartial) {
    return function (v) {
        if (v instanceof Left) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [ v.constructor.name ]);
    };
};
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableWithIndexEither = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableEither;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(Data_Unit.unit)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(Data_Unit.unit)(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either (line 195, column 1 - line 201, column 42): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 211, column 1 - line 215, column 36): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableWithIndexEither = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexEither;
}, function () {
    return functorWithIndexEither;
}, function () {
    return traversableEither;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(Data_Unit.unit)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 217, column 1 - line 219, column 53): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof Left && y instanceof Left) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof Left) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof Left) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Right && y instanceof Right) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 179, column 1 - line 179, column 64): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var eq1Either = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqEither(dictEq)(dictEq1));
    });
};
var ord1Either = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Either(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
    });
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
var choose = function (dictAlt) {
    return function (a) {
        return function (b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
    };
};
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either (line 203, column 1 - line 209, column 32): " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either (line 221, column 1 - line 225, column 37): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Control_Apply.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Data_Functor.map(functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Control_Bind.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (x) {
        return function (y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
        };
    });
};
var applicativeEither = new Control_Applicative.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Control_Monad.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left,
    Right: Right,
    either: either,
    choose: choose,
    isLeft: isLeft,
    isRight: isRight,
    fromLeft: fromLeft,
    fromRight: fromRight,
    note: note,
    "note'": note$prime,
    hush: hush,
    functorEither: functorEither,
    functorWithIndexEither: functorWithIndexEither,
    invariantEither: invariantEither,
    bifunctorEither: bifunctorEither,
    applyEither: applyEither,
    applicativeEither: applicativeEither,
    altEither: altEither,
    bindEither: bindEither,
    monadEither: monadEither,
    extendEither: extendEither,
    showEither: showEither,
    eqEither: eqEither,
    eq1Either: eq1Either,
    ordEither: ordEither,
    ord1Either: ord1Either,
    boundedEither: boundedEither,
    foldableEither: foldableEither,
    foldableWithIndexEither: foldableWithIndexEither,
    bifoldableEither: bifoldableEither,
    traversableEither: traversableEither,
    traversableWithIndexEither: traversableWithIndexEither,
    bitraversableEither: bitraversableEither,
    semigroupEither: semigroupEither
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor/index.js":98,"../Data.Bitraversable/index.js":99,"../Data.Bounded/index.js":103,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Unit/index.js":257}],120:[function(require,module,exports){
"use strict";

exports.toCharCode = function (c) {
  return c.charCodeAt(0);
};

exports.fromCharCode = function (c) {
  return String.fromCharCode(c);
};

},{}],121:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Cardinality = function (x) {
    return x;
};
var Enum = function (Ord0, pred, succ) {
    this.Ord0 = Ord0;
    this.pred = pred;
    this.succ = succ;
};
var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
    this.Bounded0 = Bounded0;
    this.Enum1 = Enum1;
    this.cardinality = cardinality;
    this.fromEnum = fromEnum;
    this.toEnum = toEnum;
};
var toEnum = function (dict) {
    return dict.toEnum;
};
var succ = function (dict) {
    return dict.succ;
};
var upFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
    };
};
var showCardinality = new Data_Show.Show(function (v) {
    return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var pred = function (dict) {
    return dict.pred;
};
var ordCardinality = Data_Ord.ordInt;
var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
    return n;
}, Cardinality);
var fromEnum = function (dict) {
    return dict.fromEnum;
};
var toEnumWithDefaults = function (dictBoundedEnum) {
    return function (low) {
        return function (high) {
            return function (x) {
                var v = toEnum(dictBoundedEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    return v.value0;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                    if ($54) {
                        return low;
                    };
                    return high;
                };
                throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
            };
        };
    };
};
var eqCardinality = Data_Eq.eqInt;
var enumUnit = new Enum(function () {
    return Data_Ord.ordUnit;
}, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
var enumTuple = function (dictEnum) {
    return function (dictBoundedEnum) {
        return new Enum(function () {
            return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))((function () {
                var $96 = Data_Tuple.Tuple.create(v.value0);
                return function ($97) {
                    return Data_Maybe.Just.create($96($97));
                };
            })())(pred(dictBoundedEnum.Enum1())(v.value1));
        }, function (v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))((function () {
                var $98 = Data_Tuple.Tuple.create(v.value0);
                return function ($99) {
                    return Data_Maybe.Just.create($98($99));
                };
            })())(succ(dictBoundedEnum.Enum1())(v.value1));
        });
    };
};
var enumOrdering = new Enum(function () {
    return Data_Ord.ordOrdering;
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v instanceof Data_Ordering.EQ) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    if (v instanceof Data_Ordering.GT) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [ v.constructor.name ]);
});
var enumMaybe = function (dictBoundedEnum) {
    return new Enum(function () {
        return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
    }, function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
        };
        throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [ v.constructor.name ]);
    });
};
var enumInt = new Enum(function () {
    return Data_Ord.ordInt;
}, function (n) {
    var $67 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
    if ($67) {
        return new Data_Maybe.Just(n - 1 | 0);
    };
    return Data_Maybe.Nothing.value;
}, function (n) {
    var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
    if ($68) {
        return new Data_Maybe.Just(n + 1 | 0);
    };
    return Data_Maybe.Nothing.value;
});
var enumFromTo = function (dictEnum) {
    return function (dictUnfoldable1) {
        var go = function (step) {
            return function (op) {
                return function (to) {
                    return function (a) {
                        return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function (a$prime) {
                            return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(op(a$prime)(to)))(a$prime);
                        }));
                    };
                };
            };
        };
        return function (v) {
            return function (v1) {
                if (Data_Eq.eq((dictEnum.Ord0()).Eq0())(v)(v1)) {
                    return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
                };
                if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                if (Data_Boolean.otherwise) {
                    return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
                };
                throw new Error("Failed pattern match at Data.Enum (line 183, column 14 - line 187, column 51): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var enumFromThenTo = function (dictUnfoldable) {
    return function (dictFunctor) {
        return function (dictBoundedEnum) {
            var go = function (step) {
                return function (to) {
                    return function (e) {
                        if (e <= to) {
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                        };
                        if (Data_Boolean.otherwise) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 214, column 5 - line 216, column 28): " + [ step.constructor.name, to.constructor.name, e.constructor.name ]);
                    };
                };
            };
            return function (a) {
                return function (b) {
                    return function (c) {
                        var c$prime = fromEnum(dictBoundedEnum)(c);
                        var b$prime = fromEnum(dictBoundedEnum)(b);
                        var a$prime = fromEnum(dictBoundedEnum)(a);
                        return Data_Functor.map(dictFunctor)((function () {
                            var $100 = Data_Maybe.fromJust();
                            var $101 = toEnum(dictBoundedEnum);
                            return function ($102) {
                                return $100($101($102));
                            };
                        })())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                    };
                };
            };
        };
    };
};
var enumEither = function (dictBoundedEnum) {
    return function (dictBoundedEnum1) {
        return new Enum(function () {
            return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($103) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($103));
                })(pred(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($104) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($104));
                })(pred(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($105) {
                    return Data_Maybe.Just.create(Data_Either.Left.create($105));
                })(succ(dictBoundedEnum.Enum1())(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($106) {
                    return Data_Maybe.Just.create(Data_Either.Right.create($106));
                })(succ(dictBoundedEnum1.Enum1())(v.value0));
            };
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [ v.constructor.name ]);
        });
    };
};
var enumBoolean = new Enum(function () {
    return Data_Ord.ordBoolean;
}, function (v) {
    if (v) {
        return new Data_Maybe.Just(false);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    if (!v) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
var downFromIncluding = function (dictEnum) {
    return function (dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
    };
};
var diag = function (a) {
    return new Data_Tuple.Tuple(a, a);
};
var downFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
            var $107 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $108 = pred(dictEnum);
            return function ($109) {
                return $107($108($109));
            };
        })());
    };
};
var upFrom = function (dictEnum) {
    return function (dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {
            var $110 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $111 = succ(dictEnum);
            return function ($112) {
                return $110($111($112));
            };
        })());
    };
};
var defaultToEnum = function (dictBounded) {
    return function (dictEnum) {
        return function (i$prime) {
            var go = function ($copy_i) {
                return function ($copy_x) {
                    var $tco_var_i = $copy_i;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(i, x) {
                        var $82 = i === 0;
                        if ($82) {
                            $tco_done = true;
                            return new Data_Maybe.Just(x);
                        };
                        var v = succ(dictEnum)(x);
                        if (v instanceof Data_Maybe.Just) {
                            $tco_var_i = i - 1 | 0;
                            $copy_x = v.value0;
                            return;
                        };
                        if (v instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at Data.Enum (line 293, column 12 - line 295, column 33): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_i, $copy_x);
                    };
                    return $tco_result;
                };
            };
            var $85 = i$prime < 0;
            if ($85) {
                return Data_Maybe.Nothing.value;
            };
            return go(i$prime)(Data_Bounded.bottom(dictBounded));
        };
    };
};
var defaultSucc = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
    };
};
var defaultPred = function (toEnum$prime) {
    return function (fromEnum$prime) {
        return function (a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
    };
};
var defaultFromEnum = function (dictEnum) {
    var go = function ($copy_i) {
        return function ($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
                var v = pred(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                    $tco_var_i = i + 1 | 0;
                    $copy_x = v.value0;
                    return;
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return i;
                };
                throw new Error("Failed pattern match at Data.Enum (line 306, column 5 - line 308, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_x);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var defaultCardinality = function (dictBounded) {
    return function (dictEnum) {
        var go = function ($copy_i) {
            return function ($copy_x) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, x) {
                    var v = succ(dictEnum)(x);
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_i = i + 1 | 0;
                        $copy_x = v.value0;
                        return;
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return i;
                    };
                    throw new Error("Failed pattern match at Data.Enum (line 273, column 5 - line 275, column 19): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_i, $copy_x);
                };
                return $tco_result;
            };
        };
        return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
    };
};
var charToEnum = function (v) {
    if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
        return new Data_Maybe.Just($foreign.fromCharCode(v));
    };
    return Data_Maybe.Nothing.value;
};
var enumChar = new Enum(function () {
    return Data_Ord.ordChar;
}, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
var cardinality = function (dict) {
    return dict.cardinality;
};
var boundedEnumUnit = new BoundedEnum(function () {
    return Data_Bounded.boundedUnit;
}, function () {
    return enumUnit;
}, 1, Data_Function["const"](0), function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Unit.unit);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumOrdering = new BoundedEnum(function () {
    return Data_Bounded.boundedOrdering;
}, function () {
    return enumOrdering;
}, 3, function (v) {
    if (v instanceof Data_Ordering.LT) {
        return 0;
    };
    if (v instanceof Data_Ordering.EQ) {
        return 1;
    };
    if (v instanceof Data_Ordering.GT) {
        return 2;
    };
    throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(Data_Ordering.LT.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Data_Ordering.EQ.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(Data_Ordering.GT.value);
    };
    return Data_Maybe.Nothing.value;
});
var boundedEnumChar = new BoundedEnum(function () {
    return Data_Bounded.boundedChar;
}, function () {
    return enumChar;
}, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
var boundedEnumBoolean = new BoundedEnum(function () {
    return Data_Bounded.boundedBoolean;
}, function () {
    return enumBoolean;
}, 2, function (v) {
    if (!v) {
        return 0;
    };
    if (v) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [ v.constructor.name ]);
}, function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(false);
    };
    if (v === 1) {
        return new Data_Maybe.Just(true);
    };
    return Data_Maybe.Nothing.value;
});
module.exports = {
    Enum: Enum,
    succ: succ,
    pred: pred,
    BoundedEnum: BoundedEnum,
    cardinality: cardinality,
    toEnum: toEnum,
    fromEnum: fromEnum,
    toEnumWithDefaults: toEnumWithDefaults,
    Cardinality: Cardinality,
    enumFromTo: enumFromTo,
    enumFromThenTo: enumFromThenTo,
    upFrom: upFrom,
    upFromIncluding: upFromIncluding,
    downFrom: downFrom,
    downFromIncluding: downFromIncluding,
    defaultSucc: defaultSucc,
    defaultPred: defaultPred,
    defaultCardinality: defaultCardinality,
    defaultToEnum: defaultToEnum,
    defaultFromEnum: defaultFromEnum,
    enumBoolean: enumBoolean,
    enumInt: enumInt,
    enumChar: enumChar,
    enumUnit: enumUnit,
    enumOrdering: enumOrdering,
    enumMaybe: enumMaybe,
    enumEither: enumEither,
    enumTuple: enumTuple,
    boundedEnumBoolean: boundedEnumBoolean,
    boundedEnumChar: boundedEnumChar,
    boundedEnumUnit: boundedEnumUnit,
    boundedEnumOrdering: boundedEnumOrdering,
    newtypeCardinality: newtypeCardinality,
    eqCardinality: eqCardinality,
    ordCardinality: ordCardinality,
    showCardinality: showCardinality
};

},{"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.MonadZero/index.js":62,"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255,"../Data.Unit/index.js":257,"./foreign.js":120}],122:[function(require,module,exports){
"use strict";

var refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.eqBooleanImpl = refEq;
exports.eqIntImpl = refEq;
exports.eqNumberImpl = refEq;
exports.eqCharImpl = refEq;
exports.eqStringImpl = refEq;

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs === ys) return true;
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

},{}],123:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var EqRecord = function (eqRecord) {
    this.eqRecord = eqRecord;
};
var Eq1 = function (eq1) {
    this.eq1 = eq1;
};
var Eq = function (eq) {
    this.eq = eq;
};
var eqVoid = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var eqString = new Eq($foreign.eqStringImpl);
var eqRowNil = new EqRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var eqRecord = function (dict) {
    return dict.eqRecord;
};
var eqRec = function (dictRowToList) {
    return function (dictEqRecord) {
        return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var eqNumber = new Eq($foreign.eqNumberImpl);
var eqInt = new Eq($foreign.eqIntImpl);
var eqChar = new Eq($foreign.eqCharImpl);
var eqBoolean = new Eq($foreign.eqBooleanImpl);
var eq1 = function (dict) {
    return dict.eq1;
};
var eq = function (dict) {
    return dict.eq;
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl(eq(dictEq)));
};
var eq1Array = new Eq1(function (dictEq) {
    return eq(eqArray(dictEq));
});
var eqRowCons = function (dictEqRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictEq) {
                return new EqRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var get = Record_Unsafe.unsafeGet(key);
                            return eq(dictEq)(get(ra))(get(rb)) && tail;
                        };
                    };
                });
            };
        };
    };
};
var notEq = function (dictEq) {
    return function (x) {
        return function (y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
    };
};
var notEq1 = function (dictEq1) {
    return function (dictEq) {
        return function (x) {
            return function (y) {
                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
        };
    };
};
module.exports = {
    Eq: Eq,
    eq: eq,
    notEq: notEq,
    Eq1: Eq1,
    eq1: eq1,
    notEq1: notEq1,
    EqRecord: EqRecord,
    eqRecord: eqRecord,
    eqBoolean: eqBoolean,
    eqInt: eqInt,
    eqNumber: eqNumber,
    eqChar: eqChar,
    eqString: eqString,
    eqUnit: eqUnit,
    eqVoid: eqVoid,
    eqArray: eqArray,
    eqRec: eqRec,
    eq1Array: eq1Array,
    eqRowNil: eqRowNil,
    eqRowCons: eqRowCons
};

},{"../Data.Symbol/index.js":240,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"./foreign.js":122}],124:[function(require,module,exports){
"use strict";

exports.intDegree = function (x) {
  return Math.min(Math.abs(x), 2147483647);
};

// See the Euclidean definition in
// https://en.m.wikipedia.org/wiki/Modulo_operation.
exports.intDiv = function (x) {
  return function (y) {
    if (y === 0) return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};

exports.intMod = function (x) {
  return function (y) {
    if (y === 0) return 0;
    var yy = Math.abs(y);
    return ((x % yy) + yy) % yy;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

},{}],125:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
    this.CommutativeRing0 = CommutativeRing0;
    this.degree = degree;
    this.div = div;
    this.mod = mod;
};
var mod = function (dict) {
    return dict.mod;
};
var gcd = function ($copy_dictEq) {
    return function ($copy_dictEuclideanRing) {
        return function ($copy_a) {
            return function ($copy_b) {
                var $tco_var_dictEq = $copy_dictEq;
                var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                var $tco_var_a = $copy_a;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                    if ($7) {
                        $tco_done = true;
                        return a;
                    };
                    $tco_var_dictEq = dictEq;
                    $tco_var_dictEuclideanRing = dictEuclideanRing;
                    $tco_var_a = b;
                    $copy_b = mod(dictEuclideanRing)(a)(b);
                    return;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                };
                return $tco_result;
            };
        };
    };
};
var euclideanRingNumber = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingNumber;
}, function (v) {
    return 1;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var euclideanRingInt = new EuclideanRing(function () {
    return Data_CommutativeRing.commutativeRingInt;
}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
var div = function (dict) {
    return dict.div;
};
var lcm = function (dictEq) {
    return function (dictEuclideanRing) {
        return function (a) {
            return function (b) {
                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                if ($8) {
                    return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                };
                return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
        };
    };
};
var degree = function (dict) {
    return dict.degree;
};
module.exports = {
    EuclideanRing: EuclideanRing,
    degree: degree,
    div: div,
    mod: mod,
    gcd: gcd,
    lcm: lcm,
    euclideanRingInt: euclideanRingInt,
    euclideanRingNumber: euclideanRingNumber
};

},{"../Data.CommutativeRing/index.js":107,"../Data.Eq/index.js":123,"../Data.Semiring/index.js":223,"./foreign.js":124}],126:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var runExists = Unsafe_Coerce.unsafeCoerce;
var mkExists = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    mkExists: mkExists,
    runExists: runExists
};

},{"../Unsafe.Coerce/index.js":391}],127:[function(require,module,exports){
"use strict";

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],128:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var indexr = function (dictFoldable) {
    return function (idx) {
        var go = function (a) {
            return function (cursor) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $106 = cursor.pos === idx;
                if ($106) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $193 = foldr(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function ($194) {
            return (function (v) {
                return v.elem;
            })($193($194));
        };
    };
};
var $$null = function (dictFoldable) {
    return foldr(dictFoldable)(function (v) {
        return function (v1) {
            return false;
        };
    })(true);
};
var oneOf = function (dictFoldable) {
    return function (dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
    };
};
var oneOfMap = function (dictFoldable) {
    return function (dictPlus) {
        return function (f) {
            return foldr(dictFoldable)((function () {
                var $195 = Control_Alt.alt(dictPlus.Alt0());
                return function ($196) {
                    return $195(f($196));
                };
            })())(Control_Plus.empty(dictPlus));
        };
    };
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)((function () {
                var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                return function ($198) {
                    return $197(f($198));
                };
            })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var indexl = function (dictFoldable) {
    return function (idx) {
        var go = function (cursor) {
            return function (a) {
                if (cursor.elem instanceof Data_Maybe.Just) {
                    return cursor;
                };
                var $109 = cursor.pos === idx;
                if ($109) {
                    return {
                        elem: new Data_Maybe.Just(a),
                        pos: cursor.pos
                    };
                };
                return {
                    pos: cursor.pos + 1 | 0,
                    elem: cursor.elem
                };
            };
        };
        var $199 = foldl(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
        });
        return function ($200) {
            return (function (v) {
                return v.elem;
            })($199($200));
        };
    };
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false,
                                acc: x
                            };
                        };
                        return {
                            init: false,
                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true,
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var length = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(function (c) {
            return function (v) {
                return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
        })(Data_Semiring.zero(dictSemiring));
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                        if ($116) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                        if ($120) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable (line 402, column 3 - line 402, column 27): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldr(dictFoldable)(function (x) {
                return function (acc) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return foldl(dictFoldable)(function (acc) {
                return function (x) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                    var $201 = Data_Function.flip(c);
                    return function ($202) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($201($202)));
                    };
                })())(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($203) {
                    return Data_Monoid_Endo.Endo(c($203));
                })(xs))(u);
            };
        };
    };
};
var surroundMap = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (a) {
                        return function (m) {
                            return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var surround = function (dictFoldable) {
    return function (dictSemigroup) {
        return function (d) {
            return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
        };
    };
};
var foldM = function (dictFoldable) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldl(dictFoldable)(function (ma) {
                    return function (b) {
                        return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var findMap = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return p(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var find = function (dictFoldable) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing && p(v1)) {
                    return new Data_Maybe.Just(v1);
                };
                return v;
            };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
        var $205 = Data_Eq.eq(dictEq);
        return function ($206) {
            return $204($205($206));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $208 = elem(dictFoldable)(dictEq)(x);
            return function ($209) {
                return $207($208($209));
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
    };
};
var and = function (dictFoldable) {
    return function (dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable,
    foldr: foldr,
    foldl: foldl,
    foldMap: foldMap,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefaultL: foldMapDefaultL,
    foldMapDefaultR: foldMapDefaultR,
    fold: fold,
    foldM: foldM,
    traverse_: traverse_,
    for_: for_,
    sequence_: sequence_,
    oneOf: oneOf,
    oneOfMap: oneOfMap,
    intercalate: intercalate,
    surroundMap: surroundMap,
    surround: surround,
    and: and,
    or: or,
    all: all,
    any: any,
    sum: sum,
    product: product,
    elem: elem,
    notElem: notElem,
    indexl: indexl,
    indexr: indexr,
    find: find,
    findMap: findMap,
    maximum: maximum,
    maximumBy: maximumBy,
    minimum: minimum,
    minimumBy: minimumBy,
    "null": $$null,
    length: length,
    foldableArray: foldableArray,
    foldableMaybe: foldableMaybe,
    foldableFirst: foldableFirst,
    foldableLast: foldableLast,
    foldableAdditive: foldableAdditive,
    foldableDual: foldableDual,
    foldableDisj: foldableDisj,
    foldableConj: foldableConj,
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Unit/index.js":257,"./foreign.js":127}],129:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
    this.Foldable0 = Foldable0;
    this.foldMapWithIndex = foldMapWithIndex;
    this.foldlWithIndex = foldlWithIndex;
    this.foldrWithIndex = foldrWithIndex;
};
var foldrWithIndex = function (dict) {
    return dict.foldrWithIndex;
};
var traverseWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                var $46 = Control_Apply.applySecond(dictApplicative.Apply0());
                var $47 = f(i);
                return function ($48) {
                    return $46($47($48));
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var forWithIndex_ = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
    };
};
var foldrDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldlWithIndex = function (dict) {
    return dict.foldlWithIndex;
};
var foldlDefault = function (dictFoldableWithIndex) {
    return function (f) {
        return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
    };
};
var foldableWithIndexMultiplicative = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
});
var foldableWithIndexMaybe = new FoldableWithIndex(function () {
    return Data_Foldable.foldableMaybe;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
});
var foldableWithIndexLast = new FoldableWithIndex(function () {
    return Data_Foldable.foldableLast;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
});
var foldableWithIndexFirst = new FoldableWithIndex(function () {
    return Data_Foldable.foldableFirst;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
});
var foldableWithIndexDual = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDual;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
});
var foldableWithIndexDisj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableDisj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
});
var foldableWithIndexConj = new FoldableWithIndex(function () {
    return Data_Foldable.foldableConj;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
});
var foldableWithIndexAdditive = new FoldableWithIndex(function () {
    return Data_Foldable.foldableAdditive;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
});
var foldWithIndexM = function (dictFoldableWithIndex) {
    return function (dictMonad) {
        return function (f) {
            return function (a0) {
                return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                    return function (ma) {
                        return function (b) {
                            return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                        };
                    };
                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
        };
    };
};
var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                return function (x) {
                    return function (acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldableWithIndexArray = new FoldableWithIndex(function () {
    return Data_Foldable.foldableArray;
}, function (dictMonoid) {
    return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
}, function (f) {
    return function (z) {
        var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
            return function (v) {
                return f(v.value0)(y)(v.value1);
            };
        })(z);
        var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function ($51) {
            return $49($50($51));
        };
    };
}, function (f) {
    return function (z) {
        var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
            return function (y) {
                return f(v.value0)(v.value1)(y);
            };
        })(z);
        var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
        return function ($54) {
            return $52($53($54));
        };
    };
});
var foldMapWithIndexDefaultL = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                return function (acc) {
                    return function (x) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                    };
                };
            })(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var foldMapWithIndex = function (dict) {
    return dict.foldMapWithIndex;
};
var foldlWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(Data_Newtype.unwrap(Data_Newtype.newtypeDual)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function (i) {
                    var $55 = Data_Function.flip(c(i));
                    return function ($56) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($55($56)));
                    };
                })(xs)))(u);
            };
        };
    };
};
var foldrWithIndexDefault = function (dictFoldableWithIndex) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function (i) {
                    var $57 = c(i);
                    return function ($58) {
                        return Data_Monoid_Endo.Endo($57($58));
                    };
                })(xs))(u);
            };
        };
    };
};
var surroundMapWithIndex = function (dictFoldableWithIndex) {
    return function (dictSemigroup) {
        return function (d) {
            return function (t) {
                return function (f) {
                    var joined = function (i) {
                        return function (a) {
                            return function (m) {
                                return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                            };
                        };
                    };
                    return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
                };
            };
        };
    };
};
var foldMapDefault = function (dictFoldableWithIndex) {
    return function (dictMonoid) {
        return function (f) {
            return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
        };
    };
};
var findWithIndex = function (dictFoldableWithIndex) {
    return function (p) {
        var go = function (v) {
            return function (v1) {
                return function (v2) {
                    if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                        return new Data_Maybe.Just({
                            index: v,
                            value: v2
                        });
                    };
                    return v1;
                };
            };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
    };
};
var anyWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            var $59 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $60 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function (i) {
                var $62 = t(i);
                return function ($63) {
                    return Data_Monoid_Disj.Disj($62($63));
                };
            });
            return function ($61) {
                return $59($60($61));
            };
        };
    };
};
var allWithIndex = function (dictFoldableWithIndex) {
    return function (dictHeytingAlgebra) {
        return function (t) {
            var $64 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $65 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function (i) {
                var $67 = t(i);
                return function ($68) {
                    return Data_Monoid_Conj.Conj($67($68));
                };
            });
            return function ($66) {
                return $64($65($66));
            };
        };
    };
};
module.exports = {
    FoldableWithIndex: FoldableWithIndex,
    foldrWithIndex: foldrWithIndex,
    foldlWithIndex: foldlWithIndex,
    foldMapWithIndex: foldMapWithIndex,
    foldrWithIndexDefault: foldrWithIndexDefault,
    foldlWithIndexDefault: foldlWithIndexDefault,
    foldMapWithIndexDefaultR: foldMapWithIndexDefaultR,
    foldMapWithIndexDefaultL: foldMapWithIndexDefaultL,
    foldWithIndexM: foldWithIndexM,
    traverseWithIndex_: traverseWithIndex_,
    forWithIndex_: forWithIndex_,
    surroundMapWithIndex: surroundMapWithIndex,
    allWithIndex: allWithIndex,
    anyWithIndex: anyWithIndex,
    findWithIndex: findWithIndex,
    foldrDefault: foldrDefault,
    foldlDefault: foldlDefault,
    foldMapDefault: foldMapDefault,
    foldableWithIndexArray: foldableWithIndexArray,
    foldableWithIndexMaybe: foldableWithIndexMaybe,
    foldableWithIndexFirst: foldableWithIndexFirst,
    foldableWithIndexLast: foldableWithIndexLast,
    foldableWithIndexAdditive: foldableWithIndexAdditive,
    foldableWithIndexDual: foldableWithIndexDual,
    foldableWithIndexDisj: foldableWithIndexDisj,
    foldableWithIndexConj: foldableWithIndexConj,
    foldableWithIndexMultiplicative: foldableWithIndexMultiplicative
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.FunctorWithIndex/index.js":145,"../Data.Maybe/index.js":187,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257}],130:[function(require,module,exports){
"use strict";

// module Data.Function.Uncurried

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],131:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var runFn1 = function (f) {
    return f;
};
var mkFn1 = function (f) {
    return f;
};
module.exports = {
    mkFn1: mkFn1,
    runFn1: runFn1,
    mkFn0: $foreign.mkFn0,
    mkFn2: $foreign.mkFn2,
    mkFn3: $foreign.mkFn3,
    mkFn4: $foreign.mkFn4,
    mkFn5: $foreign.mkFn5,
    mkFn6: $foreign.mkFn6,
    mkFn7: $foreign.mkFn7,
    mkFn8: $foreign.mkFn8,
    mkFn9: $foreign.mkFn9,
    mkFn10: $foreign.mkFn10,
    runFn0: $foreign.runFn0,
    runFn2: $foreign.runFn2,
    runFn3: $foreign.runFn3,
    runFn4: $foreign.runFn4,
    runFn5: $foreign.runFn5,
    runFn6: $foreign.runFn6,
    runFn7: $foreign.runFn7,
    runFn8: $foreign.runFn8,
    runFn9: $foreign.runFn9,
    runFn10: $foreign.runFn10
};

},{"./foreign.js":130}],132:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var applyN = function (f) {
    var go = function ($copy_n) {
        return function ($copy_acc) {
            var $tco_var_n = $copy_n;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, acc) {
                if (n <= 0) {
                    $tco_done = true;
                    return acc;
                };
                if (Data_Boolean.otherwise) {
                    $tco_var_n = n - 1 | 0;
                    $copy_acc = f(acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.Function (line 94, column 3 - line 96, column 37): " + [ n.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_n, $copy_acc);
            };
            return $tco_result;
        };
    };
    return go;
};
var applyFlipped = function (x) {
    return function (f) {
        return f(x);
    };
};
var apply = function (f) {
    return function (x) {
        return f(x);
    };
};
module.exports = {
    flip: flip,
    "const": $$const,
    apply: apply,
    applyFlipped: applyFlipped,
    applyN: applyN,
    on: on
};

},{"../Data.Boolean/index.js":100}],133:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var App = function (x) {
    return x;
};
var traversableWithIndexApp = function (dictTraversableWithIndex) {
    return dictTraversableWithIndex;
};
var traversableApp = function (dictTraversable) {
    return dictTraversable;
};
var showApp = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(App " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupApp = function (dictApply) {
    return function (dictSemigroup) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
            };
        });
    };
};
var plusApp = function (dictPlus) {
    return dictPlus;
};
var newtypeApp = new Data_Newtype.Newtype(function (n) {
    return n;
}, App);
var monoidApp = function (dictApplicative) {
    return function (dictMonoid) {
        return new Data_Monoid.Monoid(function () {
            return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
        }, Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)));
    };
};
var monadZeroApp = function (dictMonadZero) {
    return dictMonadZero;
};
var monadPlusApp = function (dictMonadPlus) {
    return dictMonadPlus;
};
var monadApp = function (dictMonad) {
    return dictMonad;
};
var lazyApp = function (dictLazy) {
    return dictLazy;
};
var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
var hoistApp = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorWithIndexApp = function (dictFunctorWithIndex) {
    return dictFunctorWithIndex;
};
var functorApp = function (dictFunctor) {
    return dictFunctor;
};
var foldableWithIndexApp = function (dictFoldableWithIndex) {
    return dictFoldableWithIndex;
};
var foldableApp = function (dictFoldable) {
    return dictFoldable;
};
var extendApp = function (dictExtend) {
    return dictExtend;
};
var eqApp = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
            };
        });
    };
};
var ordApp = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
            };
        });
    };
};
var eq1App = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqApp(dictEq1)(dictEq));
    });
};
var ord1App = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1App(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
    });
};
var comonadApp = function (dictComonad) {
    return dictComonad;
};
var bindApp = function (dictBind) {
    return dictBind;
};
var applyApp = function (dictApply) {
    return dictApply;
};
var applicativeApp = function (dictApplicative) {
    return dictApplicative;
};
var alternativeApp = function (dictAlternative) {
    return dictAlternative;
};
var altApp = function (dictAlt) {
    return dictAlt;
};
module.exports = {
    App: App,
    hoistApp: hoistApp,
    hoistLiftApp: hoistLiftApp,
    hoistLowerApp: hoistLowerApp,
    newtypeApp: newtypeApp,
    eqApp: eqApp,
    eq1App: eq1App,
    ordApp: ordApp,
    ord1App: ord1App,
    showApp: showApp,
    semigroupApp: semigroupApp,
    monoidApp: monoidApp,
    functorApp: functorApp,
    functorWithIndexApp: functorWithIndexApp,
    applyApp: applyApp,
    applicativeApp: applicativeApp,
    bindApp: bindApp,
    monadApp: monadApp,
    altApp: altApp,
    plusApp: plusApp,
    alternativeApp: alternativeApp,
    monadZeroApp: monadZeroApp,
    monadPlusApp: monadPlusApp,
    lazyApp: lazyApp,
    foldableApp: foldableApp,
    traversableApp: traversableApp,
    foldableWithIndexApp: foldableWithIndexApp,
    traversableWithIndexApp: traversableWithIndexApp,
    extendApp: extendApp,
    comonadApp: comonadApp
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Data.Eq/index.js":123,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Unsafe.Coerce/index.js":391}],134:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Compose = function (x) {
    return x;
};
var showCompose = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var newtypeCompose = new Data_Newtype.Newtype(function (n) {
    return n;
}, Compose);
var functorCompose = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
            };
        });
    };
};
var functorWithIndexCompose = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return new Data_FunctorWithIndex.FunctorWithIndex(function () {
            return functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
        }, function (f) {
            return function (v) {
                return Compose(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)((function () {
                    var $100 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1);
                    var $101 = Data_Tuple.curry(f);
                    return function ($102) {
                        return $100($101($102));
                    };
                })())(v));
            };
        });
    };
};
var foldableCompose = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f))(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable)(Data_Foldable.foldl(dictFoldable1)(f))(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(Data_Foldable.foldr(dictFoldable1)(f)))(i)(v);
                };
            };
        });
    };
};
var foldableWithIndexCompose = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)((function () {
                        var $103 = Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
                        var $104 = Data_Tuple.curry(f);
                        return function ($105) {
                            return $103($104($105));
                        };
                    })())(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)((function () {
                        var $106 = Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1);
                        var $107 = Data_Tuple.curry(f);
                        return function ($108) {
                            return $106($107($108));
                        };
                    })())(i)(v);
                };
            };
        }, function (f) {
            return function (i) {
                return function (v) {
                    return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function (a) {
                        return Data_Function.flip(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                    })(i)(v);
                };
            };
        });
    };
};
var traversableCompose = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
        }, function () {
            return functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
        }, function (dictApplicative) {
            return Data_Traversable.traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f))(v));
                };
            };
        });
    };
};
var traversableWithIndexCompose = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return new Data_TraversableWithIndex.TraversableWithIndex(function () {
            return foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
        }, function () {
            return functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
        }, function () {
            return traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Compose)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)((function () {
                        var $109 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
                        var $110 = Data_Tuple.curry(f);
                        return function ($111) {
                            return $109($110($111));
                        };
                    })())(v));
                };
            };
        });
    };
};
var eqCompose = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq(function (v) {
                return function (v1) {
                    return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var ordCompose = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, function (v) {
                return function (v1) {
                    return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
            });
        };
    };
};
var eq1Compose = function (dictEq1) {
    return function (dictEq11) {
        return new Data_Eq.Eq1(function (dictEq) {
            return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
        });
    };
};
var ord1Compose = function (dictOrd1) {
    return function (dictOrd11) {
        return new Data_Ord.Ord1(function () {
            return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
        }, function (dictOrd) {
            return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
        });
    };
};
var bihoistCompose = function (dictFunctor) {
    return function (natF) {
        return function (natG) {
            return function (v) {
                return natF(Data_Functor.map(dictFunctor)(natG)(v));
            };
        };
    };
};
var applyCompose = function (dictApply) {
    return function (dictApply1) {
        return new Control_Apply.Apply(function () {
            return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
        }, function (v) {
            return function (v1) {
                return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
            };
        });
    };
};
var applicativeCompose = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Control_Applicative.Applicative(function () {
            return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
        }, (function () {
            var $112 = Control_Applicative.pure(dictApplicative);
            var $113 = Control_Applicative.pure(dictApplicative1);
            return function ($114) {
                return Compose($112($113($114)));
            };
        })());
    };
};
var altCompose = function (dictAlt) {
    return function (dictFunctor) {
        return new Control_Alt.Alt(function () {
            return functorCompose(dictAlt.Functor0())(dictFunctor);
        }, function (v) {
            return function (v1) {
                return Compose(Control_Alt.alt(dictAlt)(v)(v1));
            };
        });
    };
};
var plusCompose = function (dictPlus) {
    return function (dictFunctor) {
        return new Control_Plus.Plus(function () {
            return altCompose(dictPlus.Alt0())(dictFunctor);
        }, Control_Plus.empty(dictPlus));
    };
};
var alternativeCompose = function (dictAlternative) {
    return function (dictApplicative) {
        return new Control_Alternative.Alternative(function () {
            return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
        }, function () {
            return plusCompose(dictAlternative.Plus1())((dictApplicative.Apply0()).Functor0());
        });
    };
};
module.exports = {
    Compose: Compose,
    bihoistCompose: bihoistCompose,
    newtypeCompose: newtypeCompose,
    eqCompose: eqCompose,
    eq1Compose: eq1Compose,
    ordCompose: ordCompose,
    ord1Compose: ord1Compose,
    showCompose: showCompose,
    functorCompose: functorCompose,
    functorWithIndexCompose: functorWithIndexCompose,
    applyCompose: applyCompose,
    applicativeCompose: applicativeCompose,
    foldableCompose: foldableCompose,
    foldableWithIndexCompose: foldableWithIndexCompose,
    traversableCompose: traversableCompose,
    traversableWithIndexCompose: traversableWithIndexCompose,
    altCompose: altCompose,
    plusCompose: plusCompose,
    alternativeCompose: alternativeCompose
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.App/index.js":133,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251}],135:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Void = require("../Data.Void/index.js");
var Contravariant = function (cmap) {
    this.cmap = cmap;
};
var cmap = function (dict) {
    return dict.cmap;
};
var cmapFlipped = function (dictContravariant) {
    return function (x) {
        return function (f) {
            return cmap(dictContravariant)(f)(x);
        };
    };
};
var coerce = function (dictContravariant) {
    return function (dictFunctor) {
        return function (a) {
            return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
    };
};
var imapC = function (dictContravariant) {
    return function (v) {
        return function (f) {
            return cmap(dictContravariant)(f);
        };
    };
};
module.exports = {
    cmap: cmap,
    Contravariant: Contravariant,
    cmapFlipped: cmapFlipped,
    coerce: coerce,
    imapC: imapC
};

},{"../Data.Functor/index.js":143,"../Data.Void/index.js":260}],136:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Coproduct = function (x) {
    return x;
};
var showCoproduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Data_Either.Left) {
                return "(left " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Data_Either.Right) {
                return "(right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Functor.Coproduct (line 67, column 1 - line 69, column 60): " + [ v.constructor.name ]);
        });
    };
};
var right = function (ga) {
    return new Data_Either.Right(ga);
};
var newtypeCoproduct = new Data_Newtype.Newtype(function (n) {
    return n;
}, Coproduct);
var left = function (fa) {
    return new Data_Either.Left(fa);
};
var functorCoproduct = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
            };
        });
    };
};
var functorWithIndexCoproduct = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return new Data_FunctorWithIndex.FunctorWithIndex(function () {
            return functorCoproduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
        }, function (f) {
            return function (v) {
                return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($82) {
                    return f(Data_Either.Left.create($82));
                }))(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(function ($83) {
                    return f(Data_Either.Right.create($83));
                }))(v);
            };
        });
    };
};
var eq1Coproduct = function (dictEq1) {
    return function (dictEq11) {
        return new Data_Eq.Eq1(function (dictEq) {
            return function (v) {
                return function (v1) {
                    if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                        return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0);
                    };
                    if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                        return Data_Eq.eq1(dictEq11)(dictEq)(v.value0)(v1.value0);
                    };
                    return false;
                };
            };
        });
    };
};
var eqCoproduct = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq(Data_Eq.eq1(eq1Coproduct(dictEq1)(dictEq11))(dictEq));
        };
    };
};
var ord1Coproduct = function (dictOrd1) {
    return function (dictOrd11) {
        return new Data_Ord.Ord1(function () {
            return eq1Coproduct(dictOrd1.Eq10())(dictOrd11.Eq10());
        }, function (dictOrd) {
            return function (v) {
                return function (v1) {
                    if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                        return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                    };
                    if (v instanceof Data_Either.Left) {
                        return Data_Ordering.LT.value;
                    };
                    if (v1 instanceof Data_Either.Left) {
                        return Data_Ordering.GT.value;
                    };
                    if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                        return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value0)(v1.value0);
                    };
                    throw new Error("Failed pattern match at Data.Functor.Coproduct (line 61, column 5 - line 65, column 43): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        });
    };
};
var ordCoproduct = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqCoproduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, Data_Ord.compare1(ord1Coproduct(dictOrd1)(dictOrd11))(dictOrd));
        };
    };
};
var coproduct = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_Either.Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Data_Either.Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Functor.Coproduct (line 31, column 1 - line 31, column 78): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var extendCoproduct = function (dictExtend) {
    return function (dictExtend1) {
        return new Control_Extend.Extend(function () {
            return functorCoproduct(dictExtend.Functor0())(dictExtend1.Functor0());
        }, function (f) {
            var $84 = coproduct((function () {
                var $86 = Control_Extend.extend(dictExtend)(function ($88) {
                    return f(Coproduct(Data_Either.Left.create($88)));
                });
                return function ($87) {
                    return Data_Either.Left.create($86($87));
                };
            })())((function () {
                var $89 = Control_Extend.extend(dictExtend1)(function ($91) {
                    return f(Coproduct(Data_Either.Right.create($91)));
                });
                return function ($90) {
                    return Data_Either.Right.create($89($90));
                };
            })());
            return function ($85) {
                return Coproduct($84($85));
            };
        });
    };
};
var foldableCoproduct = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return coproduct(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f));
            };
        }, function (f) {
            return function (z) {
                return coproduct(Data_Foldable.foldl(dictFoldable)(f)(z))(Data_Foldable.foldl(dictFoldable1)(f)(z));
            };
        }, function (f) {
            return function (z) {
                return coproduct(Data_Foldable.foldr(dictFoldable)(f)(z))(Data_Foldable.foldr(dictFoldable1)(f)(z));
            };
        });
    };
};
var foldableWithIndexCoproduct = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableCoproduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                return coproduct(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($92) {
                    return f(Data_Either.Left.create($92));
                }))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($93) {
                    return f(Data_Either.Right.create($93));
                }));
            };
        }, function (f) {
            return function (z) {
                return coproduct(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($94) {
                    return f(Data_Either.Left.create($94));
                })(z))(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(function ($95) {
                    return f(Data_Either.Right.create($95));
                })(z));
            };
        }, function (f) {
            return function (z) {
                return coproduct(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($96) {
                    return f(Data_Either.Left.create($96));
                })(z))(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(function ($97) {
                    return f(Data_Either.Right.create($97));
                })(z));
            };
        });
    };
};
var traversableCoproduct = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableCoproduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
        }, function () {
            return functorCoproduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
        }, function (dictApplicative) {
            return coproduct((function () {
                var $98 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($101) {
                    return Coproduct(Data_Either.Left.create($101));
                });
                var $99 = Data_Traversable.sequence(dictTraversable)(dictApplicative);
                return function ($100) {
                    return $98($99($100));
                };
            })())((function () {
                var $102 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($105) {
                    return Coproduct(Data_Either.Right.create($105));
                });
                var $103 = Data_Traversable.sequence(dictTraversable1)(dictApplicative);
                return function ($104) {
                    return $102($103($104));
                };
            })());
        }, function (dictApplicative) {
            return function (f) {
                return coproduct((function () {
                    var $106 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($109) {
                        return Coproduct(Data_Either.Left.create($109));
                    });
                    var $107 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(f);
                    return function ($108) {
                        return $106($107($108));
                    };
                })())((function () {
                    var $110 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($113) {
                        return Coproduct(Data_Either.Right.create($113));
                    });
                    var $111 = Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f);
                    return function ($112) {
                        return $110($111($112));
                    };
                })());
            };
        });
    };
};
var traversableWithIndexCoproduct = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return new Data_TraversableWithIndex.TraversableWithIndex(function () {
            return foldableWithIndexCoproduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
        }, function () {
            return functorWithIndexCoproduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
        }, function () {
            return traversableCoproduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
        }, function (dictApplicative) {
            return function (f) {
                return coproduct((function () {
                    var $114 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($117) {
                        return Coproduct(Data_Either.Left.create($117));
                    });
                    var $115 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($118) {
                        return f(Data_Either.Left.create($118));
                    });
                    return function ($116) {
                        return $114($115($116));
                    };
                })())((function () {
                    var $119 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($122) {
                        return Coproduct(Data_Either.Right.create($122));
                    });
                    var $120 = Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($123) {
                        return f(Data_Either.Right.create($123));
                    });
                    return function ($121) {
                        return $119($120($121));
                    };
                })());
            };
        });
    };
};
var comonadCoproduct = function (dictComonad) {
    return function (dictComonad1) {
        return new Control_Comonad.Comonad(function () {
            return extendCoproduct(dictComonad.Extend0())(dictComonad1.Extend0());
        }, coproduct(Control_Comonad.extract(dictComonad))(Control_Comonad.extract(dictComonad1)));
    };
};
var bihoistCoproduct = function (natF) {
    return function (natG) {
        return function (v) {
            return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(natF)(natG)(v);
        };
    };
};
module.exports = {
    Coproduct: Coproduct,
    left: left,
    right: right,
    coproduct: coproduct,
    bihoistCoproduct: bihoistCoproduct,
    newtypeCoproduct: newtypeCoproduct,
    eqCoproduct: eqCoproduct,
    eq1Coproduct: eq1Coproduct,
    ordCoproduct: ordCoproduct,
    ord1Coproduct: ord1Coproduct,
    showCoproduct: showCoproduct,
    functorCoproduct: functorCoproduct,
    functorWithIndexCoproduct: functorWithIndexCoproduct,
    extendCoproduct: extendCoproduct,
    comonadCoproduct: comonadCoproduct,
    foldableCoproduct: foldableCoproduct,
    foldableWithIndexCoproduct: foldableWithIndexCoproduct,
    traversableCoproduct: traversableCoproduct,
    traversableWithIndexCoproduct: traversableWithIndexCoproduct
};

},{"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249}],137:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Invariant = function (imap) {
    this.imap = imap;
};
var invariantMultiplicative = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantEndo = new Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($31) {
                return ab(v(ba($31)));
            };
        };
    };
});
var invariantDual = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantDisj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantConj = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var invariantAdditive = new Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var imapF = function (dictFunctor) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictFunctor)(f);
        };
    };
};
var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    imap: imap,
    Invariant: Invariant,
    imapF: imapF,
    invariantFn: invariantFn,
    invariantArray: invariantArray,
    invariantAdditive: invariantAdditive,
    invariantConj: invariantConj,
    invariantDisj: invariantDisj,
    invariantDual: invariantDual,
    invariantEndo: invariantEndo,
    invariantMultiplicative: invariantMultiplicative
};

},{"../Data.Functor/index.js":143}],138:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_TacitString = require("../Data.TacitString/index.js");
var In = function (x) {
    return x;
};
var unroll = function (v) {
    return v;
};
var showMu = function (dictShow) {
    return function (dictFunctor) {
        return new Data_Show.Show(function (v) {
            return Data_Show.show(dictShow)(Data_Functor.mapFlipped(dictFunctor)(v)((function () {
                var $27 = Data_Show.show(showMu(dictShow)(dictFunctor));
                return function ($28) {
                    return Data_TacitString.hush($27($28));
                };
            })()));
        });
    };
};
var semigroupMu = function (dictAlt) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var roll = In;
var transMu = function (dictFunctor) {
    return function (η) {
        var $29 = Data_Functor.map(dictFunctor)(transMu(dictFunctor)(η));
        return function ($30) {
            return roll($29(η(unroll($30))));
        };
    };
};
var newtypeMu = new Data_Newtype.Newtype(function (n) {
    return n;
}, In);
var monoidMu = function (dictPlus) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMu(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var eqMu = function (dictEq1) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq1(dictEq1)(eqMu(dictEq1))(v)(v1);
        };
    });
};
var ordMu = function (dictEq1) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqMu(dictEq1);
        }, function (v) {
            return function (v1) {
                return Data_Ord.compare1(dictOrd1)(ordMu(dictEq1)(dictOrd1))(v)(v1);
            };
        });
    };
};
module.exports = {
    In: In,
    roll: roll,
    unroll: unroll,
    transMu: transMu,
    newtypeMu: newtypeMu,
    eqMu: eqMu,
    ordMu: ordMu,
    showMu: showMu,
    semigroupMu: semigroupMu,
    monoidMu: monoidMu
};

},{"../Control.Alt/index.js":14,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.TacitString/index.js":241}],139:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad_Store = require("../Control.Comonad.Store/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var NuF = function (x) {
    return x;
};
var Nu = function (x) {
    return x;
};
var unfold = function (pos) {
    return function (peek) {
        return Nu(Data_Exists.mkExists(NuF(Control_Comonad_Store.store(peek)(pos))));
    };
};
var observeF = function (dictFunctor) {
    return function (v) {
        var v1 = Control_Comonad_Store.runStore(v);
        return Data_Functor.map(dictFunctor)(Data_Function.flip(unfold)(v1.value0))(v1.value0(v1.value1));
    };
};
var observe = function (dictFunctor) {
    return function (v) {
        return Data_Exists.runExists(observeF(dictFunctor))(v);
    };
};
var newtypeNu = new Data_Newtype.Newtype(function (n) {
    return n;
}, Nu);
module.exports = {
    Nu: Nu,
    NuF: NuF,
    unfold: unfold,
    observe: observe,
    newtypeNu: newtypeNu
};

},{"../Control.Comonad.Store/index.js":28,"../Data.Exists/index.js":126,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197}],140:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Product = function (x) {
    return x;
};
var showProduct = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var product = function (fa) {
    return function (ga) {
        return new Data_Tuple.Tuple(fa, ga);
    };
};
var newtypeProduct = new Data_Newtype.Newtype(function (n) {
    return n;
}, Product);
var functorProduct = function (dictFunctor) {
    return function (dictFunctor1) {
        return new Data_Functor.Functor(function (f) {
            return function (v) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
            };
        });
    };
};
var functorWithIndexProduct = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return new Data_FunctorWithIndex.FunctorWithIndex(function () {
            return functorProduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
        }, function (f) {
            return function (v) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($136) {
                    return f(Data_Either.Left.create($136));
                }))(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex1)(function ($137) {
                    return f(Data_Either.Right.create($137));
                }))(v);
            };
        });
    };
};
var foldableProduct = function (dictFoldable) {
    return function (dictFoldable1) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_Foldable.foldl(dictFoldable1)(f)(Data_Foldable.foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_Foldable.foldr(dictFoldable)(f)(Data_Foldable.foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
                };
            };
        });
    };
};
var foldableWithIndexProduct = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableProduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                return function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($138) {
                        return f(Data_Either.Left.create($138));
                    })(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function ($139) {
                        return f(Data_Either.Right.create($139));
                    })(v.value1));
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex1)(function ($140) {
                        return f(Data_Either.Right.create($140));
                    })(Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($141) {
                        return f(Data_Either.Left.create($141));
                    })(z)(v.value0))(v.value1);
                };
            };
        }, function (f) {
            return function (z) {
                return function (v) {
                    return Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($142) {
                        return f(Data_Either.Left.create($142));
                    })(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex1)(function ($143) {
                        return f(Data_Either.Right.create($143));
                    })(z)(v.value1))(v.value0);
                };
            };
        });
    };
};
var traversableProduct = function (dictTraversable) {
    return function (dictTraversable1) {
        return new Data_Traversable.Traversable(function () {
            return foldableProduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
        }, function () {
            return functorProduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
        }, function (dictApplicative) {
            return function (v) {
                return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value0))(Data_Traversable.sequence(dictTraversable1)(dictApplicative)(v.value1));
            };
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value0))(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
                };
            };
        });
    };
};
var traversableWithIndexProduct = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return new Data_TraversableWithIndex.TraversableWithIndex(function () {
            return foldableWithIndexProduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
        }, function () {
            return functorWithIndexProduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
        }, function () {
            return traversableProduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
        }, function (dictApplicative) {
            return function (f) {
                return function (v) {
                    return Control_Apply.lift2(dictApplicative.Apply0())(product)(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($144) {
                        return f(Data_Either.Left.create($144));
                    })(v.value0))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function ($145) {
                        return f(Data_Either.Right.create($145));
                    })(v.value1));
                };
            };
        });
    };
};
var eq1Product = function (dictEq1) {
    return function (dictEq11) {
        return new Data_Eq.Eq1(function (dictEq) {
            return function (v) {
                return function (v1) {
                    return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq11)(dictEq)(v.value1)(v1.value1);
                };
            };
        });
    };
};
var eqProduct = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq(Data_Eq.eq1(eq1Product(dictEq1)(dictEq11))(dictEq));
        };
    };
};
var ord1Product = function (dictOrd1) {
    return function (dictOrd11) {
        return new Data_Ord.Ord1(function () {
            return eq1Product(dictOrd1.Eq10())(dictOrd11.Eq10());
        }, function (dictOrd) {
            return function (v) {
                return function (v1) {
                    var v2 = Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                        return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value1)(v1.value1);
                    };
                    return v2;
                };
            };
        });
    };
};
var ordProduct = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord(function () {
                return eqProduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, Data_Ord.compare1(ord1Product(dictOrd1)(dictOrd11))(dictOrd));
        };
    };
};
var bihoistProduct = function (natF) {
    return function (natG) {
        return function (v) {
            return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(natF)(natG)(v);
        };
    };
};
var applyProduct = function (dictApply) {
    return function (dictApply1) {
        return new Control_Apply.Apply(function () {
            return functorProduct(dictApply.Functor0())(dictApply1.Functor0());
        }, function (v) {
            return function (v1) {
                return product(Control_Apply.apply(dictApply)(v.value0)(v1.value0))(Control_Apply.apply(dictApply1)(v.value1)(v1.value1));
            };
        });
    };
};
var bindProduct = function (dictBind) {
    return function (dictBind1) {
        return new Control_Bind.Bind(function () {
            return applyProduct(dictBind.Apply0())(dictBind1.Apply0());
        }, function (v) {
            return function (f) {
                return product(Control_Bind.bind(dictBind)(v.value0)((function () {
                    var $146 = Data_Newtype.unwrap(newtypeProduct);
                    return function ($147) {
                        return Data_Tuple.fst($146(f($147)));
                    };
                })()))(Control_Bind.bind(dictBind1)(v.value1)((function () {
                    var $148 = Data_Newtype.unwrap(newtypeProduct);
                    return function ($149) {
                        return Data_Tuple.snd($148(f($149)));
                    };
                })()));
            };
        });
    };
};
var applicativeProduct = function (dictApplicative) {
    return function (dictApplicative1) {
        return new Control_Applicative.Applicative(function () {
            return applyProduct(dictApplicative.Apply0())(dictApplicative1.Apply0());
        }, function (a) {
            return product(Control_Applicative.pure(dictApplicative)(a))(Control_Applicative.pure(dictApplicative1)(a));
        });
    };
};
var monadProduct = function (dictMonad) {
    return function (dictMonad1) {
        return new Control_Monad.Monad(function () {
            return applicativeProduct(dictMonad.Applicative0())(dictMonad1.Applicative0());
        }, function () {
            return bindProduct(dictMonad.Bind1())(dictMonad1.Bind1());
        });
    };
};
module.exports = {
    Product: Product,
    product: product,
    bihoistProduct: bihoistProduct,
    newtypeProduct: newtypeProduct,
    eqProduct: eqProduct,
    eq1Product: eq1Product,
    ordProduct: ordProduct,
    ord1Product: ord1Product,
    showProduct: showProduct,
    functorProduct: functorProduct,
    foldableProduct: foldableProduct,
    traversableProduct: traversableProduct,
    functorWithIndexProduct: functorWithIndexProduct,
    foldableWithIndexProduct: foldableWithIndexProduct,
    traversableWithIndexProduct: traversableWithIndexProduct,
    applyProduct: applyProduct,
    applicativeProduct: applicativeProduct,
    bindProduct: bindProduct,
    monadProduct: monadProduct
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251}],141:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var UnvariantF = function (x) {
    return x;
};
var Mapper = function (x) {
    return x;
};
var VariantFRep = function (x) {
    return x;
};
var VariantFShows = function (variantFShows) {
    this.variantFShows = variantFShows;
};
var VariantFMaps = function (variantFMaps) {
    this.variantFMaps = variantFMaps;
};
var FoldableVFRL = function (foldMapVFRL, foldlVFRL, foldrVFRL) {
    this.foldMapVFRL = foldMapVFRL;
    this.foldlVFRL = foldlVFRL;
    this.foldrVFRL = foldrVFRL;
};
var TraversableVFRL = function (FoldableVFRL0, traverseVFRL) {
    this.FoldableVFRL0 = FoldableVFRL0;
    this.traverseVFRL = traverseVFRL;
};
var variantFShows = function (dict) {
    return dict.variantFShows;
};
var variantFMaps = function (dict) {
    return dict.variantFMaps;
};
var unvariantF = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictFunctor) {
                    return f(dictIsSymbol)(dictCons)(dictFunctor);
                };
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})({
            map: v.map
        })(Data_Symbol.SProxy.value)(v.value);
    };
};
var traverseVFRL = function (dict) {
    return dict.traverseVFRL;
};
var travMatch = function (dictRowToList) {
    return function (dictVariantFTravCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (dictUnion1) {
                            return function (dictFunctor) {
                                return function (r) {
                                    return function (k) {
                                        return function (v) {
                                            if (Record_Unsafe.unsafeHas(v.type)(r)) {
                                                var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                                                var maps = variantFMaps(dictVariantFMaps)(Type_Data_RowList.RLProxy.value);
                                                var map = Data_Variant_Internal.lookup("map")(v.type)(tags)(maps);
                                                return Data_Functor.mapFlipped(dictFunctor)(Record_Unsafe.unsafeGet(v.type)(r)(v.value))(function (value) {
                                                    return {
                                                        type: v.type,
                                                        map: map,
                                                        value: value
                                                    };
                                                });
                                            };
                                            return k(v);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var showVariantFNil = new VariantFShows(function (v) {
    return function (v1) {
        return Data_List_Types.Nil.value;
    };
});
var showVariantFCons = function (dictVariantFShows) {
    return function (dictTypeEquals) {
        return function (dictShow) {
            return function (dictShow1) {
                return new VariantFShows(function (v) {
                    return function (p) {
                        return new Data_List_Types.Cons(Data_Show.show(dictShow), variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(p));
                    };
                });
            };
        };
    };
};
var showVariantF = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantFShows) {
            return function (dictShow) {
                return new Data_Show.Show(function (v1) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var shows = variantFShows(dictVariantFShows)(Type_Data_RowList.RLProxy.value)(Type_Proxy["Proxy"].value);
                    var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                    return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
                });
            };
        };
    };
};
var overMatch = function (dictRowToList) {
    return function (dictVariantFMapCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (dictUnion1) {
                            return function (r) {
                                return function (k) {
                                    return function (v) {
                                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                                            var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                                            var maps = variantFMaps(dictVariantFMaps)(Type_Data_RowList.RLProxy.value);
                                            var map = Data_Variant_Internal.lookup("map")(v.type)(tags)(maps);
                                            return {
                                                type: v.type,
                                                map: map,
                                                value: Record_Unsafe.unsafeGet(v.type)(r)(v.value)
                                            };
                                        };
                                        return k(v);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictAlternative) {
        return function (dictIsSymbol) {
            return function (p) {
                return on(dictCons)(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var mapVariantFNil = new VariantFMaps(function (v) {
    return Data_List_Types.Nil.value;
});
var mapVariantFCons = function (dictVariantFMaps) {
    return function (dictTypeEquals) {
        return function (dictFunctor) {
            return new VariantFMaps(function (v) {
                return new Data_List_Types.Cons(Data_Functor.map(dictFunctor), variantFMaps(dictVariantFMaps)(Type_Data_RowList.RLProxy.value));
            });
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (p) {
                return function (value) {
                    return {
                        type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                        value: value,
                        map: Data_Functor.map(dictFunctor)
                    };
                };
            };
        };
    };
};
var over = function (dictCons) {
    return function (dictCons1) {
        return function (dictIsSymbol) {
            return function (dictFunctor) {
                return function (p) {
                    return function (f) {
                        return on(dictCons)(dictIsSymbol)(p)((function () {
                            var $139 = inj(dictCons1)(dictIsSymbol)(dictFunctor)(p);
                            return function ($140) {
                                return $139(f($140));
                            };
                        })());
                    };
                };
            };
        };
    };
};
var revariantF = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return function (dictFunctor) {
                return inj(dictCons)(dictIsSymbol)(dictFunctor);
            };
        };
    });
};
var trav = function (dictCons) {
    return function (dictCons1) {
        return function (dictIsSymbol) {
            return function (dictFunctor) {
                return function (dictFunctor1) {
                    return function (p) {
                        return function (f) {
                            return on(dictCons)(dictIsSymbol)(p)((function () {
                                var $141 = Data_Functor.map(dictFunctor1)(inj(dictCons1)(dictIsSymbol)(dictFunctor)(p));
                                return function ($142) {
                                    return $141(f($142));
                                };
                            })());
                        };
                    };
                };
            };
        };
    };
};
var functorVariantF = new Data_Functor.Functor(function (f) {
    return function (a) {
        return {
            type: a.type,
            value: a.map(f)(a.value),
            map: a.map
        };
    };
});
var foldrVFRL = function (dict) {
    return dict.foldrVFRL;
};
var foldlVFRL = function (dict) {
    return dict.foldlVFRL;
};
var foldMapVFRL = function (dict) {
    return dict.foldMapVFRL;
};
var foldableCons = function (dictIsSymbol) {
    return function (dictFoldable) {
        return function (dictFoldableVFRL) {
            return function (dictCons) {
                return new FoldableVFRL(function (dictMonoid) {
                    return function (v) {
                        return function (f) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value)(f));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldl(dictFoldable)(f)(b))(foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                }, function (v) {
                    return function (f) {
                        return function (b) {
                            return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(Data_Foldable.foldr(dictFoldable)(f)(b))(foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value)(f)(b));
                        };
                    };
                });
            };
        };
    };
};
var foldableVariantF = function (dictRowToList) {
    return function (dictFoldableVFRL) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Data_RowList.RLProxy.value);
        }, foldlVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value), foldrVFRL(dictFoldableVFRL)(Type_Data_RowList.RLProxy.value));
    };
};
var traversableVariantF = function (dictRowToList) {
    return function (dictTraversableVFRL) {
        return new Data_Traversable.Traversable(function () {
            return foldableVariantF(dictRowToList)(dictTraversableVFRL.FoldableVFRL0());
        }, function () {
            return functorVariantF;
        }, function (dictApplicative) {
            return Data_Traversable.sequenceDefault(traversableVariantF(dictRowToList)(dictTraversableVFRL))(dictApplicative);
        }, function (dictApplicative) {
            return traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value);
        });
    };
};
var expandTravMatch = function (dictRowToList) {
    return function (dictVariantFTravCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (dictUnion1) {
                            return function (dictUnion2) {
                                return function (dictApplicative) {
                                    return function (dictTraversable) {
                                        return function (r) {
                                            return function (k) {
                                                return travMatch(dictRowToList)(dictVariantFTravCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(dictUnion1)((dictApplicative.Apply0()).Functor0())(r)((function () {
                                                    var $143 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Unsafe_Coerce.unsafeCoerce);
                                                    var $144 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(k);
                                                    return function ($145) {
                                                        return $143($144($145));
                                                    };
                                                })());
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var expandOverMatch = function (dictRowToList) {
    return function (dictVariantFMapCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (dictUnion1) {
                            return function (dictUnion2) {
                                return function (r) {
                                    return function (k) {
                                        return overMatch(dictRowToList)(dictVariantFMapCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(dictUnion1)(r)((function () {
                                            var $146 = Data_Functor.map(functorVariantF)(k);
                                            return function ($147) {
                                                return $146($147);
                                            };
                                        })());
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var traversableCons = function (dictIsSymbol) {
    return function (dictTraversable) {
        return function (dictTraversableVFRL) {
            return function (dictCons) {
                return function (dictUnion) {
                    return new TraversableVFRL(function () {
                        return foldableCons(dictIsSymbol)(dictTraversable.Foldable1())(dictTraversableVFRL.FoldableVFRL0())(dictCons);
                    }, function (dictApplicative) {
                        return function (v) {
                            return function (f) {
                                return on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                    var $148 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(inj(dictCons)(dictIsSymbol)(dictTraversable.Functor0())(Data_Symbol.SProxy.value));
                                    var $149 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(f);
                                    return function ($150) {
                                        return $148($149($150));
                                    };
                                })())((function () {
                                    var $151 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(expand(dictUnion));
                                    var $152 = traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Data_RowList.RLProxy.value)(f);
                                    return function ($153) {
                                        return $151($152($153));
                                    };
                                })());
                            };
                        };
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
};
var foldableNil = new FoldableVFRL(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return case_;
        };
    };
});
var match = function (dictRowToList) {
    return function (dictVariantFMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch(dictRowToList)(dictVariantFMatchCases)(dictUnion)(r)(case_);
            };
        };
    };
};
var traversableNil = new TraversableVFRL(function () {
    return foldableNil;
}, function (dictApplicative) {
    return function (v) {
        return function (f) {
            return case_;
        };
    };
});
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    overMatch: overMatch,
    expandOverMatch: expandOverMatch,
    travMatch: travMatch,
    expandTravMatch: expandTravMatch,
    expand: expand,
    contract: contract,
    UnvariantF: UnvariantF,
    unvariantF: unvariantF,
    revariantF: revariantF,
    VariantFShows: VariantFShows,
    variantFShows: variantFShows,
    VariantFMaps: VariantFMaps,
    variantFMaps: variantFMaps,
    TraversableVFRL: TraversableVFRL,
    FoldableVFRL: FoldableVFRL,
    traverseVFRL: traverseVFRL,
    foldrVFRL: foldrVFRL,
    foldlVFRL: foldlVFRL,
    foldMapVFRL: foldMapVFRL,
    functorVariantF: functorVariantF,
    foldableNil: foldableNil,
    foldableCons: foldableCons,
    traversableNil: traversableNil,
    traversableCons: traversableCons,
    foldableVariantF: foldableVariantF,
    traversableVariantF: traversableVariantF,
    showVariantFNil: showVariantFNil,
    showVariantFCons: showVariantFCons,
    showVariantF: showVariantF,
    mapVariantFNil: mapVariantFNil,
    mapVariantFCons: mapVariantFCons
};

},{"../Control.Applicative/index.js":17,"../Control.Plus/index.js":65,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Variant.Internal/index.js":258,"../Partial.Unsafe/index.js":378,"../Record.Unsafe/index.js":384,"../Type.Data.Row/index.js":386,"../Type.Data.RowList/index.js":387,"../Type.Proxy/index.js":389,"../Unsafe.Coerce/index.js":391}],142:[function(require,module,exports){
"use strict";

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

},{}],143:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Functor = function (map) {
    this.map = map;
};
var map = function (dict) {
    return dict.map;
};
var mapFlipped = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return map(dictFunctor)(f)(fa);
        };
    };
};
var $$void = function (dictFunctor) {
    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
};
var voidLeft = function (dictFunctor) {
    return function (f) {
        return function (x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
        };
    };
};
var voidRight = function (dictFunctor) {
    return function (x) {
        return map(dictFunctor)(Data_Function["const"](x));
    };
};
var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var functorArray = new Functor($foreign.arrayMap);
var flap = function (dictFunctor) {
    return function (ff) {
        return function (x) {
            return map(dictFunctor)(function (f) {
                return f(x);
            })(ff);
        };
    };
};
module.exports = {
    Functor: Functor,
    map: map,
    mapFlipped: mapFlipped,
    "void": $$void,
    voidRight: voidRight,
    voidLeft: voidLeft,
    flap: flap,
    functorFn: functorFn,
    functorArray: functorArray
};

},{"../Control.Semigroupoid/index.js":68,"../Data.Function/index.js":132,"../Data.Unit/index.js":257,"./foreign.js":142}],144:[function(require,module,exports){
"use strict";

exports.mapWithIndexArray = function (f) {
  return function (xs) {
    var l = xs.length;
    var result = Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(i)(xs[i]);
    }
    return result;
  };
};

},{}],145:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var FunctorWithIndex = function (Functor0, mapWithIndex) {
    this.Functor0 = Functor0;
    this.mapWithIndex = mapWithIndex;
};
var mapWithIndex = function (dict) {
    return dict.mapWithIndex;
};
var mapDefault = function (dictFunctorWithIndex) {
    return function (f) {
        return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
    };
};
var functorWithIndexMultiplicative = new FunctorWithIndex(function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
});
var functorWithIndexMaybe = new FunctorWithIndex(function () {
    return Data_Maybe.functorMaybe;
}, function (f) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
});
var functorWithIndexLast = new FunctorWithIndex(function () {
    return Data_Maybe_Last.functorLast;
}, function (f) {
    return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
});
var functorWithIndexFirst = new FunctorWithIndex(function () {
    return Data_Maybe_First.functorFirst;
}, function (f) {
    return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
});
var functorWithIndexDual = new FunctorWithIndex(function () {
    return Data_Monoid_Dual.functorDual;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
});
var functorWithIndexDisj = new FunctorWithIndex(function () {
    return Data_Monoid_Disj.functorDisj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
});
var functorWithIndexConj = new FunctorWithIndex(function () {
    return Data_Monoid_Conj.functorConj;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
});
var functorWithIndexArray = new FunctorWithIndex(function () {
    return Data_Functor.functorArray;
}, $foreign.mapWithIndexArray);
var functorWithIndexAdditive = new FunctorWithIndex(function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (f) {
    return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
});
module.exports = {
    FunctorWithIndex: FunctorWithIndex,
    mapWithIndex: mapWithIndex,
    mapDefault: mapDefault,
    functorWithIndexArray: functorWithIndexArray,
    functorWithIndexMaybe: functorWithIndexMaybe,
    functorWithIndexFirst: functorWithIndexFirst,
    functorWithIndexLast: functorWithIndexLast,
    functorWithIndexAdditive: functorWithIndexAdditive,
    functorWithIndexDual: functorWithIndexDual,
    functorWithIndexConj: functorWithIndexConj,
    functorWithIndexDisj: functorWithIndexDisj,
    functorWithIndexMultiplicative: functorWithIndexMultiplicative
};

},{"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe.First/index.js":185,"../Data.Maybe.Last/index.js":186,"../Data.Maybe/index.js":187,"../Data.Monoid.Additive/index.js":189,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Multiplicative/index.js":194,"../Data.Unit/index.js":257,"./foreign.js":144}],146:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var GenericShowArgs = function (genericShowArgs) {
    this.genericShowArgs = genericShowArgs;
};
var GenericShow = function (genericShow$prime) {
    this["genericShow'"] = genericShow$prime;
};
var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
    return [  ];
});
var genericShowArgsArgument = function (dictShow) {
    return new GenericShowArgs(function (v) {
        return [ Data_Show.show(dictShow)(v) ];
    });
};
var genericShowArgs = function (dict) {
    return dict.genericShowArgs;
};
var genericShowArgsProduct = function (dictGenericShowArgs) {
    return function (dictGenericShowArgs1) {
        return new GenericShowArgs(function (v) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
        });
    };
};
var genericShowConstructor = function (dictGenericShowArgs) {
    return function (dictIsSymbol) {
        return new GenericShow(function (v) {
            var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            var v1 = genericShowArgs(dictGenericShowArgs)(v);
            if (v1.length === 0) {
                return ctor;
            };
            return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
        });
    };
};
var genericShow$prime = function (dict) {
    return dict["genericShow'"];
};
var genericShowNoConstructors = new GenericShow(function (a) {
    return genericShow$prime(genericShowNoConstructors)(a);
});
var genericShowSum = function (dictGenericShow) {
    return function (dictGenericShow1) {
        return new GenericShow(function (v) {
            if (v instanceof Data_Generic_Rep.Inl) {
                return genericShow$prime(dictGenericShow)(v.value0);
            };
            if (v instanceof Data_Generic_Rep.Inr) {
                return genericShow$prime(dictGenericShow1)(v.value0);
            };
            throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
        });
    };
};
var genericShow = function (dictGeneric) {
    return function (dictGenericShow) {
        return function (x) {
            return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
        };
    };
};
module.exports = {
    GenericShow: GenericShow,
    "genericShow'": genericShow$prime,
    genericShow: genericShow,
    GenericShowArgs: GenericShowArgs,
    genericShowArgs: genericShowArgs,
    genericShowNoConstructors: genericShowNoConstructors,
    genericShowArgsNoArguments: genericShowArgsNoArguments,
    genericShowSum: genericShowSum,
    genericShowArgsProduct: genericShowArgsProduct,
    genericShowConstructor: genericShowConstructor,
    genericShowArgsArgument: genericShowArgsArgument
};

},{"../Data.Foldable/index.js":128,"../Data.Generic.Rep/index.js":147,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240}],147:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Inl = (function () {
    function Inl(value0) {
        this.value0 = value0;
    };
    Inl.create = function (value0) {
        return new Inl(value0);
    };
    return Inl;
})();
var Inr = (function () {
    function Inr(value0) {
        this.value0 = value0;
    };
    Inr.create = function (value0) {
        return new Inr(value0);
    };
    return Inr;
})();
var Product = (function () {
    function Product(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Product.create = function (value0) {
        return function (value1) {
            return new Product(value0, value1);
        };
    };
    return Product;
})();
var NoArguments = (function () {
    function NoArguments() {

    };
    NoArguments.value = new NoArguments();
    return NoArguments;
})();
var Constructor = function (x) {
    return x;
};
var Argument = function (x) {
    return x;
};
var Generic = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var genericMaybe = new Generic(function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return new Inl(NoArguments.value);
    };
    if (v instanceof Data_Maybe.Just) {
        return new Inr(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [ v.constructor.name ]);
}, function (v) {
    if (v instanceof Inl) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Inr) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.Generic.Rep (line 40, column 1 - line 47, column 49): " + [ v.constructor.name ]);
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    Generic: Generic,
    to: to,
    from: from,
    NoArguments: NoArguments,
    Inl: Inl,
    Inr: Inr,
    Product: Product,
    Constructor: Constructor,
    Argument: Argument,
    genericMaybe: genericMaybe
};

},{"../Data.Maybe/index.js":187}],148:[function(require,module,exports){
"use strict";

exports.boolConj = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolDisj = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

},{}],149:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {
    this.conjRecord = conjRecord;
    this.disjRecord = disjRecord;
    this.ffRecord = ffRecord;
    this.impliesRecord = impliesRecord;
    this.notRecord = notRecord;
    this.ttRecord = ttRecord;
};
var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
    this.conj = conj;
    this.disj = disj;
    this.ff = ff;
    this.implies = implies;
    this.not = not;
    this.tt = tt;
};
var ttRecord = function (dict) {
    return dict.ttRecord;
};
var tt = function (dict) {
    return dict.tt;
};
var notRecord = function (dict) {
    return dict.notRecord;
};
var not = function (dict) {
    return dict.not;
};
var impliesRecord = function (dict) {
    return dict.impliesRecord;
};
var implies = function (dict) {
    return dict.implies;
};
var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return Data_Unit.unit;
}, Data_Unit.unit);
var heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var ffRecord = function (dict) {
    return dict.ffRecord;
};
var ff = function (dict) {
    return dict.ff;
};
var disjRecord = function (dict) {
    return dict.disjRecord;
};
var disj = function (dict) {
    return dict.disj;
};
var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
    return function (b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
}, $foreign.boolNot, true);
var conjRecord = function (dict) {
    return dict.conjRecord;
};
var heytingAlgebraRecord = function (dictRowToList) {
    return function (dictHeytingAlgebraRecord) {
        return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var conj = function (dict) {
    return dict.conj;
};
var heytingAlgebraFunction = function (dictHeytingAlgebra) {
    return new HeytingAlgebra(function (f) {
        return function (g) {
            return function (a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (g) {
            return function (a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (v) {
        return ff(dictHeytingAlgebra);
    }, function (f) {
        return function (g) {
            return function (a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
        };
    }, function (f) {
        return function (a) {
            return not(dictHeytingAlgebra)(f(a));
        };
    }, function (v) {
        return tt(dictHeytingAlgebra);
    });
};
var heytingAlgebraRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictHeytingAlgebraRecord) {
            return function (dictHeytingAlgebra) {
                return new HeytingAlgebraRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(ff(dictHeytingAlgebra))(tail);
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (row) {
                        var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        var get = Record_Unsafe.unsafeGet(key);
                        return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                    };
                }, function (v) {
                    return function (row) {
                        var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(tt(dictHeytingAlgebra))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    HeytingAlgebra: HeytingAlgebra,
    tt: tt,
    ff: ff,
    implies: implies,
    conj: conj,
    disj: disj,
    not: not,
    HeytingAlgebraRecord: HeytingAlgebraRecord,
    ffRecord: ffRecord,
    ttRecord: ttRecord,
    impliesRecord: impliesRecord,
    conjRecord: conjRecord,
    disjRecord: disjRecord,
    notRecord: notRecord,
    heytingAlgebraBoolean: heytingAlgebraBoolean,
    heytingAlgebraUnit: heytingAlgebraUnit,
    heytingAlgebraFunction: heytingAlgebraFunction,
    heytingAlgebraRecord: heytingAlgebraRecord,
    heytingAlgebraRecordNil: heytingAlgebraRecordNil,
    heytingAlgebraRecordCons: heytingAlgebraRecordCons
};

},{"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Record.Unsafe/index.js":384,"../Type.Data.Row/index.js":386,"../Type.Data.RowList/index.js":387,"./foreign.js":148}],150:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Identity = function (x) {
    return x;
};
var showIdentity = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringIdentity = function (dictSemiring) {
    return dictSemiring;
};
var semigroupIdenity = function (dictSemigroup) {
    return dictSemigroup;
};
var ringIdentity = function (dictRing) {
    return dictRing;
};
var ordIdentity = function (dictOrd) {
    return dictOrd;
};
var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
    return n;
}, Identity);
var monoidIdentity = function (dictMonoid) {
    return dictMonoid;
};
var lazyIdentity = function (dictLazy) {
    return dictLazy;
};
var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
    return dictHeytingAlgebra;
};
var functorIdentity = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var functorWithIndexIdentity = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorIdentity;
}, function (f) {
    return function (v) {
        return f(Data_Unit.unit)(v);
    };
});
var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableWithIndexIdentity = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableIdentity;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v)(z);
        };
    };
});
var traversableIdentity = new Data_Traversable.Traversable(function () {
    return foldableIdentity;
}, function () {
    return functorIdentity;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
        };
    };
});
var traversableWithIndexIdentity = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexIdentity;
}, function () {
    return functorWithIndexIdentity;
}, function () {
    return traversableIdentity;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(Data_Unit.unit)(v));
        };
    };
});
var foldable1Identity = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableIdentity;
}, function (dictSemigroup) {
    return function (v) {
        return v;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var traversable1Identity = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Identity;
}, function () {
    return traversableIdentity;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Identity)(v);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Identity)(f(v));
        };
    };
});
var extendIdentity = new Control_Extend.Extend(function () {
    return functorIdentity;
}, function (f) {
    return function (m) {
        return f(m);
    };
});
var euclideanRingIdentity = function (dictEuclideanRing) {
    return dictEuclideanRing;
};
var eqIdentity = function (dictEq) {
    return dictEq;
};
var eq1Identity = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqIdentity(dictEq));
});
var ord1Identity = new Data_Ord.Ord1(function () {
    return eq1Identity;
}, function (dictOrd) {
    return Data_Ord.compare(ordIdentity(dictOrd));
});
var comonadIdentity = new Control_Comonad.Comonad(function () {
    return extendIdentity;
}, function (v) {
    return v;
});
var commutativeRingIdentity = function (dictCommutativeRing) {
    return dictCommutativeRing;
};
var boundedIdentity = function (dictBounded) {
    return dictBounded;
};
var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
    return dictBooleanAlgebra;
};
var applyIdentity = new Control_Apply.Apply(function () {
    return functorIdentity;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindIdentity = new Control_Bind.Bind(function () {
    return applyIdentity;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeIdentity = new Control_Applicative.Applicative(function () {
    return applyIdentity;
}, Identity);
var monadIdentity = new Control_Monad.Monad(function () {
    return applicativeIdentity;
}, function () {
    return bindIdentity;
});
var altIdentity = new Control_Alt.Alt(function () {
    return functorIdentity;
}, function (x) {
    return function (v) {
        return x;
    };
});
module.exports = {
    Identity: Identity,
    newtypeIdentity: newtypeIdentity,
    eqIdentity: eqIdentity,
    ordIdentity: ordIdentity,
    boundedIdentity: boundedIdentity,
    heytingAlgebraIdentity: heytingAlgebraIdentity,
    booleanAlgebraIdentity: booleanAlgebraIdentity,
    semigroupIdenity: semigroupIdenity,
    monoidIdentity: monoidIdentity,
    semiringIdentity: semiringIdentity,
    euclideanRingIdentity: euclideanRingIdentity,
    ringIdentity: ringIdentity,
    commutativeRingIdentity: commutativeRingIdentity,
    lazyIdentity: lazyIdentity,
    showIdentity: showIdentity,
    eq1Identity: eq1Identity,
    ord1Identity: ord1Identity,
    functorIdentity: functorIdentity,
    functorWithIndexIdentity: functorWithIndexIdentity,
    invariantIdentity: invariantIdentity,
    altIdentity: altIdentity,
    applyIdentity: applyIdentity,
    applicativeIdentity: applicativeIdentity,
    bindIdentity: bindIdentity,
    monadIdentity: monadIdentity,
    extendIdentity: extendIdentity,
    comonadIdentity: comonadIdentity,
    foldableIdentity: foldableIdentity,
    foldable1Identity: foldable1Identity,
    foldableWithIndexIdentity: foldableWithIndexIdentity,
    traversableIdentity: traversableIdentity,
    traversable1Identity: traversable1Identity,
    traversableWithIndexIdentity: traversableWithIndexIdentity
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup.Traversable/index.js":219,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Unit/index.js":257}],151:[function(require,module,exports){
"use strict";

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringAsImpl = function (just) {
  return function (nothing) {
    return function (radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

      return function (s) {
        /* jshint bitwise: false */
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

exports.toStringAs = function (radix) {
  return function (i) {
    return i.toString(radix);
  };
};


exports.quot = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.rem = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.pow = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return Math.pow(x,y) | 0;
  };
};

},{}],152:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Global = require("../Global/index.js");
var $$Math = require("../Math/index.js");
var Radix = function (x) {
    return x;
};
var Even = (function () {
    function Even() {

    };
    Even.value = new Even();
    return Even;
})();
var Odd = (function () {
    function Odd() {

    };
    Odd.value = new Odd();
    return Odd;
})();
var showParity = new Data_Show.Show(function (v) {
    if (v instanceof Even) {
        return "Even";
    };
    if (v instanceof Odd) {
        return "Odd";
    };
    throw new Error("Failed pattern match at Data.Int (line 112, column 1 - line 114, column 19): " + [ v.constructor.name ]);
});
var radix = function (n) {
    if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Int (line 193, column 1 - line 193, column 28): " + [ n.constructor.name ]);
};
var odd = function (x) {
    return (x & 1) !== 0;
};
var octal = 8;
var hexadecimal = 16;
var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromStringAs(10);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x === Global.infinity) {
        return 0;
    };
    if (x === -Global.infinity) {
        return 0;
    };
    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
    };
    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.fromMaybe(0)(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
};
var round = function ($23) {
    return unsafeClamp($$Math.round($23));
};
var floor = function ($24) {
    return unsafeClamp($$Math.floor($24));
};
var even = function (x) {
    return (x & 1) === 0;
};
var parity = function (n) {
    var $14 = even(n);
    if ($14) {
        return Even.value;
    };
    return Odd.value;
};
var eqParity = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return true;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return true;
        };
        return false;
    };
});
var ordParity = new Data_Ord.Ord(function () {
    return eqParity;
}, function (x) {
    return function (y) {
        if (x instanceof Even && y instanceof Even) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Even) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Even) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Odd && y instanceof Odd) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Data.Int (line 110, column 1 - line 110, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var semiringParity = new Data_Semiring.Semiring(function (x) {
    return function (y) {
        var $19 = Data_Eq.eq(eqParity)(x)(y);
        if ($19) {
            return Even.value;
        };
        return Odd.value;
    };
}, function (v) {
    return function (v1) {
        if (v instanceof Odd && v1 instanceof Odd) {
            return Odd.value;
        };
        return Even.value;
    };
}, Odd.value, Even.value);
var ringParity = new Data_Ring.Ring(function () {
    return semiringParity;
}, Data_Semiring.add(semiringParity));
var divisionRingParity = new Data_DivisionRing.DivisionRing(function () {
    return ringParity;
}, Control_Category.identity(Control_Category.categoryFn));
var decimal = 10;
var commutativeRingParity = new Data_CommutativeRing.CommutativeRing(function () {
    return ringParity;
});
var euclideanRingParity = new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingParity;
}, function (v) {
    if (v instanceof Even) {
        return 0;
    };
    if (v instanceof Odd) {
        return 1;
    };
    throw new Error("Failed pattern match at Data.Int (line 132, column 1 - line 136, column 17): " + [ v.constructor.name ]);
}, function (x) {
    return function (v) {
        return x;
    };
}, function (v) {
    return function (v1) {
        return Even.value;
    };
});
var ceil = function ($25) {
    return unsafeClamp($$Math.ceil($25));
};
var boundedParity = new Data_Bounded.Bounded(function () {
    return ordParity;
}, Even.value, Odd.value);
var binary = 2;
var base36 = 36;
module.exports = {
    fromNumber: fromNumber,
    ceil: ceil,
    floor: floor,
    round: round,
    fromString: fromString,
    radix: radix,
    binary: binary,
    octal: octal,
    decimal: decimal,
    hexadecimal: hexadecimal,
    base36: base36,
    fromStringAs: fromStringAs,
    Even: Even,
    Odd: Odd,
    parity: parity,
    even: even,
    odd: odd,
    eqParity: eqParity,
    ordParity: ordParity,
    showParity: showParity,
    boundedParity: boundedParity,
    semiringParity: semiringParity,
    ringParity: ringParity,
    commutativeRingParity: commutativeRingParity,
    euclideanRingParity: euclideanRingParity,
    divisionRingParity: divisionRingParity,
    toNumber: $foreign.toNumber,
    toStringAs: $foreign.toStringAs,
    quot: $foreign.quot,
    rem: $foreign.rem,
    pow: $foreign.pow
};

},{"../Control.Category/index.js":24,"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.CommutativeRing/index.js":107,"../Data.DivisionRing/index.js":118,"../Data.Eq/index.js":123,"../Data.EuclideanRing/index.js":125,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Ring/index.js":215,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Global/index.js":319,"../Math/index.js":354,"./foreign.js":151}],153:[function(require,module,exports){
/* global exports */
"use strict";

var createDate = function (y, m, d, h, mi, s, ms) {
  var date = new Date(Date.UTC(y, m, d, h, mi, s, ms));
  if (y >= 0 && y < 100) {
    date.setUTCFullYear(y);
  }
  return date;
};

var createLocalDate = function (y, m, d, h, mi, s, ms) {
  var date = new Date(y, m, d, h, mi, s, ms);
  if (y >= 0 && y < 100) {
    date.setFullYear(y);
  }
  return date;
};

exports.now = function () {
  return new Date();
};

exports.isValid = function (date) {
  return !isNaN(date.getTime());
};

exports.toInstantImpl = function (just) {
  return function (nothing) {
    return function (date) {
      var t = date.getTime();
      return isNaN(t) ? nothing : just(t);
    };
  };
};

exports.fromInstant = function (instant) {
  return new Date(instant);
};

exports.jsdate = function (parts) {
  return createDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
};

exports.jsdateLocal = function (parts) {
  return function () {
    return createLocalDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
  };
};

exports.dateMethod = function (method, date) {
  return date[method]();
};

exports.dateMethodEff = function (method, date) {
  return function () {
    return date[method]();
  };
};

exports.parse = function (dateString) {
  return function () {
    return new Date(dateString);
  };
};

exports.fromTime = function (time) {
  return new Date(time);
};

},{}],154:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Date = require("../Data.Date/index.js");
var Data_Date_Component = require("../Data.Date.Component/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time = require("../Data.Time/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Foreign = require("../Foreign/index.js");
var toUTCString = function (dt) {
    return $foreign.dateMethod("toUTCString", dt);
};
var toTimeString = function (dt) {
    return $foreign.dateMethod("toTimeString", dt);
};
var toString = function (dt) {
    return $foreign.dateMethod("toString", dt);
};
var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
    return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
})($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));
var toISOString = function (dt) {
    return $foreign.dateMethodEff("toISOString", dt);
};
var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);
var toDateString = function (dt) {
    return $foreign.dateMethod("toDateString", dt);
};
var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
var readDate = Foreign.unsafeReadTagged("Date");
var getUTCSeconds = function (dt) {
    return $foreign.dateMethod("getUTCSeconds", dt);
};
var getUTCMonth = function (dt) {
    return $foreign.dateMethod("getUTCMonth", dt);
};
var getUTCMinutes = function (dt) {
    return $foreign.dateMethod("getUTCMinutes", dt);
};
var getUTCMilliseconds = function (dt) {
    return $foreign.dateMethod("getUTCMilliseconds", dt);
};
var getUTCHours = function (dt) {
    return $foreign.dateMethod("getUTCHours", dt);
};
var getUTCFullYear = function (dt) {
    return $foreign.dateMethod("getUTCFullYear", dt);
};
var getUTCDay = function (dt) {
    return $foreign.dateMethod("getUTCDay", dt);
};
var getUTCDate = function (dt) {
    return $foreign.dateMethod("getUTCDate", dt);
};
var getTimezoneOffset = function (dt) {
    return $foreign.dateMethodEff("getTimezoneOffset", dt);
};
var getTime = function (dt) {
    return $foreign.dateMethod("getTime", dt);
};
var showJSDate = new Data_Show.Show(function (a) {
    return "(fromTime " + (Data_Show.show(Data_Show.showNumber)(getTime(a)) + ")");
});
var getSeconds = function (dt) {
    return $foreign.dateMethodEff("getSeconds", dt);
};
var getMonth = function (dt) {
    return $foreign.dateMethodEff("getMonth", dt);
};
var getMinutes = function (dt) {
    return $foreign.dateMethodEff("getMinutes", dt);
};
var getMilliseconds = function (dt) {
    return $foreign.dateMethodEff("getMilliseconds", dt);
};
var getHours = function (dt) {
    return $foreign.dateMethodEff("getHours", dt);
};
var getFullYear = function (dt) {
    return $foreign.dateMethodEff("getFullYear", dt);
};
var getDay = function (dt) {
    return $foreign.dateMethodEff("getDay", dt);
};
var getDate = function (dt) {
    return $foreign.dateMethodEff("getDate", dt);
};
var fromDateTime = function (v) {
    return $foreign.jsdate({
        year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))),
        month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0),
        day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))),
        hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))),
        minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))),
        second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))),
        millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
    });
};
var eqJSDate = new Data_Eq.Eq(function (a) {
    return function (b) {
        return getTime(a) === getTime(b);
    };
});
var ordJSDate = new Data_Ord.Ord(function () {
    return eqJSDate;
}, function (a) {
    return function (b) {
        return Data_Ord.compare(Data_Ord.ordNumber)(getTime(a))(getTime(b));
    };
});
module.exports = {
    readDate: readDate,
    fromDateTime: fromDateTime,
    toDateTime: toDateTime,
    toDate: toDate,
    toInstant: toInstant,
    getTime: getTime,
    getUTCDate: getUTCDate,
    getUTCDay: getUTCDay,
    getUTCFullYear: getUTCFullYear,
    getUTCHours: getUTCHours,
    getUTCMilliseconds: getUTCMilliseconds,
    getUTCMinutes: getUTCMinutes,
    getUTCMonth: getUTCMonth,
    getUTCSeconds: getUTCSeconds,
    getDate: getDate,
    getDay: getDay,
    getFullYear: getFullYear,
    getHours: getHours,
    getMilliseconds: getMilliseconds,
    getMinutes: getMinutes,
    getMonth: getMonth,
    getSeconds: getSeconds,
    getTimezoneOffset: getTimezoneOffset,
    toDateString: toDateString,
    toISOString: toISOString,
    toString: toString,
    toTimeString: toTimeString,
    toUTCString: toUTCString,
    eqJSDate: eqJSDate,
    ordJSDate: ordJSDate,
    showJSDate: showJSDate,
    isValid: $foreign.isValid,
    fromInstant: $foreign.fromInstant,
    jsdate: $foreign.jsdate,
    jsdateLocal: $foreign.jsdateLocal,
    now: $foreign.now,
    parse: $foreign.parse,
    fromTime: $foreign.fromTime
};

},{"../Control.Bind/index.js":23,"../Data.Date.Component/index.js":110,"../Data.Date/index.js":112,"../Data.DateTime.Instant/index.js":114,"../Data.DateTime/index.js":116,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"../Data.Time.Component/index.js":243,"../Data.Time.Duration/index.js":244,"../Data.Time/index.js":245,"../Foreign/index.js":317,"./foreign.js":153}],155:[function(require,module,exports){
"use strict";

exports.defer = function (thunk) {
  var v = null;
  return function() {
    if (thunk === undefined) return v;

    v = thunk();
    thunk = undefined; // eslint-disable-line no-param-reassign
    return v;
  };
};

exports.force = function (l) {
  return l();
};

},{}],156:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var showLazy = function (dictShow) {
    return new Data_Show.Show(function (x) {
        return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
    });
};
var semiringLazy = function (dictSemiring) {
    return new Data_Semiring.Semiring(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function (v) {
        return Data_Semiring.one(dictSemiring);
    }), $foreign.defer(function (v) {
        return Data_Semiring.zero(dictSemiring);
    }));
};
var semigroupLazy = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function (dictRing) {
    return new Data_Ring.Ring(function () {
        return semiringLazy(dictRing.Semiring0());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupLazy(dictMonoid.Semigroup0());
    }, $foreign.defer(function (v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var lazyLazy = new Control_Lazy.Lazy(function (f) {
    return $foreign.defer(function (v) {
        return $foreign.force(f(Data_Unit.unit));
    });
});
var functorLazy = new Data_Functor.Functor(function (f) {
    return function (l) {
        return $foreign.defer(function (v) {
            return f($foreign.force(l));
        });
    };
});
var functorWithIndexLazy = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorLazy;
}, function (f) {
    return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
});
var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
var foldableLazy = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f(z)($foreign.force(l));
        };
    };
}, function (f) {
    return function (z) {
        return function (l) {
            return f($foreign.force(l))(z);
        };
    };
});
var foldableWithIndexLazy = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableLazy;
}, function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
    };
}, function (f) {
    return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
}, function (f) {
    return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
});
var traversableLazy = new Data_Traversable.Traversable(function () {
    return foldableLazy;
}, function () {
    return functorLazy;
}, function (dictApplicative) {
    return function (l) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($42) {
            return $foreign.defer(Data_Function["const"]($42));
        })($foreign.force(l));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (l) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function ($43) {
                return $foreign.defer(Data_Function["const"]($43));
            })(f($foreign.force(l)));
        };
    };
});
var traversableWithIndexLazy = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexLazy;
}, function () {
    return functorWithIndexLazy;
}, function () {
    return traversableLazy;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
    };
});
var foldable1Lazy = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableLazy;
}, function (dictSemigroup) {
    return Data_Semigroup_Foldable.fold1Default(foldable1Lazy)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (l) {
            return f($foreign.force(l));
        };
    };
});
var traversable1Lazy = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Lazy;
}, function () {
    return traversableLazy;
}, function (dictApply) {
    return function (l) {
        return Data_Functor.map(dictApply.Functor0())(function ($44) {
            return $foreign.defer(Data_Function["const"]($44));
        })($foreign.force(l));
    };
}, function (dictApply) {
    return function (f) {
        return function (l) {
            return Data_Functor.map(dictApply.Functor0())(function ($45) {
                return $foreign.defer(Data_Function["const"]($45));
            })(f($foreign.force(l)));
        };
    };
});
var extendLazy = new Control_Extend.Extend(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return f(x);
        });
    };
});
var eqLazy = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqLazy(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var eq1Lazy = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLazy(dictEq));
});
var ord1Lazy = new Data_Ord.Ord1(function () {
    return eq1Lazy;
}, function (dictOrd) {
    return Data_Ord.compare(ordLazy(dictOrd));
});
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, $foreign.force);
var commutativeRingLazy = function (dictCommutativeRing) {
    return new Data_CommutativeRing.CommutativeRing(function () {
        return ringLazy(dictCommutativeRing.Ring0());
    });
};
var euclideanRingLazy = function (dictEuclideanRing) {
    return new Data_EuclideanRing.EuclideanRing(function () {
        return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
    }, (function () {
        var $46 = Data_EuclideanRing.degree(dictEuclideanRing);
        return function ($47) {
            return $46($foreign.force($47));
        };
    })(), function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var boundedLazy = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordLazy(dictBounded.Ord0());
    }, $foreign.defer(function (v) {
        return Data_Bounded.bottom(dictBounded);
    }), $foreign.defer(function (v) {
        return Data_Bounded.top(dictBounded);
    }));
};
var applyLazy = new Control_Apply.Apply(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Control_Bind.Bind(function () {
    return applyLazy;
}, function (l) {
    return function (f) {
        return $foreign.defer(function (v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var heytingAlgebraLazy = function (dictHeytingAlgebra) {
    return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
        };
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
    }), function (a) {
        return function (b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
        };
    }, function (a) {
        return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
    }, $foreign.defer(function (v) {
        return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
    }));
};
var booleanAlgebraLazy = function (dictBooleanAlgebra) {
    return new Data_BooleanAlgebra.BooleanAlgebra(function () {
        return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
    });
};
var applicativeLazy = new Control_Applicative.Applicative(function () {
    return applyLazy;
}, function (a) {
    return $foreign.defer(function (v) {
        return a;
    });
});
var monadLazy = new Control_Monad.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy,
    ringLazy: ringLazy,
    commutativeRingLazy: commutativeRingLazy,
    euclideanRingLazy: euclideanRingLazy,
    eqLazy: eqLazy,
    eq1Lazy: eq1Lazy,
    ordLazy: ordLazy,
    ord1Lazy: ord1Lazy,
    boundedLazy: boundedLazy,
    semigroupLazy: semigroupLazy,
    monoidLazy: monoidLazy,
    heytingAlgebraLazy: heytingAlgebraLazy,
    booleanAlgebraLazy: booleanAlgebraLazy,
    functorLazy: functorLazy,
    functorWithIndexLazy: functorWithIndexLazy,
    foldableLazy: foldableLazy,
    foldableWithIndexLazy: foldableWithIndexLazy,
    foldable1Lazy: foldable1Lazy,
    traversableLazy: traversableLazy,
    traversableWithIndexLazy: traversableWithIndexLazy,
    traversable1Lazy: traversable1Lazy,
    invariantLazy: invariantLazy,
    applyLazy: applyLazy,
    applicativeLazy: applicativeLazy,
    bindLazy: bindLazy,
    monadLazy: monadLazy,
    extendLazy: extendLazy,
    comonadLazy: comonadLazy,
    showLazy: showLazy,
    lazyLazy: lazyLazy,
    defer: $foreign.defer,
    force: $foreign.force
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Lazy/index.js":34,"../Control.Monad/index.js":60,"../Data.BooleanAlgebra/index.js":101,"../Data.Bounded/index.js":103,"../Data.CommutativeRing/index.js":107,"../Data.Eq/index.js":123,"../Data.EuclideanRing/index.js":125,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ring/index.js":215,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup.Traversable/index.js":219,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Unit/index.js":257,"./foreign.js":155}],157:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var unfolded = function (dictMonoid) {
    return function (f) {
        return function (p) {
            var go = (function () {
                var $43 = Data_Maybe.maybe(Data_Monoid.mempty(dictMonoid))(function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p)(v.value0))(go(v.value1));
                });
                return function ($44) {
                    return $43(f($44));
                };
            })();
            return go;
        };
    };
};
var replicated = function (dictMonoid) {
    return function (i) {
        return function (v) {
            var go = function (v1) {
                return function (x) {
                    if (v1 === 0) {
                        return Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
                    };
                    return Data_Semigroup.append(Data_Semigroup.semigroupFn(dictMonoid.Semigroup0()))(x)(go(v1 - 1 | 0)(x));
                };
            };
            return go(i)(v);
        };
    };
};
var ifoldMapOf = function (p) {
    return function (f) {
        return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f))));
    };
};
var ifoldlOf = function (p) {
    return function (f) {
        return function (r) {
            var $45 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $46 = Data_Newtype.unwrap(Data_Newtype.newtypeDual);
            var $47 = ifoldMapOf(p)(function (i) {
                var $49 = Data_Function.flip(f(i));
                return function ($50) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($49($50)));
                };
            });
            return function ($48) {
                return $45($46($47($48)));
            };
        };
    };
};
var ifoldrOf = function (p) {
    return function (f) {
        return function (r) {
            var $51 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $52 = ifoldMapOf(p)(function (i) {
                var $54 = f(i);
                return function ($55) {
                    return Data_Monoid_Endo.Endo($54($55));
                };
            });
            return function ($53) {
                return $51($52($53));
            };
        };
    };
};
var itoListOf = function (p) {
    return ifoldrOf(p)(function (i) {
        return function (x) {
            return function (xs) {
                return new Data_List_Types.Cons(new Data_Tuple.Tuple(i, x), xs);
            };
        };
    })(Data_List_Types.Nil.value);
};
var itraverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return ifoldrOf(p)(function (i) {
                return function (a) {
                    return function (fu) {
                        return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(i)(a)))(fu);
                    };
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var iforOf_ = function (dictApplicative) {
    var $56 = itraverseOf_(dictApplicative);
    return function ($57) {
        return Data_Function.flip($56($57));
    };
};
var ifindOf = function (p) {
    return function (f) {
        return ifoldrOf(p)(function (i) {
            return function (a) {
                return Data_Maybe.maybe((function () {
                    var $37 = f(i)(a);
                    if ($37) {
                        return new Data_Maybe.Just(a);
                    };
                    return Data_Maybe.Nothing.value;
                })())(Data_Maybe.Just.create);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var ianyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $58 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $59 = ifoldMapOf(p)(function (i) {
                var $61 = f(i);
                return function ($62) {
                    return Data_Monoid_Disj.Disj($61($62));
                };
            });
            return function ($60) {
                return $58($59($60));
            };
        };
    };
};
var iallOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $63 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $64 = ifoldMapOf(p)(function (i) {
                var $66 = f(i);
                return function ($67) {
                    return Data_Monoid_Conj.Conj($66($67));
                };
            });
            return function ($65) {
                return $63($64($65));
            };
        };
    };
};
var folded = function (dictMonoid) {
    return function (dictFoldable) {
        return function (v) {
            return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(v);
        };
    };
};
var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
var foldOf = function (p) {
    return foldMapOf(p)(Control_Category.identity(Control_Category.categoryFn));
};
var foldlOf = function (p) {
    return function (f) {
        return function (r) {
            var $68 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $69 = Data_Newtype.unwrap(Data_Newtype.newtypeDual);
            var $70 = foldMapOf(p)((function () {
                var $72 = Data_Function.flip(f);
                return function ($73) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($72($73)));
                };
            })());
            return function ($71) {
                return $68($69($70($71)));
            };
        };
    };
};
var foldrOf = function (p) {
    return function (f) {
        return function (r) {
            var $74 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $75 = foldMapOf(p)(function ($77) {
                return Data_Monoid_Endo.Endo(f($77));
            });
            return function ($76) {
                return $74($75($76));
            };
        };
    };
};
var maximumOf = function (dictOrd) {
    return function (p) {
        var max = function (a) {
            return function (b) {
                var $39 = Data_Ord.greaterThan(dictOrd)(a)(b);
                if ($39) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            var $78 = Data_Maybe.maybe(a)(max(a));
            return function ($79) {
                return Data_Maybe.Just.create($78($79));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var minimumOf = function (dictOrd) {
    return function (p) {
        var min = function (a) {
            return function (b) {
                var $40 = Data_Ord.lessThan(dictOrd)(a)(b);
                if ($40) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            var $80 = Data_Maybe.maybe(a)(min(a));
            return function ($81) {
                return Data_Maybe.Just.create($80($81));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var toListOf = function (p) {
    return foldrOf(p)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var toListOfOn = function (s) {
    return function (p) {
        return toListOf(p)(s);
    };
};
var traverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return foldrOf(p)(function (a) {
                return function (fu) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(a)))(fu);
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var has = function (dictHeytingAlgebra) {
    return function (p) {
        var $82 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
        var $83 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
        return function ($84) {
            return $82($83($84));
        };
    };
};
var hasn$primet = function (dictHeytingAlgebra) {
    return function (p) {
        var $85 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
        var $86 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)));
        return function ($87) {
            return $85($86($87));
        };
    };
};
var lastOf = function (p) {
    var $88 = Data_Newtype.unwrap(Data_Maybe_Last.newtypeLast);
    var $89 = foldMapOf(p)(function ($91) {
        return Data_Maybe_Last.Last(Data_Maybe.Just.create($91));
    });
    return function ($90) {
        return $88($89($90));
    };
};
var lengthOf = function (p) {
    var $92 = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive);
    var $93 = foldMapOf(p)(Data_Function["const"](1));
    return function ($94) {
        return $92($93($94));
    };
};
var preview = function (p) {
    var $95 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
    var $96 = foldMapOf(p)(function ($98) {
        return Data_Maybe_First.First(Data_Maybe.Just.create($98));
    });
    return function ($97) {
        return $95($96($97));
    };
};
var previewOn = function (s) {
    return function (p) {
        return preview(p)(s);
    };
};
var productOf = function (dictSemiring) {
    return function (p) {
        var $99 = Data_Newtype.unwrap(Data_Newtype.newtypeMultiplicative);
        var $100 = foldMapOf(p)(Data_Monoid_Multiplicative.Multiplicative);
        return function ($101) {
            return $99($100($101));
        };
    };
};
var sequenceOf_ = function (dictApplicative) {
    return function (p) {
        var $102 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        var $103 = foldMapOf(p)(function (f) {
            return function (v) {
                return Control_Apply.applySecond(dictApplicative.Apply0())(f)(v);
            };
        });
        return function ($104) {
            return $102($103($104));
        };
    };
};
var sumOf = function (dictSemiring) {
    return function (p) {
        var $105 = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive);
        var $106 = foldMapOf(p)(Data_Monoid_Additive.Additive);
        return function ($107) {
            return $105($106($107));
        };
    };
};
var firstOf = function (p) {
    var $108 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
    var $109 = foldMapOf(p)(function ($111) {
        return Data_Maybe_First.First(Data_Maybe.Just.create($111));
    });
    return function ($110) {
        return $108($109($110));
    };
};
var findOf = function (p) {
    return function (f) {
        return foldrOf(p)(function (a) {
            return Data_Maybe.maybe((function () {
                var $41 = f(a);
                if ($41) {
                    return new Data_Maybe.Just(a);
                };
                return Data_Maybe.Nothing.value;
            })())(Data_Maybe.Just.create);
        })(Data_Maybe.Nothing.value);
    };
};
var filtered = function (dictChoice) {
    return function (f) {
        var $112 = Data_Profunctor.dimap(dictChoice.Profunctor0())(function (x) {
            var $42 = f(x);
            if ($42) {
                return new Data_Either.Right(x);
            };
            return new Data_Either.Left(x);
        })(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)));
        var $113 = Data_Profunctor_Choice.right(dictChoice);
        return function ($114) {
            return $112($113($114));
        };
    };
};
var anyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $115 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $116 = foldMapOf(p)(function ($118) {
                return Data_Monoid_Disj.Disj(f($118));
            });
            return function ($117) {
                return $115($116($117));
            };
        };
    };
};
var elemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return anyOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.eq(dictEq)(v)(a);
            });
        };
    };
};
var orOf = function (dictHeytingAlgebra) {
    return function (p) {
        return anyOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var allOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $119 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $120 = foldMapOf(p)(function ($122) {
                return Data_Monoid_Conj.Conj(f($122));
            });
            return function ($121) {
                return $119($120($121));
            };
        };
    };
};
var andOf = function (dictHeytingAlgebra) {
    return function (p) {
        return allOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var notElemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return allOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.notEq(dictEq)(v)(a);
            });
        };
    };
};
module.exports = {
    previewOn: previewOn,
    toListOfOn: toListOfOn,
    preview: preview,
    foldOf: foldOf,
    foldMapOf: foldMapOf,
    foldrOf: foldrOf,
    foldlOf: foldlOf,
    toListOf: toListOf,
    firstOf: firstOf,
    lastOf: lastOf,
    maximumOf: maximumOf,
    minimumOf: minimumOf,
    allOf: allOf,
    anyOf: anyOf,
    andOf: andOf,
    orOf: orOf,
    elemOf: elemOf,
    notElemOf: notElemOf,
    sumOf: sumOf,
    productOf: productOf,
    lengthOf: lengthOf,
    findOf: findOf,
    sequenceOf_: sequenceOf_,
    traverseOf_: traverseOf_,
    has: has,
    "hasn't": hasn$primet,
    replicated: replicated,
    filtered: filtered,
    folded: folded,
    unfolded: unfolded,
    ifoldMapOf: ifoldMapOf,
    ifoldrOf: ifoldrOf,
    ifoldlOf: ifoldlOf,
    iallOf: iallOf,
    ianyOf: ianyOf,
    itoListOf: itoListOf,
    itraverseOf_: itraverseOf_
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.List.Types/index.js":182,"../Data.Maybe.First/index.js":185,"../Data.Maybe.Last/index.js":186,"../Data.Maybe/index.js":187,"../Data.Monoid.Additive/index.js":189,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid.Multiplicative/index.js":194,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor/index.js":213,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],158:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var view = function (l) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
};
var viewOn = function (s) {
    return function (l) {
        return view(l)(s);
    };
};
var use = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
            return viewOn(v)(p);
        });
    };
};
var to = function (f) {
    return function (p) {
        var $3 = Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p);
        return function ($4) {
            return $3(f($4));
        };
    };
};
var takeBoth = function (l) {
    return function (r) {
        return to(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(view(l))(view(r)));
    };
};
var iview = function (l) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Data_Lens_Internal_Indexed.Indexed(Control_Category.identity(Control_Category.categoryFn))));
};
var iuse = function (dictMonadState) {
    return function (p) {
        return Control_Monad_State_Class.gets(dictMonadState)(iview(p));
    };
};
var cloneGetter = function (g) {
    return to(view(g));
};
module.exports = {
    viewOn: viewOn,
    view: view,
    to: to,
    takeBoth: takeBoth,
    use: use,
    iview: iview,
    iuse: iuse,
    cloneGetter: cloneGetter
};

},{"../Control.Category/index.js":24,"../Control.Monad.State.Class/index.js":53,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.Newtype/index.js":197,"../Data.Profunctor.Strong/index.js":212}],159:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var unIndex = function (dictProfunctor) {
    return function (l) {
        var $12 = Data_Profunctor.dimap(dictProfunctor)(Data_Tuple.snd)(Control_Category.identity(Control_Category.categoryFn));
        return function ($13) {
            return l(Data_Lens_Internal_Indexed.Indexed($12($13)));
        };
    };
};
var reindexed = function (dictProfunctor) {
    return function (ij) {
        return function (v) {
            var $14 = Data_Lens_Setter.over(Data_Lens_Iso_Newtype["_Newtype"](Data_Lens_Internal_Indexed.newtypeIndexed)(Data_Lens_Internal_Indexed.newtypeIndexed)(Data_Profunctor.profunctorFn))(Data_Profunctor.lcmap(dictProfunctor)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn)(ij)));
            return function ($15) {
                return v($14($15));
            };
        };
    };
};
var iwander = function (itr) {
    return function (dictWander) {
        var $16 = Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (f) {
                return function (s) {
                    return itr(dictApplicative)(Data_Tuple.curry(f))(s);
                };
            };
        });
        var $17 = Data_Newtype.unwrap(Data_Lens_Internal_Indexed.newtypeIndexed);
        return function ($18) {
            return $16($17($18));
        };
    };
};
var positions = function (tr) {
    return function (dictWander) {
        return iwander(function (dictApplicative) {
            return function (f) {
                return function (s) {
                    return Data_Function.flip(Control_Monad_State.evalState)(0)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Function.flip(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar))(s)(tr(Data_Lens_Internal_Wander.wanderStar(Data_Functor_Compose.applicativeCompose(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(dictApplicative)))(function (a) {
                        return Data_Functor_Compose.Compose(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(f)(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(a)))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
                            return v + 1 | 0;
                        })));
                    }))));
                };
            };
        })(dictWander);
    };
};
var itraversed = function (dictTraversableWithIndex) {
    return function (dictWander) {
        return iwander(function (dictApplicative) {
            return Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative);
        })(dictWander);
    };
};
var asIndex = function (dictProfunctor) {
    return function (l) {
        var $19 = Data_Profunctor.dimap(dictProfunctor)(Data_Tuple.fst)(Control_Category.identity(Control_Category.categoryFn));
        return function ($20) {
            return l(Data_Lens_Internal_Indexed.Indexed($19($20)));
        };
    };
};
module.exports = {
    unIndex: unIndex,
    asIndex: asIndex,
    reindexed: reindexed,
    iwander: iwander,
    itraversed: itraversed,
    positions: positions
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.State.Trans/index.js":54,"../Control.Monad.State/index.js":55,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Setter/index.js":177,"../Data.Newtype/index.js":197,"../Data.Profunctor.Star/index.js":211,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251}],160:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Bazaar = function (x) {
    return x;
};
var runBazaar = function (v) {
    return function (dictApplicative) {
        return v(dictApplicative);
    };
};
var profunctorBazaar = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return function (dictApplicative) {
                return function (pafb) {
                    return function (s) {
                        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(g)(v(dictApplicative)(pafb)(f(s)));
                    };
                };
            };
        };
    };
});
var strongBazaar = new Data_Profunctor_Strong.Strong(function () {
    return profunctorBazaar;
}, function (v) {
    return function (dictApplicative) {
        return function (pafb) {
            return function (v1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Data_Tuple.Tuple.create)(v1.value1))(v(dictApplicative)(pafb)(v1.value0));
            };
        };
    };
}, function (v) {
    return function (dictApplicative) {
        return function (pafb) {
            return function (v1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v1.value0))(v(dictApplicative)(pafb)(v1.value1));
            };
        };
    };
});
var choiceBazaar = new Data_Profunctor_Choice.Choice(function () {
    return profunctorBazaar;
}, function (v) {
    return function (dictApplicative) {
        return function (pafb) {
            return function (e) {
                return Data_Bitraversable.bitraverse(Data_Either.bitraversableEither)(dictApplicative)(v(dictApplicative)(pafb))(Control_Applicative.pure(dictApplicative))(e);
            };
        };
    };
}, function (v) {
    return function (dictApplicative) {
        return function (pafb) {
            return function (e) {
                return Data_Traversable.traverse(Data_Either.traversableEither)(dictApplicative)(v(dictApplicative)(pafb))(e);
            };
        };
    };
});
var wanderBazaar = new Data_Lens_Internal_Wander.Wander(function () {
    return choiceBazaar;
}, function () {
    return strongBazaar;
}, function (w) {
    return function (v) {
        return function (dictApplicative) {
            return function (pafb) {
                return function (s) {
                    return w(dictApplicative)(v(dictApplicative)(pafb))(s);
                };
            };
        };
    };
});
module.exports = {
    Bazaar: Bazaar,
    runBazaar: runBazaar,
    profunctorBazaar: profunctorBazaar,
    strongBazaar: strongBazaar,
    choiceBazaar: choiceBazaar,
    wanderBazaar: wanderBazaar
};

},{"../Control.Applicative/index.js":17,"../Data.Bitraversable/index.js":99,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251}],161:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Exchange = (function () {
    function Exchange(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Exchange.create = function (value0) {
        return function (value1) {
            return new Exchange(value0, value1);
        };
    };
    return Exchange;
})();
var profunctorExchange = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Exchange(function ($11) {
                return v.value0(f($11));
            }, function ($12) {
                return g(v.value1($12));
            });
        };
    };
});
var functorExchange = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Exchange(v.value0, function ($13) {
            return f(v.value1($13));
        });
    };
});
module.exports = {
    Exchange: Exchange,
    functorExchange: functorExchange,
    profunctorExchange: profunctorExchange
};

},{"../Data.Functor/index.js":143,"../Data.Profunctor/index.js":213}],162:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Cochoice = require("../Data.Profunctor.Cochoice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Forget = function (x) {
    return x;
};
var semigroupForget = function (dictSemigroup) {
    return Data_Semigroup.semigroupFn(dictSemigroup);
};
var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
    return function (v) {
        return function (v1) {
            return function ($27) {
                return v1(f($27));
            };
        };
    };
});
var strongForget = new Data_Profunctor_Strong.Strong(function () {
    return profunctorForget;
}, function (v) {
    return function ($28) {
        return v(Data_Tuple.fst($28));
    };
}, function (v) {
    return function ($29) {
        return v(Data_Tuple.snd($29));
    };
});
var newtypeForget = new Data_Newtype.Newtype(function (n) {
    return n;
}, Forget);
var monoidForget = function (dictMonoid) {
    return Data_Monoid.monoidFn(dictMonoid);
};
var cochoiceForget = new Data_Profunctor_Cochoice.Cochoice(function () {
    return profunctorForget;
}, function (v) {
    return function ($30) {
        return v(Data_Either.Left.create($30));
    };
}, function (v) {
    return function ($31) {
        return v(Data_Either.Right.create($31));
    };
});
var choiceForget = function (dictMonoid) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorForget;
    }, function (v) {
        return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
    }, function (v) {
        return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
    });
};
var wanderForget = function (dictMonoid) {
    return new Data_Lens_Internal_Wander.Wander(function () {
        return choiceForget(dictMonoid);
    }, function () {
        return strongForget;
    }, function (f) {
        return function (v) {
            return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
        };
    });
};
module.exports = {
    Forget: Forget,
    newtypeForget: newtypeForget,
    semigroupForget: semigroupForget,
    monoidForget: monoidForget,
    profunctorForget: profunctorForget,
    choiceForget: choiceForget,
    strongForget: strongForget,
    cochoiceForget: cochoiceForget,
    wanderForget: wanderForget
};

},{"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Cochoice/index.js":209,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251}],163:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Indexed = function (x) {
    return x;
};
var profunctorIndexed = function (dictProfunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                return Data_Profunctor.dimap(dictProfunctor)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(f))(g)(v);
            };
        };
    });
};
var strongIndexed = function (dictStrong) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorIndexed(dictStrong.Profunctor0());
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1.value0), v1.value1.value1);
        })(Data_Profunctor_Strong.first(dictStrong)(v)));
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function (v1) {
            return new Data_Tuple.Tuple(v1.value1.value0, new Data_Tuple.Tuple(v1.value0, v1.value1.value1));
        })(Data_Profunctor_Strong.second(dictStrong)(v)));
    });
};
var newtypeIndexed = new Data_Newtype.Newtype(function (n) {
    return n;
}, Indexed);
var choiceIndexed = function (dictChoice) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorIndexed(dictChoice.Profunctor0());
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
            return Data_Either.either((function () {
                var $47 = Data_Tuple.Tuple.create(v1.value0);
                return function ($48) {
                    return Data_Either.Left.create($47($48));
                };
            })())(Data_Either.Right.create)(v1.value1);
        })(Data_Profunctor_Choice.left(dictChoice)(v)));
    }, function (v) {
        return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function (v1) {
            return Data_Either.either(Data_Either.Left.create)((function () {
                var $49 = Data_Tuple.Tuple.create(v1.value0);
                return function ($50) {
                    return Data_Either.Right.create($49($50));
                };
            })())(v1.value1);
        })(Data_Profunctor_Choice.right(dictChoice)(v)));
    });
};
var wanderIndexed = function (dictWander) {
    return new Data_Lens_Internal_Wander.Wander(function () {
        return choiceIndexed(dictWander.Choice1());
    }, function () {
        return strongIndexed(dictWander.Strong0());
    }, function (trav) {
        return function (v) {
            return Indexed(Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (ia2fb) {
                    return function (v1) {
                        return trav(dictApplicative)((function () {
                            var $51 = Data_Tuple.Tuple.create(v1.value0);
                            return function ($52) {
                                return ia2fb($51($52));
                            };
                        })())(v1.value1);
                    };
                };
            })(v));
        };
    });
};
module.exports = {
    Indexed: Indexed,
    newtypeIndexed: newtypeIndexed,
    profunctorIndexed: profunctorIndexed,
    strongIndexed: strongIndexed,
    choiceIndexed: choiceIndexed,
    wanderIndexed: wanderIndexed
};

},{"../Data.Either/index.js":119,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],164:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Market = (function () {
    function Market(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Market.create = function (value0) {
        return function (value1) {
            return new Market(value0, value1);
        };
    };
    return Market;
})();
var profunctorMarket = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Market(function ($19) {
                return g(v.value0($19));
            }, (function () {
                var $20 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(g);
                return function ($21) {
                    return $20(v.value1(f($21)));
                };
            })());
        };
    };
});
var functorMarket = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Market(function ($22) {
            return f(v.value0($22));
        }, (function () {
            var $23 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f);
            return function ($24) {
                return $23(v.value1($24));
            };
        })());
    };
});
var choiceMarket = new Data_Profunctor_Choice.Choice(function () {
    return profunctorMarket;
}, function (v) {
    return new Market(function ($25) {
        return Data_Either.Left.create(v.value0($25));
    }, Data_Either.either((function () {
        var $26 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Left.create);
        return function ($27) {
            return $26(v.value1($27));
        };
    })())(function ($28) {
        return Data_Either.Left.create(Data_Either.Right.create($28));
    }));
}, function (v) {
    return new Market(function ($29) {
        return Data_Either.Right.create(v.value0($29));
    }, Data_Either.either(function ($30) {
        return Data_Either.Left.create(Data_Either.Left.create($30));
    })((function () {
        var $31 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Either.Right.create);
        return function ($32) {
            return $31(v.value1($32));
        };
    })()));
});
module.exports = {
    Market: Market,
    functorMarket: functorMarket,
    profunctorMarket: profunctorMarket,
    choiceMarket: choiceMarket
};

},{"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor/index.js":213}],165:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Cochoice = require("../Data.Profunctor.Cochoice/index.js");
var Data_Profunctor_Costrong = require("../Data.Profunctor.Costrong/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Re = function (x) {
    return x;
};
var profunctorRe = function (dictProfunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                var $28 = Data_Profunctor.dimap(dictProfunctor)(g)(f);
                return function ($29) {
                    return v($28($29));
                };
            };
        };
    });
};
var strongRe = function (dictStrong) {
    return new Data_Profunctor_Costrong.Costrong(function () {
        return profunctorRe(dictStrong.Profunctor0());
    }, function (v) {
        var $30 = Data_Profunctor_Strong.first(dictStrong);
        return function ($31) {
            return v($30($31));
        };
    }, function (v) {
        var $32 = Data_Profunctor_Strong.second(dictStrong);
        return function ($33) {
            return v($32($33));
        };
    });
};
var newtypeRe = new Data_Newtype.Newtype(function (n) {
    return n;
}, Re);
var costrongRe = function (dictCostrong) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorRe(dictCostrong.Profunctor0());
    }, function (v) {
        var $34 = Data_Profunctor_Costrong.unfirst(dictCostrong);
        return function ($35) {
            return v($34($35));
        };
    }, function (v) {
        var $36 = Data_Profunctor_Costrong.unsecond(dictCostrong);
        return function ($37) {
            return v($36($37));
        };
    });
};
var cochoiceRe = function (dictCochoice) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorRe(dictCochoice.Profunctor0());
    }, function (v) {
        var $38 = Data_Profunctor_Cochoice.unleft(dictCochoice);
        return function ($39) {
            return v($38($39));
        };
    }, function (v) {
        var $40 = Data_Profunctor_Cochoice.unright(dictCochoice);
        return function ($41) {
            return v($40($41));
        };
    });
};
var choiceRe = function (dictChoice) {
    return new Data_Profunctor_Cochoice.Cochoice(function () {
        return profunctorRe(dictChoice.Profunctor0());
    }, function (v) {
        var $42 = Data_Profunctor_Choice.left(dictChoice);
        return function ($43) {
            return v($42($43));
        };
    }, function (v) {
        var $44 = Data_Profunctor_Choice.right(dictChoice);
        return function ($45) {
            return v($44($45));
        };
    });
};
module.exports = {
    Re: Re,
    newtypeRe: newtypeRe,
    profunctorRe: profunctorRe,
    choiceRe: choiceRe,
    cochoiceRe: cochoiceRe,
    strongRe: strongRe,
    costrongRe: costrongRe
};

},{"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Cochoice/index.js":209,"../Data.Profunctor.Costrong/index.js":210,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213}],166:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Shop = (function () {
    function Shop(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Shop.create = function (value0) {
        return function (value1) {
            return new Shop(value0, value1);
        };
    };
    return Shop;
})();
var profunctorShop = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Shop(function ($30) {
                return v.value0(f($30));
            }, function (s) {
                var $31 = v.value1(f(s));
                return function ($32) {
                    return g($31($32));
                };
            });
        };
    };
});
var strongShop = new Data_Profunctor_Strong.Strong(function () {
    return profunctorShop;
}, function (v) {
    return new Shop(function (v1) {
        return v.value0(v1.value0);
    }, function (v1) {
        return function (b) {
            return new Data_Tuple.Tuple(v.value1(v1.value0)(b), v1.value1);
        };
    });
}, function (v) {
    return new Shop(function (v1) {
        return v.value0(v1.value1);
    }, function (v1) {
        return function (b) {
            return new Data_Tuple.Tuple(v1.value0, v.value1(v1.value1)(b));
        };
    });
});
module.exports = {
    Shop: Shop,
    profunctorShop: profunctorShop,
    strongShop: strongShop
};

},{"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],167:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Closed = require("../Data.Profunctor.Closed/index.js");
var Data_Profunctor_Costrong = require("../Data.Profunctor.Costrong/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Tagged = function (x) {
    return x;
};
var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
    return function (g) {
        return function (v1) {
            return g(v1);
        };
    };
});
var taggedCostrong = new Data_Profunctor_Costrong.Costrong(function () {
    return taggedProfunctor;
}, function (v) {
    return v.value0;
}, function (v) {
    return v.value1;
});
var taggedClosed = new Data_Profunctor_Closed.Closed(function () {
    return taggedProfunctor;
}, function (v) {
    return Data_Function["const"](v);
});
var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
    return taggedProfunctor;
}, function (v) {
    return new Data_Either.Left(v);
}, function (v) {
    return new Data_Either.Right(v);
});
var newtypeTagged = new Data_Newtype.Newtype(function (n) {
    return n;
}, Tagged);
var functorTagged = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var foldableTagged = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v)(b);
        };
    };
});
var traversableTagged = new Data_Traversable.Traversable(function () {
    return foldableTagged;
}, function () {
    return functorTagged;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tagged)(f(v));
        };
    };
});
var eqTagged = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x)(y);
        };
    });
};
var ordTagged = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTagged(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(dictOrd)(x)(y);
        };
    });
};
var eq1Tagged = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTagged(dictEq));
});
var ord1Tagged = new Data_Ord.Ord1(function () {
    return eq1Tagged;
}, function (dictOrd) {
    return Data_Ord.compare(ordTagged(dictOrd));
});
module.exports = {
    Tagged: Tagged,
    newtypeTagged: newtypeTagged,
    eqTagged: eqTagged,
    eq1Tagged: eq1Tagged,
    ordTagged: ordTagged,
    ord1Tagged: ord1Tagged,
    functorTagged: functorTagged,
    taggedProfunctor: taggedProfunctor,
    taggedChoice: taggedChoice,
    taggedCostrong: taggedCostrong,
    taggedClosed: taggedClosed,
    foldableTagged: foldableTagged,
    traversableTagged: traversableTagged
};

},{"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Closed/index.js":208,"../Data.Profunctor.Costrong/index.js":210,"../Data.Profunctor/index.js":213,"../Data.Traversable/index.js":248}],168:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Wander = function (Choice1, Strong0, wander) {
    this.Choice1 = Choice1;
    this.Strong0 = Strong0;
    this.wander = wander;
};
var wanderStar = function (dictApplicative) {
    return new Wander(function () {
        return Data_Profunctor_Star.choiceStar(dictApplicative);
    }, function () {
        return Data_Profunctor_Star.strongStar((dictApplicative.Apply0()).Functor0());
    }, function (t) {
        return function (v) {
            return t(dictApplicative)(v);
        };
    });
};
var wanderFunction = new Wander(function () {
    return Data_Profunctor_Choice.choiceFn;
}, function () {
    return Data_Profunctor_Strong.strongFn;
}, function (t) {
    return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
});
var wander = function (dict) {
    return dict.wander;
};
module.exports = {
    wander: wander,
    Wander: Wander,
    wanderFunction: wanderFunction,
    wanderStar: wanderStar
};

},{"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Star/index.js":211,"../Data.Profunctor.Strong/index.js":212}],169:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var _Newtype = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (dictProfunctor) {
            return Data_Lens_Iso.iso(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype1))(dictProfunctor);
        };
    };
};
module.exports = {
    "_Newtype": _Newtype
};

},{"../Data.Lens.Iso/index.js":170,"../Data.Newtype/index.js":197}],170:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Exchange = require("../Data.Lens.Internal.Exchange/index.js");
var Data_Lens_Internal_Re = require("../Data.Lens.Internal.Re/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var withIso = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Exchange.Exchange(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn)));
        return f(v.value0)(v.value1);
    };
};
var under = function (l) {
    return withIso(l)(function (sa) {
        return function (bt) {
            return function (ts) {
                return function ($19) {
                    return sa(ts(bt($19)));
                };
            };
        };
    });
};
var re = function (t) {
    return Data_Newtype.unwrap(Data_Lens_Internal_Re.newtypeRe)(t(Control_Category.identity(Control_Category.categoryFn)));
};
var iso = function (f) {
    return function (g) {
        return function (dictProfunctor) {
            return function (pab) {
                return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
            };
        };
    };
};
var mapping = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (l) {
            return function (dictProfunctor) {
                return withIso(l)(function (sa) {
                    return function (bt) {
                        return iso(Data_Functor.map(dictFunctor)(sa))(Data_Functor.map(dictFunctor1)(bt))(dictProfunctor);
                    };
                });
            };
        };
    };
};
var non = function (dictEq) {
    return function (def) {
        return function (dictProfunctor) {
            var g = function (a) {
                if (Data_Eq.eq(dictEq)(a)(def)) {
                    return Data_Maybe.Nothing.value;
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Maybe.Just(a);
                };
                throw new Error("Failed pattern match at Data.Lens.Iso (line 45, column 9 - line 46, column 33): " + [ a.constructor.name ]);
            };
            return iso(Data_Maybe.fromMaybe(def))(g)(dictProfunctor);
        };
    };
};
var uncurried = function (dictProfunctor) {
    return iso(Data_Tuple.uncurry)(Data_Tuple.curry)(dictProfunctor);
};
var flipped = function (dictProfunctor) {
    return iso(Data_Function.flip)(Data_Function.flip)(dictProfunctor);
};
var dimapping = function (dictProfunctor) {
    return function (dictProfunctor1) {
        return function (f) {
            return function (g) {
                return function (dictProfunctor2) {
                    return withIso(f)(function (sa) {
                        return function (bt) {
                            return withIso(g)(function (ssaa) {
                                return function (bbtt) {
                                    return iso(Data_Profunctor.dimap(dictProfunctor)(sa)(ssaa))(Data_Profunctor.dimap(dictProfunctor1)(bt)(bbtt))(dictProfunctor2);
                                };
                            });
                        };
                    });
                };
            };
        };
    };
};
var curried = function (dictProfunctor) {
    return iso(Data_Tuple.curry)(Data_Tuple.uncurry)(dictProfunctor);
};
var cloneIso = function (l) {
    return function (dictProfunctor) {
        return withIso(l)(function (x) {
            return function (y) {
                return function (p) {
                    return iso(x)(y)(dictProfunctor)(p);
                };
            };
        });
    };
};
var auf = function (dictProfunctor) {
    return function (l) {
        return withIso(l)(function (sa) {
            return function (bt) {
                return function (f) {
                    return function (g) {
                        return function (e) {
                            return bt(f(Data_Profunctor.rmap(dictProfunctor)(sa)(g))(e));
                        };
                    };
                };
            };
        });
    };
};
var au = function (l) {
    return withIso(l)(function (sa) {
        return function (bt) {
            return function (f) {
                return function (e) {
                    return sa(f(bt)(e));
                };
            };
        };
    });
};
module.exports = {
    iso: iso,
    withIso: withIso,
    cloneIso: cloneIso,
    re: re,
    au: au,
    auf: auf,
    under: under,
    non: non,
    curried: curried,
    uncurried: uncurried,
    flipped: flipped,
    mapping: mapping,
    dimapping: dimapping
};

},{"../Control.Category/index.js":24,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Lens.Internal.Exchange/index.js":161,"../Data.Lens.Internal.Re/index.js":165,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],171:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Lens_Tuple = require("../Data.Lens.Lens.Tuple/index.js");
var _2 = function (dictStrong) {
    var $2 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(dictStrong.Profunctor0());
    var $3 = Data_Lens_Lens_Tuple["_2"](dictStrong);
    return function ($4) {
        return $2($3($4));
    };
};
var _1 = function (dictStrong) {
    var $5 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(dictStrong.Profunctor0());
    var $6 = Data_Lens_Lens_Tuple["_1"](dictStrong);
    return function ($7) {
        return $5($6($7));
    };
};
module.exports = {
    "_1": _1,
    "_2": _2
};

},{"../Data.Functor.Product/index.js":140,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Lens.Tuple/index.js":172}],172:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var _2 = function (dictStrong) {
    return Data_Profunctor_Strong.second(dictStrong);
};
var _1 = function (dictStrong) {
    return Data_Profunctor_Strong.first(dictStrong);
};
module.exports = {
    "_1": _1,
    "_2": _2
};

},{"../Data.Profunctor.Strong/index.js":212}],173:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Lens_Internal_Shop = require("../Data.Lens.Internal.Shop/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var withLens = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
            return function (b) {
                return b;
            };
        }));
        return f(v.value0)(v.value1);
    };
};
var withIndexedLens = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Shop.Shop(Control_Category.identity(Control_Category.categoryFn), function (v1) {
            return function (b) {
                return b;
            };
        }));
        return f(v.value0)(v.value1);
    };
};
var lens$prime = function (to) {
    return function (dictStrong) {
        return function (pab) {
            return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                return v.value1(v.value0);
            })(Data_Profunctor_Strong.first(dictStrong)(pab));
        };
    };
};
var lens = function (get) {
    return function (set) {
        return function (dictStrong) {
            return lens$prime(function (s) {
                return new Data_Tuple.Tuple(get(s), function (b) {
                    return set(s)(b);
                });
            })(dictStrong);
        };
    };
};
var ilens$prime = function (to) {
    return function (dictStrong) {
        return function (pab) {
            return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                return v.value1(v.value0);
            })(Data_Profunctor_Strong.first(dictStrong)(Data_Newtype.un(Data_Lens_Internal_Indexed.newtypeIndexed)(Data_Lens_Internal_Indexed.Indexed)(pab)));
        };
    };
};
var ilens = function (get) {
    return function (set) {
        return function (dictStrong) {
            return ilens$prime(function (s) {
                return new Data_Tuple.Tuple(get(s), function (b) {
                    return set(s)(b);
                });
            })(dictStrong);
        };
    };
};
var cloneLens = function (l) {
    return function (dictStrong) {
        return withLens(l)(function (x) {
            return function (y) {
                return function (p) {
                    return lens(x)(y)(dictStrong)(p);
                };
            };
        });
    };
};
var cloneIndexedLens = function (l) {
    return function (dictStrong) {
        return withIndexedLens(l)(function (x) {
            return function (y) {
                return function (p) {
                    return ilens(x)(y)(dictStrong)(p);
                };
            };
        });
    };
};
module.exports = {
    lens: lens,
    "lens'": lens$prime,
    withLens: withLens,
    cloneLens: cloneLens,
    ilens: ilens,
    "ilens'": ilens$prime,
    withIndexedLens: withIndexedLens,
    cloneIndexedLens: cloneIndexedLens
};

},{"../Control.Category/index.js":24,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.Lens.Internal.Shop/index.js":166,"../Data.Newtype/index.js":197,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],174:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var _Nothing = function (dictChoice) {
    return Data_Lens_Prism.prism(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.maybe(new Data_Either.Right(Data_Unit.unit))(Data_Function["const"](new Data_Either.Left(Data_Maybe.Nothing.value))))(dictChoice);
};
var _Just = function (dictChoice) {
    return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
};
module.exports = {
    "_Nothing": _Nothing,
    "_Just": _Just
};

},{"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Lens.Prism/index.js":175,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257}],175:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Internal_Tagged = require("../Data.Lens.Internal.Tagged/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var withPrism = function (l) {
    return function (f) {
        var v = l(new Data_Lens_Internal_Market.Market(Control_Category.identity(Control_Category.categoryFn), Data_Either.Right.create));
        return f(v.value0)(v.value1);
    };
};
var review = Data_Newtype.under(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.Tagged);
var prism = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return function (pab) {
                return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
            };
        };
    };
};
var prism$prime = function (to) {
    return function (fro) {
        return function (dictChoice) {
            return prism(to)(function (s) {
                return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
            })(dictChoice);
        };
    };
};
var nearly = function (x) {
    return function (f) {
        return function (dictChoice) {
            return prism$prime(Data_Function["const"](x))((function () {
                var $14 = Control_MonadZero.guard(Data_Maybe.monadZeroMaybe);
                return function ($15) {
                    return $14(f($15));
                };
            })())(dictChoice);
        };
    };
};
var only = function (dictEq) {
    return function (x) {
        return function (dictChoice) {
            return nearly(x)(function (v) {
                return Data_Eq.eq(dictEq)(v)(x);
            })(dictChoice);
        };
    };
};
var matching = function (l) {
    return withPrism(l)(function (v) {
        return function (f) {
            return f;
        };
    });
};
var is = function (dictHeytingAlgebra) {
    return function (l) {
        var $16 = Data_Either.either(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)))(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
        var $17 = matching(l);
        return function ($18) {
            return $16($17($18));
        };
    };
};
var isn$primet = function (dictHeytingAlgebra) {
    return function (l) {
        var $19 = Data_HeytingAlgebra.not(dictHeytingAlgebra);
        var $20 = is(dictHeytingAlgebra)(l);
        return function ($21) {
            return $19($20($21));
        };
    };
};
var clonePrism = function (l) {
    return function (dictChoice) {
        return withPrism(l)(function (x) {
            return function (y) {
                return function (p) {
                    return prism(x)(y)(dictChoice)(p);
                };
            };
        });
    };
};
module.exports = {
    "prism'": prism$prime,
    prism: prism,
    only: only,
    nearly: nearly,
    review: review,
    is: is,
    "isn't": isn$primet,
    matching: matching,
    clonePrism: clonePrism,
    withPrism: withPrism
};

},{"../Control.Category/index.js":24,"../Control.MonadZero/index.js":62,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.HeytingAlgebra/index.js":149,"../Data.Lens.Internal.Market/index.js":164,"../Data.Lens.Internal.Tagged/index.js":167,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor/index.js":213}],176:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Function = require("../Data.Function/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Record = require("../Record/index.js");
var prop = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (dictStrong) {
                    return Data_Lens_Lens.lens(Record.get(dictIsSymbol)(dictCons)(l))(Data_Function.flip(Record.set(dictIsSymbol)(dictCons)(dictCons1)(l)))(dictStrong);
                };
            };
        };
    };
};
module.exports = {
    prop: prop
};

},{"../Data.Function/index.js":132,"../Data.Lens.Lens/index.js":173,"../Record/index.js":385}],177:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var over = function (l) {
    return l;
};
var set = function (l) {
    return function (b) {
        return over(l)(Data_Function["const"](b));
    };
};
var setJust = function (p) {
    var $24 = set(p);
    return function ($25) {
        return $24(Data_Maybe.Just.create($25));
    };
};
var subOver = function (dictRing) {
    return function (p) {
        var $26 = over(p);
        var $27 = Data_Function.flip(Data_Ring.sub(dictRing));
        return function ($28) {
            return $26($27($28));
        };
    };
};
var mulOver = function (dictSemiring) {
    return function (p) {
        var $29 = over(p);
        var $30 = Data_Function.flip(Data_Semiring.mul(dictSemiring));
        return function ($31) {
            return $29($30($31));
        };
    };
};
var modifying = function (dictMonadState) {
    return function (p) {
        return function (f) {
            return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(over(p)(f)));
        };
    };
};
var mulModifying = function (dictMonadState) {
    return function (dictSemiring) {
        return function (p) {
            var $32 = modifying(dictMonadState)(p);
            var $33 = Data_Function.flip(Data_Semiring.mul(dictSemiring));
            return function ($34) {
                return $32($33($34));
            };
        };
    };
};
var subModifying = function (dictMonadState) {
    return function (dictRing) {
        return function (p) {
            var $35 = modifying(dictMonadState)(p);
            var $36 = Data_Function.flip(Data_Ring.sub(dictRing));
            return function ($37) {
                return $35($36($37));
            };
        };
    };
};
var iover = function (l) {
    return function (f) {
        return l(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f)));
    };
};
var divOver = function (dictEuclideanRing) {
    return function (p) {
        var $38 = over(p);
        var $39 = Data_Function.flip(Data_EuclideanRing.div(dictEuclideanRing));
        return function ($40) {
            return $38($39($40));
        };
    };
};
var divModifying = function (dictMonadState) {
    return function (dictEuclideanRing) {
        return function (p) {
            var $41 = modifying(dictMonadState)(p);
            var $42 = Data_Function.flip(Data_EuclideanRing.div(dictEuclideanRing));
            return function ($43) {
                return $41($42($43));
            };
        };
    };
};
var disjOver = function (dictHeytingAlgebra) {
    return function (p) {
        var $44 = over(p);
        var $45 = Data_Function.flip(Data_HeytingAlgebra.disj(dictHeytingAlgebra));
        return function ($46) {
            return $44($45($46));
        };
    };
};
var disjModifying = function (dictMonadState) {
    return function (dictHeytingAlgebra) {
        return function (p) {
            var $47 = modifying(dictMonadState)(p);
            var $48 = Data_Function.flip(Data_HeytingAlgebra.disj(dictHeytingAlgebra));
            return function ($49) {
                return $47($48($49));
            };
        };
    };
};
var conjOver = function (dictHeytingAlgebra) {
    return function (p) {
        var $50 = over(p);
        var $51 = Data_Function.flip(Data_HeytingAlgebra.conj(dictHeytingAlgebra));
        return function ($52) {
            return $50($51($52));
        };
    };
};
var conjModifying = function (dictMonadState) {
    return function (dictHeytingAlgebra) {
        return function (p) {
            var $53 = modifying(dictMonadState)(p);
            var $54 = Data_Function.flip(Data_HeytingAlgebra.conj(dictHeytingAlgebra));
            return function ($55) {
                return $53($54($55));
            };
        };
    };
};
var assign = function (dictMonadState) {
    return function (p) {
        return function (b) {
            return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(set(p)(b)));
        };
    };
};
var assignJust = function (dictMonadState) {
    return function (p) {
        var $56 = assign(dictMonadState)(p);
        return function ($57) {
            return $56(Data_Maybe.Just.create($57));
        };
    };
};
var appendOver = function (dictSemigroup) {
    return function (p) {
        var $58 = over(p);
        var $59 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
        return function ($60) {
            return $58($59($60));
        };
    };
};
var appendModifying = function (dictMonadState) {
    return function (dictSemigroup) {
        return function (p) {
            var $61 = modifying(dictMonadState)(p);
            var $62 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
            return function ($63) {
                return $61($62($63));
            };
        };
    };
};
var addOver = function (dictSemiring) {
    return function (p) {
        var $64 = over(p);
        var $65 = Data_Semiring.add(dictSemiring);
        return function ($66) {
            return $64($65($66));
        };
    };
};
var addModifying = function (dictMonadState) {
    return function (dictSemiring) {
        return function (p) {
            var $67 = modifying(dictMonadState)(p);
            var $68 = Data_Semiring.add(dictSemiring);
            return function ($69) {
                return $67($68($69));
            };
        };
    };
};
module.exports = {
    over: over,
    iover: iover,
    set: set,
    addOver: addOver,
    subOver: subOver,
    mulOver: mulOver,
    divOver: divOver,
    disjOver: disjOver,
    conjOver: conjOver,
    appendOver: appendOver,
    setJust: setJust,
    assign: assign,
    modifying: modifying,
    addModifying: addModifying,
    mulModifying: mulModifying,
    subModifying: subModifying,
    divModifying: divModifying,
    disjModifying: disjModifying,
    conjModifying: conjModifying,
    appendModifying: appendModifying,
    assignJust: assignJust
};

},{"../Control.Monad.State.Class/index.js":53,"../Data.EuclideanRing/index.js":125,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.Maybe/index.js":187,"../Data.Ring/index.js":215,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Tuple/index.js":251}],178:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Lens_Indexed = require("../Data.Lens.Indexed/index.js");
var Data_Lens_Internal_Bazaar = require("../Data.Lens.Internal.Bazaar/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var traversed = function (dictTraversable) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(dictTraversable)(dictApplicative);
        });
    };
};
var traverseOf = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star);
var sequenceOf = function (t) {
    return traverseOf(t)(Control_Category.identity(Control_Category.categoryFn));
};
var itraverseOf = function (t) {
    var $24 = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(function ($26) {
        return t(Data_Lens_Internal_Indexed.Indexed($26));
    });
    return function ($25) {
        return $24(Data_Tuple.uncurry($25));
    };
};
var iforOf = function ($27) {
    return Data_Function.flip(itraverseOf($27));
};
var failover = function (dictAlternative) {
    return function (t) {
        return function (f) {
            return function (s) {
                var v = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(t(Data_Profunctor_Star.Star((function () {
                    var $28 = Data_Tuple.Tuple.create(true);
                    return function ($29) {
                        return $28(f($29));
                    };
                })())))(s);
                if (v.value0) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(v.value1);
                };
                if (!v.value0) {
                    return Control_Plus.empty(dictAlternative.Plus1());
                };
                throw new Error("Failed pattern match at Data.Lens.Traversal (line 97, column 18 - line 99, column 32): " + [ v.constructor.name ]);
            };
        };
    };
};
var elementsOf = function (dictWander) {
    return function (tr) {
        return function (pr) {
            return Data_Lens_Indexed.iwander(function (dictApplicative) {
                return function (f) {
                    return Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(tr(Data_Lens_Internal_Wander.wanderStar(dictApplicative))(Data_Lens_Internal_Indexed.Indexed(Data_Profunctor_Star.Star(function (v) {
                        var $21 = pr(v.value0);
                        if ($21) {
                            return f(v.value0)(v.value1);
                        };
                        return Control_Applicative.pure(dictApplicative)(v.value1);
                    }))));
                };
            })(dictWander);
        };
    };
};
var element = function (dictWander) {
    return function (n) {
        return function (tr) {
            return Data_Lens_Indexed.unIndex((dictWander.Choice1()).Profunctor0())(elementsOf(dictWander)(function (dictWander1) {
                return Data_Lens_Indexed.positions(function (dictWander2) {
                    return tr(dictWander2);
                })(dictWander1);
            })(function (v) {
                return v === n;
            }));
        };
    };
};
var cloneTraversal = function (l) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Lens_Internal_Bazaar.runBazaar(l(function (dictApplicative1) {
                return Control_Category.identity(Control_Category.categoryFn);
            }))(dictApplicative);
        });
    };
};
module.exports = {
    traversed: traversed,
    element: element,
    traverseOf: traverseOf,
    sequenceOf: sequenceOf,
    failover: failover,
    elementsOf: elementsOf,
    itraverseOf: itraverseOf,
    cloneTraversal: cloneTraversal
};

},{"../Control.Applicative/index.js":17,"../Control.Category/index.js":24,"../Control.Plus/index.js":65,"../Data.Function/index.js":132,"../Data.Lens.Indexed/index.js":159,"../Data.Lens.Internal.Bazaar/index.js":160,"../Data.Lens.Internal.Indexed/index.js":163,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Newtype/index.js":197,"../Data.Profunctor.Star/index.js":211,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251}],179:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var nil = List(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var newtypeList = new Data_Newtype.Newtype(function (n) {
    return n;
}, List);
var step = (function () {
    var $215 = Data_Newtype.unwrap(newtypeList);
    return function ($216) {
        return Data_Lazy.force($215($216));
    };
})();
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 98, column 5 - line 98, column 21): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 64, column 5 - line 64, column 19): " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
    });
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function ($217) {
        return step(f($217));
    }));
});
var functorList = new Data_Functor.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 107, column 5 - line 107, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var functorNonEmptyList = new Data_Functor.Functor(function (f) {
    return function (v) {
        return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                            $tco_var_v = step(v.value1);
                            $copy_v1 = step(v1.value1);
                            return;
                        };
                        $tco_done = true;
                        return false;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = step(v.value1);
                                $copy_v1 = step(v1.value1);
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 84, column 5 - line 84, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(step(xs))(step(ys));
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (b) {
            return function (a) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (op) {
    var go = function ($copy_b) {
        return function ($copy_xs) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, xs) {
                var v = step(xs);
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = op(b)(v.value0);
                    $copy_xs = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_xs);
            };
            return $tco_result;
        };
    };
    return go;
}, function (op) {
    return function (z) {
        return function (xs) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
        };
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (l) {
        var go = function (a) {
            return function (v) {
                var acc$prime = cons(a)(v.acc);
                return {
                    val: cons(f(acc$prime))(v.val),
                    acc: acc$prime
                };
            };
        };
        var v = step(l);
        if (v instanceof Nil) {
            return nil;
        };
        if (v instanceof Cons) {
            return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Lazy.Types (line 194, column 5 - line 197, column 55): " + [ v.constructor.name ]);
    };
});
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: cons(f(Data_Lazy.defer(function (v2) {
                        return new Data_NonEmpty.NonEmpty(a, v1.acc);
                    })))(v1.val),
                    acc: cons(a)(v1.acc)
                };
            };
        };
        var v1 = Data_Lazy.force(v);
        return NonEmptyList(Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: nil,
                acc: nil
            })(v1.value1)).val);
        }));
    };
});
var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
        };
    };
});
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $218 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $219 = f(i);
                return function ($220) {
                    return $218($219($220));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        var $221 = Data_Foldable.foldl(foldableList)(function (v) {
            return function (a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function ($222) {
            return Data_Tuple.snd($221($222));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, nil))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                var $223 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($224) {
                    return f($223($224));
                };
            })())(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $225 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($226) {
                    return f($225($226));
                };
            })())(b)(Data_Lazy.force(v));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $227 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($228) {
                    return f($227($228));
                };
            })())(b)(Data_Lazy.force(v));
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return cons(f(i)(x))(acc);
            };
        };
    })(nil);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        return NonEmptyList(Data_Lazy.defer(function (v1) {
            return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
                var $229 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($230) {
                    return f($229($230));
                };
            })())(Data_Lazy.force(v));
        }));
    };
});
var toList = function (v) {
    return Control_Lazy.defer(lazyList)(function (v1) {
        var v2 = Data_Lazy.force(v);
        return cons(v2.value0)(v2.value1);
    });
};
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        var v1 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v2) {
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
        });
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return Data_Foldable.foldr(foldableList)(function (a) {
            return function (b) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
    return foldableNonEmptyList;
}, function () {
    return functorNonEmptyList;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
            return NonEmptyList(Data_Lazy.defer(function (v1) {
                return xxs;
            }));
        })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
        };
    };
});
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
            return function (a) {
                return function (b) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(i)(a)))(b);
                };
            };
        })(Control_Applicative.pure(dictApplicative)(nil));
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                return NonEmptyList(Data_Lazy.defer(function (v1) {
                    return xxs;
                }));
            })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                var $231 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($232) {
                    return f($231($232));
                };
            })())(Data_Lazy.force(v)));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1.value1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0)(go(f)(v1.value1.value0));
                };
                if (v1.value1 instanceof Data_Maybe.Nothing) {
                    return cons(v1.value0)(nil);
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, (function () {
    var go = function (f) {
        return function (b) {
            return Control_Lazy.defer(lazyList)(function (v) {
                var v1 = f(b);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return nil;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [ v1.constructor.name ]);
            });
        };
    };
    return go;
})());
var unfoldable1NonEmptyList = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        return NonEmptyList(Data_Lazy.defer(function (v) {
            return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
        }));
    };
});
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return Data_NonEmpty.head(Data_Lazy.force(v));
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (xs) {
    return function (f) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 175, column 5 - line 175, column 17): " + [ v.constructor.name ]);
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
    };
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, Control_Monad.ap(monadList));
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return cons(a)(nil);
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        var v2 = Data_Lazy.force(v1);
        var v3 = Data_Lazy.force(v);
        return Data_Lazy.defer(function (v4) {
            return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
        });
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = Data_Lazy.force(v);
        var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
        return Data_Lazy.defer(function (v3) {
            return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($233) {
                return toList(f($233));
            })));
        });
    };
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, function (a) {
    return Data_Lazy.defer(function (v) {
        return Data_NonEmpty.singleton(plusList)(a);
    });
});
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
module.exports = {
    List: List,
    Nil: Nil,
    Cons: Cons,
    step: step,
    nil: nil,
    cons: cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    newtypeList: newtypeList,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    lazyList: lazyList,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Lazy/index.js":34,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Lazy/index.js":156,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255}],180:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Pattern = function (x) {
    return x;
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 693, column 3 - line 693, column 35): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(x, v1.value1);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 367, column 3 - line 367, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
var uncons = function (xs) {
    var v = Data_List_Lazy_Types.step(xs);
    if (v instanceof Data_List_Lazy_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Lazy_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 285, column 13 - line 287, column 44): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var takeWhile = function (p) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
            return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
        };
        return Data_List_Lazy_Types.Nil.value;
    };
    var $249 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $250 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($251) {
        return Data_List_Lazy_Types.List($249($250($251)));
    };
};
var take = function (n) {
    var go = function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 517, column 3 - line 517, column 32): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var $124 = n <= 0;
    if ($124) {
        return Data_Function["const"](Data_List_Lazy_Types.nil);
    };
    var $252 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $253 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($254) {
        return Data_List_Lazy_Types.List($252($253($254)));
    };
};
var tail = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    var v1 = Data_List_Lazy_Types.step(prefix);
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = Data_List_Lazy_Types.step(input);
                        if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                            return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                                a: v1.value1,
                                b: v2.value1
                            }));
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 499, column 21 - line 503, column 19): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (p) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
            var v1 = span(p)(v.value0.tail);
            return {
                init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
                rest: v1.rest
            };
        };
        return {
            init: Data_List_Lazy_Types.nil,
            rest: xs
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
    };
};
var singleton = function (a) {
    return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
    });
};
var scanrLazy = function (f) {
    return function (acc) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var acc$prime = f(v.value0)(acc);
                    return Data_List_Lazy_Types.Cons.create(acc$prime)(scanrLazy(f)(acc$prime)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 764, column 5 - line 764, column 27): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var reverse = function (xs) {
    return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
        return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
    });
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (v1) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(v)(v1));
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 161, column 1 - line 161, column 62): " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
        return Data_List_Lazy_Types.cons(x)(xs);
    });
};
var replicate = function (i) {
    return function (xs) {
        return take(i)(repeat(xs));
    };
};
var range = function (start) {
    return function (end) {
        if (start > end) {
            var g = function (x) {
                if (x >= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 13 - line 149, column 38): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
        };
        if (Data_Boolean.otherwise) {
            var f = function (x) {
                if (x <= end) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 153, column 5 - line 154, column 30): " + [ x.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 145, column 1 - line 145, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (f) {
    var go = function (x) {
        return function (v) {
            var $154 = f(x);
            if ($154) {
                return {
                    yes: Data_List_Lazy_Types.cons(x)(v.yes),
                    no: v.no
                };
            };
            return {
                yes: v.yes,
                no: Data_List_Lazy_Types.cons(x)(v.no)
            };
        };
    };
    return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
        yes: Data_List_Lazy_Types.nil,
        no: Data_List_Lazy_Types.nil
    });
};
var $$null = function ($255) {
    return Data_Maybe.isNothing(uncons($255));
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapMaybe = function (f) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                var v1 = f(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 460, column 5 - line 462, column 39): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 458, column 3 - line 458, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var $256 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $257 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($258) {
        return Data_List_Lazy_Types.List($256($257($258)));
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
    return function (v) {
        return l + 1 | 0;
    };
})(0);
var last = (function () {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if ($$null(v.value1)) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($259) {
        return go(Data_List_Lazy_Types.step($259));
    };
})();
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
            return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
        });
    };
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return Data_List_Lazy_Types.cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [ v1.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var init = (function () {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return function ($260) {
        return go(Data_List_Lazy_Types.step($260));
    };
})();
var index = function (xs) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                    $copy_v1 = v1 - 1 | 0;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 299, column 3 - line 299, column 21): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Lazy_Types.step(xs));
};
var head = function (xs) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var transpose = function (xs) {
    var v = uncons(xs);
    if (v instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if (v instanceof Data_Maybe.Just) {
        var v1 = uncons(v.value0.head);
        if (v1 instanceof Data_Maybe.Nothing) {
            return transpose(v.value0.tail);
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 734, column 7 - line 738, column 72): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy (line 730, column 3 - line 738, column 72): " + [ v.constructor.name ]);
};
var groupBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            var v1 = span(eq(v.value0))(v.value1);
            return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
            }), groupBy(eq)(v1.rest));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 588, column 3 - line 588, column 15): " + [ v.constructor.name ]);
    };
    var $261 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $262 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($263) {
        return Data_List_Lazy_Types.List($261($262($263)));
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var fromStep = (function () {
    var $264 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
    return function ($265) {
        return Data_List_Lazy_Types.List($264($265));
    };
})();
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    var v1 = cmp(x)(v.value0);
                    if (v1 instanceof Data_Ordering.GT) {
                        return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 235, column 3 - line 235, column 22): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
};
var foldrLazy = function (dictLazy) {
    return function (op) {
        return function (z) {
            var go = function (xs) {
                var v = Data_List_Lazy_Types.step(xs);
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    return Control_Lazy.defer(dictLazy)(function (v1) {
                        return op(v.value0)(go(v.value1));
                    });
                };
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return z;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 756, column 13 - line 758, column 15): " + [ v.constructor.name ]);
            };
            return go;
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (xs) {
                var v = uncons(xs);
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                    });
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 747, column 5 - line 750, column 54): " + [ v.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (n) {
        return function (list) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                var $207 = fn(v.head);
                if ($207) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                };
                return go(n + 1 | 0)(v.tail);
            });
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (p) {
        return function (list) {
            var v = uncons(list);
            if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
            };
            if (v instanceof Data_Maybe.Just) {
                return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (v1) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (v2) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (v1) {
                                return Data_List_Lazy_Types.cons(v.value0.head)(v2);
                            };
                            return v2;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 443, column 5 - line 448, column 48): " + [ v.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
                $tco_done = true;
                return Data_List_Lazy_Types.Nil.value;
            };
            if (v instanceof Data_List_Lazy_Types.Cons) {
                if (p(v.value0)) {
                    $tco_done = true;
                    return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = Data_List_Lazy_Types.step(v.value1);
                    return;
                };
            };
            throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var $266 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $267 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($268) {
        return Data_List_Lazy_Types.List($266($267($268)));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (eq) {
    var go = function (v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
        };
        if (v instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
                return !eq(v.value0)(y);
            })(v.value1)));
        };
        throw new Error("Failed pattern match at Data.List.Lazy (line 621, column 3 - line 621, column 15): " + [ v.constructor.name ]);
    };
    var $269 = Data_Functor.map(Data_Lazy.functorLazy)(go);
    var $270 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($271) {
        return Data_List_Lazy_Types.List($269($270($271)));
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                $copy_v = Data_List_Lazy_Types.step(v.value1);
                return;
            };
            $tco_done = true;
            return fromStep(v);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return function ($272) {
        return go(Data_List_Lazy_Types.step($272));
    };
};
var drop = function (n) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v === 0) {
                    $tco_done = true;
                    return v1;
                };
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    $tco_done = true;
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    $tco_var_v = v - 1 | 0;
                    $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 536, column 3 - line 536, column 15): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    var $273 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
    var $274 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
    return function ($275) {
        return Data_List_Lazy_Types.List($273($274($275)));
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v instanceof Data_List_Lazy_Types.Cons) {
                    if (eq(x)(v.value0)) {
                        return Data_List_Lazy_Types.step(v.value1);
                    };
                    if (Data_Boolean.otherwise) {
                        return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 650, column 3 - line 650, column 15): " + [ v.constructor.name ]);
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Data_List_Lazy_Types.Nil) {
                    return Data_List_Lazy_Types.Nil.value;
                };
                if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                    return Data_List_Lazy_Types.step(v1.value1);
                };
                if (v1 instanceof Data_List_Lazy_Types.Cons) {
                    return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy (line 353, column 3 - line 353, column 17): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
        return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
    });
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Lazy_Types.Nil) {
                        return Data_List_Lazy_Types.Nil.value;
                    };
                    if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                        var v2 = f(v1.value0);
                        if (v2 instanceof Data_Maybe.Nothing) {
                            return Data_List_Lazy_Types.step(v1.value1);
                        };
                        if (v2 instanceof Data_Maybe.Just) {
                            return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy (line 394, column 22 - line 396, column 26): " + [ v2.constructor.name ]);
                    };
                    if (v1 instanceof Data_List_Lazy_Types.Cons) {
                        return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy (line 393, column 3 - line 393, column 17): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($276) {
            return Data_Maybe.Just.create(f($276));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    replicate: replicate,
    replicateM: replicateM,
    some: some,
    many: many,
    repeat: repeat,
    iterate: iterate,
    cycle: cycle,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    foldrLazy: foldrLazy,
    scanrLazy: scanrLazy,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Lazy/index.js":34,"../Control.Monad.Rec.Class/index.js":50,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lazy/index.js":156,"../Data.List.Lazy.Types/index.js":179,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253}],181:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var zipWith = function (f) {
    return function (v) {
        return function (v1) {
            return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
        };
    };
};
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var wrappedOperation2 = function (name) {
    return function (f) {
        return function (v) {
            return function (v1) {
                var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
                if (v2 instanceof Data_List_Types.Cons) {
                    return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
                };
                if (v2 instanceof Data_List_Types.Nil) {
                    return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
                };
                throw new Error("Failed pattern match at Data.List.NonEmpty (line 104, column 3 - line 106, column 81): " + [ v2.constructor.name ]);
            };
        };
    };
};
var wrappedOperation = function (name) {
    return function (f) {
        return function (v) {
            var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
            if (v1 instanceof Data_List_Types.Cons) {
                return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [ v1.constructor.name ]);
        };
    };
};
var updateAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($161) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($161));
                })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 197, column 1 - line 197, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var unzip = function (ts) {
    return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
};
var unsnoc = function (v) {
    var v1 = Data_List.unsnoc(v.value1);
    if (v1 instanceof Data_Maybe.Nothing) {
        return {
            init: Data_List_Types.Nil.value,
            last: v.value0
        };
    };
    if (v1 instanceof Data_Maybe.Just) {
        return {
            init: new Data_List_Types.Cons(v.value0, v1.value0.init),
            last: v1.value0.last
        };
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 159, column 35 - line 161, column 50): " + [ v1.constructor.name ]);
};
var unionBy = (function () {
    var $162 = wrappedOperation2("unionBy");
    return function ($163) {
        return $162(Data_List.unionBy($163));
    };
})();
var union = function (dictEq) {
    return wrappedOperation2("union")(Data_List.union(dictEq));
};
var uncons = function (v) {
    return {
        head: v.value0,
        tail: v.value1
    };
};
var toList = function (v) {
    return new Data_List_Types.Cons(v.value0, v.value1);
};
var toUnfoldable = function (dictUnfoldable) {
    var $164 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(Data_List.uncons(xs));
    });
    return function ($165) {
        return $164(toList($165));
    };
};
var tail = function (v) {
    return v.value1;
};
var sortBy = (function () {
    var $166 = wrappedOperation("sortBy");
    return function ($167) {
        return $166(Data_List.sortBy($167));
    };
})();
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var snoc = function (v) {
    return function (y) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
    };
};
var singleton = (function () {
    var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
    return function ($169) {
        return Data_List_Types.NonEmptyList($168($169));
    };
})();
var snoc$prime = function (v) {
    return function (y) {
        if (v instanceof Data_List_Types.Cons) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
        };
        if (v instanceof Data_List_Types.Nil) {
            return singleton(y);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 139, column 1 - line 139, column 51): " + [ v.constructor.name, y.constructor.name ]);
    };
};
var reverse = wrappedOperation("reverse")(Data_List.reverse);
var nubBy = (function () {
    var $170 = wrappedOperation("nubBy");
    return function ($171) {
        return $170(Data_List.nubBy($171));
    };
})();
var nub = function (dictEq) {
    return wrappedOperation("nub")(Data_List.nub(dictEq));
};
var modifyAt = function (i) {
    return function (f) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($172) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($172));
                })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 202, column 1 - line 202, column 82): " + [ i.constructor.name, f.constructor.name, v.constructor.name ]);
        };
    };
};
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
var lift = function (f) {
    return function (v) {
        return f(new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var mapMaybe = function ($173) {
    return lift(Data_List.mapMaybe($173));
};
var partition = function ($174) {
    return lift(Data_List.partition($174));
};
var span = function ($175) {
    return lift(Data_List.span($175));
};
var take = function ($176) {
    return lift(Data_List.take($176));
};
var takeWhile = function ($177) {
    return lift(Data_List.takeWhile($177));
};
var length = function (v) {
    return 1 + Data_List.length(v.value1) | 0;
};
var last = function (v) {
    return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
};
var intersectBy = (function () {
    var $178 = wrappedOperation2("intersectBy");
    return function ($179) {
        return $178(Data_List.intersectBy($179));
    };
})();
var intersect = function (dictEq) {
    return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
};
var insertAt = function (i) {
    return function (a) {
        return function (v) {
            if (i === 0) {
                return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
            };
            if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function ($180) {
                    return Data_List_Types.NonEmptyList((function (v1) {
                        return new Data_NonEmpty.NonEmpty(v.value0, v1);
                    })($180));
                })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 1 - line 192, column 75): " + [ i.constructor.name, a.constructor.name, v.constructor.name ]);
        };
    };
};
var init = function (v) {
    return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
        return new Data_List_Types.Cons(v.value0, v1);
    })(Data_List.init(v.value1));
};
var index = function (v) {
    return function (i) {
        if (i === 0) {
            return new Data_Maybe.Just(v.value0);
        };
        if (Data_Boolean.otherwise) {
            return Data_List.index(v.value1)(i - 1 | 0);
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 166, column 1 - line 166, column 52): " + [ v.constructor.name, i.constructor.name ]);
    };
};
var head = function (v) {
    return v.value0;
};
var groupBy = (function () {
    var $181 = wrappedOperation("groupBy");
    return function ($182) {
        return $181(Data_List.groupBy($182));
    };
})();
var group$prime = function (dictOrd) {
    return wrappedOperation("group'")(Data_List["group'"](dictOrd));
};
var group = function (dictEq) {
    return wrappedOperation("group")(Data_List.group(dictEq));
};
var fromList = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
    };
    throw new Error("Failed pattern match at Data.List.NonEmpty (line 120, column 1 - line 120, column 57): " + [ v.constructor.name ]);
};
var fromFoldable = function (dictFoldable) {
    var $183 = Data_List.fromFoldable(dictFoldable);
    return function ($184) {
        return fromList($183($184));
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return function (v) {
                return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0))(function (a$prime) {
                    return Data_List.foldM(dictMonad)(f)(a$prime)(v.value1);
                });
            };
        };
    };
};
var findLastIndex = function (f) {
    return function (v) {
        var v1 = Data_List.findLastIndex(f)(v.value1);
        if (v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v1.value0 + 1 | 0);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            if (f(v.value0)) {
                return new Data_Maybe.Just(0);
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 186, column 3 - line 190, column 29): " + [ v1.constructor.name ]);
    };
};
var findIndex = function (f) {
    return function (v) {
        if (f(v.value0)) {
            return new Data_Maybe.Just(0);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                return v1 + 1 | 0;
            })(Data_List.findIndex(f)(v.value1));
        };
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 179, column 1 - line 179, column 69): " + [ f.constructor.name, v.constructor.name ]);
    };
};
var filterM = function (dictMonad) {
    var $185 = Data_List.filterM(dictMonad);
    return function ($186) {
        return lift($185($186));
    };
};
var filter = function ($187) {
    return lift(Data_List.filter($187));
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function ($188) {
    return lift(Data_List.dropWhile($188));
};
var drop = function ($189) {
    return lift(Data_List.drop($189));
};
var cons$prime = function (x) {
    return function (xs) {
        return new Data_NonEmpty.NonEmpty(x, xs);
    };
};
var cons = function (y) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
    };
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = lift(Data_List.catMaybes);
var appendFoldable = function (dictFoldable) {
    return function (v) {
        return function (ys) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
        };
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    fromList: fromList,
    toList: toList,
    singleton: singleton,
    length: length,
    cons: cons,
    "cons'": cons$prime,
    snoc: snoc,
    "snoc'": snoc$prime,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    appendFoldable: appendFoldable,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM
};

},{"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Semigroup.Traversable/index.js":219,"../Data.Semigroup/index.js":221,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Partial.Unsafe/index.js":378}],182:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var NonEmptyList = function (x) {
    return x;
};
var toList = function (v) {
    return new Cons(v.value0, v.value1);
};
var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmptyList);
var nelCons = function (a) {
    return function (v) {
        return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
    };
};
var listMap = function (f) {
    var chunkedRevMap = function ($copy_chunksAcc) {
        return function ($copy_v) {
            var $tco_var_chunksAcc = $copy_chunksAcc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(chunksAcc, v) {
                if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                    $tco_var_chunksAcc = new Cons(v, chunksAcc);
                    $copy_v = v.value1.value1.value1;
                    return;
                };
                var unrolledMap = function (v1) {
                    if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                        return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                    };
                    if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                        return new Cons(f(v1.value0), Nil.value);
                    };
                    return Nil.value;
                };
                var reverseUnrolledMap = function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v1, acc) {
                            if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                return;
                            };
                            $tco_done = true;
                            return acc;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
                $tco_done = true;
                return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
            };
            return $tco_result;
        };
    };
    return chunkedRevMap(Nil.value);
};
var functorList = new Data_Functor.Functor(listMap);
var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return Data_Foldable.foldl(foldableList)(function (acc) {
            var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
            return function ($203) {
                return $202(f($203));
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    var go = function ($copy_b) {
        return function ($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, v) {
                if (v instanceof Nil) {
                    $tco_done = true;
                    return b;
                };
                if (v instanceof Cons) {
                    $tco_var_b = f(b)(v.value0);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_b, $copy_v);
            };
            return $tco_result;
        };
    };
    return go;
}, function (f) {
    return function (b) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
        return function ($205) {
            return $204(rev($205));
        };
    };
});
var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
var foldableWithIndexList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableList;
}, function (dictMonoid) {
    return function (f) {
        return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $206 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $207 = f(i);
                return function ($208) {
                    return $206($207($208));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
}, function (f) {
    return function (acc) {
        var $209 = Data_Foldable.foldl(foldableList)(function (v) {
            return function (a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
        })(new Data_Tuple.Tuple(0, acc));
        return function ($210) {
            return Data_Tuple.snd($209($210));
        };
    };
}, function (f) {
    return function (b) {
        return function (xs) {
            var v = (function () {
                var rev = Data_Foldable.foldl(foldableList)(function (v1) {
                    return function (a) {
                        return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                    };
                });
                return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
            })();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function (v1) {
                return function (a) {
                    return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
        };
    };
});
var foldableWithIndexNonEmptyList = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNonEmptyList;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)((function () {
                var $211 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($212) {
                    return f($211($212));
                };
            })())(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $213 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($214) {
                    return f($213($214));
                };
            })())(b)(v);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))((function () {
                var $215 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($216) {
                    return f($215($216));
                };
            })())(b)(v);
        };
    };
});
var functorWithIndexList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorList;
}, function (f) {
    return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function (i) {
        return function (x) {
            return function (acc) {
                return new Cons(f(i)(x), acc);
            };
        };
    })(Nil.value);
});
var functorWithIndexNonEmptyList = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNonEmptyList;
}, function (fn) {
    return function (v) {
        return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))((function () {
            var $217 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
            return function ($218) {
                return fn($217($218));
            };
        })())(v));
    };
});
var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
    return function (ys) {
        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
    };
});
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
    return function (as$prime) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
    };
});
var showList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Nil) {
            return "Nil";
        };
        return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
    });
};
var showNonEmptyList = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
    });
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        var $219 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
        var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
            var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
            return function ($223) {
                return $222(f($223));
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function ($221) {
            return $219($220($221));
        };
    };
});
var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
var traversableWithIndexList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexList;
}, function () {
    return functorWithIndexList;
}, function () {
    return traversableList;
}, function (dictApplicative) {
    return function (f) {
        var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
        var $224 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(rev);
        var $225 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function (i) {
            return function (acc) {
                var $227 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                var $228 = f(i);
                return function ($229) {
                    return $227($228($229));
                };
            };
        })(Control_Applicative.pure(dictApplicative)(Nil.value));
        return function ($226) {
            return $224($225($226));
        };
    };
});
var traversableWithIndexNonEmptyList = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexNonEmptyList;
}, function () {
    return functorWithIndexNonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)((function () {
                var $230 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function ($231) {
                    return f($230($231));
                };
            })())(v));
        };
    };
});
var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v.value1 instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value1.value0;
                        $copy_memo = new Cons(v.value0, memo);
                        return;
                    };
                    if (v.value1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
    return unfoldable1List;
}, function (f) {
    return function (b) {
        var go = function ($copy_source) {
            return function ($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                    var v = f(source);
                    if (v instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        $tco_var_source = v.value0.value1;
                        $copy_memo = new Cons(v.value0.value0, memo);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                };
                return $tco_result;
            };
        };
        return go(b)(Nil.value);
    };
});
var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
var extendNonEmptyList = new Control_Extend.Extend(function () {
    return functorNonEmptyList;
}, function (f) {
    return function (v) {
        var go = function (a) {
            return function (v1) {
                return {
                    val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                    acc: new Cons(a, v1.acc)
                };
            };
        };
        return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value,
            acc: Nil.value
        })(v.value1)).val);
    };
});
var extendList = new Control_Extend.Extend(function () {
    return functorList;
}, function (f) {
    return function (v) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            var go = function (a$prime) {
                return function (v1) {
                    var acc$prime = new Cons(a$prime, v1.acc);
                    return {
                        val: new Cons(f(acc$prime), v1.val),
                        acc: acc$prime
                    };
                };
            };
            return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value,
                acc: Nil.value
            })(v.value1)).val);
        };
        throw new Error("Failed pattern match at Data.List.Types (line 180, column 1 - line 187, column 42): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var eq1List = new Data_Eq.Eq1(function (dictEq) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, v2) {
                            if (!v2) {
                                $tco_done = true;
                                return false;
                            };
                            if (v instanceof Nil && v1 instanceof Nil) {
                                $tco_done = true;
                                return v2;
                            };
                            if (v instanceof Cons && v1 instanceof Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                return;
                            };
                            $tco_done = true;
                            return false;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                        };
                        return $tco_result;
                    };
                };
            };
            return go(xs)(ys)(true);
        };
    };
});
var eqList = function (dictEq) {
    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
};
var eqNonEmptyList = function (dictEq) {
    return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
};
var ord1List = new Data_Ord.Ord1(function () {
    return eq1List;
}, function (dictOrd) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    var $tco_var_v = $copy_v;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_var_v = v.value1;
                                $copy_v1 = v1.value1;
                                return;
                            };
                            $tco_done = true;
                            return v2;
                        };
                        throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return go(xs)(ys);
        };
    };
});
var ordList = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqList(dictOrd.Eq0());
    }, Data_Ord.compare1(ord1List)(dictOrd));
};
var ordNonEmptyList = function (dictOrd) {
    return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
};
var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
    return extendNonEmptyList;
}, function (v) {
    return v.value0;
});
var applyList = new Control_Apply.Apply(function () {
    return functorList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applyNonEmptyList = new Control_Apply.Apply(function () {
    return functorNonEmptyList;
}, function (v) {
    return function (v1) {
        return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
    };
});
var bindList = new Control_Bind.Bind(function () {
    return applyList;
}, function (v) {
    return function (v1) {
        if (v instanceof Nil) {
            return Nil.value;
        };
        if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
        };
        throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindNonEmptyList = new Control_Bind.Bind(function () {
    return applyNonEmptyList;
}, function (v) {
    return function (f) {
        var v1 = f(v.value0);
        return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($232) {
            return toList(f($232));
        })));
    };
});
var applicativeList = new Control_Applicative.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Control_Monad.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var altNonEmptyList = new Control_Alt.Alt(function () {
    return functorNonEmptyList;
}, Data_Semigroup.append(semigroupNonEmptyList));
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Data_Semigroup.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return applicativeList;
}, function () {
    return plusList;
});
var monadZeroList = new Control_MonadZero.MonadZero(function () {
    return alternativeList;
}, function () {
    return monadList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return monadZeroList;
});
var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
    return applyNonEmptyList;
}, (function () {
    var $233 = Data_NonEmpty.singleton(plusList);
    return function ($234) {
        return NonEmptyList($233($234));
    };
})());
var monadNonEmptyList = new Control_Monad.Monad(function () {
    return applicativeNonEmptyList;
}, function () {
    return bindNonEmptyList;
});
var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1NonEmptyList;
}, function () {
    return traversableNonEmptyList;
}, function (dictApply) {
    return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                return function ($236) {
                    return $235(f($236));
                };
            })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
            });
        };
    };
});
module.exports = {
    Nil: Nil,
    Cons: Cons,
    NonEmptyList: NonEmptyList,
    toList: toList,
    nelCons: nelCons,
    showList: showList,
    eqList: eqList,
    eq1List: eq1List,
    ordList: ordList,
    ord1List: ord1List,
    semigroupList: semigroupList,
    monoidList: monoidList,
    functorList: functorList,
    functorWithIndexList: functorWithIndexList,
    foldableList: foldableList,
    foldableWithIndexList: foldableWithIndexList,
    unfoldable1List: unfoldable1List,
    unfoldableList: unfoldableList,
    traversableList: traversableList,
    traversableWithIndexList: traversableWithIndexList,
    applyList: applyList,
    applicativeList: applicativeList,
    bindList: bindList,
    monadList: monadList,
    altList: altList,
    plusList: plusList,
    alternativeList: alternativeList,
    monadZeroList: monadZeroList,
    monadPlusList: monadPlusList,
    extendList: extendList,
    newtypeNonEmptyList: newtypeNonEmptyList,
    eqNonEmptyList: eqNonEmptyList,
    ordNonEmptyList: ordNonEmptyList,
    showNonEmptyList: showNonEmptyList,
    functorNonEmptyList: functorNonEmptyList,
    applyNonEmptyList: applyNonEmptyList,
    applicativeNonEmptyList: applicativeNonEmptyList,
    bindNonEmptyList: bindNonEmptyList,
    monadNonEmptyList: monadNonEmptyList,
    altNonEmptyList: altNonEmptyList,
    extendNonEmptyList: extendNonEmptyList,
    comonadNonEmptyList: comonadNonEmptyList,
    semigroupNonEmptyList: semigroupNonEmptyList,
    foldableNonEmptyList: foldableNonEmptyList,
    traversableNonEmptyList: traversableNonEmptyList,
    foldable1NonEmptyList: foldable1NonEmptyList,
    unfoldable1NonEmptyList: unfoldable1NonEmptyList,
    functorWithIndexNonEmptyList: functorWithIndexNonEmptyList,
    foldableWithIndexNonEmptyList: foldableWithIndexNonEmptyList,
    traversableWithIndexNonEmptyList: traversableWithIndexNonEmptyList,
    traversable1NonEmptyList: traversable1NonEmptyList
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup.Traversable/index.js":219,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255}],183:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Pattern = function (x) {
    return x;
};
var updateAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(updateAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
    };
})(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
var uncons = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
        });
    };
    throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var tail = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value1);
    };
    throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
};
var stripPrefix = function (dictEq) {
    return function (v) {
        return function (s) {
            var go = function (prefix) {
                return function (input) {
                    if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                            a: prefix.value1,
                            b: input.value1
                        }));
                    };
                    if (prefix instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                    };
                    return Data_Maybe.Nothing.value;
                };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
    };
};
var span = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
                init: new Data_List_Types.Cons(v1.value0, v2.init),
                rest: v2.rest
            };
        };
        return {
            init: Data_List_Types.Nil.value,
            rest: v1
        };
    };
};
var snoc = function (xs) {
    return function (x) {
        return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
    };
};
var singleton = function (a) {
    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                    return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                return v;
            };
            throw new Error("Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    var mergePairs = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        };
        return v;
    };
    var mergeAll = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return v.value0;
            };
            $copy_v = mergePairs(v);
            return;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    var sequences = function (v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            };
            if (Data_Boolean.otherwise) {
                return ascending(v.value1.value0)(function (v1) {
                    return new Data_List_Types.Cons(v.value0, v1);
                })(v.value1.value1);
            };
        };
        return singleton(v);
    };
    var descending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = new Data_List_Types.Cons(a, as);
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    var ascending = function ($copy_a) {
        return function ($copy_as) {
            return function ($copy_v) {
                var $tco_var_a = $copy_a;
                var $tco_var_as = $copy_as;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(a, as, v) {
                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                        $tco_var_a = v.value0;
                        $tco_var_as = function (ys) {
                            return as(new Data_List_Types.Cons(a, ys));
                        };
                        $copy_v = v.value1;
                        return;
                    };
                    $tco_done = true;
                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                };
                return $tco_result;
            };
        };
    };
    return function ($337) {
        return mergeAll(sequences($337));
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};
var tails = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return singleton(Data_List_Types.Nil.value);
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(v, tails(v.value1));
    };
    throw new Error("Failed pattern match at Data.List (line 626, column 1 - line 626, column 43): " + [ v.constructor.name ]);
};
var showPattern = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
    });
};
var reverse = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var take = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v, v1) {
                    if (v < 1) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return reverse(acc);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $tco_var_v = v - 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 520, column 3 - line 520, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go(Data_List_Types.Nil.value);
})();
var takeWhile = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                };
                $tco_done = true;
                return reverse(acc);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var unsnoc = function (lst) {
    var go = function ($copy_v) {
        return function ($copy_acc) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, acc) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return new Data_Maybe.Just({
                        revInit: acc,
                        last: v.value0
                    });
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_v = v.value1;
                    $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                    return;
                };
                throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [ v.constructor.name, acc.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_acc);
            };
            return $tco_result;
        };
    };
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
        return {
            init: reverse(h.revInit),
            last: h.last
        };
    })(go(lst)(Data_List_Types.Nil.value));
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function ($copy_v) {
                return function ($copy_v1) {
                    return function ($copy_acc) {
                        var $tco_var_v = $copy_v;
                        var $tco_var_v1 = $copy_v1;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(v, v1, acc) {
                            if (v instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return acc;
                            };
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                $tco_var_v = v.value1;
                                $tco_var_v1 = v1.value1;
                                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                return;
                            };
                            throw new Error("Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                        };
                        return $tco_result;
                    };
                };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Data_Boolean.otherwise) {
            var go = function ($copy_s) {
                return function ($copy_e) {
                    return function ($copy_step) {
                        return function ($copy_rest) {
                            var $tco_var_s = $copy_s;
                            var $tco_var_e = $copy_e;
                            var $tco_var_step = $copy_step;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(s, e, step, rest) {
                                if (s === e) {
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(s, rest);
                                };
                                if (Data_Boolean.otherwise) {
                                    $tco_var_s = s + step | 0;
                                    $tco_var_e = e;
                                    $tco_var_step = step;
                                    $copy_rest = new Data_List_Types.Cons(s, rest);
                                    return;
                                };
                                throw new Error("Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $223 = start > end;
                if ($223) {
                    return 1;
                };
                return -1 | 0;
            })())(Data_List_Types.Nil.value);
        };
        throw new Error("Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): " + [ start.constructor.name, end.constructor.name ]);
    };
};
var partition = function (p) {
    return function (xs) {
        var select = function (x) {
            return function (v) {
                var $226 = p(x);
                if ($226) {
                    return {
                        no: v.no,
                        yes: new Data_List_Types.Cons(x, v.yes)
                    };
                };
                return {
                    no: new Data_List_Types.Cons(x, v.no),
                    yes: v.yes
                };
            };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
        })(xs);
    };
};
var $$null = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return true;
    };
    return false;
};
var newtypePattern = new Data_Newtype.Newtype(function (n) {
    return n;
}, Pattern);
var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
var mapMaybe = function (f) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = f(v.value0);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var manyRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (p) {
            var go = function (acc) {
                return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                        return new Data_List_Types.Cons(v1, acc);
                    })(function (v1) {
                        return reverse(acc);
                    })(v));
                });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
    };
};
var someRec = function (dictMonadRec) {
    return function (dictAlternative) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
    };
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
    };
};
var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
    return function (v) {
        return acc + 1 | 0;
    };
})(0);
var last = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
        };
        if (v instanceof Data_List_Types.Cons) {
            $copy_v = v.value1;
            return;
        };
        $tco_done = true;
        return Data_Maybe.Nothing.value;
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var insertBy = function (v) {
    return function (x) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return singleton(x);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                var v2 = v(x)(v1.value0);
                if (v2 instanceof Data_Ordering.GT) {
                    return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                };
                return new Data_List_Types.Cons(x, v1);
            };
            throw new Error("Failed pattern match at Data.List (line 216, column 1 - line 216, column 68): " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
        };
    };
};
var insertAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0) {
                return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(insertAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};
var init = function (lst) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v.init;
    })(unsnoc(lst));
};
var index = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $copy_v1 = v1 - 1 | 0;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 281, column 1 - line 281, column 44): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var head = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
};
var transpose = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
        return transpose(v.value1);
    };
    if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
    };
    throw new Error("Failed pattern match at Data.List (line 752, column 1 - line 752, column 54): " + [ v.constructor.name ]);
};
var groupBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        };
        throw new Error("Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var group = function (dictEq) {
    return groupBy(Data_Eq.eq(dictEq));
};
var group$prime = function (dictOrd) {
    var $338 = group(dictOrd.Eq0());
    var $339 = sort(dictOrd);
    return function ($340) {
        return $338($339($340));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var foldM = function (dictMonad) {
    return function (v) {
        return function (a) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(a);
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                        return foldM(dictMonad)(v)(a$prime)(v1.value1);
                    });
                };
                throw new Error("Failed pattern match at Data.List (line 763, column 1 - line 763, column 72): " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Data_List_Types.Cons) {
                    if (fn(v1.value0)) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v);
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_v = v + 1 | 0;
                        $copy_v1 = v1.value1;
                        return;
                    };
                };
                if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            };
            if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (v2) {
                    return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                        return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                            if (v2) {
                                return new Data_List_Types.Cons(v1.value0, v3);
                            };
                            return v3;
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match at Data.List (line 403, column 1 - line 403, column 75): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return reverse(acc);
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (p(v.value0)) {
                        $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                        $copy_v = v.value1;
                        return;
                    };
                    if (Data_Boolean.otherwise) {
                        $tco_var_acc = acc;
                        $copy_v = v.value1;
                        return;
                    };
                };
                throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var intersectBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};
var nubBy = function (v) {
    return function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                return !v(v1.value0)(y);
            })(v1.value1)));
        };
        throw new Error("Failed pattern match at Data.List (line 644, column 1 - line 644, column 59): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Data_Eq.eq(dictEq));
};
var eqPattern = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
        };
    });
};
var ordPattern = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPattern(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
        };
    });
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                $copy_v = v.value1;
                return;
            };
            $tco_done = true;
            return v;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var dropEnd = function (n) {
    return function (xs) {
        return take(length(xs) - n | 0)(xs);
    };
};
var drop = function ($copy_v) {
    return function ($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
            if (v < 1) {
                $tco_done = true;
                return v1;
            };
            if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_v = v - 1 | 0;
                $copy_v1 = v1.value1;
                return;
            };
            throw new Error("Failed pattern match at Data.List (line 543, column 1 - line 543, column 42): " + [ v.constructor.name, v1.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
        };
        return $tco_result;
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(end - start | 0)(drop(start)(xs));
        };
    };
};
var takeEnd = function (n) {
    return function (xs) {
        return drop(length(xs) - n | 0)(xs);
    };
};
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                return v2.value1;
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            };
            throw new Error("Failed pattern match at Data.List (line 671, column 1 - line 671, column 67): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};
var deleteAt = function (v) {
    return function (v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(v1.value1);
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                return new Data_List_Types.Cons(v1.value0, v2);
            })(deleteAt(v - 1 | 0)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};
var difference = function (dictEq) {
    return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
};
var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
var concat = function (v) {
    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
};
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
var alterAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                return Data_Maybe.Just.create((function () {
                    var v3 = v1(v2.value0);
                    if (v3 instanceof Data_Maybe.Nothing) {
                        return v2.value1;
                    };
                    if (v3 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v3.value0, v2.value1);
                    };
                    throw new Error("Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): " + [ v3.constructor.name ]);
                })());
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                    return new Data_List_Types.Cons(v2.value0, v3);
                })(alterAt(v - 1 | 0)(v1)(v2.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($341) {
            return Data_Maybe.Just.create(f($341));
        });
    };
};
module.exports = {
    toUnfoldable: toUnfoldable,
    fromFoldable: fromFoldable,
    singleton: singleton,
    range: range,
    some: some,
    someRec: someRec,
    many: many,
    manyRec: manyRec,
    "null": $$null,
    length: length,
    snoc: snoc,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    modifyAt: modifyAt,
    alterAt: alterAt,
    reverse: reverse,
    concat: concat,
    concatMap: concatMap,
    filter: filter,
    filterM: filterM,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    Pattern: Pattern,
    stripPrefix: stripPrefix,
    slice: slice,
    take: take,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    drop: drop,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    partition: partition,
    nub: nub,
    nubBy: nubBy,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWith: zipWith,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    transpose: transpose,
    foldM: foldM,
    eqPattern: eqPattern,
    ordPattern: ordPattern,
    newtypePattern: newtypePattern,
    showPattern: showPattern
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Lazy/index.js":34,"../Control.Monad.Rec.Class/index.js":50,"../Data.Bifunctor/index.js":98,"../Data.Boolean/index.js":100,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unit/index.js":257}],184:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();
var values = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
};
var size = function (v) {
    if (v instanceof Leaf) {
        return 0;
    };
    if (v instanceof Two) {
        return (1 + size(v.value0) | 0) + size(v.value3) | 0;
    };
    if (v instanceof Three) {
        return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [ v.constructor.name ]);
};
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var toUnfoldable = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                    };
                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                    };
                    if (v.value0 instanceof Two) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                        return;
                    };
                    if (v.value0 instanceof Three) {
                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
var toUnfoldableUnordered = function (dictUnfoldable) {
    return function (m) {
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof Leaf) {
                        $copy_v = v.value1;
                        return;
                    };
                    if (v.value0 instanceof Two) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
                    };
                    if (v.value0 instanceof Three) {
                        $tco_done = true;
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 598, column 18 - line 603, column 77): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 597, column 3 - line 597, column 19): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
    };
};
var showTree = function (dictShow) {
    return function (dictShow1) {
        return function (v) {
            if (v instanceof Leaf) {
                return "Leaf";
            };
            if (v instanceof Two) {
                return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
            };
            if (v instanceof Three) {
                return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 153, column 1 - line 153, column 62): " + [ v.constructor.name ]);
        };
    };
};
var showMap = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (m) {
            return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
        });
    };
};
var lookupLE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 225, column 33 - line 228, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value4,
                        value: v.value5
                    });
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 229, column 45 - line 232, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 224, column 5 - line 224, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookupGE = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 259, column 33 - line 262, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return new Data_Maybe.Just({
                        key: v.value1,
                        value: v.value2
                    });
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 263, column 45 - line 266, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 258, column 5 - line 258, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var lookup = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function ($copy_v) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v) {
                if (v instanceof Leaf) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Two) {
                    var v2 = comp(k)(v.value1);
                    if (v2 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    if (v2 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                if (v instanceof Three) {
                    var v3 = comp(k)(v.value1);
                    if (v3 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value2);
                    };
                    var v4 = comp(k)(v.value4);
                    if (v4 instanceof Data_Ordering.EQ) {
                        $tco_done = true;
                        return new Data_Maybe.Just(v.value5);
                    };
                    if (v3 instanceof Data_Ordering.LT) {
                        $copy_v = v.value0;
                        return;
                    };
                    if (v4 instanceof Data_Ordering.GT) {
                        $copy_v = v.value6;
                        return;
                    };
                    $copy_v = v.value3;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_v);
            };
            return $tco_result;
        };
        return go;
    };
};
var member = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
    };
};
var keys = function (v) {
    if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
    };
    if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
    };
    if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
    };
    throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [ v.constructor.name ]);
};
var isSubmap = function (dictOrd) {
    return function (dictEq) {
        return function (m1) {
            return function (m2) {
                var f = function (v) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                };
                return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
            };
        };
    };
};
var isEmpty = function (v) {
    if (v instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorMap;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Leaf) {
            return Leaf.value;
        };
        if (v1 instanceof Two) {
            return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
        };
        if (v1 instanceof Three) {
            return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 152): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var fromZipper = function ($copy_dictOrd) {
    return function ($copy_v) {
        return function ($copy_tree) {
            var $tco_var_dictOrd = $copy_dictOrd;
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(dictOrd, v, tree) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return tree;
                };
                if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof TwoLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                        return;
                    };
                    if (v.value0 instanceof TwoRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                        return;
                    };
                    if (v.value0 instanceof ThreeLeft) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeMiddle) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                        return;
                    };
                    if (v.value0 instanceof ThreeRight) {
                        $tco_var_dictOrd = dictOrd;
                        $tco_var_v = v.value1;
                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
            };
            return $tco_result;
        };
    };
};
var insert = function (dictOrd) {
    return function (k) {
        return function (v) {
            var up = function ($copy_v1) {
                return function ($copy_v2) {
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v1, v2) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            if (v1.value0 instanceof TwoLeft) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                            };
                            if (v1.value0 instanceof TwoRight) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                            };
                            if (v1.value0 instanceof ThreeLeft) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeMiddle) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                return;
                            };
                            if (v1.value0 instanceof ThreeRight) {
                                $tco_var_v1 = v1.value1;
                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                return;
                            };
                            throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                    };
                    return $tco_result;
                };
            };
            var comp = Data_Ord.compare(dictOrd);
            var down = function ($copy_ctx) {
                return function ($copy_v1) {
                    var $tco_var_ctx = $copy_ctx;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(ctx, v1) {
                        if (v1 instanceof Leaf) {
                            $tco_done = true;
                            return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                        };
                        if (v1 instanceof Two) {
                            var v2 = comp(k)(v1.value1);
                            if (v2 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                            };
                            if (v2 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                            $copy_v1 = v1.value3;
                            return;
                        };
                        if (v1 instanceof Three) {
                            var v3 = comp(k)(v1.value1);
                            if (v3 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                            };
                            var v4 = comp(k)(v1.value4);
                            if (v4 instanceof Data_Ordering.EQ) {
                                $tco_done = true;
                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                            };
                            if (v3 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value0;
                                return;
                            };
                            if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                $copy_v1 = v1.value3;
                                return;
                            };
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                            $copy_v1 = v1.value6;
                            return;
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                    };
                    return $tco_result;
                };
            };
            return down(Data_List_Types.Nil.value);
        };
    };
};
var pop = function (dictOrd) {
    return function (k) {
        var up = function ($copy_ctxs) {
            return function ($copy_tree) {
                var $tco_var_ctxs = $copy_ctxs;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctxs, tree) {
                    if (ctxs instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return tree;
                    };
                    if (ctxs instanceof Data_List_Types.Cons) {
                        if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                            $tco_var_ctxs = ctxs.value1;
                            $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                            return;
                        };
                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                        };
                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                        };
                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                        };
                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                            $tco_done = true;
                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                };
                return $tco_result;
            };
        };
        var removeMaxNode = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                        $tco_done = true;
                        return up(ctx)(Leaf.value);
                    };
                    if (m instanceof Two) {
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                        $tco_done = true;
                        return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                    };
                    if (m instanceof Three) {
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        var maxNode = function ($copy_m) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(m) {
                if (m instanceof Two && m.value3 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value1,
                        value: m.value2
                    };
                };
                if (m instanceof Two) {
                    $copy_m = m.value3;
                    return;
                };
                if (m instanceof Three && m.value6 instanceof Leaf) {
                    $tco_done = true;
                    return {
                        key: m.value4,
                        value: m.value5
                    };
                };
                if (m instanceof Three) {
                    $copy_m = m.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_m);
            };
            return $tco_result;
        };
        var comp = Data_Ord.compare(dictOrd);
        var down = function ($copy_ctx) {
            return function ($copy_m) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ctx, m) {
                    if (m instanceof Leaf) {
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    if (m instanceof Two) {
                        var v = comp(k)(m.value1);
                        if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                        $copy_m = m.value3;
                        return;
                    };
                    if (m instanceof Three) {
                        var leaves = (function () {
                            if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                return true;
                            };
                            return false;
                        })();
                        var v = comp(k)(m.value4);
                        var v3 = comp(k)(m.value1);
                        if (leaves && v3 instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                        };
                        if (leaves && v instanceof Data_Ordering.EQ) {
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                        };
                        if (v3 instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value0);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                        };
                        if (v instanceof Data_Ordering.EQ) {
                            var max = maxNode(m.value3);
                            $tco_done = true;
                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                        };
                        if (v3 instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value0;
                            return;
                        };
                        if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                            $copy_m = m.value3;
                            return;
                        };
                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                        $copy_m = m.value6;
                        return;
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                };
                return $tco_result;
            };
        };
        return down(Data_List_Types.Nil.value);
    };
};
var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
        };
    };
});
var traversableMap = new Data_Traversable.Traversable(function () {
    return foldableMap;
}, function () {
    return functorMap;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldSubmap = function (dictOrd) {
    return function (dictMonoid) {
        return function (kmin) {
            return function (kmax) {
                return function (f) {
                    var tooSmall = (function () {
                        if (kmin instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 319, column 7 - line 323, column 22): " + [ kmin.constructor.name ]);
                    })();
                    var tooLarge = (function () {
                        if (kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](false);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 326, column 7 - line 330, column 22): " + [ kmax.constructor.name ]);
                    })();
                    var inBounds = (function () {
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                            return function (k) {
                                return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                            };
                        };
                        if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                            return Data_Function["const"](true);
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 341, column 21): " + [ kmin.constructor.name, kmax.constructor.name ]);
                    })();
                    var go = function (v) {
                        if (v instanceof Leaf) {
                            return Data_Monoid.mempty(dictMonoid);
                        };
                        if (v instanceof Two) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $633 = tooSmall(v.value1);
                                if ($633) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $634 = inBounds(v.value1);
                                if ($634) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $635 = tooLarge(v.value1);
                                if ($635) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })()));
                        };
                        if (v instanceof Three) {
                            return Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $640 = tooSmall(v.value1);
                                if ($640) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value0);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $641 = inBounds(v.value1);
                                if ($641) {
                                    return f(v.value1)(v.value2);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $642 = tooSmall(v.value4) || tooLarge(v.value1);
                                if ($642) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value3);
                            })())(Data_Semigroup.append(dictMonoid.Semigroup0())((function () {
                                var $643 = inBounds(v.value4);
                                if ($643) {
                                    return f(v.value4)(v.value5);
                                };
                                return Data_Monoid.mempty(dictMonoid);
                            })())((function () {
                                var $644 = tooLarge(v.value4);
                                if ($644) {
                                    return Data_Monoid.mempty(dictMonoid);
                                };
                                return go(v.value6);
                            })()))));
                        };
                        throw new Error("Failed pattern match at Data.Map.Internal (line 359, column 10 - line 371, column 54): " + [ v.constructor.name ]);
                    };
                    return go;
                };
            };
        };
    };
};
var findMin = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value0;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 297, column 5 - line 297, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupGT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMin(v.value3);
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return go(v.value3);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 276, column 33 - line 279, column 21): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value1);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value0)));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return go(new Two(v.value3, v.value4, v.value5, v.value6));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 45 - line 283, column 37): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 275, column 5 - line 275, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var findMax = (function () {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
                if (v1 instanceof Leaf) {
                    $tco_done = true;
                    return v;
                };
                if (v1 instanceof Two) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value1,
                        value: v1.value2
                    });
                    $copy_v1 = v1.value3;
                    return;
                };
                if (v1 instanceof Three) {
                    $tco_var_v = new Data_Maybe.Just({
                        key: v1.value4,
                        value: v1.value5
                    });
                    $copy_v1 = v1.value6;
                    return;
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 289, column 5 - line 289, column 22): " + [ v.constructor.name, v1.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
            };
            return $tco_result;
        };
    };
    return go(Data_Maybe.Nothing.value);
})();
var lookupLT = function (dictOrd) {
    return function (k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function (v) {
            if (v instanceof Leaf) {
                return Data_Maybe.Nothing.value;
            };
            if (v instanceof Two) {
                var v2 = comp(k)(v.value1);
                if (v2 instanceof Data_Ordering.EQ) {
                    return findMax(v.value0);
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value1,
                        value: v.value2
                    })(go(v.value3)));
                };
                if (v2 instanceof Data_Ordering.LT) {
                    return go(v.value0);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 242, column 33 - line 245, column 20): " + [ v2.constructor.name ]);
            };
            if (v instanceof Three) {
                var v3 = comp(k)(v.value4);
                if (v3 instanceof Data_Ordering.EQ) {
                    return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                        key: v.value4,
                        value: v.value5
                    })(go(v.value6)));
                };
                if (v3 instanceof Data_Ordering.LT) {
                    return go(new Two(v.value0, v.value1, v.value2, v.value3));
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 246, column 45 - line 249, column 36): " + [ v3.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [ v.constructor.name ]);
        };
        return go;
    };
};
var eqMap = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (m1) {
            return function (m2) {
                return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var ordMap = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (m1) {
            return function (m2) {
                return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
            };
        });
    };
};
var eq1Map = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqMap(dictEq)(dictEq1));
    });
};
var ord1Map = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Map(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
    });
};
var empty = Leaf.value;
var fromFoldable = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (v) {
                return insert(dictOrd)(v.value0)(v.value1)(m);
            };
        })(empty);
    };
};
var filterWithKey = function (dictOrd) {
    return function (predicate) {
        var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
        var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
        var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
        return function ($761) {
            return $758($759($760($761)));
        };
    };
};
var filter = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(Data_Function["const"](predicate));
    };
};
var filterKeys = function (dictOrd) {
    return function (predicate) {
        return filterWithKey(dictOrd)(function ($762) {
            return Data_Function["const"](predicate($762));
        });
    };
};
var fromFoldableWithIndex = function (dictOrd) {
    return function (dictFoldableWithIndex) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function (k) {
            return function (m) {
                return function (v) {
                    return insert(dictOrd)(k)(v)(m);
                };
            };
        })(empty);
    };
};
var intersectionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function ($copy_v) {
                    return function ($copy_v1) {
                        return function ($copy_m) {
                            var $tco_var_v = $copy_v;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v, v1, m) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return m;
                                };
                                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                    var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1;
                                        $copy_m = m;
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_var_v = v.value1;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.GT) {
                                        $tco_var_v = v;
                                        $tco_var_v1 = v1.value1;
                                        $copy_m = m;
                                        return;
                                    };
                                    throw new Error("Failed pattern match at Data.Map.Internal (line 641, column 5 - line 644, column 27): " + [ v2.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at Data.Map.Internal (line 638, column 3 - line 638, column 17): " + [ v.constructor.name, v1.constructor.name, m.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                            };
                            return $tco_result;
                        };
                    };
                };
                return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
            };
        };
    };
};
var intersection = function (dictOrd) {
    return intersectionWith(dictOrd)(Data_Function["const"]);
};
var $$delete = function (dictOrd) {
    return function (k) {
        return function (m) {
            return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
        };
    };
};
var difference = function (dictOrd) {
    return function (m1) {
        return function (m2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
        };
    };
};
var checkValid = function (tree) {
    var allHeights = function (v) {
        if (v instanceof Leaf) {
            return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
        };
        if (v instanceof Two) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        };
        if (v instanceof Three) {
            return Data_Functor.map(Data_List_Types.functorList)(function (n) {
                return n + 1 | 0;
            })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        };
        throw new Error("Failed pattern match at Data.Map.Internal (line 188, column 3 - line 188, column 36): " + [ v.constructor.name ]);
    };
    return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
};
var asList = Control_Category.identity(Control_Category.categoryFn);
var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableMap;
}, function (dictMonoid) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                var $763 = Data_Function.flip(f);
                return function ($764) {
                    return Data_Tuple.uncurry($763($764));
                };
            })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
        };
    };
});
var mapMaybeWithKey = function (dictOrd) {
    return function (f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
            return function (a) {
                return function (acc) {
                    return Data_Maybe.maybe(acc)(function (b) {
                        return insert(dictOrd)(k)(b)(acc);
                    })(f(k)(a));
                };
            };
        })(empty);
    };
};
var mapMaybe = function (dictOrd) {
    var $765 = mapMaybeWithKey(dictOrd);
    return function ($766) {
        return $765(Data_Function["const"]($766));
    };
};
var traversableWithIndexMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexMap;
}, function () {
    return functorWithIndexMap;
}, function () {
    return traversableMap;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Leaf) {
                return Control_Applicative.pure(dictApplicative)(Leaf.value);
            };
            if (v instanceof Two) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3));
            };
            if (v instanceof Three) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value1)(v.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value4)(v.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(f)(v.value6));
            };
            throw new Error("Failed pattern match at Data.Map.Internal (line 136, column 1 - line 150, column 40): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var alter = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                var v = f(lookup(dictOrd)(k)(m));
                if (v instanceof Data_Maybe.Nothing) {
                    return $$delete(dictOrd)(k)(m);
                };
                if (v instanceof Data_Maybe.Just) {
                    return insert(dictOrd)(k)(v.value0)(m);
                };
                throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
            };
        };
    };
};
var fromFoldableWith = function (dictOrd) {
    return function (dictFoldable) {
        return function (f) {
            var combine = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Maybe.Just) {
                        return Data_Maybe.Just.create(f(v)(v1.value0));
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return new Data_Maybe.Just(v);
                    };
                    throw new Error("Failed pattern match at Data.Map.Internal (line 566, column 3 - line 566, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(dictFoldable)(function (m) {
                return function (v) {
                    return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                };
            })(empty);
        };
    };
};
var insertWith = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (v) {
                return alter(dictOrd)((function () {
                    var $767 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                    return function ($768) {
                        return Data_Maybe.Just.create($767($768));
                    };
                })())(k);
            };
        };
    };
};
var unionWith = function (dictOrd) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (m) {
                    return function (v) {
                        return alter(dictOrd)((function () {
                            var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                            return function ($770) {
                                return Data_Maybe.Just.create($769($770));
                            };
                        })())(v.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
            };
        };
    };
};
var union = function (dictOrd) {
    return unionWith(dictOrd)(Data_Function["const"]);
};
var semigroupMap = function (dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var monoidMap = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(dictOrd);
    }, empty);
};
var submap = function (dictOrd) {
    return function (kmin) {
        return function (kmax) {
            return foldSubmap(dictOrd)(monoidMap(dictOrd))(kmin)(kmax)(singleton);
        };
    };
};
var unions = function (dictOrd) {
    return function (dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var update = function (dictOrd) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    showTree: showTree,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    checkValid: checkValid,
    insert: insert,
    insertWith: insertWith,
    lookup: lookup,
    lookupLE: lookupLE,
    lookupLT: lookupLT,
    lookupGE: lookupGE,
    lookupGT: lookupGT,
    findMin: findMin,
    findMax: findMax,
    foldSubmap: foldSubmap,
    submap: submap,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromFoldableWithIndex: fromFoldableWithIndex,
    toUnfoldable: toUnfoldable,
    toUnfoldableUnordered: toUnfoldableUnordered,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    keys: keys,
    values: values,
    union: union,
    unionWith: unionWith,
    unions: unions,
    intersection: intersection,
    intersectionWith: intersectionWith,
    difference: difference,
    isSubmap: isSubmap,
    size: size,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    mapMaybeWithKey: mapMaybeWithKey,
    mapMaybe: mapMaybe,
    eq1Map: eq1Map,
    eqMap: eqMap,
    ord1Map: ord1Map,
    ordMap: ordMap,
    showMap: showMap,
    semigroupMap: semigroupMap,
    monoidMap: monoidMap,
    functorMap: functorMap,
    functorWithIndexMap: functorWithIndexMap,
    foldableMap: foldableMap,
    foldableWithIndexMap: foldableWithIndexMap,
    traversableMap: traversableMap,
    traversableWithIndexMap: traversableWithIndexMap
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.List.Lazy.Types/index.js":179,"../Data.List.Lazy/index.js":180,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253}],185:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var ordFirst = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1First = Data_Maybe.ord1Maybe;
var newtypeFirst = new Data_Newtype.Newtype(function (n) {
    return n;
}, First);
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var monadFirst = Data_Maybe.monadMaybe;
var invariantFirst = Data_Maybe.invariantMaybe;
var functorFirst = Data_Maybe.functorMaybe;
var extendFirst = Data_Maybe.extendMaybe;
var eqFirst = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1First = Data_Maybe.eq1Maybe;
var boundedFirst = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindFirst = Data_Maybe.bindMaybe;
var applyFirst = Data_Maybe.applyMaybe;
var applicativeFirst = Data_Maybe.applicativeMaybe;
var altFirst = new Control_Alt.Alt(function () {
    return functorFirst;
}, Data_Semigroup.append(semigroupFirst));
var plusFirst = new Control_Plus.Plus(function () {
    return altFirst;
}, Data_Monoid.mempty(monoidFirst));
var alternativeFirst = new Control_Alternative.Alternative(function () {
    return applicativeFirst;
}, function () {
    return plusFirst;
});
var monadZeroFirst = new Control_MonadZero.MonadZero(function () {
    return alternativeFirst;
}, function () {
    return monadFirst;
});
module.exports = {
    First: First,
    newtypeFirst: newtypeFirst,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    functorFirst: functorFirst,
    invariantFirst: invariantFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    extendFirst: extendFirst,
    showFirst: showFirst,
    semigroupFirst: semigroupFirst,
    monoidFirst: monoidFirst,
    altFirst: altFirst,
    plusFirst: plusFirst,
    alternativeFirst: alternativeFirst,
    monadZeroFirst: monadZeroFirst
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],186:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordLast = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var ord1Last = Data_Maybe.ord1Maybe;
var newtypeLast = new Data_Newtype.Newtype(function (n) {
    return n;
}, Last);
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var monadLast = Data_Maybe.monadMaybe;
var invariantLast = Data_Maybe.invariantMaybe;
var functorLast = Data_Maybe.functorMaybe;
var extendLast = Data_Maybe.extendMaybe;
var eqLast = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var eq1Last = Data_Maybe.eq1Maybe;
var boundedLast = function (dictBounded) {
    return Data_Maybe.boundedMaybe(dictBounded);
};
var bindLast = Data_Maybe.bindMaybe;
var applyLast = Data_Maybe.applyMaybe;
var applicativeLast = Data_Maybe.applicativeMaybe;
var altLast = new Control_Alt.Alt(function () {
    return functorLast;
}, Data_Semigroup.append(semigroupLast));
var plusLast = new Control_Plus.Plus(function () {
    return altLast;
}, Data_Monoid.mempty(monoidLast));
var alternativeLast = new Control_Alternative.Alternative(function () {
    return applicativeLast;
}, function () {
    return plusLast;
});
var monadZeroLast = new Control_MonadZero.MonadZero(function () {
    return alternativeLast;
}, function () {
    return monadLast;
});
module.exports = {
    Last: Last,
    newtypeLast: newtypeLast,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    functorLast: functorLast,
    invariantLast: invariantLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    extendLast: extendLast,
    showLast: showLast,
    semigroupLast: semigroupLast,
    monoidLast: monoidLast,
    altLast: altLast,
    plusLast: plusLast,
    alternativeLast: alternativeLast,
    monadZeroLast: monadZeroLast
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],187:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Data_Show.Show(function (v) {
        if (v instanceof Just) {
            return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var optional = function (dictAlternative) {
    return function (a) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Just.create)(a))(Control_Applicative.pure(dictAlternative.Applicative0())(Nothing.value));
    };
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Data_Unit.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Data_Function["const"](false));
var isJust = maybe(false)(Data_Function["const"](true));
var functorMaybe = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
};
var fromJust = function (dictPartial) {
    return function (v) {
        if (v instanceof Just) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
    };
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return true;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMaybe(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Nothing && y instanceof Nothing) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Nothing) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Nothing) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Just && y instanceof Just) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe (line 194, column 1 - line 194, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMaybe(dictEq));
});
var ord1Maybe = new Data_Ord.Ord1(function () {
    return eq1Maybe;
}, function (dictOrd) {
    return Data_Ord.compare(ordMaybe(dictOrd));
});
var boundedMaybe = function (dictBounded) {
    return new Data_Bounded.Bounded(function () {
        return ordMaybe(dictBounded.Ord0());
    }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
};
var applyMaybe = new Control_Apply.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Data_Functor.map(functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Control_Bind.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeMaybe = new Control_Applicative.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Control_Monad.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return applicativeMaybe;
}, function () {
    return plusMaybe;
});
var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing,
    Just: Just,
    maybe: maybe,
    "maybe'": maybe$prime,
    fromMaybe: fromMaybe,
    "fromMaybe'": fromMaybe$prime,
    isJust: isJust,
    isNothing: isNothing,
    fromJust: fromJust,
    optional: optional,
    functorMaybe: functorMaybe,
    applyMaybe: applyMaybe,
    applicativeMaybe: applicativeMaybe,
    altMaybe: altMaybe,
    plusMaybe: plusMaybe,
    alternativeMaybe: alternativeMaybe,
    bindMaybe: bindMaybe,
    monadMaybe: monadMaybe,
    monadZeroMaybe: monadZeroMaybe,
    extendMaybe: extendMaybe,
    invariantMaybe: invariantMaybe,
    semigroupMaybe: semigroupMaybe,
    monoidMaybe: monoidMaybe,
    eqMaybe: eqMaybe,
    eq1Maybe: eq1Maybe,
    ordMaybe: ordMaybe,
    ord1Maybe: ord1Maybe,
    boundedMaybe: boundedMaybe,
    showMaybe: showMaybe
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Bounded/index.js":103,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Unit/index.js":257}],188:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var MediaType = function (x) {
    return x;
};
var showMediaType = new Data_Show.Show(function (v) {
    return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
    return n;
}, MediaType);
var eqMediaType = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordMediaType = new Data_Ord.Ord(function () {
    return eqMediaType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    MediaType: MediaType,
    newtypeMediaType: newtypeMediaType,
    eqMediaType: eqMediaType,
    ordMediaType: ordMediaType,
    showMediaType: showMediaType
};

},{"../Data.Eq/index.js":123,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Show/index.js":226}],189:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return dictOrd;
};
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Data_Semiring.zero(dictSemiring));
};
var functorAdditive = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqAdditive = function (dictEq) {
    return dictEq;
};
var eq1Additive = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqAdditive(dictEq));
});
var ord1Additive = new Data_Ord.Ord1(function () {
    return eq1Additive;
}, function (dictOrd) {
    return Data_Ord.compare(ordAdditive(dictOrd));
});
var boundedAdditive = function (dictBounded) {
    return dictBounded;
};
var applyAdditive = new Control_Apply.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Control_Bind.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Control_Applicative.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Control_Monad.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive,
    eqAdditive: eqAdditive,
    eq1Additive: eq1Additive,
    ordAdditive: ordAdditive,
    ord1Additive: ord1Additive,
    boundedAdditive: boundedAdditive,
    showAdditive: showAdditive,
    functorAdditive: functorAdditive,
    applyAdditive: applyAdditive,
    applicativeAdditive: applicativeAdditive,
    bindAdditive: bindAdditive,
    monadAdditive: monadAdditive,
    semigroupAdditive: semigroupAdditive,
    monoidAdditive: monoidAdditive
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],190:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var semigroupConj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return dictOrd;
};
var monoidConj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
};
var functorConj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqConj = function (dictEq) {
    return dictEq;
};
var eq1Conj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqConj(dictEq));
});
var ord1Conj = new Data_Ord.Ord1(function () {
    return eq1Conj;
}, function (dictOrd) {
    return Data_Ord.compare(ordConj(dictOrd));
});
var boundedConj = function (dictBounded) {
    return dictBounded;
};
var applyConj = new Control_Apply.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Control_Bind.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Control_Applicative.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Control_Monad.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj,
    eqConj: eqConj,
    eq1Conj: eq1Conj,
    ordConj: ordConj,
    ord1Conj: ord1Conj,
    boundedConj: boundedConj,
    showConj: showConj,
    functorConj: functorConj,
    applyConj: applyConj,
    applicativeConj: applicativeConj,
    bindConj: bindConj,
    monadConj: monadConj,
    semigroupConj: semigroupConj,
    monoidConj: monoidConj,
    semiringConj: semiringConj
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],191:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictHeytingAlgebra) {
    return new Data_Semiring.Semiring(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
        };
    }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var semigroupDisj = function (dictHeytingAlgebra) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return dictOrd;
};
var monoidDisj = function (dictHeytingAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictHeytingAlgebra);
    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
};
var functorDisj = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDisj = function (dictEq) {
    return dictEq;
};
var eq1Disj = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDisj(dictEq));
});
var ord1Disj = new Data_Ord.Ord1(function () {
    return eq1Disj;
}, function (dictOrd) {
    return Data_Ord.compare(ordDisj(dictOrd));
});
var boundedDisj = function (dictBounded) {
    return dictBounded;
};
var applyDisj = new Control_Apply.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Control_Bind.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Control_Applicative.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Control_Monad.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj,
    eqDisj: eqDisj,
    eq1Disj: eq1Disj,
    ordDisj: ordDisj,
    ord1Disj: ord1Disj,
    boundedDisj: boundedDisj,
    showDisj: showDisj,
    functorDisj: functorDisj,
    applyDisj: applyDisj,
    applicativeDisj: applicativeDisj,
    bindDisj: bindDisj,
    monadDisj: monadDisj,
    semigroupDisj: semigroupDisj,
    monoidDisj: monoidDisj,
    semiringDisj: semiringDisj
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],192:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
        };
    });
};
var ordDual = function (dictOrd) {
    return dictOrd;
};
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid.Semigroup0());
    }, Data_Monoid.mempty(dictMonoid));
};
var functorDual = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqDual = function (dictEq) {
    return dictEq;
};
var eq1Dual = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqDual(dictEq));
});
var ord1Dual = new Data_Ord.Ord1(function () {
    return eq1Dual;
}, function (dictOrd) {
    return Data_Ord.compare(ordDual(dictOrd));
});
var boundedDual = function (dictBounded) {
    return dictBounded;
};
var applyDual = new Control_Apply.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Control_Bind.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Control_Applicative.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Control_Monad.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual,
    eqDual: eqDual,
    eq1Dual: eq1Dual,
    ordDual: ordDual,
    ord1Dual: ord1Dual,
    boundedDual: boundedDual,
    showDual: showDual,
    functorDual: functorDual,
    applyDual: applyDual,
    applicativeDual: applicativeDual,
    bindDual: bindDual,
    monadDual: monadDual,
    semigroupDual: semigroupDual,
    monoidDual: monoidDual
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],193:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Endo = function (x) {
    return x;
};
var showEndo = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupEndo = function (dictSemigroupoid) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
        };
    });
};
var ordEndo = function (dictOrd) {
    return dictOrd;
};
var monoidEndo = function (dictCategory) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEndo(dictCategory.Semigroupoid0());
    }, Control_Category.identity(dictCategory));
};
var eqEndo = function (dictEq) {
    return dictEq;
};
var boundedEndo = function (dictBounded) {
    return dictBounded;
};
module.exports = {
    Endo: Endo,
    eqEndo: eqEndo,
    ordEndo: ordEndo,
    boundedEndo: boundedEndo,
    showEndo: showEndo,
    semigroupEndo: semigroupEndo,
    monoidEndo: monoidEndo
};

},{"../Control.Category/index.js":24,"../Control.Semigroupoid/index.js":68,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],194:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return dictOrd;
};
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Data_Semiring.one(dictSemiring));
};
var functorMultiplicative = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqMultiplicative = function (dictEq) {
    return dictEq;
};
var eq1Multiplicative = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMultiplicative(dictEq));
});
var ord1Multiplicative = new Data_Ord.Ord1(function () {
    return eq1Multiplicative;
}, function (dictOrd) {
    return Data_Ord.compare(ordMultiplicative(dictOrd));
});
var boundedMultiplicative = function (dictBounded) {
    return dictBounded;
};
var applyMultiplicative = new Control_Apply.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Control_Bind.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Control_Monad.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative,
    eqMultiplicative: eqMultiplicative,
    eq1Multiplicative: eq1Multiplicative,
    ordMultiplicative: ordMultiplicative,
    ord1Multiplicative: ord1Multiplicative,
    boundedMultiplicative: boundedMultiplicative,
    showMultiplicative: showMultiplicative,
    functorMultiplicative: functorMultiplicative,
    applyMultiplicative: applyMultiplicative,
    applicativeMultiplicative: applicativeMultiplicative,
    bindMultiplicative: bindMultiplicative,
    monadMultiplicative: monadMultiplicative,
    semigroupMultiplicative: semigroupMultiplicative,
    monoidMultiplicative: monoidMultiplicative
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],195:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
    this.SemigroupRecord0 = SemigroupRecord0;
    this.memptyRecord = memptyRecord;
};
var Monoid = function (Semigroup0, mempty) {
    this.Semigroup0 = Semigroup0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Data_Semigroup.semigroupUnit;
}, Data_Unit.unit);
var monoidString = new Monoid(function () {
    return Data_Semigroup.semigroupString;
}, "");
var monoidRecordNil = new MonoidRecord(function () {
    return Data_Semigroup.semigroupRecordNil;
}, function (v) {
    return {};
});
var monoidOrdering = new Monoid(function () {
    return Data_Ordering.semigroupOrdering;
}, Data_Ordering.EQ.value);
var monoidArray = new Monoid(function () {
    return Data_Semigroup.semigroupArray;
}, [  ]);
var memptyRecord = function (dict) {
    return dict.memptyRecord;
};
var monoidRecord = function (dictRowToList) {
    return function (dictMonoidRecord) {
        return new Monoid(function () {
            return Data_Semigroup.semigroupRecord(dictRowToList)(dictMonoidRecord.SemigroupRecord0());
        }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
    }, function (v) {
        return mempty(dictMonoid);
    });
};
var monoidRecordCons = function (dictIsSymbol) {
    return function (dictMonoid) {
        return function (dictCons) {
            return function (dictMonoidRecord) {
                return new MonoidRecord(function () {
                    return Data_Semigroup.semigroupRecordCons(dictIsSymbol)(dictCons)(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                }, function (v) {
                    var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(mempty(dictMonoid))(tail);
                });
            };
        };
    };
};
var power = function (dictMonoid) {
    return function (x) {
        var go = function (p) {
            if (p <= 0) {
                return mempty(dictMonoid);
            };
            if (p === 1) {
                return x;
            };
            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            };
            if (Data_Boolean.otherwise) {
                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            };
            throw new Error("Failed pattern match at Data.Monoid (line 65, column 3 - line 65, column 17): " + [ p.constructor.name ]);
        };
        return go;
    };
};
var guard = function (dictMonoid) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return mempty(dictMonoid);
            };
            throw new Error("Failed pattern match at Data.Monoid (line 73, column 1 - line 73, column 49): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
module.exports = {
    Monoid: Monoid,
    mempty: mempty,
    power: power,
    guard: guard,
    MonoidRecord: MonoidRecord,
    memptyRecord: memptyRecord,
    monoidUnit: monoidUnit,
    monoidOrdering: monoidOrdering,
    monoidFn: monoidFn,
    monoidString: monoidString,
    monoidArray: monoidArray,
    monoidRecord: monoidRecord,
    monoidRecordNil: monoidRecordNil,
    monoidRecordCons: monoidRecordCons
};

},{"../Data.Boolean/index.js":100,"../Data.EuclideanRing/index.js":125,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387}],196:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var UnsafeMakeNatural = function (x) {
    return x;
};
var natToInt = function (v) {
    return v;
};
var showNatural = new Data_Show.Show((function () {
    var $5 = Data_Show.show(Data_Show.showInt);
    return function ($6) {
        return $5(natToInt($6));
    };
})());
var intToNat = function (v) {
    if (v >= 0) {
        return v;
    };
    return 0;
};
var unaryViaInt = function (f) {
    return function (x) {
        return intToNat(f(natToInt(x)));
    };
};
var eqNatural = new Data_Eq.Eq(function (l) {
    return function (r) {
        return natToInt(l) === natToInt(r);
    };
});
var ordNatural = new Data_Ord.Ord(function () {
    return eqNatural;
}, function (l) {
    return function (r) {
        return Data_Ord.compare(Data_Ord.ordInt)(natToInt(l))(natToInt(r));
    };
});
var binaryViaInt = function (f) {
    return function (l) {
        return function (r) {
            return intToNat(f(natToInt(l))(natToInt(r)));
        };
    };
};
var minus = binaryViaInt(Data_Ring.sub(Data_Ring.ringInt));
var semiringNatural = new Data_Semiring.Semiring(binaryViaInt(Data_Semiring.add(Data_Semiring.semiringInt)), binaryViaInt(Data_Semiring.mul(Data_Semiring.semiringInt)), intToNat(1), intToNat(0));
var enumNatural = new Data_Enum.Enum(function () {
    return ordNatural;
}, function (n) {
    var $4 = Data_Eq.eq(eqNatural)(n)(Data_Semiring.zero(semiringNatural));
    if ($4) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(minus(n)(Data_Semiring.one(semiringNatural)));
}, function (n) {
    return new Data_Maybe.Just(Data_Semiring.add(semiringNatural)(n)(Data_Semiring.one(semiringNatural)));
});
module.exports = {
    intToNat: intToNat,
    natToInt: natToInt,
    minus: minus,
    eqNatural: eqNatural,
    ordNatural: ordNatural,
    enumNatural: enumNatural,
    showNatural: showNatural,
    semiringNatural: semiringNatural
};

},{"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ring/index.js":215,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],197:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_First = require("../Data.Semigroup.First/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Newtype = function (unwrap, wrap) {
    this.unwrap = unwrap;
    this.wrap = wrap;
};
var wrap = function (dict) {
    return dict.wrap;
};
var unwrap = function (dict) {
    return dict.unwrap;
};
var underF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $66 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1)));
                        var $67 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)));
                        return function ($68) {
                            return $66($67($68));
                        };
                    };
                };
            };
        };
    };
};
var underF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $69 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $70 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function ($71) {
                            return $69(f($70($71)));
                        };
                    };
                };
            };
        };
    };
};
var under2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $72 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(unwrap(dictNewtype1));
                var $73 = Data_Function.on(f)(wrap(dictNewtype));
                return function ($74) {
                    return $72($73($74));
                };
            };
        };
    };
};
var under = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $75 = unwrap(dictNewtype1);
                var $76 = wrap(dictNewtype);
                return function ($77) {
                    return $75(f($76($77)));
                };
            };
        };
    };
};
var un = function (dictNewtype) {
    return function (v) {
        return unwrap(dictNewtype);
    };
};
var traverse = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                var $78 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                var $79 = unwrap(dictNewtype);
                return function ($80) {
                    return $78(f($79($80)));
                };
            };
        };
    };
};
var overF2 = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $81 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Functor.map(dictFunctor1)(wrap(dictNewtype1)));
                        var $82 = Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)));
                        return function ($83) {
                            return $81($82($83));
                        };
                    };
                };
            };
        };
    };
};
var overF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $84 = Data_Functor.map(dictFunctor1)(wrap(dictNewtype1));
                        var $85 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                        return function ($86) {
                            return $84(f($85($86)));
                        };
                    };
                };
            };
        };
    };
};
var over2 = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $87 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(wrap(dictNewtype1));
                var $88 = Data_Function.on(f)(unwrap(dictNewtype));
                return function ($89) {
                    return $87($88($89));
                };
            };
        };
    };
};
var over = function (dictNewtype) {
    return function (dictNewtype1) {
        return function (v) {
            return function (f) {
                var $90 = wrap(dictNewtype1);
                var $91 = unwrap(dictNewtype);
                return function ($92) {
                    return $90(f($91($92)));
                };
            };
        };
    };
};
var op = function (dictNewtype) {
    return un(dictNewtype);
};
var newtypeMultiplicative = new Newtype(function (v) {
    return v;
}, Data_Monoid_Multiplicative.Multiplicative);
var newtypeLast = new Newtype(function (v) {
    return v;
}, Data_Semigroup_Last.Last);
var newtypeFirst = new Newtype(function (v) {
    return v;
}, Data_Semigroup_First.First);
var newtypeEndo = new Newtype(function (v) {
    return v;
}, Data_Monoid_Endo.Endo);
var newtypeDual = new Newtype(function (v) {
    return v;
}, Data_Monoid_Dual.Dual);
var newtypeDisj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Disj.Disj);
var newtypeConj = new Newtype(function (v) {
    return v;
}, Data_Monoid_Conj.Conj);
var newtypeAdditive = new Newtype(function (v) {
    return v;
}, Data_Monoid_Additive.Additive);
var collect = function (dictFunctor) {
    return function (dictNewtype) {
        return function (v) {
            return function (f) {
                var $93 = wrap(dictNewtype);
                var $94 = Data_Functor.map(dictFunctor)(unwrap(dictNewtype));
                return function ($95) {
                    return $93(f($94($95)));
                };
            };
        };
    };
};
var alaF = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictNewtype) {
            return function (dictNewtype1) {
                return function (v) {
                    return function (f) {
                        var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                        var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                        return function ($98) {
                            return $96(f($97($98)));
                        };
                    };
                };
            };
        };
    };
};
var ala = function (dictFunctor) {
    return function (dictNewtype) {
        return function (dictNewtype1) {
            return function (v) {
                return function (f) {
                    return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                };
            };
        };
    };
};
module.exports = {
    unwrap: unwrap,
    wrap: wrap,
    Newtype: Newtype,
    un: un,
    op: op,
    ala: ala,
    alaF: alaF,
    over: over,
    overF: overF,
    under: under,
    underF: underF,
    over2: over2,
    overF2: overF2,
    under2: under2,
    underF2: underF2,
    traverse: traverse,
    collect: collect,
    newtypeAdditive: newtypeAdditive,
    newtypeMultiplicative: newtypeMultiplicative,
    newtypeConj: newtypeConj,
    newtypeDisj: newtypeDisj,
    newtypeDual: newtypeDual,
    newtypeEndo: newtypeEndo,
    newtypeFirst: newtypeFirst,
    newtypeLast: newtypeLast
};

},{"../Control.Semigroupoid/index.js":68,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Monoid.Additive/index.js":189,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid.Multiplicative/index.js":194,"../Data.Semigroup.First/index.js":216,"../Data.Semigroup.Last/index.js":218}],198:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var NonEmpty = (function () {
    function NonEmpty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NonEmpty.create = function (value0) {
        return function (value1) {
            return new NonEmpty(value0, value1);
        };
    };
    return NonEmpty;
})();
var unfoldable1NonEmpty = function (dictUnfoldable) {
    return new Data_Unfoldable1.Unfoldable1(function (f) {
        return function (b) {
            return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
        };
    });
};
var tail = function (v) {
    return v.value1;
};
var singleton = function (dictPlus) {
    return function (a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
    };
};
var showNonEmpty = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var oneOf = function (dictAlternative) {
    return function (v) {
        return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
    };
};
var head = function (v) {
    return v.value0;
};
var functorNonEmpty = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (m) {
            return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndex = function (dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
        return functorNonEmpty(dictFunctorWithIndex.Functor0());
    }, function (f) {
        return function (v) {
            return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($146) {
                return f(Data_Maybe.Just.create($146));
            })(v.value1));
        };
    });
};
var fromNonEmpty = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var foldl1 = function (dictFoldable) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
        };
    };
};
var foldableNonEmpty = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
        };
    });
};
var foldableWithIndexNonEmpty = function (dictFoldableWithIndex) {
    return new Data_FoldableWithIndex.FoldableWithIndex(function () {
        return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
    }, function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function ($147) {
                    return f(Data_Maybe.Just.create($147));
                })(v.value1));
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function ($148) {
                    return f(Data_Maybe.Just.create($148));
                })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (b) {
            return function (v) {
                return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function ($149) {
                    return f(Data_Maybe.Just.create($149));
                })(b)(v.value1));
            };
        };
    });
};
var traversableNonEmpty = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableNonEmpty(dictTraversable.Foldable1());
    }, function () {
        return functorNonEmpty(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var traversableWithIndexNonEmpty = function (dictTraversableWithIndex) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
        return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
    }, function () {
        return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
    }, function () {
        return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function ($150) {
                    return f(Data_Maybe.Just.create($150));
                })(v.value1));
            };
        };
    });
};
var foldable1NonEmpty = function (dictFoldable) {
    return new Data_Semigroup_Foldable.Foldable1(function () {
        return foldableNonEmpty(dictFoldable);
    }, function (dictSemigroup) {
        return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    }, function (dictSemigroup) {
        return function (f) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(function (s) {
                    return function (a1) {
                        return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                    };
                })(f(v.value0))(v.value1);
            };
        };
    });
};
var eqNonEmpty = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
            };
        });
    };
};
var ordNonEmpty = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
            };
        });
    };
};
var eq1NonEmpty = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
    });
};
var ord1NonEmpty = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1NonEmpty(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
    });
};
module.exports = {
    NonEmpty: NonEmpty,
    singleton: singleton,
    foldl1: foldl1,
    fromNonEmpty: fromNonEmpty,
    oneOf: oneOf,
    head: head,
    tail: tail,
    showNonEmpty: showNonEmpty,
    eqNonEmpty: eqNonEmpty,
    eq1NonEmpty: eq1NonEmpty,
    ordNonEmpty: ordNonEmpty,
    ord1NonEmpty: ord1NonEmpty,
    functorNonEmpty: functorNonEmpty,
    functorWithIndex: functorWithIndex,
    foldableNonEmpty: foldableNonEmpty,
    foldableWithIndexNonEmpty: foldableWithIndexNonEmpty,
    traversableNonEmpty: traversableNonEmpty,
    traversableWithIndexNonEmpty: traversableWithIndexNonEmpty,
    foldable1NonEmpty: foldable1NonEmpty,
    unfoldable1NonEmpty: unfoldable1NonEmpty
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Control.Plus/index.js":65,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unfoldable1/index.js":255}],199:[function(require,module,exports){
"use strict";

exports["null"] = null;

exports.nullable = function (a, r, f) {
  return a == null ? r : f(a);
};

exports.notNull = function (x) {
  return x;
};

},{}],200:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
var toMaybe = function (n) {
    return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
};
var showNullable = function (dictShow) {
    return new Data_Show.Show((function () {
        var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
        return function ($6) {
            return $5(toMaybe($6));
        };
    })());
};
var eqNullable = function (dictEq) {
    return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
};
var ordNullable = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqNullable(dictOrd.Eq0());
    }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
};
var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqNullable(dictEq));
});
var ord1Nullable = new Data_Ord.Ord1(function () {
    return eq1Nullable;
}, function (dictOrd) {
    return Data_Ord.compare(ordNullable(dictOrd));
});
module.exports = {
    toMaybe: toMaybe,
    toNullable: toNullable,
    showNullable: showNullable,
    eqNullable: eqNullable,
    eq1Nullable: eq1Nullable,
    ordNullable: ordNullable,
    ord1Nullable: ord1Nullable,
    "null": $foreign["null"],
    notNull: $foreign.notNull
};

},{"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"./foreign.js":199}],201:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Global = require("../Global/index.js");
var nan = Global.nan;
var $$isNaN = Global["isNaN"];
var $$isFinite = Global["isFinite"];
var infinity = Global.infinity;
var fromString = (function () {
    var check = function (num) {
        if ($$isFinite(num)) {
            return new Data_Maybe.Just(num);
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Number (line 45, column 5 - line 46, column 39): " + [ num.constructor.name ]);
    };
    return function ($1) {
        return check(Global.readFloat($1));
    };
})();
module.exports = {
    fromString: fromString,
    nan: nan,
    "isNaN": $$isNaN,
    infinity: infinity,
    "isFinite": $$isFinite
};

},{"../Data.Boolean/index.js":100,"../Data.Maybe/index.js":187,"../Global/index.js":319}],202:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Max = function (x) {
    return x;
};
var showMax = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Max " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMax = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.max(dictOrd)(v)(v1);
        };
    });
};
var newtypeMax = new Data_Newtype.Newtype(function (n) {
    return n;
}, Max);
var monoidMax = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMax(dictBounded.Ord0());
    }, Data_Bounded.bottom(dictBounded));
};
var eqMax = function (dictEq) {
    return dictEq;
};
var ordMax = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMax(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Max: Max,
    newtypeMax: newtypeMax,
    eqMax: eqMax,
    ordMax: ordMax,
    semigroupMax: semigroupMax,
    monoidMax: monoidMax,
    showMax: showMax
};

},{"../Data.Bounded/index.js":103,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],203:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Min = function (x) {
    return x;
};
var showMin = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Min " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupMin = function (dictOrd) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Data_Ord.min(dictOrd)(v)(v1);
        };
    });
};
var newtypeMin = new Data_Newtype.Newtype(function (n) {
    return n;
}, Min);
var monoidMin = function (dictBounded) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMin(dictBounded.Ord0());
    }, Data_Bounded.top(dictBounded));
};
var eqMin = function (dictEq) {
    return dictEq;
};
var ordMin = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMin(dictOrd.Eq0());
    }, function (v) {
        return function (v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
        };
    });
};
module.exports = {
    Min: Min,
    newtypeMin: newtypeMin,
    eqMin: eqMin,
    ordMin: ordMin,
    semigroupMin: semigroupMin,
    monoidMin: monoidMin,
    showMin: showMin
};

},{"../Data.Bounded/index.js":103,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],204:[function(require,module,exports){
"use strict";

var unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x === y ? eq : gt;
        };
      };
    };
  };
};

exports.ordBooleanImpl = unsafeCompareImpl;
exports.ordIntImpl = unsafeCompareImpl;
exports.ordNumberImpl = unsafeCompareImpl;
exports.ordStringImpl = unsafeCompareImpl;
exports.ordCharImpl = unsafeCompareImpl;

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

},{}],205:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var OrdRecord = function (EqRecord0, compareRecord) {
    this.EqRecord0 = EqRecord0;
    this.compareRecord = compareRecord;
};
var Ord1 = function (Eq10, compare1) {
    this.Eq10 = Eq10;
    this.compare1 = compare1;
};
var Ord = function (Eq0, compare) {
    this.Eq0 = Eq0;
    this.compare = compare;
};
var ordVoid = new Ord(function () {
    return Data_Eq.eqVoid;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordUnit = new Ord(function () {
    return Data_Eq.eqUnit;
}, function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
});
var ordString = new Ord(function () {
    return Data_Eq.eqString;
}, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordRecordNil = new OrdRecord(function () {
    return Data_Eq.eqRowNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Ordering.EQ.value;
        };
    };
});
var ordOrdering = new Ord(function () {
    return Data_Ordering.eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.EQ.value;
        };
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.GT.value;
        };
        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        throw new Error("Failed pattern match at Data.Ord (line 112, column 1 - line 119, column 21): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var ordNumber = new Ord(function () {
    return Data_Eq.eqNumber;
}, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordInt = new Ord(function () {
    return Data_Eq.eqInt;
}, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordChar = new Ord(function () {
    return Data_Eq.eqChar;
}, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var ordBoolean = new Ord(function () {
    return Data_Eq.eqBoolean;
}, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
var compareRecord = function (dict) {
    return dict.compareRecord;
};
var ordRecord = function (dictRowToList) {
    return function (dictOrdRecord) {
        return new Ord(function () {
            return Data_Eq.eqRec(dictRowToList)(dictOrdRecord.EqRecord0());
        }, compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var compare1 = function (dict) {
    return dict.compare1;
};
var compare = function (dict) {
    return dict.compare;
};
var comparing = function (dictOrd) {
    return function (f) {
        return function (x) {
            return function (y) {
                return compare(dictOrd)(f(x))(f(y));
            };
        };
    };
};
var greaterThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return true;
            };
            return false;
        };
    };
};
var greaterThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return false;
            };
            return true;
        };
    };
};
var signum = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($43) {
                return Data_Semiring.one(dictRing.Semiring0());
            };
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
    };
};
var lessThan = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
                return true;
            };
            return false;
        };
    };
};
var lessThanOrEq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
                return false;
            };
            return true;
        };
    };
};
var max = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return y;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return x;
            };
            throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
        };
    };
};
var min = function (dictOrd) {
    return function (x) {
        return function (y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
                return x;
            };
            if (v instanceof Data_Ordering.EQ) {
                return x;
            };
            if (v instanceof Data_Ordering.GT) {
                return y;
            };
            throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
        };
    };
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return Data_Eq.eqArray(dictOrd.Eq0());
    }, (function () {
        var toDelta = function (x) {
            return function (y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.GT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 68, column 17): " + [ v.constructor.name ]);
            };
        };
        return function (xs) {
            return function (ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
        };
    })());
};
var ord1Array = new Ord1(function () {
    return Data_Eq.eq1Array;
}, function (dictOrd) {
    return compare(ordArray(dictOrd));
});
var ordRecordCons = function (dictOrdRecord) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (dictOrd) {
                return new OrdRecord(function () {
                    return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())(dictCons)(dictIsSymbol)(dictOrd.Eq0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                            var $49 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                            if ($49) {
                                return left;
                            };
                            return compareRecord(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                        };
                    };
                });
            };
        };
    };
};
var clamp = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
        };
    };
};
var between = function (dictOrd) {
    return function (low) {
        return function (hi) {
            return function (x) {
                if (lessThan(dictOrd)(x)(low)) {
                    return false;
                };
                if (greaterThan(dictOrd)(x)(hi)) {
                    return false;
                };
                return true;
            };
        };
    };
};
var abs = function (dictOrd) {
    return function (dictRing) {
        return function (x) {
            var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($53) {
                return x;
            };
            return Data_Ring.negate(dictRing)(x);
        };
    };
};
module.exports = {
    Ord: Ord,
    compare: compare,
    Ord1: Ord1,
    compare1: compare1,
    lessThan: lessThan,
    lessThanOrEq: lessThanOrEq,
    greaterThan: greaterThan,
    greaterThanOrEq: greaterThanOrEq,
    comparing: comparing,
    min: min,
    max: max,
    clamp: clamp,
    between: between,
    abs: abs,
    signum: signum,
    OrdRecord: OrdRecord,
    compareRecord: compareRecord,
    ordBoolean: ordBoolean,
    ordInt: ordInt,
    ordNumber: ordNumber,
    ordString: ordString,
    ordChar: ordChar,
    ordUnit: ordUnit,
    ordVoid: ordVoid,
    ordArray: ordArray,
    ordOrdering: ordOrdering,
    ord1Array: ord1Array,
    ordRecordNil: ordRecordNil,
    ordRecordCons: ordRecordCons,
    ordRecord: ordRecord
};

},{"../Data.Eq/index.js":123,"../Data.Ordering/index.js":206,"../Data.Ring/index.js":215,"../Data.Semiring/index.js":223,"../Data.Symbol/index.js":240,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"./foreign.js":204}],206:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var showOrdering = new Data_Show.Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [ v.constructor.name ]);
});
var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invert = function (v) {
    if (v instanceof GT) {
        return LT.value;
    };
    if (v instanceof EQ) {
        return EQ.value;
    };
    if (v instanceof LT) {
        return GT.value;
    };
    throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
};
var eqOrdering = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
module.exports = {
    LT: LT,
    GT: GT,
    EQ: EQ,
    invert: invert,
    eqOrdering: eqOrdering,
    semigroupOrdering: semigroupOrdering,
    showOrdering: showOrdering
};

},{"../Data.Eq/index.js":123,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],207:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Choice = function (Profunctor0, left, right) {
    this.Profunctor0 = Profunctor0;
    this.left = left;
    this.right = right;
};
var right = function (dict) {
    return dict.right;
};
var left = function (dict) {
    return dict.left;
};
var splitChoice = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
            };
        };
    };
};
var fanin = function (dictCategory) {
    return function (dictChoice) {
        return function (l) {
            return function (r) {
                var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
            };
        };
    };
};
var choiceFn = new Choice(function () {
    return Data_Profunctor.profunctorFn;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(v(v1.value0));
        };
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
        };
        throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
    };
}, Data_Functor.map(Data_Either.functorEither));
module.exports = {
    left: left,
    right: right,
    Choice: Choice,
    splitChoice: splitChoice,
    fanin: fanin,
    choiceFn: choiceFn
};

},{"../Control.Category/index.js":24,"../Control.Semigroupoid/index.js":68,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Profunctor/index.js":213}],208:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Closed = function (Profunctor0, closed) {
    this.Profunctor0 = Profunctor0;
    this.closed = closed;
};
var closedFunction = new Closed(function () {
    return Data_Profunctor.profunctorFn;
}, Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
var closed = function (dict) {
    return dict.closed;
};
module.exports = {
    closed: closed,
    Closed: Closed,
    closedFunction: closedFunction
};

},{"../Control.Semigroupoid/index.js":68,"../Data.Profunctor/index.js":213}],209:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Cochoice = function (Profunctor0, unleft, unright) {
    this.Profunctor0 = Profunctor0;
    this.unleft = unleft;
    this.unright = unright;
};
var unright = function (dict) {
    return dict.unright;
};
var unleft = function (dict) {
    return dict.unleft;
};
module.exports = {
    unleft: unleft,
    unright: unright,
    Cochoice: Cochoice
};

},{}],210:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Costrong = function (Profunctor0, unfirst, unsecond) {
    this.Profunctor0 = Profunctor0;
    this.unfirst = unfirst;
    this.unsecond = unsecond;
};
var unsecond = function (dict) {
    return dict.unsecond;
};
var unfirst = function (dict) {
    return dict.unfirst;
};
module.exports = {
    unfirst: unfirst,
    unsecond: unsecond,
    Costrong: Costrong
};

},{}],211:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_MonadPlus = require("../Control.MonadPlus/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Closed = require("../Data.Profunctor.Closed/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Star = function (x) {
    return x;
};
var semigroupoidStar = function (dictBind) {
    return new Control_Semigroupoid.Semigroupoid(function (v) {
        return function (v1) {
            return function (x) {
                return Control_Bind.bind(dictBind)(v1(x))(v);
            };
        };
    });
};
var profunctorStar = function (dictFunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                var $78 = Data_Functor.map(dictFunctor)(g);
                return function ($79) {
                    return $78(v(f($79)));
                };
            };
        };
    });
};
var strongStar = function (dictFunctor) {
    return new Data_Profunctor_Strong.Strong(function () {
        return profunctorStar(dictFunctor);
    }, function (v) {
        return function (v1) {
            return Data_Functor.map(dictFunctor)(function (v2) {
                return new Data_Tuple.Tuple(v2, v1.value1);
            })(v(v1.value0));
        };
    }, function (v) {
        return function (v1) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create(v1.value0))(v(v1.value1));
        };
    });
};
var newtypeStar = new Data_Newtype.Newtype(function (n) {
    return n;
}, Star);
var invariantStar = function (dictInvariant) {
    return new Data_Functor_Invariant.Invariant(function (f) {
        return function (g) {
            return function (v) {
                var $80 = Data_Functor_Invariant.imap(dictInvariant)(f)(g);
                return function ($81) {
                    return $80(v($81));
                };
            };
        };
    });
};
var hoistStar = function (f) {
    return function (v) {
        return function ($82) {
            return f(v($82));
        };
    };
};
var functorStar = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            var $83 = Data_Functor.map(dictFunctor)(f);
            return function ($84) {
                return $83(v($84));
            };
        };
    });
};
var distributiveStar = function (dictDistributive) {
    return new Data_Distributive.Distributive(function () {
        return functorStar(dictDistributive.Functor0());
    }, function (dictFunctor) {
        return function (f) {
            var $85 = Data_Distributive.distribute(distributiveStar(dictDistributive))(dictFunctor);
            var $86 = Data_Functor.map(dictFunctor)(f);
            return function ($87) {
                return $85($86($87));
            };
        };
    }, function (dictFunctor) {
        return function (f) {
            return function (a) {
                return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (v) {
                    return v(a);
                })(f);
            };
        };
    });
};
var closedStar = function (dictDistributive) {
    return new Data_Profunctor_Closed.Closed(function () {
        return profunctorStar(dictDistributive.Functor0());
    }, function (v) {
        return function (g) {
            return Data_Distributive.distribute(dictDistributive)(Data_Functor.functorFn)(function ($88) {
                return v(g($88));
            });
        };
    });
};
var choiceStar = function (dictApplicative) {
    return new Data_Profunctor_Choice.Choice(function () {
        return profunctorStar((dictApplicative.Apply0()).Functor0());
    }, function (v) {
        return Star(Data_Either.either((function () {
            var $89 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Left.create);
            return function ($90) {
                return $89(v($90));
            };
        })())((function () {
            var $91 = Control_Applicative.pure(dictApplicative);
            return function ($92) {
                return $91(Data_Either.Right.create($92));
            };
        })()));
    }, function (v) {
        return Star(Data_Either.either((function () {
            var $93 = Control_Applicative.pure(dictApplicative);
            return function ($94) {
                return $93(Data_Either.Left.create($94));
            };
        })())((function () {
            var $95 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Either.Right.create);
            return function ($96) {
                return $95(v($96));
            };
        })()));
    });
};
var categoryStar = function (dictMonad) {
    return new Control_Category.Category(function () {
        return semigroupoidStar(dictMonad.Bind1());
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var applyStar = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorStar(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (a) {
                return Control_Apply.apply(dictApply)(v(a))(v1(a));
            };
        };
    });
};
var bindStar = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyStar(dictBind.Apply0());
    }, function (v) {
        return function (f) {
            return function (x) {
                return Control_Bind.bind(dictBind)(v(x))(function (a) {
                    var v1 = f(a);
                    return v1(x);
                });
            };
        };
    });
};
var applicativeStar = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyStar(dictApplicative.Apply0());
    }, function (a) {
        return function (v) {
            return Control_Applicative.pure(dictApplicative)(a);
        };
    });
};
var monadStar = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeStar(dictMonad.Applicative0());
    }, function () {
        return bindStar(dictMonad.Bind1());
    });
};
var altStar = function (dictAlt) {
    return new Control_Alt.Alt(function () {
        return functorStar(dictAlt.Functor0());
    }, function (v) {
        return function (v1) {
            return function (a) {
                return Control_Alt.alt(dictAlt)(v(a))(v1(a));
            };
        };
    });
};
var plusStar = function (dictPlus) {
    return new Control_Plus.Plus(function () {
        return altStar(dictPlus.Alt0());
    }, function (v) {
        return Control_Plus.empty(dictPlus);
    });
};
var alternativeStar = function (dictAlternative) {
    return new Control_Alternative.Alternative(function () {
        return applicativeStar(dictAlternative.Applicative0());
    }, function () {
        return plusStar(dictAlternative.Plus1());
    });
};
var monadZeroStar = function (dictMonadZero) {
    return new Control_MonadZero.MonadZero(function () {
        return alternativeStar(dictMonadZero.Alternative1());
    }, function () {
        return monadStar(dictMonadZero.Monad0());
    });
};
var monadPlusStar = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return monadZeroStar(dictMonadPlus.MonadZero0());
    });
};
module.exports = {
    Star: Star,
    hoistStar: hoistStar,
    newtypeStar: newtypeStar,
    semigroupoidStar: semigroupoidStar,
    categoryStar: categoryStar,
    functorStar: functorStar,
    invariantStar: invariantStar,
    applyStar: applyStar,
    applicativeStar: applicativeStar,
    bindStar: bindStar,
    monadStar: monadStar,
    altStar: altStar,
    plusStar: plusStar,
    alternativeStar: alternativeStar,
    monadZeroStar: monadZeroStar,
    monadPlusStar: monadPlusStar,
    distributiveStar: distributiveStar,
    profunctorStar: profunctorStar,
    strongStar: strongStar,
    choiceStar: choiceStar,
    closedStar: closedStar
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad/index.js":60,"../Control.MonadPlus/index.js":61,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Control.Semigroupoid/index.js":68,"../Data.Distributive/index.js":117,"../Data.Either/index.js":119,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Profunctor.Choice/index.js":207,"../Data.Profunctor.Closed/index.js":208,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],212:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Strong = function (Profunctor0, first, second) {
    this.Profunctor0 = Profunctor0;
    this.first = first;
    this.second = second;
};
var strongFn = new Strong(function () {
    return Data_Profunctor.profunctorFn;
}, function (a2b) {
    return function (v) {
        return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
    };
}, Data_Functor.map(Data_Tuple.functorTuple));
var second = function (dict) {
    return dict.second;
};
var first = function (dict) {
    return dict.first;
};
var splitStrong = function (dictCategory) {
    return function (dictStrong) {
        return function (l) {
            return function (r) {
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
            };
        };
    };
};
var fanout = function (dictCategory) {
    return function (dictStrong) {
        return function (l) {
            return function (r) {
                var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                    return new Data_Tuple.Tuple(a, a);
                })(Control_Category.identity(dictCategory));
                return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
            };
        };
    };
};
module.exports = {
    first: first,
    second: second,
    Strong: Strong,
    splitStrong: splitStrong,
    fanout: fanout,
    strongFn: strongFn
};

},{"../Control.Category/index.js":24,"../Control.Semigroupoid/index.js":68,"../Data.Functor/index.js":143,"../Data.Profunctor/index.js":213,"../Data.Tuple/index.js":251}],213:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorFn = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return function ($9) {
                return c2d(b2c(a2b($9)));
            };
        };
    };
});
var dimap = function (dict) {
    return dict.dimap;
};
var lcmap = function (dictProfunctor) {
    return function (a2b) {
        return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var rmap = function (dictProfunctor) {
    return function (b2c) {
        return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
    };
};
var unwrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return dimap(dictProfunctor)(Data_Newtype.wrap(dictNewtype))(Data_Newtype.unwrap(dictNewtype));
    };
};
var wrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return function (v) {
            return dimap(dictProfunctor)(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype));
        };
    };
};
var arr = function (dictCategory) {
    return function (dictProfunctor) {
        return function (f) {
            return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
        };
    };
};
module.exports = {
    dimap: dimap,
    Profunctor: Profunctor,
    lcmap: lcmap,
    rmap: rmap,
    arr: arr,
    unwrapIso: unwrapIso,
    wrapIso: wrapIso,
    profunctorFn: profunctorFn
};

},{"../Control.Category/index.js":24,"../Data.Newtype/index.js":197}],214:[function(require,module,exports){
"use strict";

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

},{}],215:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var RingRecord = function (SemiringRecord0, subRecord) {
    this.SemiringRecord0 = SemiringRecord0;
    this.subRecord = subRecord;
};
var Ring = function (Semiring0, sub) {
    this.Semiring0 = Semiring0;
    this.sub = sub;
};
var subRecord = function (dict) {
    return dict.subRecord;
};
var sub = function (dict) {
    return dict.sub;
};
var ringUnit = new Ring(function () {
    return Data_Semiring.semiringUnit;
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var ringRecordNil = new RingRecord(function () {
    return Data_Semiring.semiringRecordNil;
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var ringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictRingRecord) {
            return function (dictRing) {
                return new RingRecord(function () {
                    return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
var ringRecord = function (dictRowToList) {
    return function (dictRingRecord) {
        return new Ring(function () {
            return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());
        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var ringNumber = new Ring(function () {
    return Data_Semiring.semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return Data_Semiring.semiringInt;
}, $foreign.intSub);
var ringFn = function (dictRing) {
    return new Ring(function () {
        return Data_Semiring.semiringFn(dictRing.Semiring0());
    }, function (f) {
        return function (g) {
            return function (x) {
                return sub(dictRing)(f(x))(g(x));
            };
        };
    });
};
var negate = function (dictRing) {
    return function (a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
    };
};
module.exports = {
    Ring: Ring,
    sub: sub,
    negate: negate,
    RingRecord: RingRecord,
    subRecord: subRecord,
    ringInt: ringInt,
    ringNumber: ringNumber,
    ringUnit: ringUnit,
    ringFn: ringFn,
    ringRecord: ringRecord,
    ringRecordNil: ringRecordNil,
    ringRecordCons: ringRecordCons
};

},{"../Data.Semiring/index.js":223,"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"./foreign.js":214}],216:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(First " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupFirst = new Data_Semigroup.Semigroup(function (x) {
    return function (v) {
        return x;
    };
});
var ordFirst = function (dictOrd) {
    return dictOrd;
};
var functorFirst = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqFirst = function (dictEq) {
    return dictEq;
};
var eq1First = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqFirst(dictEq));
});
var ord1First = new Data_Ord.Ord1(function () {
    return eq1First;
}, function (dictOrd) {
    return Data_Ord.compare(ordFirst(dictOrd));
});
var boundedFirst = function (dictBounded) {
    return dictBounded;
};
var applyFirst = new Control_Apply.Apply(function () {
    return functorFirst;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindFirst = new Control_Bind.Bind(function () {
    return applyFirst;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeFirst = new Control_Applicative.Applicative(function () {
    return applyFirst;
}, First);
var monadFirst = new Control_Monad.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    showFirst: showFirst,
    functorFirst: functorFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    semigroupFirst: semigroupFirst
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],217:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord_Max = require("../Data.Ord.Max/index.js");
var Data_Ord_Min = require("../Data.Ord.Min/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var JoinWith = function (x) {
    return x;
};
var Act = function (x) {
    return x;
};
var Foldable1 = function (Foldable0, fold1, foldMap1) {
    this.Foldable0 = Foldable0;
    this.fold1 = fold1;
    this.foldMap1 = foldMap1;
};
var semigroupJoinWith = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return JoinWith(function (j) {
                return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
            });
        };
    });
};
var semigroupAct = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var joinee = function (v) {
    return v;
};
var getAct = function (v) {
    return v;
};
var foldMap1 = function (dict) {
    return dict.foldMap1;
};
var intercalateMap = function (dictFoldable1) {
    return function (dictSemigroup) {
        return function (j) {
            return function (f) {
                return function (foldable) {
                    return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function ($43) {
                        return JoinWith(Data_Function["const"](f($43)));
                    })(foldable))(j);
                };
            };
        };
    };
};
var intercalate = function (dictFoldable1) {
    return function (dictSemigroup) {
        return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.newtypeMax)(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable1) {
        return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
    };
};
var traverse1_ = function (dictFoldable1) {
    return function (dictApply) {
        return function (f) {
            return function (t) {
                return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function ($44) {
                    return Act(f($44));
                })(t)));
            };
        };
    };
};
var for1_ = function (dictFoldable1) {
    return function (dictApply) {
        return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
    };
};
var sequence1_ = function (dictFoldable1) {
    return function (dictApply) {
        return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var fold1Default = function (dictFoldable1) {
    return function (dictSemigroup) {
        return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var foldableDual = new Foldable1(function () {
    return Data_Foldable.foldableDual;
}, function (dictSemigroup) {
    return fold1Default(foldableDual)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var foldableMultiplicative = new Foldable1(function () {
    return Data_Foldable.foldableMultiplicative;
}, function (dictSemigroup) {
    return fold1Default(foldableMultiplicative)(dictSemigroup);
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
});
var fold1 = function (dict) {
    return dict.fold1;
};
var foldMap1Default = function (dictFoldable1) {
    return function (dictFunctor) {
        return function (dictSemigroup) {
            return function (f) {
                var $45 = fold1(dictFoldable1)(dictSemigroup);
                var $46 = Data_Functor.map(dictFunctor)(f);
                return function ($47) {
                    return $45($46($47));
                };
            };
        };
    };
};
module.exports = {
    Foldable1: Foldable1,
    foldMap1: foldMap1,
    fold1: fold1,
    traverse1_: traverse1_,
    for1_: for1_,
    sequence1_: sequence1_,
    foldMap1Default: foldMap1Default,
    fold1Default: fold1Default,
    intercalate: intercalate,
    intercalateMap: intercalateMap,
    maximum: maximum,
    minimum: minimum,
    foldableDual: foldableDual,
    foldableMultiplicative: foldableMultiplicative
};

},{"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Ord.Max/index.js":202,"../Data.Ord.Min/index.js":203,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257}],218:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return "(Last " + (Data_Show.show(dictShow)(v) + ")");
    });
};
var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
    return function (x) {
        return x;
    };
});
var ordLast = function (dictOrd) {
    return dictOrd;
};
var functorLast = new Data_Functor.Functor(function (f) {
    return function (m) {
        return f(m);
    };
});
var eqLast = function (dictEq) {
    return dictEq;
};
var eq1Last = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLast(dictEq));
});
var ord1Last = new Data_Ord.Ord1(function () {
    return eq1Last;
}, function (dictOrd) {
    return Data_Ord.compare(ordLast(dictOrd));
});
var boundedLast = function (dictBounded) {
    return dictBounded;
};
var applyLast = new Control_Apply.Apply(function () {
    return functorLast;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindLast = new Control_Bind.Bind(function () {
    return applyLast;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeLast = new Control_Applicative.Applicative(function () {
    return applyLast;
}, Last);
var monadLast = new Control_Monad.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last,
    eqLast: eqLast,
    eq1Last: eq1Last,
    ordLast: ordLast,
    ord1Last: ord1Last,
    boundedLast: boundedLast,
    showLast: showLast,
    functorLast: functorLast,
    applyLast: applyLast,
    applicativeLast: applicativeLast,
    bindLast: bindLast,
    monadLast: monadLast,
    semigroupLast: semigroupLast
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],219:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
    this.Foldable10 = Foldable10;
    this.Traversable1 = Traversable1;
    this.sequence1 = sequence1;
    this.traverse1 = traverse1;
};
var traverse1 = function (dict) {
    return dict.traverse1;
};
var sequence1Default = function (dictTraversable1) {
    return function (dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableDual = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApply) {
    return sequence1Default(traversableDual)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableMultiplicative = new Traversable1(function () {
    return Data_Semigroup_Foldable.foldableMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApply) {
    return sequence1Default(traversableMultiplicative)(dictApply);
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var sequence1 = function (dict) {
    return dict.sequence1;
};
var traverse1Default = function (dictTraversable1) {
    return function (dictApply) {
        return function (f) {
            return function (ta) {
                return sequence1(dictTraversable1)(dictApply)(Data_Functor.map((dictTraversable1.Traversable1()).Functor0())(f)(ta));
            };
        };
    };
};
module.exports = {
    sequence1: sequence1,
    traverse1: traverse1,
    Traversable1: Traversable1,
    traverse1Default: traverse1Default,
    sequence1Default: sequence1Default,
    traversableDual: traversableDual,
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Category/index.js":24,"../Data.Functor/index.js":143,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Multiplicative/index.js":194,"../Data.Semigroup.Foldable/index.js":217,"../Data.Traversable/index.js":248}],220:[function(require,module,exports){
"use strict";

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    if (xs.length === 0) return ys;
    if (ys.length === 0) return xs;
    return xs.concat(ys);
  };
};

},{}],221:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemigroupRecord = function (appendRecord) {
    this.appendRecord = appendRecord;
};
var Semigroup = function (append) {
    this.append = append;
};
var semigroupVoid = new Semigroup(function (v) {
    return Data_Void.absurd;
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupRecordNil = new SemigroupRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var appendRecord = function (dict) {
    return dict.appendRecord;
};
var semigroupRecord = function (dictRowToList) {
    return function (dictSemigroupRecord) {
        return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
    };
};
var append = function (dict) {
    return dict.append;
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return append(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var semigroupRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemigroupRecord) {
            return function (dictSemigroup) {
                return new SemigroupRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                        };
                    };
                });
            };
        };
    };
};
module.exports = {
    Semigroup: Semigroup,
    append: append,
    SemigroupRecord: SemigroupRecord,
    appendRecord: appendRecord,
    semigroupString: semigroupString,
    semigroupUnit: semigroupUnit,
    semigroupVoid: semigroupVoid,
    semigroupFn: semigroupFn,
    semigroupArray: semigroupArray,
    semigroupRecord: semigroupRecord,
    semigroupRecordNil: semigroupRecordNil,
    semigroupRecordCons: semigroupRecordCons
};

},{"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Data.Void/index.js":260,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"./foreign.js":220}],222:[function(require,module,exports){
"use strict";

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

},{}],223:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
    this.addRecord = addRecord;
    this.mulRecord = mulRecord;
    this.oneRecord = oneRecord;
    this.zeroRecord = zeroRecord;
};
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var zeroRecord = function (dict) {
    return dict.zeroRecord;
};
var zero = function (dict) {
    return dict.zero;
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, function (v) {
    return function (v1) {
        return Data_Unit.unit;
    };
}, Data_Unit.unit, Data_Unit.unit);
var semiringRecordNil = new SemiringRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return {};
        };
    };
}, function (v) {
    return function (v1) {
        return {};
    };
}, function (v) {
    return function (v1) {
        return {};
    };
});
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var oneRecord = function (dict) {
    return dict.oneRecord;
};
var one = function (dict) {
    return dict.one;
};
var mulRecord = function (dict) {
    return dict.mulRecord;
};
var mul = function (dict) {
    return dict.mul;
};
var addRecord = function (dict) {
    return dict.addRecord;
};
var semiringRecord = function (dictRowToList) {
    return function (dictSemiringRecord) {
        return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
    };
};
var add = function (dict) {
    return dict.add;
};
var semiringFn = function (dictSemiring) {
    return new Semiring(function (f) {
        return function (g) {
            return function (x) {
                return add(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (f) {
        return function (g) {
            return function (x) {
                return mul(dictSemiring)(f(x))(g(x));
            };
        };
    }, function (v) {
        return one(dictSemiring);
    }, function (v) {
        return zero(dictSemiring);
    });
};
var semiringRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictSemiringRecord) {
            return function (dictSemiring) {
                return new SemiringRecord(function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (ra) {
                        return function (rb) {
                            var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                            var insert = Record_Unsafe.unsafeSet(key);
                            var get = Record_Unsafe.unsafeGet(key);
                            return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                        };
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(one(dictSemiring))(tail);
                    };
                }, function (v) {
                    return function (v1) {
                        var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                        var insert = Record_Unsafe.unsafeSet(key);
                        return insert(zero(dictSemiring))(tail);
                    };
                });
            };
        };
    };
};
module.exports = {
    Semiring: Semiring,
    add: add,
    zero: zero,
    mul: mul,
    one: one,
    SemiringRecord: SemiringRecord,
    addRecord: addRecord,
    mulRecord: mulRecord,
    oneRecord: oneRecord,
    zeroRecord: zeroRecord,
    semiringInt: semiringInt,
    semiringNumber: semiringNumber,
    semiringFn: semiringFn,
    semiringUnit: semiringUnit,
    semiringRecord: semiringRecord,
    semiringRecordNil: semiringRecordNil,
    semiringRecordCons: semiringRecordCons
};

},{"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Record.Unsafe/index.js":384,"../Type.Data.Row/index.js":386,"../Type.Data.RowList/index.js":387,"./foreign.js":222}],224:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var $$Set = function (x) {
    return x;
};
var union = function (dictOrd) {
    return function (v) {
        return function (v1) {
            return Data_Map_Internal.union(dictOrd)(v)(v1);
        };
    };
};
var toList = function (v) {
    return Data_Map_Internal.keys(v);
};
var toUnfoldable = function (dictUnfoldable) {
    var $64 = Data_List.toUnfoldable(dictUnfoldable);
    return function ($65) {
        return $64(toList($65));
    };
};
var size = function (v) {
    return Data_Map_Internal.size(v);
};
var singleton = function (a) {
    return Data_Map_Internal.singleton(a)(Data_Unit.unit);
};
var showSet = function (dictShow) {
    return new Data_Show.Show(function (s) {
        return "(fromFoldable " + (Data_Show.show(Data_List_Types.showList(dictShow))(toList(s)) + ")");
    });
};
var semigroupSet = function (dictOrd) {
    return new Data_Semigroup.Semigroup(union(dictOrd));
};
var member = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal.member(dictOrd)(a)(v);
        };
    };
};
var isEmpty = function (v) {
    return Data_Map_Internal.isEmpty(v);
};
var insert = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
        };
    };
};
var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        var $66 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
        return function ($67) {
            return $66(toList($67));
        };
    };
}, function (f) {
    return function (x) {
        var $68 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
        return function ($69) {
            return $68(toList($69));
        };
    };
}, function (f) {
    return function (x) {
        var $70 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
        return function ($71) {
            return $70(toList($71));
        };
    };
});
var findMin = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return v1.key;
    })(Data_Map_Internal.findMin(v));
};
var findMax = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
        return v1.key;
    })(Data_Map_Internal.findMax(v));
};
var filter = function (dictOrd) {
    return function (f) {
        return function (v) {
            return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
                return function (v1) {
                    return f(k);
                };
            })(v);
        };
    };
};
var eqSet = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
        };
    });
};
var ordSet = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqSet(dictOrd.Eq0());
    }, function (s1) {
        return function (s2) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
        };
    });
};
var eq1Set = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqSet(dictEq));
});
var ord1Set = new Data_Ord.Ord1(function () {
    return eq1Set;
}, function (dictOrd) {
    return Data_Ord.compare(ordSet(dictOrd));
});
var empty = Data_Map_Internal.empty;
var fromFoldable = function (dictFoldable) {
    return function (dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (a) {
                return insert(dictOrd)(a)(m);
            };
        })(empty);
    };
};
var intersection = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            var toArray = (function () {
                var $72 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                return function ($73) {
                    return $72(toList($73));
                };
            })();
            var rs = toArray(s2);
            var rl = Data_Array.length(rs);
            var ls = toArray(s1);
            var ll = Data_Array.length(ls);
            var intersect = function (acc) {
                var go = function (l) {
                    return function (r) {
                        var $59 = l < ll && r < rl;
                        if ($59) {
                            var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                            if (v instanceof Data_Ordering.EQ) {
                                return function __do() {
                                    var v1 = Data_Array_ST.push(ls[l])(acc)();
                                    return new Control_Monad_Rec_Class.Loop({
                                        a: l + 1 | 0,
                                        b: r + 1 | 0
                                    });
                                };
                            };
                            if (v instanceof Data_Ordering.LT) {
                                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                    a: l + 1 | 0,
                                    b: r
                                }));
                            };
                            if (v instanceof Data_Ordering.GT) {
                                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                    a: l,
                                    b: r + 1 | 0
                                }));
                            };
                            throw new Error("Failed pattern match at Data.Set (line 176, column 12 - line 181, column 43): " + [ v.constructor.name ]);
                        };
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
            };
            return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(intersect))(Data_Array_ST.unsafeFreeze)());
        };
    };
};
var map = function (dictOrd) {
    return function (f) {
        return Data_Foldable.foldl(foldableSet)(function (m) {
            return function (a) {
                return insert(dictOrd)(f(a))(m);
            };
        })(empty);
    };
};
var mapMaybe = function (dictOrd) {
    return function (f) {
        return Data_Foldable.foldr(foldableSet)(function (a) {
            return function (acc) {
                return Data_Maybe.maybe(acc)(function (b) {
                    return insert(dictOrd)(b)(acc);
                })(f(a));
            };
        })(empty);
    };
};
var monoidSet = function (dictOrd) {
    return new Data_Monoid.Monoid(function () {
        return semigroupSet(dictOrd);
    }, empty);
};
var unions = function (dictFoldable) {
    return function (dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
    };
};
var $$delete = function (dictOrd) {
    return function (a) {
        return function (v) {
            return Data_Map_Internal["delete"](dictOrd)(a)(v);
        };
    };
};
var difference = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
        };
    };
};
var subset = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return isEmpty(difference(dictOrd)(s1)(s2));
        };
    };
};
var properSubset = function (dictOrd) {
    return function (s1) {
        return function (s2) {
            return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
        };
    };
};
var checkValid = function (v) {
    return Data_Map_Internal.checkValid(v);
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    empty: empty,
    isEmpty: isEmpty,
    singleton: singleton,
    map: map,
    checkValid: checkValid,
    insert: insert,
    member: member,
    "delete": $$delete,
    size: size,
    findMin: findMin,
    findMax: findMax,
    union: union,
    unions: unions,
    difference: difference,
    subset: subset,
    properSubset: properSubset,
    intersection: intersection,
    filter: filter,
    mapMaybe: mapMaybe,
    eqSet: eqSet,
    eq1Set: eq1Set,
    showSet: showSet,
    ordSet: ordSet,
    ord1Set: ord1Set,
    monoidSet: monoidSet,
    semigroupSet: semigroupSet,
    foldableSet: foldableSet
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.ST.Internal/index.js":52,"../Data.Array.ST/index.js":89,"../Data.Array/index.js":91,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Unit/index.js":257}],225:[function(require,module,exports){
"use strict";

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
    function (c, i) {
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

exports.cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

exports.join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};

},{}],226:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ShowRecordFields = function (showRecordFields) {
    this.showRecordFields = showRecordFields;
};
var Show = function (show) {
    this.show = show;
};
var showString = new Show($foreign.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
    return function (v1) {
        return [  ];
    };
});
var showRecordFields = function (dict) {
    return dict.showRecordFields;
};
var showRecord = function (dictRowToList) {
    return function (dictShowRecordFields) {
        return new Show(function (record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
            if (v.length === 0) {
                return "{}";
            };
            return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
        });
    };
};
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var showRecordFieldsCons = function (dictIsSymbol) {
    return function (dictShowRecordFields) {
        return function (dictShow) {
            return new ShowRecordFields(function (v) {
                return function (record) {
                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var focus = Record_Unsafe.unsafeGet(key)(record);
                    return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                };
            });
        };
    };
};
module.exports = {
    Show: Show,
    show: show,
    ShowRecordFields: ShowRecordFields,
    showRecordFields: showRecordFields,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray,
    showRecord: showRecord,
    showRecordFieldsNil: showRecordFieldsNil,
    showRecordFieldsCons: showRecordFieldsCons
};

},{"../Data.Symbol/index.js":240,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"./foreign.js":225}],227:[function(require,module,exports){
"use strict";
/* global Symbol */

var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator =
  typeof Symbol !== "undefined" &&
  Symbol != null &&
  typeof Symbol.iterator !== "undefined" &&
  typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";

exports._unsafeCodePointAt0 = function (fallback) {
  return hasCodePointAt
    ? function (str) { return str.codePointAt(0); }
    : fallback;
};

exports._codePointAt = function (fallback) {
  return function (Just) {
    return function (Nothing) {
      return function (unsafeCodePointAt0) {
        return function (index) {
          return function (str) {
            var length = str.length;
            if (index < 0 || index >= length) return Nothing;
            if (hasStringIterator) {
              var iter = str[Symbol.iterator]();
              for (var i = index;; --i) {
                var o = iter.next();
                if (o.done) return Nothing;
                if (i === 0) return Just(unsafeCodePointAt0(o.value));
              }
            }
            return fallback(index)(str);
          };
        };
      };
    };
  };
};

exports._countPrefix = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasStringIterator) {
      return function (pred) {
        return function (str) {
          var iter = str[Symbol.iterator]();
          for (var cpCount = 0; ; ++cpCount) {
            var o = iter.next();
            if (o.done) return cpCount;
            var cp = unsafeCodePointAt0(o.value);
            if (!pred(cp)) return cpCount;
          }
        };
      };
    }
    return fallback;
  };
};

exports._fromCodePointArray = function (singleton) {
  return hasFromCodePoint
    ? function (cps) {
      // Function.prototype.apply will fail for very large second parameters,
      // so we don't use it for arrays with 10,000 or more entries.
      if (cps.length < 10e3) {
        return String.fromCodePoint.apply(String, cps);
      }
      return cps.map(singleton).join("");
    }
    : function (cps) {
      return cps.map(singleton).join("");
    };
};

exports._singleton = function (fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};

exports._take = function (fallback) {
  return function (n) {
    if (hasStringIterator) {
      return function (str) {
        var accum = "";
        var iter = str[Symbol.iterator]();
        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done) return accum;
          accum += o.value;
        }
        return accum;
      };
    }
    return fallback(n);
  };
};

exports._toCodePointArray = function (fallback) {
  return function (unsafeCodePointAt0) {
    if (hasArrayFrom) {
      return function (str) {
        return Array.from(str, unsafeCodePointAt0);
      };
    }
    return fallback;
  };
};

},{}],228:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var CodePoint = function (x) {
    return x;
};
var unsurrogate = function (lead) {
    return function (trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
};
var showCodePoint = new Data_Show.Show(function (v) {
    return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
});
var isTrail = function (cu) {
    return 56320 <= cu && cu <= 57343;
};
var isLead = function (cu) {
    return 55296 <= cu && cu <= 56319;
};
var uncons = function (s) {
    var v = Data_String_CodeUnits.length(s);
    if (v === 0) {
        return Data_Maybe.Nothing.value;
    };
    if (v === 1) {
        return new Data_Maybe.Just({
            head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
            tail: ""
        });
    };
    var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $21 = isLead(cu0) && isTrail(cu1);
    if ($21) {
        return new Data_Maybe.Just({
            head: unsurrogate(cu0)(cu1),
            tail: Data_String_CodeUnits.drop(2)(s)
        });
    };
    return new Data_Maybe.Just({
        head: cu0,
        tail: Data_String_CodeUnits.drop(1)(s)
    });
};
var unconsButWithTuple = function (s) {
    return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return new Data_Tuple.Tuple(v.head, v.tail);
    })(uncons(s));
};
var toCodePointArrayFallback = function (s) {
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
};
var unsafeCodePointAt0Fallback = function (s) {
    var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
    var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
    if ($25) {
        var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
        var $26 = isTrail(cu1);
        if ($26) {
            return unsurrogate(cu0)(cu1);
        };
        return cu0;
    };
    return cu0;
};
var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
var length = function ($52) {
    return Data_Array.length(toCodePointArray($52));
};
var lastIndexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.lastIndexOf(p)(s));
    };
};
var indexOf = function (p) {
    return function (s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
            return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.indexOf(p)(s));
    };
};
var fromCharCode = (function () {
    var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
    return function ($54) {
        return Data_String_CodeUnits.singleton($53($54));
    };
})();
var singletonFallback = function (v) {
    if (v <= 65535) {
        return fromCharCode(v);
    };
    var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode(lead) + fromCharCode(trail);
};
var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
var singleton = $foreign["_singleton"](singletonFallback);
var takeFallback = function (n) {
    return function (v) {
        if (n < 1) {
            return "";
        };
        var v1 = uncons(v);
        if (v1 instanceof Data_Maybe.Just) {
            return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
        };
        return v;
    };
};
var take = $foreign["_take"](takeFallback);
var lastIndexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var i$prime = Data_String_CodeUnits.length(take(i)(s));
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return length(Data_String_CodeUnits.take(k)(s));
            })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
        };
    };
};
var splitAt = function (i) {
    return function (s) {
        var before = take(i)(s);
        return {
            before: before,
            after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
        };
    };
};
var eqCodePoint = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordCodePoint = new Data_Ord.Ord(function () {
    return eqCodePoint;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var drop = function (n) {
    return function (s) {
        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
    };
};
var indexOf$prime = function (p) {
    return function (i) {
        return function (s) {
            var s$prime = drop(i)(s);
            return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
            })(Data_String_CodeUnits.indexOf(p)(s$prime));
        };
    };
};
var countTail = function ($copy_p) {
    return function ($copy_s) {
        return function ($copy_accum) {
            var $tco_var_p = $copy_p;
            var $tco_var_s = $copy_s;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(p, s, accum) {
                var v = uncons(s);
                if (v instanceof Data_Maybe.Just) {
                    var $39 = p(v.value0.head);
                    if ($39) {
                        $tco_var_p = p;
                        $tco_var_s = v.value0.tail;
                        $copy_accum = accum + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return accum;
                };
                $tco_done = true;
                return accum;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
            };
            return $tco_result;
        };
    };
};
var countFallback = function (p) {
    return function (s) {
        return countTail(p)(s)(0);
    };
};
var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
var dropWhile = function (p) {
    return function (s) {
        return drop(countPrefix(p)(s))(s);
    };
};
var takeWhile = function (p) {
    return function (s) {
        return take(countPrefix(p)(s))(s);
    };
};
var codePointFromChar = (function () {
    var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
    return function ($56) {
        return CodePoint($55($56));
    };
})();
var codePointAtFallback = function ($copy_n) {
    return function ($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
            var v = uncons(s);
            if (v instanceof Data_Maybe.Just) {
                var $44 = n === 0;
                if ($44) {
                    $tco_done = true;
                    return new Data_Maybe.Just(v.value0.head);
                };
                $tco_var_n = n - 1 | 0;
                $copy_s = v.value0.tail;
                return;
            };
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_n, $copy_s);
        };
        return $tco_result;
    };
};
var codePointAt = function (v) {
    return function (v1) {
        if (v < 0) {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0 && v1 === "") {
            return Data_Maybe.Nothing.value;
        };
        if (v === 0) {
            return new Data_Maybe.Just(unsafeCodePointAt0(v1));
        };
        return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
    };
};
var boundedCodePoint = new Data_Bounded.Bounded(function () {
    return ordCodePoint;
}, 0, 1114111);
var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
    return boundedCodePoint;
}, function () {
    return enumCodePoint;
}, 1114111 + 1 | 0, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 1114111) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
});
var enumCodePoint = new Data_Enum.Enum(function () {
    return ordCodePoint;
}, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
module.exports = {
    codePointFromChar: codePointFromChar,
    singleton: singleton,
    fromCodePointArray: fromCodePointArray,
    toCodePointArray: toCodePointArray,
    codePointAt: codePointAt,
    uncons: uncons,
    length: length,
    countPrefix: countPrefix,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    take: take,
    takeWhile: takeWhile,
    drop: drop,
    dropWhile: dropWhile,
    splitAt: splitAt,
    eqCodePoint: eqCodePoint,
    ordCodePoint: ordCodePoint,
    showCodePoint: showCodePoint,
    boundedCodePoint: boundedCodePoint,
    enumCodePoint: enumCodePoint,
    boundedEnumCodePoint: boundedEnumCodePoint
};

},{"../Data.Array/index.js":91,"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.EuclideanRing/index.js":125,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"../Data.String.CodeUnits/index.js":230,"../Data.String.Common/index.js":232,"../Data.String.Unsafe/index.js":238,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"./foreign.js":227}],229:[function(require,module,exports){
"use strict";

exports.fromCharArray = function (a) {
  return a.join("");
};

exports.toCharArray = function (s) {
  return s.split("");
};

exports.singleton = function (c) {
  return c;
};

exports._charAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};

exports._toChar = function (just) {
  return function (nothing) {
    return function (s) {
      return s.length === 1 ? just(s) : nothing;
    };
  };
};

exports.length = function (s) {
  return s.length;
};

exports.countPrefix = function (p) {
  return function (s) {
    var i = 0;
    while (i < s.length && p(s.charAt(i))) i++;
    return i;
  };
};

exports._indexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_indexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports._lastIndexOf = function (just) {
  return function (nothing) {
    return function (x) {
      return function (s) {
        var i = s.lastIndexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};

exports["_lastIndexOf'"] = function (just) {
  return function (nothing) {
    return function (x) {
      return function (startAt) {
        return function (s) {
          if (startAt < 0 || startAt > s.length) return nothing;
          var i = s.lastIndexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};

exports.take = function (n) {
  return function (s) {
    return s.substr(0, n);
  };
};

exports.drop = function (n) {
  return function (s) {
    return s.substring(n);
  };
};

exports._slice = function (b) {
  return function (e) {
    return function (s) {
      return s.slice(b,e);
    };
  };
};

exports.splitAt = function (i) {
  return function (s) {
    return { before: s.substring(0, i), after: s.substring(i) };
  };
};

},{}],230:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
    });
};
var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
    };
};
var takeRight = function (i) {
    return function (s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
    };
};
var slice = function (b) {
    return function (e) {
        return function (s) {
            var l = $foreign.length(s);
            var norm = function (x) {
                if (x < 0) {
                    return l + x | 0;
                };
                if (Data_Boolean.otherwise) {
                    return x;
                };
                throw new Error("Failed pattern match at Data.String.CodeUnits (line 314, column 5 - line 315, column 27): " + [ x.constructor.name ]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $7 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
            if ($7) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
        };
    };
};
var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripSuffix = function (v) {
    return function (str) {
        var v1 = lastIndexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
            return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var stripPrefix = function (v) {
    return function (str) {
        var v1 = indexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
            return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
        };
        return Data_Maybe.Nothing.value;
    };
};
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
    };
};
var dropRight = function (i) {
    return function (s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
    };
};
var contains = function (pat) {
    var $16 = indexOf(pat);
    return function ($17) {
        return Data_Maybe.isJust($16($17));
    };
};
var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    charAt: charAt,
    toChar: toChar,
    uncons: uncons,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    takeRight: takeRight,
    takeWhile: takeWhile,
    dropRight: dropRight,
    dropWhile: dropWhile,
    slice: slice,
    singleton: $foreign.singleton,
    fromCharArray: $foreign.fromCharArray,
    toCharArray: $foreign.toCharArray,
    length: $foreign.length,
    countPrefix: $foreign.countPrefix,
    take: $foreign.take,
    drop: $foreign.drop,
    splitAt: $foreign.splitAt
};

},{"../Data.Boolean/index.js":100,"../Data.Maybe/index.js":187,"../Data.String.Unsafe/index.js":238,"./foreign.js":229}],231:[function(require,module,exports){
"use strict";

exports._localeCompare = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (s1) {
        return function (s2) {
          var result = s1.localeCompare(s2);
          return result < 0 ? lt : result > 0 ? gt : eq;
        };
      };
    };
  };
};

exports.replace = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(s1, s2);
    };
  };
};

exports.replaceAll = function (s1) {
  return function (s2) {
    return function (s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
    };
  };
};

exports.split = function (sep) {
  return function (s) {
    return s.split(sep);
  };
};

exports.toLower = function (s) {
  return s.toLowerCase();
};

exports.toUpper = function (s) {
  return s.toUpperCase();
};

exports.trim = function (s) {
  return s.trim();
};

exports.joinWith = function (s) {
  return function (xs) {
    return xs.join(s);
  };
};

},{}],232:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var $$null = function (s) {
    return s === "";
};
var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
module.exports = {
    "null": $$null,
    localeCompare: localeCompare,
    replace: $foreign.replace,
    replaceAll: $foreign.replaceAll,
    split: $foreign.split,
    toLower: $foreign.toLower,
    toUpper: $foreign.toUpper,
    trim: $foreign.trim,
    joinWith: $foreign.joinWith
};

},{"../Data.Ordering/index.js":206,"./foreign.js":231}],233:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Gen = require("../Control.Monad.Gen/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Data_Char_Gen = require("../Data.Char.Gen/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var genString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return function (genChar) {
            return Control_Monad_Gen_Class.sized(dictMonadGen)(function (size) {
                return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(Control_Monad_Gen_Class.chooseInt(dictMonadGen)(1)(Data_Ord.max(Data_Ord.ordInt)(1)(size)))(function (v) {
                    return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Function["const"](v))(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_String_CodeUnits.fromCharArray)(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(genChar)));
                });
            });
        };
    };
};
var genUnicodeString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genUnicodeChar(dictMonadGen));
    };
};
var genDigitString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genDigitChar(dictMonadGen));
    };
};
var genAsciiString$prime = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen["genAsciiChar'"](dictMonadGen));
    };
};
var genAsciiString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAsciiChar(dictMonadGen));
    };
};
var genAlphaUppercaseString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaUppercase(dictMonadGen));
    };
};
var genAlphaString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlpha(dictMonadGen));
    };
};
var genAlphaLowercaseString = function (dictMonadRec) {
    return function (dictMonadGen) {
        return genString(dictMonadRec)(dictMonadGen)(Data_Char_Gen.genAlphaLowercase(dictMonadGen));
    };
};
module.exports = {
    genString: genString,
    genUnicodeString: genUnicodeString,
    genAsciiString: genAsciiString,
    "genAsciiString'": genAsciiString$prime,
    genDigitString: genDigitString,
    genAlphaString: genAlphaString,
    genAlphaLowercaseString: genAlphaLowercaseString,
    genAlphaUppercaseString: genAlphaUppercaseString
};

},{"../Control.Bind/index.js":23,"../Control.Monad.Gen.Class/index.js":43,"../Control.Monad.Gen/index.js":44,"../Data.Char.Gen/index.js":106,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Ord/index.js":205,"../Data.String.CodeUnits/index.js":230,"../Data.Unfoldable/index.js":253}],234:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var RegexFlags = (function () {
    function RegexFlags(value0) {
        this.value0 = value0;
    };
    RegexFlags.create = function (value0) {
        return new RegexFlags(value0);
    };
    return RegexFlags;
})();
var unicode = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: true
});
var sticky = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: true,
    unicode: false
});
var showRegexFlags = new Data_Show.Show(function (v) {
    var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
    var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
    if ($6) {
        return "noFlags";
    };
    return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
});
var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return new RegexFlags({
            global: v.value0.global || v1.value0.global,
            ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
            multiline: v.value0.multiline || v1.value0.multiline,
            sticky: v.value0.sticky || v1.value0.sticky,
            unicode: v.value0.unicode || v1.value0.unicode
        });
    };
});
var noFlags = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: false
});
var multiline = new RegexFlags({
    global: false,
    ignoreCase: false,
    multiline: true,
    sticky: false,
    unicode: false
});
var monoidRegexFlags = new Data_Monoid.Monoid(function () {
    return semigroupRegexFlags;
}, noFlags);
var ignoreCase = new RegexFlags({
    global: false,
    ignoreCase: true,
    multiline: false,
    sticky: false,
    unicode: false
});
var global = new RegexFlags({
    global: true,
    ignoreCase: false,
    multiline: false,
    sticky: false,
    unicode: false
});
var eqRegexFlags = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
    };
});
module.exports = {
    RegexFlags: RegexFlags,
    noFlags: noFlags,
    global: global,
    ignoreCase: ignoreCase,
    multiline: multiline,
    sticky: sticky,
    unicode: unicode,
    semigroupRegexFlags: semigroupRegexFlags,
    monoidRegexFlags: monoidRegexFlags,
    eqRegexFlags: eqRegexFlags,
    showRegexFlags: showRegexFlags
};

},{"../Control.MonadZero/index.js":62,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.String.Common/index.js":232}],235:[function(require,module,exports){
"use strict";

exports["showRegex'"] = function (r) {
  return "" + r;
};

exports["regex'"] = function (left) {
  return function (right) {
    return function (s1) {
      return function (s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};

exports.source = function (r) {
  return r.source;
};

exports["flags'"] = function (r) {
  return {
    multiline: r.multiline,
    ignoreCase: r.ignoreCase,
    global: r.global,
    sticky: !!r.sticky,
    unicode: !!r.unicode
  };
};

exports.test = function (r) {
  return function (s) {
    var lastIndex = r.lastIndex;
    var result = r.test(s);
    r.lastIndex = lastIndex;
    return result;
  };
};

exports._match = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var m = s.match(r);
        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i = 0; i < m.length; i++) {
            m[i] = m[i] == null ? nothing : just(m[i]);
          }
          return just(m);
        }
      };
    };
  };
};

exports.replace = function (r) {
  return function (s1) {
    return function (s2) {
      return s2.replace(r, s1);
    };
  };
};

exports["replace'"] = function (r) {
  return function (f) {
    return function (s2) {
      return s2.replace(r, function (match) {
        return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
      });
    };
  };
};

exports._search = function (just) {
  return function (nothing) {
    return function (r) {
      return function (s) {
        var result = s.search(r);
        return result === -1 ? nothing : just(result);
      };
    };
  };
};

exports.split = function (r) {
  return function (s) {
    return s.split(r);
  };
};

},{}],236:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var showRegex = new Data_Show.Show($foreign["showRegex'"]);
var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var renderFlags = function (v) {
    return (function () {
        if (v.value0.global) {
            return "g";
        };
        return "";
    })() + ((function () {
        if (v.value0.ignoreCase) {
            return "i";
        };
        return "";
    })() + ((function () {
        if (v.value0.multiline) {
            return "m";
        };
        return "";
    })() + ((function () {
        if (v.value0.sticky) {
            return "y";
        };
        return "";
    })() + (function () {
        if (v.value0.unicode) {
            return "u";
        };
        return "";
    })())));
};
var regex = function (s) {
    return function (f) {
        return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
    };
};
var parseFlags = function (s) {
    return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String_CodeUnits.contains("g")(s),
        ignoreCase: Data_String_CodeUnits.contains("i")(s),
        multiline: Data_String_CodeUnits.contains("m")(s),
        sticky: Data_String_CodeUnits.contains("y")(s),
        unicode: Data_String_CodeUnits.contains("u")(s)
    });
};
var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var flags = function ($8) {
    return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
};
module.exports = {
    regex: regex,
    flags: flags,
    renderFlags: renderFlags,
    parseFlags: parseFlags,
    match: match,
    search: search,
    showRegex: showRegex,
    source: $foreign.source,
    test: $foreign.test,
    replace: $foreign.replace,
    "replace'": $foreign["replace'"],
    split: $foreign.split
};

},{"../Data.Either/index.js":119,"../Data.Maybe/index.js":187,"../Data.Show/index.js":226,"../Data.String.CodeUnits/index.js":230,"../Data.String.Regex.Flags/index.js":234,"./foreign.js":235}],237:[function(require,module,exports){
"use strict";

exports.charAt = function (i) {
  return function (s) {
    if (i >= 0 && i < s.length) return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

exports.char = function (s) {
  if (s.length === 1) return s.charAt(0);
  throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
};

},{}],238:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    "char": $foreign["char"],
    charAt: $foreign.charAt
};

},{"./foreign.js":237}],239:[function(require,module,exports){
"use strict";

// module Data.Symbol

exports.unsafeCoerce = function (arg) {
  return arg;
};


},{}],240:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var SProxy = (function () {
    function SProxy() {

    };
    SProxy.value = new SProxy();
    return SProxy;
})();
var IsSymbol = function (reflectSymbol) {
    this.reflectSymbol = reflectSymbol;
};
var reifySymbol = function (s) {
    return function (f) {
        return $foreign.unsafeCoerce(function (dictIsSymbol) {
            return f(dictIsSymbol);
        })({
            reflectSymbol: function (v) {
                return s;
            }
        })(SProxy.value);
    };
};
var reflectSymbol = function (dict) {
    return dict.reflectSymbol;
};
module.exports = {
    IsSymbol: IsSymbol,
    reflectSymbol: reflectSymbol,
    reifySymbol: reifySymbol,
    SProxy: SProxy
};

},{"./foreign.js":239}],241:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var TacitString = function (x) {
    return x;
};
var showTacitString = new Data_Show.Show(function (v) {
    return v;
});
var newtypeTacitString = new Data_Newtype.Newtype(function (n) {
    return n;
}, TacitString);
var hush = TacitString;
var eqTacitString = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordTacitString = new Data_Ord.Ord(function () {
    return eqTacitString;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordString)(x)(y);
    };
});
module.exports = {
    hush: hush,
    newtypeTacitString: newtypeTacitString,
    eqTacitString: eqTacitString,
    ordTacitString: ordTacitString,
    showTacitString: showTacitString
};

},{"../Data.Eq/index.js":123,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Show/index.js":226}],242:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var This = (function () {
    function This(value0) {
        this.value0 = value0;
    };
    This.create = function (value0) {
        return new This(value0);
    };
    return This;
})();
var That = (function () {
    function That(value0) {
        this.value0 = value0;
    };
    That.create = function (value0) {
        return new That(value0);
    };
    return That;
})();
var Both = (function () {
    function Both(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Both.create = function (value0) {
        return function (value1) {
            return new Both(value0, value1);
        };
    };
    return Both;
})();
var thisOrBoth = function (a) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new This(a);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(a, v.value0);
        };
        throw new Error("Failed pattern match at Data.These (line 106, column 1 - line 106, column 52): " + [ a.constructor.name, v.constructor.name ]);
    };
};
var $$this = function (v) {
    if (v instanceof This) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var theseRight = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value1);
    };
    if (v instanceof That) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var theseLeft = function (v) {
    if (v instanceof Both) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof This) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var these = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v3 instanceof This) {
                    return v(v3.value0);
                };
                if (v3 instanceof That) {
                    return v1(v3.value0);
                };
                if (v3 instanceof Both) {
                    return v2(v3.value0)(v3.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 101, column 1 - line 101, column 79): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
            };
        };
    };
};
var thatOrBoth = function (b) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return new That(b);
        };
        if (v instanceof Data_Maybe.Just) {
            return new Both(v.value0, b);
        };
        throw new Error("Failed pattern match at Data.These (line 110, column 1 - line 110, column 52): " + [ b.constructor.name, v.constructor.name ]);
    };
};
var that = function (v) {
    if (v instanceof That) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var showThese = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof This) {
                return "(This " + (Data_Show.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof That) {
                return "(That " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            if (v instanceof Both) {
                return "(Both " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            };
            throw new Error("Failed pattern match at Data.These (line 96, column 1 - line 99, column 63): " + [ v.constructor.name ]);
        });
    };
};
var semigroupThese = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                if (v instanceof This && v1 instanceof This) {
                    return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                };
                if (v instanceof This && v1 instanceof That) {
                    return new Both(v.value0, v1.value0);
                };
                if (v instanceof This && v1 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
                };
                if (v instanceof That && v1 instanceof This) {
                    return new Both(v1.value0, v.value0);
                };
                if (v instanceof That && v1 instanceof That) {
                    return new That(Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value0));
                };
                if (v instanceof That && v1 instanceof Both) {
                    return new Both(v1.value0, Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value1));
                };
                if (v instanceof Both && v1 instanceof This) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1);
                };
                if (v instanceof Both && v1 instanceof That) {
                    return new Both(v.value0, Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value0));
                };
                if (v instanceof Both && v1 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.These (line 21, column 1 - line 30, column 56): " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var maybeThese = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new This(v.value0));
        };
        if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new That(v1.value0));
        };
        if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(new Both(v.value0, v1.value0));
        };
        if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Data.These (line 116, column 14 - line 120, column 30): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var functorThese = new Data_Functor.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Both) {
            return new Both(v1.value0, v(v1.value1));
        };
        if (v1 instanceof That) {
            return new That(v(v1.value0));
        };
        if (v1 instanceof This) {
            return new This(v1.value0);
        };
        throw new Error("Failed pattern match at Data.These (line 32, column 1 - line 35, column 26): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var invariantThese = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorThese));
var fromThese = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof This) {
                return new Data_Tuple.Tuple(v2.value0, v1);
            };
            if (v2 instanceof That) {
                return new Data_Tuple.Tuple(v, v2.value0);
            };
            if (v2 instanceof Both) {
                return new Data_Tuple.Tuple(v2.value0, v2.value1);
            };
            throw new Error("Failed pattern match at Data.These (line 122, column 1 - line 122, column 58): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var foldableThese = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        var $241 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f);
        return function ($242) {
            return $241(theseRight($242));
        };
    };
}, function (f) {
    return function (z) {
        var $243 = Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(z);
        return function ($244) {
            return $243(theseRight($244));
        };
    };
}, function (f) {
    return function (z) {
        var $245 = Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(z);
        return function ($246) {
            return $245(theseRight($246));
        };
    };
});
var traversableThese = new Data_Traversable.Traversable(function () {
    return foldableThese;
}, function () {
    return functorThese;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof This) {
            return Control_Applicative.pure(dictApplicative)(new This(v.value0));
        };
        if (v instanceof That) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v.value0);
        };
        if (v instanceof Both) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create(v.value0))(v.value1);
        };
        throw new Error("Failed pattern match at Data.These (line 45, column 1 - line 51, column 37): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof This) {
                return Control_Applicative.pure(dictApplicative)(new This(v1.value0));
            };
            if (v1 instanceof That) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v(v1.value0));
            };
            if (v1 instanceof Both) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create(v1.value0))(v(v1.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 45, column 1 - line 51, column 37): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorThese;
}, function (v) {
    return function (v1) {
        if (v1 instanceof This) {
            return new This(v1.value0);
        };
        return Data_Functor.map(functorThese)(Data_Function["const"](v(v1)))(v1);
    };
});
var eqThese = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof This && y instanceof This) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof That && y instanceof That) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                if (x instanceof Both && y instanceof Both) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                };
                return false;
            };
        });
    };
};
var ordThese = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqThese(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                if (x instanceof This && y instanceof This) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof This) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof This) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof That && y instanceof That) {
                    return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                };
                if (x instanceof That) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof That) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Both && y instanceof Both) {
                    var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 19, column 1 - line 19, column 62): " + [ x.constructor.name, y.constructor.name ]);
            };
        });
    };
};
var bifunctorThese = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof This) {
                return new This(v(v2.value0));
            };
            if (v2 instanceof That) {
                return new That(v1(v2.value0));
            };
            if (v2 instanceof Both) {
                return new Both(v(v2.value0), v1(v2.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 53, column 1 - line 56, column 42): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableThese = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return these(f)(g)(function (x) {
                return function (y) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(g(y));
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(function (v) {
                return f(z)(v);
            })(function (v) {
                return g(z)(v);
            })(function (x) {
                return function (y) {
                    return g(f(z)(x))(y);
                };
            });
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return these(function (v) {
                return f(v)(z);
            })(function (v) {
                return g(v)(z);
            })(function (x) {
                return function (y) {
                    return f(x)(g(y)(z));
                };
            });
        };
    };
});
var bitraversableThese = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableThese;
}, function () {
    return bifunctorThese;
}, function (dictApplicative) {
    return Data_Bitraversable.bitraverse(bitraversableThese)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof This) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(This.create)(v(v2.value0));
                };
                if (v2 instanceof That) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(That.create)(v1(v2.value0));
                };
                if (v2 instanceof Both) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Both.create)(v(v2.value0)))(v1(v2.value1));
                };
                throw new Error("Failed pattern match at Data.These (line 63, column 1 - line 67, column 44): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyThese = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorThese;
    }, function (v) {
        return function (v1) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That && v1 instanceof This) {
                return new This(v1.value0);
            };
            if (v instanceof That && v1 instanceof That) {
                return new That(v.value0(v1.value0));
            };
            if (v instanceof That && v1 instanceof Both) {
                return new Both(v1.value0, v.value0(v1.value1));
            };
            if (v instanceof Both && v1 instanceof This) {
                return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            };
            if (v instanceof Both && v1 instanceof That) {
                return new Both(v.value0, v.value1(v1.value0));
            };
            if (v instanceof Both && v1 instanceof Both) {
                return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
            };
            throw new Error("Failed pattern match at Data.These (line 69, column 1 - line 76, column 52): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var bindThese = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyThese(dictSemigroup);
    }, function (v) {
        return function (v1) {
            if (v instanceof This) {
                return new This(v.value0);
            };
            if (v instanceof That) {
                return v1(v.value0);
            };
            if (v instanceof Both) {
                var v2 = v1(v.value1);
                if (v2 instanceof This) {
                    return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v2.value0));
                };
                if (v2 instanceof That) {
                    return new Both(v.value0, v2.value0);
                };
                if (v2 instanceof Both) {
                    return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v2.value0), v2.value1);
                };
                throw new Error("Failed pattern match at Data.These (line 85, column 5 - line 88, column 34): " + [ v2.constructor.name ]);
            };
            throw new Error("Failed pattern match at Data.These (line 81, column 1 - line 88, column 34): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var applicativeThese = function (dictSemigroup) {
    return new Control_Applicative.Applicative(function () {
        return applyThese(dictSemigroup);
    }, That.create);
};
var monadThese = function (dictSemigroup) {
    return new Control_Monad.Monad(function () {
        return applicativeThese(dictSemigroup);
    }, function () {
        return bindThese(dictSemigroup);
    });
};
module.exports = {
    This: This,
    That: That,
    Both: Both,
    these: these,
    thisOrBoth: thisOrBoth,
    thatOrBoth: thatOrBoth,
    maybeThese: maybeThese,
    fromThese: fromThese,
    theseLeft: theseLeft,
    theseRight: theseRight,
    "this": $$this,
    that: that,
    eqThese: eqThese,
    ordThese: ordThese,
    semigroupThese: semigroupThese,
    functorThese: functorThese,
    invariantThese: invariantThese,
    foldableThese: foldableThese,
    traversableThese: traversableThese,
    bifunctorThese: bifunctorThese,
    bifoldableThese: bifoldableThese,
    bitraversableThese: bitraversableThese,
    applyThese: applyThese,
    applicativeThese: applicativeThese,
    bindThese: bindThese,
    monadThese: monadThese,
    extendEither: extendEither,
    showThese: showThese
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor/index.js":98,"../Data.Bitraversable/index.js":99,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251}],243:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Second = function (x) {
    return x;
};
var Minute = function (x) {
    return x;
};
var Millisecond = function (x) {
    return x;
};
var Hour = function (x) {
    return x;
};
var showSecond = new Data_Show.Show(function (v) {
    return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMinute = new Data_Show.Show(function (v) {
    return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showMillisecond = new Data_Show.Show(function (v) {
    return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var showHour = new Data_Show.Show(function (v) {
    return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var ordSecond = Data_Ord.ordInt;
var ordMinute = Data_Ord.ordInt;
var ordMillisecond = Data_Ord.ordInt;
var ordHour = Data_Ord.ordInt;
var eqSecond = Data_Eq.eqInt;
var eqMinute = Data_Eq.eqInt;
var eqMillisecond = Data_Eq.eqInt;
var eqHour = Data_Eq.eqInt;
var boundedSecond = new Data_Bounded.Bounded(function () {
    return ordSecond;
}, 0, 59);
var boundedMinute = new Data_Bounded.Bounded(function () {
    return ordMinute;
}, 0, 59);
var boundedMillisecond = new Data_Bounded.Bounded(function () {
    return ordMillisecond;
}, 0, 999);
var boundedHour = new Data_Bounded.Bounded(function () {
    return ordHour;
}, 0, 23);
var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
    return boundedSecond;
}, function () {
    return enumSecond;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
});
var enumSecond = new Data_Enum.Enum(function () {
    return ordSecond;
}, (function () {
    var $28 = Data_Enum.toEnum(boundedEnumSecond);
    var $29 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($30) {
        return $28((function (v) {
            return v - 1 | 0;
        })($29($30)));
    };
})(), (function () {
    var $31 = Data_Enum.toEnum(boundedEnumSecond);
    var $32 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($33) {
        return $31((function (v) {
            return v + 1 | 0;
        })($32($33)));
    };
})());
var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
    return boundedMinute;
}, function () {
    return enumMinute;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
});
var enumMinute = new Data_Enum.Enum(function () {
    return ordMinute;
}, (function () {
    var $34 = Data_Enum.toEnum(boundedEnumMinute);
    var $35 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($36) {
        return $34((function (v) {
            return v - 1 | 0;
        })($35($36)));
    };
})(), (function () {
    var $37 = Data_Enum.toEnum(boundedEnumMinute);
    var $38 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($39) {
        return $37((function (v) {
            return v + 1 | 0;
        })($38($39)));
    };
})());
var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
    return boundedMillisecond;
}, function () {
    return enumMillisecond;
}, 1000, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 999) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
});
var enumMillisecond = new Data_Enum.Enum(function () {
    return ordMillisecond;
}, (function () {
    var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($42) {
        return $40((function (v) {
            return v - 1 | 0;
        })($41($42)));
    };
})(), (function () {
    var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($45) {
        return $43((function (v) {
            return v + 1 | 0;
        })($44($45)));
    };
})());
var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
    return boundedHour;
}, function () {
    return enumHour;
}, 24, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 23) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
});
var enumHour = new Data_Enum.Enum(function () {
    return ordHour;
}, (function () {
    var $46 = Data_Enum.toEnum(boundedEnumHour);
    var $47 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($48) {
        return $46((function (v) {
            return v - 1 | 0;
        })($47($48)));
    };
})(), (function () {
    var $49 = Data_Enum.toEnum(boundedEnumHour);
    var $50 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($51) {
        return $49((function (v) {
            return v + 1 | 0;
        })($50($51)));
    };
})());
module.exports = {
    eqHour: eqHour,
    ordHour: ordHour,
    boundedHour: boundedHour,
    enumHour: enumHour,
    boundedEnumHour: boundedEnumHour,
    showHour: showHour,
    eqMinute: eqMinute,
    ordMinute: ordMinute,
    boundedMinute: boundedMinute,
    enumMinute: enumMinute,
    boundedEnumMinute: boundedEnumMinute,
    showMinute: showMinute,
    eqSecond: eqSecond,
    ordSecond: ordSecond,
    boundedSecond: boundedSecond,
    enumSecond: enumSecond,
    boundedEnumSecond: boundedEnumSecond,
    showSecond: showSecond,
    eqMillisecond: eqMillisecond,
    ordMillisecond: ordMillisecond,
    boundedMillisecond: boundedMillisecond,
    enumMillisecond: enumMillisecond,
    boundedEnumMillisecond: boundedEnumMillisecond,
    showMillisecond: showMillisecond
};

},{"../Data.Boolean/index.js":100,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Show/index.js":226}],244:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Seconds = function (x) {
    return x;
};
var Minutes = function (x) {
    return x;
};
var Milliseconds = function (x) {
    return x;
};
var Hours = function (x) {
    return x;
};
var Days = function (x) {
    return x;
};
var Duration = function (fromDuration, toDuration) {
    this.fromDuration = fromDuration;
    this.toDuration = toDuration;
};
var toDuration = function (dict) {
    return dict.toDuration;
};
var showSeconds = new Data_Show.Show(function (v) {
    return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMinutes = new Data_Show.Show(function (v) {
    return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showMilliseconds = new Data_Show.Show(function (v) {
    return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showHours = new Data_Show.Show(function (v) {
    return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var showDays = new Data_Show.Show(function (v) {
    return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
});
var semigroupSeconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMinutes = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupMilliseconds = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupHours = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var semigroupDays = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return v + v1;
    };
});
var ordSeconds = Data_Ord.ordNumber;
var ordMinutes = Data_Ord.ordNumber;
var ordMilliseconds = Data_Ord.ordNumber;
var ordHours = Data_Ord.ordNumber;
var ordDays = Data_Ord.ordNumber;
var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Seconds);
var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
    return n;
}, Minutes);
var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
    return n;
}, Milliseconds);
var newtypeHours = new Data_Newtype.Newtype(function (n) {
    return n;
}, Hours);
var newtypeDays = new Data_Newtype.Newtype(function (n) {
    return n;
}, Days);
var monoidSeconds = new Data_Monoid.Monoid(function () {
    return semigroupSeconds;
}, 0.0);
var monoidMinutes = new Data_Monoid.Monoid(function () {
    return semigroupMinutes;
}, 0.0);
var monoidMilliseconds = new Data_Monoid.Monoid(function () {
    return semigroupMilliseconds;
}, 0.0);
var monoidHours = new Data_Monoid.Monoid(function () {
    return semigroupHours;
}, 0.0);
var monoidDays = new Data_Monoid.Monoid(function () {
    return semigroupDays;
}, 0.0);
var fromDuration = function (dict) {
    return dict.fromDuration;
};
var negateDuration = function (dictDuration) {
    var $56 = toDuration(dictDuration);
    var $57 = Data_Newtype.over(newtypeMilliseconds)(newtypeMilliseconds)(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
    var $58 = fromDuration(dictDuration);
    return function ($59) {
        return $56($57($58($59)));
    };
};
var eqSeconds = Data_Eq.eqNumber;
var eqMinutes = Data_Eq.eqNumber;
var eqMilliseconds = Data_Eq.eqNumber;
var eqHours = Data_Eq.eqNumber;
var eqDays = Data_Eq.eqNumber;
var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
    return v * 1000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
    return v / 1000.0;
}));
var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
    return v * 60000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
    return v / 60000.0;
}));
var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
    return v * 3600000.0;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
    return v / 3600000.0;
}));
var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
    return v * 8.64e7;
}), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
    return v / 8.64e7;
}));
var convertDuration = function (dictDuration) {
    return function (dictDuration1) {
        var $60 = toDuration(dictDuration1);
        var $61 = fromDuration(dictDuration);
        return function ($62) {
            return $60($61($62));
        };
    };
};
module.exports = {
    fromDuration: fromDuration,
    toDuration: toDuration,
    Milliseconds: Milliseconds,
    Seconds: Seconds,
    Minutes: Minutes,
    Hours: Hours,
    Days: Days,
    Duration: Duration,
    convertDuration: convertDuration,
    negateDuration: negateDuration,
    newtypeMilliseconds: newtypeMilliseconds,
    eqMilliseconds: eqMilliseconds,
    ordMilliseconds: ordMilliseconds,
    semigroupMilliseconds: semigroupMilliseconds,
    monoidMilliseconds: monoidMilliseconds,
    showMilliseconds: showMilliseconds,
    newtypeSeconds: newtypeSeconds,
    eqSeconds: eqSeconds,
    ordSeconds: ordSeconds,
    semigroupSeconds: semigroupSeconds,
    monoidSeconds: monoidSeconds,
    showSeconds: showSeconds,
    newtypeMinutes: newtypeMinutes,
    eqMinutes: eqMinutes,
    ordMinutes: ordMinutes,
    semigroupMinutes: semigroupMinutes,
    monoidMinutes: monoidMinutes,
    showMinutes: showMinutes,
    newtypeHours: newtypeHours,
    eqHours: eqHours,
    ordHours: ordHours,
    semigroupHours: semigroupHours,
    monoidHours: monoidHours,
    showHours: showHours,
    newtypeDays: newtypeDays,
    eqDays: eqDays,
    ordDays: ordDays,
    semigroupDays: semigroupDays,
    monoidDays: monoidDays,
    showDays: showDays,
    durationMilliseconds: durationMilliseconds,
    durationSeconds: durationSeconds,
    durationMinutes: durationMinutes,
    durationHours: durationHours,
    durationDays: durationDays
};

},{"../Control.Category/index.js":24,"../Data.Eq/index.js":123,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ring/index.js":215,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226}],245:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Component = require("../Data.Time.Component/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var $$Math = require("../Math/index.js");
var Time = (function () {
    function Time(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Time.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Time(value0, value1, value2, value3);
                };
            };
        };
    };
    return Time;
})();
var showTime = new Data_Show.Show(function (v) {
    return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
});
var setSecond = function (s) {
    return function (v) {
        return new Time(v.value0, v.value1, s, v.value3);
    };
};
var setMinute = function (m) {
    return function (v) {
        return new Time(v.value0, m, v.value2, v.value3);
    };
};
var setMillisecond = function (ms) {
    return function (v) {
        return new Time(v.value0, v.value1, v.value2, ms);
    };
};
var setHour = function (h) {
    return function (v) {
        return new Time(h, v.value1, v.value2, v.value3);
    };
};
var second = function (v) {
    return v.value2;
};
var minute = function (v) {
    return v.value1;
};
var millisecond = function (v) {
    return v.value3;
};
var millisToTime = function (v) {
    var hours = $$Math.floor(v / 3600000.0);
    var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
    var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
    var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
    return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
};
var hour = function (v) {
    return v.value0;
};
var timeToMillis = function (t) {
    return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
};
var eqTime = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
    };
});
var ordTime = new Data_Ord.Ord(function () {
    return eqTime;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
        if (v2 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v2 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
    };
});
var diff = function (dictDuration) {
    return function (t1) {
        return function (t2) {
            return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
        };
    };
};
var boundedTime = new Data_Bounded.Bounded(function () {
    return ordTime;
}, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
var adjust = function (dictDuration) {
    return function (d) {
        return function (t) {
            var tLength = timeToMillis(t);
            var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
            var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
            var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
            var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
            var wrap = (function () {
                var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                if ($112) {
                    return 1.0;
                };
                var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
                if ($113) {
                    return -1.0;
                };
                return 0.0;
            })();
            return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(8.64e7 * -wrap)));
        };
    };
};
module.exports = {
    Time: Time,
    hour: hour,
    setHour: setHour,
    minute: minute,
    setMinute: setMinute,
    second: second,
    setSecond: setSecond,
    millisecond: millisecond,
    setMillisecond: setMillisecond,
    adjust: adjust,
    diff: diff,
    eqTime: eqTime,
    ordTime: ordTime,
    boundedTime: boundedTime,
    showTime: showTime
};

},{"../Control.Apply/index.js":19,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Time.Component/index.js":243,"../Data.Time.Duration/index.js":244,"../Data.Tuple/index.js":251,"../Math/index.js":354}],246:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var StateR = function (x) {
    return x;
};
var StateL = function (x) {
    return x;
};
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var functorStateR = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateR(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var functorStateL = new Data_Functor.Functor(function (f) {
    return function (k) {
        return function (s) {
            var v = stateL(k)(s);
            return {
                accum: v.accum,
                value: f(v.value)
            };
        };
    };
});
var applyStateR = new Control_Apply.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
                accum: v1.accum,
                value: v1.value(v.value)
            };
        };
    };
});
var applyStateL = new Control_Apply.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
                accum: v1.accum,
                value: v.value(v1.value)
            };
        };
    };
});
var applicativeStateR = new Control_Applicative.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
var applicativeStateL = new Control_Applicative.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s,
            value: a
        };
    };
});
module.exports = {
    StateL: StateL,
    stateL: stateL,
    StateR: StateR,
    stateR: stateR,
    functorStateL: functorStateL,
    applyStateL: applyStateL,
    applicativeStateL: applicativeStateL,
    functorStateR: functorStateR,
    applyStateR: applyStateR,
    applicativeStateR: applicativeStateR
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Data.Functor/index.js":143}],247:[function(require,module,exports){
"use strict";

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function array1(a) {
    return [a];
  }

  function array2(a) {
    return function (b) {
      return [a, b];
    };
  }

  function array3(a) {
    return function (b) {
      return function (c) {
        return [a, b, c];
      };
    };
  }

  function concat2(xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          return function (array) {
            function go(bot, top) {
              switch (top - bot) {
              case 0: return pure([]);
              case 1: return map(array1)(f(array[bot]));
              case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
              case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
              default:
                // This slightly tricky pivot selection aims to produce two
                // even-length partitions where possible.
                var pivot = bot + Math.floor((top - bot) / 4) * 2;
                return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
              }
            }
            return go(0, array.length);
          };
        };
      };
    };
  };
}();

},{}],248:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Traversable = function (Foldable1, Functor0, sequence, traverse) {
    this.Foldable1 = Foldable1;
    this.Functor0 = Functor0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable (line 86, column 1 - line 90, column 33): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Functor.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
        };
    };
};
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime,
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
module.exports = {
    Traversable: Traversable,
    traverse: traverse,
    sequence: sequence,
    traverseDefault: traverseDefault,
    sequenceDefault: sequenceDefault,
    "for": $$for,
    scanl: scanl,
    scanr: scanr,
    mapAccumL: mapAccumL,
    mapAccumR: mapAccumR,
    traversableArray: traversableArray,
    traversableMaybe: traversableMaybe,
    traversableFirst: traversableFirst,
    traversableLast: traversableLast,
    traversableAdditive: traversableAdditive,
    traversableDual: traversableDual,
    traversableConj: traversableConj,
    traversableDisj: traversableDisj,
    traversableMultiplicative: traversableMultiplicative
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.Maybe.First/index.js":185,"../Data.Maybe.Last/index.js":186,"../Data.Maybe/index.js":187,"../Data.Monoid.Additive/index.js":189,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Dual/index.js":192,"../Data.Monoid.Multiplicative/index.js":194,"../Data.Traversable.Accum.Internal/index.js":246,"./foreign.js":247}],249:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Traversable_Accum_Internal = require("../Data.Traversable.Accum.Internal/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
    this.FoldableWithIndex1 = FoldableWithIndex1;
    this.FunctorWithIndex0 = FunctorWithIndex0;
    this.Traversable2 = Traversable2;
    this.traverseWithIndex = traverseWithIndex;
};
var traverseWithIndexDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
            var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
            return function ($21) {
                return $19($20($21));
            };
        };
    };
};
var traverseWithIndex = function (dict) {
    return dict.traverseWithIndex;
};
var traverseDefault = function (dictTraversableWithIndex) {
    return function (dictApplicative) {
        return function (f) {
            return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
        };
    };
};
var traversableWithIndexMultiplicative = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMultiplicative;
}, function () {
    return Data_Traversable.traversableMultiplicative;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexMaybe = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexMaybe;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexMaybe;
}, function () {
    return Data_Traversable.traversableMaybe;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexLast = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexLast;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexLast;
}, function () {
    return Data_Traversable.traversableLast;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexFirst = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexFirst;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexFirst;
}, function () {
    return Data_Traversable.traversableFirst;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDual = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDual;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDual;
}, function () {
    return Data_Traversable.traversableDual;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexDisj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexDisj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexDisj;
}, function () {
    return Data_Traversable.traversableDisj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexConj = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexConj;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexConj;
}, function () {
    return Data_Traversable.traversableConj;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
    };
});
var traversableWithIndexArray = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexArray;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexArray;
}, function () {
    return Data_Traversable.traversableArray;
}, function (dictApplicative) {
    return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
});
var traversableWithIndexAdditive = new TraversableWithIndex(function () {
    return Data_FoldableWithIndex.foldableWithIndexAdditive;
}, function () {
    return Data_FunctorWithIndex.functorWithIndexAdditive;
}, function () {
    return Data_Traversable.traversableAdditive;
}, function (dictApplicative) {
    return function (f) {
        return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
    };
});
var mapAccumRWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanrWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumRWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(a)(b);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var mapAccumLWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function (i) {
                    return function (a) {
                        return function (s) {
                            return f(i)(s)(a);
                        };
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanlWithIndex = function (dictTraversableWithIndex) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumLWithIndex(dictTraversableWithIndex)(function (i) {
                    return function (b) {
                        return function (a) {
                            var b$prime = f(i)(b)(a);
                            return {
                                accum: b$prime,
                                value: b$prime
                            };
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var forWithIndex = function (dictApplicative) {
    return function (dictTraversableWithIndex) {
        return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
    };
};
module.exports = {
    TraversableWithIndex: TraversableWithIndex,
    traverseWithIndex: traverseWithIndex,
    traverseWithIndexDefault: traverseWithIndexDefault,
    forWithIndex: forWithIndex,
    scanlWithIndex: scanlWithIndex,
    mapAccumLWithIndex: mapAccumLWithIndex,
    scanrWithIndex: scanrWithIndex,
    mapAccumRWithIndex: mapAccumRWithIndex,
    traverseDefault: traverseDefault,
    traversableWithIndexArray: traversableWithIndexArray,
    traversableWithIndexMaybe: traversableWithIndexMaybe,
    traversableWithIndexFirst: traversableWithIndexFirst,
    traversableWithIndexLast: traversableWithIndexLast,
    traversableWithIndexAdditive: traversableWithIndexAdditive,
    traversableWithIndexDual: traversableWithIndexDual,
    traversableWithIndexConj: traversableWithIndexConj,
    traversableWithIndexDisj: traversableWithIndexDisj,
    traversableWithIndexMultiplicative: traversableWithIndexMultiplicative
};

},{"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.FunctorWithIndex/index.js":145,"../Data.Traversable.Accum.Internal/index.js":246,"../Data.Traversable/index.js":248,"../Data.Unit/index.js":257}],250:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var uncurry9 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry8 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry7 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry6 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry5 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
    };
};
var uncurry4 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
    };
};
var uncurry3 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
    };
};
var uncurry2 = function (f) {
    return function (v) {
        return f(v.value0)(v.value1.value0);
    };
};
var uncurry10 = function (f$prime) {
    return function (v) {
        return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
    };
};
var uncurry1 = function (f) {
    return function (v) {
        return f(v.value0);
    };
};
var tuple9 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple8 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple7 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                        };
                    };
                };
            };
        };
    };
};
var tuple6 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                    };
                };
            };
        };
    };
};
var tuple5 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                };
            };
        };
    };
};
var tuple4 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
            };
        };
    };
};
var tuple3 = function (a) {
    return function (b) {
        return function (c) {
            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
        };
    };
};
var tuple2 = function (a) {
    return function (b) {
        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
    };
};
var tuple10 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return function (j) {
                                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tuple1 = function (a) {
    return new Data_Tuple.Tuple(a, Data_Unit.unit);
};
var over9 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
    };
};
var over8 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
    };
};
var over7 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
    };
};
var over6 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
    };
};
var over5 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
    };
};
var over4 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
    };
};
var over3 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
    };
};
var over2 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
    };
};
var over10 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
    };
};
var over1 = function (o) {
    return function (v) {
        return new Data_Tuple.Tuple(o(v.value0), v.value1);
    };
};
var get9 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get8 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get7 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value0;
};
var get6 = function (v) {
    return v.value1.value1.value1.value1.value1.value0;
};
var get5 = function (v) {
    return v.value1.value1.value1.value1.value0;
};
var get4 = function (v) {
    return v.value1.value1.value1.value0;
};
var get3 = function (v) {
    return v.value1.value1.value0;
};
var get2 = function (v) {
    return v.value1.value0;
};
var get10 = function (v) {
    return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
};
var get1 = function (v) {
    return v.value0;
};
var curry9 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry8 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry7 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry6 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry5 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                        };
                    };
                };
            };
        };
    };
};
var curry4 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                    };
                };
            };
        };
    };
};
var curry3 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                };
            };
        };
    };
};
var curry2 = function (z) {
    return function (f) {
        return function (a) {
            return function (b) {
                return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
            };
        };
    };
};
var curry10 = function (z) {
    return function (f$prime) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return function (j) {
                                                return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var curry1 = function (z) {
    return function (f) {
        return function (a) {
            return f(new Data_Tuple.Tuple(a, z));
        };
    };
};
module.exports = {
    tuple1: tuple1,
    tuple2: tuple2,
    tuple3: tuple3,
    tuple4: tuple4,
    tuple5: tuple5,
    tuple6: tuple6,
    tuple7: tuple7,
    tuple8: tuple8,
    tuple9: tuple9,
    tuple10: tuple10,
    get1: get1,
    get2: get2,
    get3: get3,
    get4: get4,
    get5: get5,
    get6: get6,
    get7: get7,
    get8: get8,
    get9: get9,
    get10: get10,
    over1: over1,
    over2: over2,
    over3: over3,
    over4: over4,
    over5: over5,
    over6: over6,
    over7: over7,
    over8: over8,
    over9: over9,
    over10: over10,
    uncurry1: uncurry1,
    uncurry2: uncurry2,
    uncurry3: uncurry3,
    uncurry4: uncurry4,
    uncurry5: uncurry5,
    uncurry6: uncurry6,
    uncurry7: uncurry7,
    uncurry8: uncurry8,
    uncurry9: uncurry9,
    uncurry10: uncurry10,
    curry1: curry1,
    curry2: curry2,
    curry3: curry3,
    curry4: curry4,
    curry5: curry5,
    curry6: curry6,
    curry7: curry7,
    curry8: curry8,
    curry9: curry9,
    curry10: curry10
};

},{"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],251:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Biapplicative = require("../Control.Biapplicative/index.js");
var Control_Biapply = require("../Control.Biapply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Invariant = require("../Data.Functor.Invariant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Data_Semiring.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Data_Semigroup.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Data_Ring.Ring(function () {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
            var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                if ($163) {
                    return new Data_Maybe.Just(v.value1);
                };
                return Data_Maybe.Nothing.value;
            });
            return function ($314) {
                return $312($313($314));
            };
        };
    };
};
var heytingAlgebraTuple = function (dictHeytingAlgebra) {
    return function (dictHeytingAlgebra1) {
        return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
            return function (v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
        }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
    };
};
var functorTuple = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new Tuple(m.value0, f(m.value1));
    };
});
var functorWithIndexTuple = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTuple;
}, function (f) {
    return Data_Functor.map(functorTuple)(f(Data_Unit.unit));
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Data_Unit.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var foldableWithIndexTuple = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTuple;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(Data_Unit.unit)(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var traversableWithIndexTuple = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTuple;
}, function () {
    return functorWithIndexTuple;
}, function () {
    return traversableTuple;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
        };
    };
});
var foldable1Tuple = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableTuple;
}, function (dictSemigroup) {
    return function (v) {
        return v.value1;
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
});
var traversable1Tuple = new Data_Semigroup_Traversable.Traversable1(function () {
    return foldable1Tuple;
}, function () {
    return traversableTuple;
}, function (dictApply) {
    return function (v) {
        return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApply) {
    return function (f) {
        return function (v) {
            return Data_Functor.map(dictApply.Functor0())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
        }, function (x) {
            return function (y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
        });
    };
};
var eq1Tuple = function (dictEq) {
    return new Data_Eq.Eq1(function (dictEq1) {
        return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
    });
};
var ord1Tuple = function (dictOrd) {
    return new Data_Ord.Ord1(function () {
        return eq1Tuple(dictOrd.Eq0());
    }, function (dictOrd1) {
        return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
    });
};
var distributiveTuple = function (dictTypeEquals) {
    return new Data_Distributive.Distributive(function () {
        return functorTuple;
    }, function (dictFunctor) {
        return Data_Distributive.collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
    }, function (dictFunctor) {
        var $315 = Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
        var $316 = Data_Functor.map(dictFunctor)(snd);
        return function ($317) {
            return $315($316($317));
        };
    });
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var commutativeRingTuple = function (dictCommutativeRing) {
    return function (dictCommutativeRing1) {
        return new Data_CommutativeRing.CommutativeRing(function () {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
        });
    };
};
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Data_Bounded.Bounded(function () {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
        }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Data_BooleanAlgebra.BooleanAlgebra(function () {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Control_Apply.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Control_Bind.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Control_Applicative.Applicative(function () {
        return applyTuple(dictMonoid.Semigroup0());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Control_Monad.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid.Semigroup0());
    });
};
module.exports = {
    Tuple: Tuple,
    fst: fst,
    snd: snd,
    curry: curry,
    uncurry: uncurry,
    swap: swap,
    lookup: lookup,
    showTuple: showTuple,
    eqTuple: eqTuple,
    eq1Tuple: eq1Tuple,
    ordTuple: ordTuple,
    ord1Tuple: ord1Tuple,
    boundedTuple: boundedTuple,
    semigroupoidTuple: semigroupoidTuple,
    semigroupTuple: semigroupTuple,
    monoidTuple: monoidTuple,
    semiringTuple: semiringTuple,
    ringTuple: ringTuple,
    commutativeRingTuple: commutativeRingTuple,
    heytingAlgebraTuple: heytingAlgebraTuple,
    booleanAlgebraTuple: booleanAlgebraTuple,
    functorTuple: functorTuple,
    functorWithIndexTuple: functorWithIndexTuple,
    invariantTuple: invariantTuple,
    bifunctorTuple: bifunctorTuple,
    applyTuple: applyTuple,
    biapplyTuple: biapplyTuple,
    applicativeTuple: applicativeTuple,
    biapplicativeTuple: biapplicativeTuple,
    bindTuple: bindTuple,
    monadTuple: monadTuple,
    extendTuple: extendTuple,
    comonadTuple: comonadTuple,
    lazyTuple: lazyTuple,
    foldableTuple: foldableTuple,
    foldable1Tuple: foldable1Tuple,
    foldableWithIndexTuple: foldableWithIndexTuple,
    bifoldableTuple: bifoldableTuple,
    traversableTuple: traversableTuple,
    traversable1Tuple: traversable1Tuple,
    traversableWithIndexTuple: traversableWithIndexTuple,
    bitraversableTuple: bitraversableTuple,
    distributiveTuple: distributiveTuple
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Biapplicative/index.js":20,"../Control.Biapply/index.js":21,"../Control.Bind/index.js":23,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Lazy/index.js":34,"../Control.Monad/index.js":60,"../Control.Semigroupoid/index.js":68,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor/index.js":98,"../Data.Bitraversable/index.js":99,"../Data.BooleanAlgebra/index.js":101,"../Data.Bounded/index.js":103,"../Data.CommutativeRing/index.js":107,"../Data.Distributive/index.js":117,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor.Invariant/index.js":137,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Ring/index.js":215,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup.Traversable/index.js":219,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Unit/index.js":257,"../Type.Equality/index.js":388}],252:[function(require,module,exports){
"use strict";

exports.unfoldrArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var maybe = f(value);
              if (isNothing(maybe)) return result;
              var tuple = fromJust(maybe);
              result.push(fst(tuple));
              value = snd(tuple);
            }
          };
        };
      };
    };
  };
};

},{}],253:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Unfoldable = function (Unfoldable10, unfoldr) {
    this.Unfoldable10 = Unfoldable10;
    this.unfoldr = unfoldr;
};
var unfoldr = function (dict) {
    return dict.unfoldr;
};
var unfoldableArray = new Unfoldable(function () {
    return Data_Unfoldable1.unfoldable1Array;
}, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate = function (dictUnfoldable) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                var $7 = i <= 0;
                if ($7) {
                    return Data_Maybe.Nothing.value;
                };
                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
        };
    };
};
var replicateA = function (dictApplicative) {
    return function (dictUnfoldable) {
        return function (dictTraversable) {
            return function (n) {
                return function (m) {
                    return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                };
            };
        };
    };
};
var none = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
};
var fromMaybe = function (dictUnfoldable) {
    return unfoldr(dictUnfoldable)(function (b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
    });
};
module.exports = {
    Unfoldable: Unfoldable,
    unfoldr: unfoldr,
    replicate: replicate,
    replicateA: replicateA,
    none: none,
    fromMaybe: fromMaybe,
    unfoldableArray: unfoldableArray
};

},{"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable1/index.js":255,"../Data.Unit/index.js":257,"./foreign.js":252}],254:[function(require,module,exports){
"use strict";

exports.unfoldr1ArrayImpl = function (isNothing) {
  return function (fromJust) {
    return function (fst) {
      return function (snd) {
        return function (f) {
          return function (b) {
            var result = [];
            var value = b;
            while (true) { // eslint-disable-line no-constant-condition
              var tuple = f(value);
              result.push(fst(tuple));
              var maybe = snd(tuple);
              if (isNothing(maybe)) return result;
              value = fromJust(maybe);
            }
          };
        };
      };
    };
  };
};

},{}],255:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unfoldable1 = function (unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
var unfoldr1 = function (dict) {
    return dict.unfoldr1;
};
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
var replicate1 = function (dictUnfoldable1) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                if (i <= 0) {
                    return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 64, column 5 - line 64, column 39): " + [ i.constructor.name ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};
var replicate1A = function (dictApply) {
    return function (dictUnfoldable1) {
        return function (dictTraversable1) {
            return function (n) {
                return function (m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};
var singleton = function (dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};
var range = function (dictUnfoldable1) {
    return function (start) {
        return function (end) {
            var go = function (delta) {
                return function (i) {
                    var i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, (function () {
                        var $8 = i === end;
                        if ($8) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(i$prime);
                    })());
                };
            };
            var delta = (function () {
                var $9 = end >= start;
                if ($9) {
                    return 1;
                };
                return -1 | 0;
            })();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array
};

},{"../Data.Boolean/index.js":100,"../Data.Maybe/index.js":187,"../Data.Semigroup.Traversable/index.js":219,"../Data.Tuple/index.js":251,"./foreign.js":254}],256:[function(require,module,exports){
"use strict";

exports.unit = {};

},{}],257:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var showUnit = new Data_Show.Show(function (v) {
    return "unit";
});
module.exports = {
    showUnit: showUnit,
    unit: $foreign.unit
};

},{"../Data.Show/index.js":226,"./foreign.js":256}],258:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var VariantRep = function (x) {
    return x;
};
var FProxy = (function () {
    function FProxy() {

    };
    FProxy.value = new FProxy();
    return FProxy;
})();
var VariantTravCases = {};
var VariantTags = function (variantTags) {
    this.variantTags = variantTags;
};
var VariantMatchCases = {};
var VariantMapCases = {};
var VariantFTravCases = {};
var VariantFMatchCases = {};
var VariantFMapCases = {};
var Contractable = function (contractWith) {
    this.contractWith = contractWith;
};
var variantTravNil = VariantTravCases;
var variantTravCons = function (dictCons) {
    return function (dictCons1) {
        return function (dictVariantTravCases) {
            return function (dictTypeEquals) {
                return VariantTravCases;
            };
        };
    };
};
var variantTagsNil = new VariantTags(function (v) {
    return Data_List_Types.Nil.value;
});
var variantTags = function (dict) {
    return dict.variantTags;
};
var variantTagsCons = function (dictVariantTags) {
    return function (dictIsSymbol) {
        return new VariantTags(function (v) {
            return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var variantMatchNil = VariantMatchCases;
var variantMatchCons = function (dictVariantMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantMatchCases;
        };
    };
};
var variantMapNil = VariantMapCases;
var variantMapCons = function (dictCons) {
    return function (dictCons1) {
        return function (dictVariantMapCases) {
            return function (dictTypeEquals) {
                return VariantMapCases;
            };
        };
    };
};
var variantFTravNil = VariantFTravCases;
var variantFTravCons = function (dictCons) {
    return function (dictCons1) {
        return function (dictVariantFTravCases) {
            return function (dictTypeEquals) {
                return VariantFTravCases;
            };
        };
    };
};
var variantFMatchNil = VariantFMatchCases;
var variantFMatchCons = function (dictVariantFMatchCases) {
    return function (dictCons) {
        return function (dictTypeEquals) {
            return VariantFMatchCases;
        };
    };
};
var variantFMapNil = VariantFMapCases;
var variantFMapCons = function (dictCons) {
    return function (dictCons1) {
        return function (dictVariantFMapCases) {
            return function (dictTypeEquals) {
                return VariantFMapCases;
            };
        };
    };
};
var lookupToEnum = (function () {
    var go = function ($copy_ix) {
        return function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_ix = $copy_ix;
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(ix, v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v1.value0.cardinality > ix) {
                            var v2 = v1.value0.toEnum(ix);
                            if (v2 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v.value0,
                                    value: v2.value0
                                });
                            };
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_ix = ix - v1.value0.cardinality | 0;
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_ix, $tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
    };
    return go;
})();
var lookupTag = function (tag) {
    var go = function ($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons) {
                if (v.value0 === tag) {
                    $tco_done = true;
                    return true;
                };
                if (Data_Boolean.otherwise) {
                    $copy_v = v.value1;
                    return;
                };
            };
            if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return false;
            };
            throw new Error("Failed pattern match at Data.Variant.Internal (line 158, column 8 - line 162, column 18): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return go;
};
var lookupCardinality = (function () {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_acc = acc + v.value0.cardinality | 0;
                    $copy_v = v.value1;
                    return;
                };
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 280, column 12 - line 282, column 16): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(0);
})();
var impossible = function (str) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
};
var lookup = function (name) {
    return function (tag) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        if (v.value0 === tag) {
                            $tco_done = true;
                            return v1.value0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v = v.value1;
                            $copy_v1 = v1.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupEq = function (tags) {
    return function (eqs) {
        return function (v) {
            return function (v1) {
                if (v.type === v1.type) {
                    return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
                };
                if (Data_Boolean.otherwise) {
                    return false;
                };
                throw new Error("Failed pattern match at Data.Variant.Internal (line 164, column 1 - line 169, column 12): " + [ tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var lookupOrd = function (tags) {
    return function (ords) {
        return function (v) {
            return function (v1) {
                var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
                if (v3 instanceof Data_Ordering.EQ) {
                    return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
                };
                return v3;
            };
        };
    };
};
var lookupFirst = function (name) {
    return function (f) {
        var go = function (v) {
            return function (v1) {
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                    return {
                        type: v.value0,
                        value: f(v1.value0)
                    };
                };
                return impossible(name);
            };
        };
        return go;
    };
};
var lookupFromEnum = function (v) {
    var go = function ($copy_acc) {
        return function ($copy_v1) {
            return function ($copy_v2) {
                var $tco_var_acc = $copy_acc;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v1, v2) {
                    if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                        if (v1.value0 === v.type) {
                            $tco_done = true;
                            return acc + v2.value0.fromEnum(v.value) | 0;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_acc = acc + v2.value0.cardinality | 0;
                            $tco_var_v1 = v1.value1;
                            $copy_v2 = v2.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("fromEnum");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $tco_var_v1, $copy_v2);
                };
                return $tco_result;
            };
        };
    };
    return go(0);
};
var lookupLast = function (name) {
    return function (f) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                    if (v instanceof Data_List_Types.Cons && (v.value1 instanceof Data_List_Types.Nil && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil))) {
                        $tco_done = true;
                        return {
                            type: v.value0,
                            value: f(v1.value0)
                        };
                    };
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                        $tco_var_v = v.value1;
                        $copy_v1 = v1.value1;
                        return;
                    };
                    $tco_done = true;
                    return impossible(name);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                };
                return $tco_result;
            };
        };
        return go;
    };
};
var lookupPred = function (v) {
    var go2 = function ($copy_t1) {
        return function ($copy_b1) {
            return function ($copy_d1) {
                return function ($copy_v1) {
                    return function ($copy_v2) {
                        return function ($copy_v3) {
                            var $tco_var_t1 = $copy_t1;
                            var $tco_var_b1 = $copy_b1;
                            var $tco_var_d1 = $copy_d1;
                            var $tco_var_v1 = $copy_v1;
                            var $tco_var_v2 = $copy_v2;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(t1, b1, d1, v1, v2, v3) {
                                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                                    if (v1.value0 === v.type) {
                                        var v4 = v3.value0.pred(v.value);
                                        if (v4 instanceof Data_Maybe.Nothing) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: t1,
                                                value: b1.top
                                            });
                                        };
                                        if (v4 instanceof Data_Maybe.Just) {
                                            $tco_done = true;
                                            return Data_Maybe.Just.create({
                                                type: v.type,
                                                value: v4.value0
                                            });
                                        };
                                        throw new Error("Failed pattern match at Data.Variant.Internal (line 248, column 11 - line 250, column 69): " + [ v4.constructor.name ]);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        $tco_var_t1 = v1.value0;
                                        $tco_var_b1 = v2.value0;
                                        $tco_var_d1 = v3.value0;
                                        $tco_var_v1 = v1.value1;
                                        $tco_var_v2 = v2.value1;
                                        $copy_v3 = v3.value1;
                                        return;
                                    };
                                };
                                $tco_done = true;
                                return impossible("pred");
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_t1, $tco_var_b1, $tco_var_d1, $tco_var_v1, $tco_var_v2, $copy_v3);
                            };
                            return $tco_result;
                        };
                    };
                };
            };
        };
    };
    var go1 = function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                    if (v1.value0 === v.type) {
                        var v4 = v3.value0.pred(v.value);
                        if (v4 instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v4 instanceof Data_Maybe.Just) {
                            return Data_Maybe.Just.create({
                                type: v.type,
                                value: v4.value0
                            });
                        };
                        throw new Error("Failed pattern match at Data.Variant.Internal (line 239, column 11 - line 241, column 69): " + [ v4.constructor.name ]);
                    };
                    if (Data_Boolean.otherwise) {
                        return go2(v1.value0)(v2.value0)(v3.value0)(v1.value1)(v2.value1)(v3.value1);
                    };
                };
                return impossible("pred");
            };
        };
    };
    return go1;
};
var lookupSucc = function (v) {
    var go = function ($copy_v1) {
        return function ($copy_v2) {
            return function ($copy_v3) {
                var $tco_var_v1 = $copy_v1;
                var $tco_var_v2 = $copy_v2;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v1, v2, v3) {
                    if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                        if (v1.value0 === v.type) {
                            var v4 = v3.value0.succ(v.value);
                            if (v4 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return Data_Maybe.Just.create({
                                    type: v1.value0,
                                    value: v4.value0
                                });
                            };
                            if (v4 instanceof Data_Maybe.Nothing) {
                                if (v1.value1 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Cons) {
                                    $tco_done = true;
                                    return Data_Maybe.Just.create({
                                        type: v1.value1.value0,
                                        value: v2.value1.value0.bottom
                                    });
                                };
                                $tco_done = true;
                                return Data_Maybe.Nothing.value;
                            };
                            throw new Error("Failed pattern match at Data.Variant.Internal (line 266, column 11 - line 270, column 29): " + [ v4.constructor.name ]);
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_v1 = v1.value1;
                            $tco_var_v2 = v2.value1;
                            $copy_v3 = v3.value1;
                            return;
                        };
                    };
                    $tco_done = true;
                    return impossible("succ");
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
                };
                return $tco_result;
            };
        };
    };
    return go;
};
var contractWithInstance = function (dictRowToList) {
    return function (dictUnion) {
        return function (dictVariantTags) {
            return new Contractable(function (dictAlternative) {
                return function (v) {
                    return function (v1) {
                        return function (tag) {
                            return function (a) {
                                if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value))) {
                                    return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                                };
                                if (Data_Boolean.otherwise) {
                                    return Control_Plus.empty(dictAlternative.Plus1());
                                };
                                throw new Error("Failed pattern match at Data.Variant.Internal (line 318, column 1 - line 327, column 24): " + [ v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name ]);
                            };
                        };
                    };
                };
            });
        };
    };
};
var contractWith = function (dict) {
    return dict.contractWith;
};
module.exports = {
    FProxy: FProxy,
    VariantRep: VariantRep,
    VariantTags: VariantTags,
    variantTags: variantTags,
    Contractable: Contractable,
    contractWith: contractWith,
    VariantMatchCases: VariantMatchCases,
    VariantFMatchCases: VariantFMatchCases,
    VariantMapCases: VariantMapCases,
    VariantFMapCases: VariantFMapCases,
    VariantTravCases: VariantTravCases,
    VariantFTravCases: VariantFTravCases,
    lookup: lookup,
    lookupTag: lookupTag,
    lookupEq: lookupEq,
    lookupOrd: lookupOrd,
    lookupLast: lookupLast,
    lookupFirst: lookupFirst,
    lookupPred: lookupPred,
    lookupSucc: lookupSucc,
    lookupCardinality: lookupCardinality,
    lookupFromEnum: lookupFromEnum,
    lookupToEnum: lookupToEnum,
    impossible: impossible,
    variantMatchCons: variantMatchCons,
    variantMatchNil: variantMatchNil,
    variantFMatchCons: variantFMatchCons,
    variantFMatchNil: variantFMatchNil,
    variantMapCons: variantMapCons,
    variantMapNil: variantMapNil,
    variantFMapCons: variantFMapCons,
    variantFMapNil: variantFMapNil,
    variantTravCons: variantTravCons,
    variantTravNil: variantTravNil,
    variantFTravCons: variantFTravCons,
    variantFTravNil: variantFTravNil,
    variantTagsNil: variantTagsNil,
    variantTagsCons: variantTagsCons,
    contractWithInstance: contractWithInstance
};

},{"../Control.Applicative/index.js":17,"../Control.Plus/index.js":65,"../Data.Boolean/index.js":100,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Symbol/index.js":240,"../Partial.Unsafe/index.js":378,"../Type.Data.RowList/index.js":387}],259:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Unvariant = function (x) {
    return x;
};
var VariantShows = function (variantShows) {
    this.variantShows = variantShows;
};
var VariantOrds = function (variantOrds) {
    this.variantOrds = variantOrds;
};
var VariantEqs = function (variantEqs) {
    this.variantEqs = variantEqs;
};
var VariantBounded = function (variantBounded) {
    this.variantBounded = variantBounded;
};
var VariantBoundedEnums = function (VariantBounded0, variantBoundedEnums) {
    this.VariantBounded0 = VariantBounded0;
    this.variantBoundedEnums = variantBoundedEnums;
};
var variantShows = function (dict) {
    return dict.variantShows;
};
var variantOrds = function (dict) {
    return dict.variantOrds;
};
var variantEqs = function (dict) {
    return dict.variantEqs;
};
var variantBoundedEnums = function (dict) {
    return dict.variantBoundedEnums;
};
var variantBounded = function (dict) {
    return dict.variantBounded;
};
var unvariant = function (v) {
    return function (f) {
        return (function (dictIsSymbol) {
            return function (dictCons) {
                return f(dictIsSymbol)(dictCons);
            };
        })({
            reflectSymbol: Data_Function["const"](v.type)
        })({})(Data_Symbol.SProxy.value)(v.value);
    };
};
var travMatch = function (dictRowToList) {
    return function (dictVariantTravCases) {
        return function (dictUnion) {
            return function (dictUnion1) {
                return function (dictFunctor) {
                    return function (r) {
                        return function (k) {
                            return function (v) {
                                if (Record_Unsafe.unsafeHas(v.type)(r)) {
                                    return Data_Functor.mapFlipped(dictFunctor)(Record_Unsafe.unsafeGet(v.type)(r)(v.value))(function (value) {
                                        return {
                                            type: v.type,
                                            value: value
                                        };
                                    });
                                };
                                return k(v);
                            };
                        };
                    };
                };
            };
        };
    };
};
var showVariantNil = new VariantShows(function (v) {
    return Data_List_Types.Nil.value;
});
var showVariantCons = function (dictVariantShows) {
    return function (dictShow) {
        return new VariantShows(function (v) {
            return new Data_List_Types.Cons(Data_Show.show(dictShow), variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var showVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantShows) {
            return new Data_Show.Show(function (v1) {
                var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                var shows = variantShows(dictVariantShows)(Type_Data_RowList.RLProxy.value);
                var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
            });
        };
    };
};
var overMatch = function (dictRowToList) {
    return function (dictVariantMapCases) {
        return function (dictUnion) {
            return function (dictUnion1) {
                return function (r) {
                    return function (k) {
                        return function (v) {
                            if (Record_Unsafe.unsafeHas(v.type)(r)) {
                                return {
                                    type: v.type,
                                    value: Record_Unsafe.unsafeGet(v.type)(r)(v.value)
                                };
                            };
                            return k(v);
                        };
                    };
                };
            };
        };
    };
};
var ordVariantNil = new VariantOrds(function (v) {
    return Data_List_Types.Nil.value;
});
var ordVariantCons = function (dictVariantOrds) {
    return function (dictOrd) {
        return new VariantOrds(function (v) {
            return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var onMatch = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return function (k) {
                    return function (v) {
                        if (Record_Unsafe.unsafeHas(v.type)(r)) {
                            return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                        };
                        return k(v);
                    };
                };
            };
        };
    };
};
var on = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (f) {
                return function (g) {
                    return function (r) {
                        if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                            return f(r.value);
                        };
                        return g(r);
                    };
                };
            };
        };
    };
};
var prj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictAlternative) {
            return function (p) {
                return on(dictCons)(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
        };
    };
};
var inj = function (dictCons) {
    return function (dictIsSymbol) {
        return function (p) {
            return function (value) {
                return {
                    type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                    value: value
                };
            };
        };
    };
};
var over = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (p) {
                return function (f) {
                    return on(dictCons)(dictIsSymbol)(p)((function () {
                        var $114 = inj(dictCons1)(dictIsSymbol)(p);
                        return function ($115) {
                            return $114(f($115));
                        };
                    })());
                };
            };
        };
    };
};
var revariant = function (v) {
    return v(function (dictIsSymbol) {
        return function (dictCons) {
            return inj(dictCons)(dictIsSymbol);
        };
    });
};
var trav = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictFunctor) {
                return function (p) {
                    return function (f) {
                        return on(dictCons)(dictIsSymbol)(p)((function () {
                            var $116 = Data_Functor.map(dictFunctor)(inj(dictCons1)(dictIsSymbol)(p));
                            return function ($117) {
                                return $116(f($117));
                            };
                        })());
                    };
                };
            };
        };
    };
};
var expandTravMatch = function (dictRowToList) {
    return function (dictVariantTravCases) {
        return function (dictUnion) {
            return function (dictUnion1) {
                return function (dictUnion2) {
                    return function (dictApplicative) {
                        return function (r) {
                            return travMatch(dictRowToList)(dictVariantTravCases)(dictUnion)(dictUnion1)((dictApplicative.Apply0()).Functor0())(r)((function () {
                                var $118 = Control_Applicative.pure(dictApplicative);
                                return function ($119) {
                                    return $118($119);
                                };
                            })());
                        };
                    };
                };
            };
        };
    };
};
var expandOverMatch = function (dictRowToList) {
    return function (dictVariantMapCases) {
        return function (dictUnion) {
            return function (dictUnion1) {
                return function (dictUnion2) {
                    return function (r) {
                        return overMatch(dictRowToList)(dictVariantMapCases)(dictUnion)(dictUnion1)(r)(Unsafe_Coerce.unsafeCoerce);
                    };
                };
            };
        };
    };
};
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var eqVariantNil = new VariantEqs(function (v) {
    return Data_List_Types.Nil.value;
});
var eqVariantCons = function (dictVariantEqs) {
    return function (dictEq) {
        return new VariantEqs(function (v) {
            return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var eqVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return new Data_Eq.Eq(function (v1) {
                return function (v2) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                    var eqs = variantEqs(dictVariantEqs)(Type_Data_RowList.RLProxy.value);
                    return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                };
            });
        };
    };
};
var ordVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return new Data_Ord.Ord(function () {
                    return eqVariant(dictRowToList)(dictVariantTags)(dictVariantEqs);
                }, function (v1) {
                    return function (v2) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var ords = variantOrds(dictVariantOrds)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                    };
                });
            };
        };
    };
};
var enumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.Enum(function () {
                        return ordVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupPred(a)(tags)(bounds)(dicts);
                    }, function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupSucc(a)(tags)(bounds)(dicts);
                    });
                };
            };
        };
    };
};
var $$default = function (a) {
    return function (v) {
        return a;
    };
};
var contract = function (dictAlternative) {
    return function (dictContractable) {
        return function (v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
        };
    };
};
var case_ = function (r) {
    return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
};
var match = function (dictRowToList) {
    return function (dictVariantMatchCases) {
        return function (dictUnion) {
            return function (r) {
                return onMatch(dictRowToList)(dictVariantMatchCases)(dictUnion)(r)(case_);
            };
        };
    };
};
var boundedVariantNil = new VariantBounded(function (v) {
    return Data_List_Types.Nil.value;
});
var enumVariantNil = new VariantBoundedEnums(function () {
    return boundedVariantNil;
}, function (v) {
    return Data_List_Types.Nil.value;
});
var boundedVariantCons = function (dictVariantBounded) {
    return function (dictBounded) {
        return new VariantBounded(function (v) {
            var dict = {
                top: Data_Bounded.top(dictBounded),
                bottom: Data_Bounded.bottom(dictBounded)
            };
            return new Data_List_Types.Cons(dict, variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var enumVariantCons = function (dictVariantBoundedEnums) {
    return function (dictBoundedEnum) {
        return new VariantBoundedEnums(function () {
            return boundedVariantCons(dictVariantBoundedEnums.VariantBounded0())(dictBoundedEnum.Bounded0());
        }, function (v) {
            var dict = {
                pred: Data_Enum.pred(dictBoundedEnum.Enum1()),
                succ: Data_Enum.succ(dictBoundedEnum.Enum1()),
                fromEnum: Data_Enum.fromEnum(dictBoundedEnum),
                toEnum: Data_Enum.toEnum(dictBoundedEnum),
                cardinality: Data_Enum.cardinality(dictBoundedEnum)
            };
            return new Data_List_Types.Cons(dict, variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var boundedVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBounded) {
                    return new Data_Bounded.Bounded(function () {
                        return ordVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                    }, (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupFirst("bottom")(function (v) {
                            return v.bottom;
                        })(tags)(dicts));
                    })(), (function () {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBounded(dictVariantBounded)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupLast("top")(function (v) {
                            return v.top;
                        })(tags)(dicts));
                    })());
                };
            };
        };
    };
};
var boundedEnumVariant = function (dictRowToList) {
    return function (dictVariantTags) {
        return function (dictVariantEqs) {
            return function (dictVariantOrds) {
                return function (dictVariantBoundedEnums) {
                    return new Data_Enum.BoundedEnum(function () {
                        return boundedVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums.VariantBounded0());
                    }, function () {
                        return enumVariant(dictRowToList)(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums);
                    }, Data_Enum.Cardinality(Data_Variant_Internal.lookupCardinality(variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value))), function (a) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupFromEnum(a)(tags)(dicts);
                    }, function (n) {
                        var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value);
                        var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Data_RowList.RLProxy.value);
                        return Data_Variant_Internal.lookupToEnum(n)(tags)(dicts);
                    });
                };
            };
        };
    };
};
module.exports = {
    inj: inj,
    prj: prj,
    on: on,
    onMatch: onMatch,
    case_: case_,
    match: match,
    "default": $$default,
    overMatch: overMatch,
    expandOverMatch: expandOverMatch,
    travMatch: travMatch,
    expandTravMatch: expandTravMatch,
    expand: expand,
    contract: contract,
    Unvariant: Unvariant,
    unvariant: unvariant,
    revariant: revariant,
    VariantEqs: VariantEqs,
    variantEqs: variantEqs,
    VariantOrds: VariantOrds,
    variantOrds: variantOrds,
    VariantShows: VariantShows,
    variantShows: variantShows,
    VariantBounded: VariantBounded,
    variantBounded: variantBounded,
    VariantBoundedEnums: VariantBoundedEnums,
    variantBoundedEnums: variantBoundedEnums,
    eqVariantNil: eqVariantNil,
    eqVariantCons: eqVariantCons,
    eqVariant: eqVariant,
    boundedVariantNil: boundedVariantNil,
    boundedVariantCons: boundedVariantCons,
    boundedVariant: boundedVariant,
    enumVariantNil: enumVariantNil,
    enumVariantCons: enumVariantCons,
    enumVariant: enumVariant,
    boundedEnumVariant: boundedEnumVariant,
    ordVariantNil: ordVariantNil,
    ordVariantCons: ordVariantCons,
    ordVariant: ordVariant,
    showVariantNil: showVariantNil,
    showVariantCons: showVariantCons,
    showVariant: showVariant
};

},{"../Control.Applicative/index.js":17,"../Control.Plus/index.js":65,"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.Ord/index.js":205,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Variant.Internal/index.js":258,"../Partial.Unsafe/index.js":378,"../Record.Unsafe/index.js":384,"../Type.Data.Row/index.js":386,"../Type.Data.RowList/index.js":387,"../Unsafe.Coerce/index.js":391}],260:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Void = function (x) {
    return x;
};
var absurd = function (a) {
    var spin = function ($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
            $copy_v = v;
            return;
        };
        while (!false) {
            $tco_result = $tco_loop($copy_v);
        };
        return $tco_result;
    };
    return spin(a);
};
var showVoid = new Data_Show.Show(absurd);
module.exports = {
    absurd: absurd,
    showVoid: showVoid
};

},{"../Data.Show/index.js":226}],261:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Context = function (x) {
    return x;
};
var toList = function (v) {
    return v;
};
var newtypeContext = new Data_Newtype.Newtype(function (n) {
    return n;
}, Context);
var match = function (v) {
    if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
            key: v.value0.value0,
            value: v.value0.value1,
            context: v.value1
        });
    };
    if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Dhall.Context (line 67, column 1 - line 69, column 60): " + [ v.constructor.name ]);
};
var mapMaybe = function (f) {
    return function (v) {
        return Data_List.mapMaybe(Data_Traversable.traverse(Data_Tuple.traversableTuple)(Data_Maybe.applicativeMaybe)(f))(v);
    };
};
var lookupDepth = function (x) {
    var go = function ($copy_v) {
        return function ($copy_v1) {
            return function ($copy_v2) {
                var $tco_var_v = $copy_v;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1, v2) {
                    if (v2 instanceof Data_List_Types.Nil) {
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    if (v2 instanceof Data_List_Types.Cons) {
                        var $38 = x === v2.value0.value0;
                        if ($38) {
                            var $39 = v1 === 0;
                            if ($39) {
                                $tco_done = true;
                                return new Data_Maybe.Just(new Data_Tuple.Tuple(v, v2.value0.value1));
                            };
                            $tco_var_v = v + 1 | 0;
                            $tco_var_v1 = v1 - 1 | 0;
                            $copy_v2 = v2.value1;
                            return;
                        };
                        $tco_var_v = v + 1 | 0;
                        $tco_var_v1 = v1;
                        $copy_v2 = v2.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Dhall.Context (line 94, column 3 - line 95, column 12): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                };
                return $tco_result;
            };
        };
    };
    return go(0);
};
var lookup = function ($copy_v) {
    return function ($copy_v1) {
        return function ($copy_v2) {
            var $tco_var_v = $copy_v;
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1, v2) {
                if (v2 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                if (v2 instanceof Data_List_Types.Cons) {
                    var $47 = v === v2.value0.value0;
                    if ($47) {
                        var $48 = v1 === 0;
                        if ($48) {
                            $tco_done = true;
                            return new Data_Maybe.Just(v2.value0.value1);
                        };
                        $tco_var_v = v;
                        $tco_var_v1 = v1 - 1 | 0;
                        $copy_v2 = v2.value1;
                        return;
                    };
                    $tco_var_v = v;
                    $tco_var_v1 = v1;
                    $copy_v2 = v2.value1;
                    return;
                };
                throw new Error("Failed pattern match at Dhall.Context (line 81, column 1 - line 81, column 58): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
            };
            return $tco_result;
        };
    };
};
var insert = function (k) {
    return function (v) {
        return function (v1) {
            return new Data_List_Types.Cons(new Data_Tuple.Tuple(k, v), v1);
        };
    };
};
var functorContext = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(Data_Tuple.functorTuple)(f))(m);
    };
});
var functorWithIndexContext = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorContext;
}, function (f) {
    var go = function (v) {
        return function (v1) {
            if (v1 instanceof Data_List_Types.Nil) {
                return Data_List_Types.Nil.value;
            };
            if (v1 instanceof Data_List_Types.Cons) {
                var n = Data_Maybe.fromMaybe(0)(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0.value0)(v));
                var ks$prime = Data_Map_Internal.insert(Data_Ord.ordString)(v1.value0.value0)(n + 1 | 0)(v);
                var v3 = go(ks$prime)(v1.value1);
                return new Data_List_Types.Cons(new Data_Tuple.Tuple(v1.value0.value0, f(new Dhall_Core_AST_Types.V(v1.value0.value0, n))(v1.value0.value1)), v3);
            };
            throw new Error("Failed pattern match at Dhall.Context (line 40, column 5 - line 40, column 37): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
    return go(Data_Map_Internal.empty);
});
var foldableContext = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        var $67 = Data_Foldable.foldMap(Data_Functor_Compose.foldableCompose(Data_List_Types.foldableList)(Data_Tuple.foldableTuple))(dictMonoid)(f);
        var $68 = Data_Newtype.unwrap(newtypeContext);
        return function ($69) {
            return $67(Data_Functor_Compose.Compose($68($69)));
        };
    };
}, function (f) {
    return function (c) {
        var $70 = Data_Foldable.foldl(Data_Functor_Compose.foldableCompose(Data_List_Types.foldableList)(Data_Tuple.foldableTuple))(f)(c);
        var $71 = Data_Newtype.unwrap(newtypeContext);
        return function ($72) {
            return $70(Data_Functor_Compose.Compose($71($72)));
        };
    };
}, function (f) {
    return function (c) {
        var $73 = Data_Foldable.foldr(Data_Functor_Compose.foldableCompose(Data_List_Types.foldableList)(Data_Tuple.foldableTuple))(f)(c);
        var $74 = Data_Newtype.unwrap(newtypeContext);
        return function ($75) {
            return $73(Data_Functor_Compose.Compose($74($75)));
        };
    };
});
var foldableWithIndexContext = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableContext;
}, function (dictMonoid) {
    return function (f) {
        var $76 = Data_Foldable.fold(foldableContext)(dictMonoid);
        var $77 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexContext)(f);
        return function ($78) {
            return $76($77($78));
        };
    };
}, function (f) {
    return function (c) {
        var $79 = Data_Foldable.foldl(foldableContext)(Data_Function.applyFlipped)(c);
        var $80 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexContext)(function ($82) {
            return Data_Function.flip(f($82));
        });
        return function ($81) {
            return $79($80($81));
        };
    };
}, function (f) {
    return function (c) {
        var $83 = Data_Foldable.foldr(foldableContext)(Data_Function.apply)(c);
        var $84 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexContext)(f);
        return function ($85) {
            return $83($84($85));
        };
    };
});
var traversableContext = new Data_Traversable.Traversable(function () {
    return foldableContext;
}, function () {
    return functorContext;
}, function (dictApplicative) {
    return function (v) {
        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Context)(Data_Traversable.traverse(Data_List_Types.traversableList)(dictApplicative)(Data_Traversable.sequence(Data_Tuple.traversableTuple)(dictApplicative))(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Context)(Data_Traversable.traverse(Data_List_Types.traversableList)(dictApplicative)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(v));
        };
    };
});
var traversableWithIndexContext = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexContext;
}, function () {
    return functorWithIndexContext;
}, function () {
    return traversableContext;
}, function (dictApplicative) {
    return function (f) {
        var $86 = Data_Traversable.sequence(traversableContext)(dictApplicative);
        var $87 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexContext)(f);
        return function ($88) {
            return $86($87($88));
        };
    };
});
var empty = Data_List_Types.Nil.value;
module.exports = {
    Context: Context,
    empty: empty,
    insert: insert,
    match: match,
    lookup: lookup,
    lookupDepth: lookupDepth,
    toList: toList,
    mapMaybe: mapMaybe,
    newtypeContext: newtypeContext,
    functorContext: functorContext,
    foldableContext: foldableContext,
    traversableContext: traversableContext,
    functorWithIndexContext: functorWithIndexContext,
    foldableWithIndexContext: foldableWithIndexContext,
    traversableWithIndexContext: traversableWithIndexContext
};

},{"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Dhall.Core.AST.Types/index.js":268}],262:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var mkExprF = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (k) {
                return function (v) {
                    return Dhall_Core_AST_Types.embedW(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(k)(v));
                };
            };
        };
    };
};
var mkField = function (expr) {
    return function (field) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(field, expr));
    };
};
var mkHashed = function (e) {
    return function (hash) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(hash, e));
    };
};
var mkLam = function (name) {
    return function (ty) {
        return function (expr) {
            return mkExprF()(new Data_Symbol.IsSymbol(function () {
                return "Lam";
            }))(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.BindingBody(name, ty, expr));
        };
    };
};
var mkLet = function (name) {
    return function (ty) {
        return function (val) {
            return function (expr) {
                return mkExprF()(new Data_Symbol.IsSymbol(function () {
                    return "Let";
                }))(Dhall_Core_AST_Types_Basics.functorLetF)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.LetF(name, ty, val, expr));
            };
        };
    };
};
var mkListLit = function (ty) {
    return function (lit) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.product(ty)(lit));
    };
};
var mkMerge = function (x) {
    return function (y) {
        return function (t) {
            return mkExprF()(new Data_Symbol.IsSymbol(function () {
                return "Merge";
            }))(Dhall_Core_AST_Types_Basics.functorMergeF)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.MergeF(x, y, t));
        };
    };
};
var mkPi = function (name) {
    return function (ty) {
        return function (expr) {
            return mkExprF()(new Data_Symbol.IsSymbol(function () {
                return "Pi";
            }))(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.BindingBody(name, ty, expr));
        };
    };
};
var mkProject = function (expr) {
    return function (fields) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(Control_Applicative.pure(Data_Identity.applicativeIdentity)(expr), Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Functor_App.App)(Control_Category.identity(Control_Category.categoryFn))(fields)));
    };
};
var mkRecord = function (dictFunctor) {
    return mkExprF()(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(dictFunctor)(Dhall_Core_AST_Types_Basics["_S"]);
};
var mkRecordLit = function (dictFunctor) {
    return mkExprF()(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(dictFunctor)(Dhall_Core_AST_Types_Basics["_S"]);
};
var mkSome = function (val) {
    return mkExprF()(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"])(val);
};
var mkTextLit = mkExprF()(new Data_Symbol.IsSymbol(function () {
    return "TextLit";
}))(Dhall_Core_AST_Types_Basics.functorTextLitF)(Dhall_Core_AST_Types_Basics["_S"]);
var mkTextLit$prime = function ($188) {
    return mkTextLit(Dhall_Core_AST_Types_Basics.TextLit.create($188));
};
var mkToMap = function (x) {
    return function (t) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(x, t));
    };
};
var mkUnion = function (dictFunctor) {
    var $189 = mkExprF()(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.functorCompose(dictFunctor)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"]);
    return function ($190) {
        return $189(Data_Functor_Compose.Compose($190));
    };
};
var mkExpr = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (v) {
                return mkExprF(dictCons)(dictIsSymbol)(Data_Const.functorConst)(k)(v);
            };
        };
    };
};
var mkInteger = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Integer";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkIntegerLit = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "IntegerLit";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkIntegerShow = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "IntegerShow";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkIntegerToDouble = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "IntegerToDouble";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkList = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "List";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListBuild = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListBuild";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListFold = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListFold";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListHead = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListHead";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListIndexed = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListIndexed";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListLast = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListLast";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListLength = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListLength";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkListReverse = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "ListReverse";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNatural = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Natural";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalBuild = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalBuild";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalEven = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalEven";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalFold = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalFold";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalIsZero = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalIsZero";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalLit = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalLit";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkNaturalOdd = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalOdd";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalShow = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalShow";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalSubtract = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalSubtract";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNaturalToInteger = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "NaturalToInteger";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkNone = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "None";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkOptional = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Optional";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkOptionalBuild = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "OptionalBuild";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkOptionalFold = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "OptionalFold";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkText = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Text";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkTextShow = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "TextShow";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkVar = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Var";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkEmbed = Control_Applicative.pure(Dhall_Core_AST_Types.applicativeExpr);
var mkDoubleShow = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "DoubleShow";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkDoubleLit = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "DoubleLit";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkDouble = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Double";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkConst = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Const";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkKind = mkConst(Dhall_Core_AST_Types.Kind.value);
var mkSort = mkConst(Dhall_Core_AST_Types.Sort.value);
var mkType = mkConst(Dhall_Core_AST_Types.Type.value);
var mkForall = function (name) {
    return mkPi(name)(mkType);
};
var mkBoolLit = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "BoolLit";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkBoolIf = function (cond) {
    return function (t) {
        return function (f) {
            return mkExprF()(new Data_Symbol.IsSymbol(function () {
                return "BoolIf";
            }))(Dhall_Core_AST_Types_Basics.functorTriplet)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Triplet(cond, t, f));
        };
    };
};
var mkBool = mkExpr()(new Data_Symbol.IsSymbol(function () {
    return "Bool";
}))(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
var mkBinOp = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (l) {
                return function (r) {
                    return mkExprF(dictCons)(dictIsSymbol)(Dhall_Core_AST_Types_Basics.functorPair)(k)(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                };
            };
        };
    };
};
var mkBoolAnd = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "BoolAnd";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkBoolEQ = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "BoolEQ";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkBoolNE = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "BoolNE";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkBoolOr = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "BoolOr";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkCombine = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "Combine";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkCombineTypes = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "CombineTypes";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkEquivalent = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "Equivalent";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkImportAlt = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "ImportAlt";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkListAppend = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "ListAppend";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkNaturalPlus = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "NaturalPlus";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkNaturalTimes = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "NaturalTimes";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkPrefer = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "Prefer";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkTextAppend = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "TextAppend";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkUsingHeaders = mkBinOp()(new Data_Symbol.IsSymbol(function () {
    return "UsingHeaders";
}))(Dhall_Core_AST_Types_Basics["_S"]);
var mkAssert = (function () {
    var $191 = mkExprF()(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"]);
    return function ($192) {
        return $191(Data_Identity.Identity($192));
    };
})();
var mkArrow = mkPi("_");
var mkApp = function (fn) {
    return function (arg) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(fn, arg));
    };
};
var mkAnnot = function (val) {
    return function (ty) {
        return mkExprF()(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(val, ty));
    };
};
var _ExprFPrism = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (k) {
                return function (dictChoice) {
                    return Data_Lens_Prism["prism'"](Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(k))(Data_Functor_Variant.on(dictCons)(dictIsSymbol)(k)(Data_Maybe.Just.create)(Data_Functor_Variant["default"](Data_Maybe.Nothing.value)))(dictChoice);
                };
            };
        };
    };
};
var _ExprPrism = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (dictChoice) {
                return _ExprFPrism(dictCons)(dictIsSymbol)(Data_Const.functorConst)(k)(dictChoice);
            };
        };
    };
};
var _Integer = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _IntegerLit = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _IntegerShow = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _IntegerToDouble = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _List = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListBuild = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListFold = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListHead = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListIndexed = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListLast = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListLength = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListReverse = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Natural = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalBuild = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalEven = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalFold = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalIsZero = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalLit = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalLit_0 = function (dictChoice) {
    var $193 = _NaturalLit(dictChoice);
    var $194 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(dictChoice.Profunctor0());
    var $195 = Data_Lens_Prism.only(Data_Natural.eqNatural)(Data_Semiring.zero(Data_Natural.semiringNatural))(dictChoice);
    return function ($196) {
        return $193($194($195($196)));
    };
};
var _NaturalLit_1 = function (dictChoice) {
    var $197 = _NaturalLit(dictChoice);
    var $198 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(dictChoice.Profunctor0());
    var $199 = Data_Lens_Prism.only(Data_Natural.eqNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(dictChoice);
    return function ($200) {
        return $197($198($199($200)));
    };
};
var _NaturalOdd = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalShow = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalSubtract = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalToInteger = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _None = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Optional = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _OptionalBuild = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _OptionalFold = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Text = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _TextShow = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Var = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Field = function (dictChoice) {
    var $201 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $202 = Data_Lens_Iso.iso(Data_Tuple.swap)(Data_Tuple.swap)(dictChoice.Profunctor0());
    return function ($203) {
        return $201($202($203));
    };
};
var _Hashed = function (dictChoice) {
    return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Lam = function (dictChoice) {
    var outof = function (v) {
        return new Dhall_Core_AST_Types_Basics.BindingBody(v["var"], v.ty, v.body);
    };
    var into = function (v) {
        return {
            "var": v.value0,
            ty: v.value1,
            body: v.value2
        };
    };
    var $204 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $205 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($206) {
        return $204($205($206));
    };
};
var _Let = function (dictChoice) {
    var outof = function (v) {
        return new Dhall_Core_AST_Types_Basics.LetF(v["var"], v.ty, v.value, v.body);
    };
    var into = function (v) {
        return {
            "var": v.value0,
            ty: v.value1,
            value: v.value2,
            body: v.value3
        };
    };
    var $207 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.functorLetF)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $208 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($209) {
        return $207($208($209));
    };
};
var _ListLit = function (dictChoice) {
    var outof = function (v) {
        return new Data_Tuple.Tuple(v.ty, v.values);
    };
    var into = function (v) {
        return {
            ty: v.value0,
            values: v.value1
        };
    };
    var $210 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $211 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(dictChoice.Profunctor0());
    var $212 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($213) {
        return $210($211($212($213)));
    };
};
var _Merge = function (dictChoice) {
    return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.functorMergeF)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Pi = function (dictChoice) {
    var outof = function (v) {
        return new Dhall_Core_AST_Types_Basics.BindingBody(v["var"], v.ty, v.body);
    };
    var into = function (v) {
        return {
            "var": v.value0,
            ty: v.value1,
            body: v.value2
        };
    };
    var $214 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $215 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($216) {
        return $214($215($216));
    };
};
var _Project = function (dictChoice) {
    var $217 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $218 = Data_Lens_Iso.iso(function (v) {
        return new Data_Tuple.Tuple(v.value0, Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Newtype.unwrap(Data_Functor_App.newtypeApp))(Control_Category.identity(Control_Category.categoryFn))(v.value1));
    })(function (v) {
        return new Data_Tuple.Tuple(v.value0, Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Data_Functor_App.App)(Control_Category.identity(Control_Category.categoryFn))(v.value1));
    })(dictChoice.Profunctor0());
    return function ($219) {
        return $217($218($219));
    };
};
var _Record = function (dictFunctor) {
    return function (dictChoice) {
        return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictFunctor)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    };
};
var _Record_empty = function (dictMapLike) {
    return function (dictChoice) {
        var $220 = _Record(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(dictChoice);
        var $221 = Dhall_Map["_Empty"](dictMapLike)(dictChoice);
        return function ($222) {
            return $220($221($222));
        };
    };
};
var _RecordLit = function (dictFunctor) {
    return function (dictChoice) {
        return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictFunctor)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    };
};
var _RecordLit_empty = function (dictMapLike) {
    return function (dictChoice) {
        var $223 = _RecordLit(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(dictChoice);
        var $224 = Dhall_Map["_Empty"](dictMapLike)(dictChoice);
        return function ($225) {
            return $223($224($225));
        };
    };
};
var _Some = function (dictChoice) {
    var $226 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $227 = Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(dictChoice.Profunctor0());
    return function ($228) {
        return $226($227($228));
    };
};
var _TextLit = function (dictChoice) {
    return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.functorTextLitF)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _TextLit_empty = function (dictChoice) {
    var $229 = _TextLit(dictChoice);
    var $230 = Data_Lens_Prism["prism'"](Data_Function["const"](new Dhall_Core_AST_Types_Basics.TextLit("")))(function (v) {
        if (v instanceof Dhall_Core_AST_Types_Basics.TextLit && v.value0 === "") {
            return new Data_Maybe.Just(Data_Unit.unit);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
    return function ($231) {
        return $229($230($231));
    };
};
var _TextLit_single = function (dictChoice) {
    var $232 = _TextLit(dictChoice);
    var $233 = Data_Lens_Prism["prism'"](Dhall_Core_AST_Types_Basics.TextLit.create)(function (v) {
        if (v instanceof Dhall_Core_AST_Types_Basics.TextLit) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
    return function ($234) {
        return $232($233($234));
    };
};
var _ToMap = function (dictChoice) {
    return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Union = function (dictFunctor) {
    return function (dictChoice) {
        return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Data_Functor_Compose.functorCompose(dictFunctor)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    };
};
var _Union_empty = function (dictMapLike) {
    return function (dictChoice) {
        var $235 = _Union(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(dictChoice);
        var $236 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(dictChoice.Profunctor0());
        var $237 = Dhall_Map["_Empty"](dictMapLike)(dictChoice);
        return function ($238) {
            return $235($236($237($238)));
        };
    };
};
var _Embed = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Embed";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _E = function (dictFunctor) {
    return function (p) {
        return function (dictChoice) {
            var $239 = Data_Lens_Iso.iso(Dhall_Core_AST_Types.projectW)(Dhall_Core_AST_Types.embedW)(dictChoice.Profunctor0());
            var $240 = p(dictChoice);
            return function ($241) {
                return $239($240($241));
            };
        };
    };
};
var _Expr = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (dictChoice) {
                var $242 = _E(Data_Const.functorConst)(function (dictChoice1) {
                    return _ExprPrism(dictCons)(dictIsSymbol)(k)(dictChoice1);
                })(dictChoice);
                var $243 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(dictChoice.Profunctor0());
                return function ($244) {
                    return $242($243($244));
                };
            };
        };
    };
};
var _ExprF = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictFunctor) {
            return function (k) {
                return function (dictChoice) {
                    return _E(dictFunctor)(function (dictChoice1) {
                        return _ExprFPrism(dictCons)(dictIsSymbol)(dictFunctor)(k)(dictChoice1);
                    })(dictChoice);
                };
            };
        };
    };
};
var _DoubleShow = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _DoubleLit = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Double = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Const = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BoolLit = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BoolLit_False = function (dictChoice) {
    var $245 = _BoolLit(dictChoice);
    var $246 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(dictChoice.Profunctor0());
    var $247 = Data_Lens_Prism.only(Data_Eq.eqBoolean)(false)(dictChoice);
    return function ($248) {
        return $245($246($247($248)));
    };
};
var _BoolLit_True = function (dictChoice) {
    var $249 = _BoolLit(dictChoice);
    var $250 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(dictChoice.Profunctor0());
    var $251 = Data_Lens_Prism.only(Data_Eq.eqBoolean)(true)(dictChoice);
    return function ($252) {
        return $249($250($251($252)));
    };
};
var _BoolIf = function (dictChoice) {
    return _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.functorTriplet)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Bool = function (dictChoice) {
    return _ExprPrism()(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BinOpPrism = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (dictChoice) {
                return _ExprFPrism(dictCons)(dictIsSymbol)(Dhall_Core_AST_Types_Basics.functorPair)(k)(dictChoice);
            };
        };
    };
};
var _BoolAnd = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BoolEQ = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BoolNE = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BoolOr = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Combine = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _CombineTypes = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Equivalent = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ImportAlt = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _ListAppend = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalPlus = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _NaturalTimes = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _Prefer = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _TextAppend = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _UsingHeaders = function (dictChoice) {
    return _BinOpPrism()(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
};
var _BinOp = function (dictCons) {
    return function (dictIsSymbol) {
        return function (k) {
            return function (dictChoice) {
                return _E(Dhall_Core_AST_Types_Basics.functorPair)(function (dictChoice1) {
                    return _BinOpPrism(dictCons)(dictIsSymbol)(k)(dictChoice1);
                })(dictChoice);
            };
        };
    };
};
var _Assert = function (dictChoice) {
    var $253 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $254 = Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(dictChoice.Profunctor0());
    return function ($255) {
        return $253($254($255));
    };
};
var _App = function (dictChoice) {
    var outof = function (v) {
        return new Dhall_Core_AST_Types_Basics.Pair(v.fn, v.arg);
    };
    var into = function (v) {
        return {
            fn: v.value0,
            arg: v.value1
        };
    };
    var $256 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $257 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($258) {
        return $256($257($258));
    };
};
var _Annot = function (dictChoice) {
    var outof = function (v) {
        return new Dhall_Core_AST_Types_Basics.Pair(v.value, v.ty);
    };
    var into = function (v) {
        return {
            value: v.value0,
            ty: v.value1
        };
    };
    var $259 = _ExprFPrism()(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
    var $260 = Data_Lens_Iso.iso(into)(outof)(dictChoice.Profunctor0());
    return function ($261) {
        return $259($260($261));
    };
};
module.exports = {
    "_ExprF": _ExprF,
    "_E": _E,
    "_ExprFPrism": _ExprFPrism,
    "_Expr": _Expr,
    "_ExprPrism": _ExprPrism,
    "_BinOp": _BinOp,
    "_BinOpPrism": _BinOpPrism,
    mkExprF: mkExprF,
    mkExpr: mkExpr,
    mkBinOp: mkBinOp,
    mkConst: mkConst,
    "_Const": _Const,
    mkType: mkType,
    mkKind: mkKind,
    mkSort: mkSort,
    mkVar: mkVar,
    "_Var": _Var,
    mkLam: mkLam,
    "_Lam": _Lam,
    mkPi: mkPi,
    "_Pi": _Pi,
    mkArrow: mkArrow,
    mkForall: mkForall,
    mkApp: mkApp,
    "_App": _App,
    mkLet: mkLet,
    "_Let": _Let,
    mkAnnot: mkAnnot,
    "_Annot": _Annot,
    mkBool: mkBool,
    "_Bool": _Bool,
    mkBoolLit: mkBoolLit,
    "_BoolLit": _BoolLit,
    "_BoolLit_True": _BoolLit_True,
    "_BoolLit_False": _BoolLit_False,
    mkBoolAnd: mkBoolAnd,
    "_BoolAnd": _BoolAnd,
    mkBoolOr: mkBoolOr,
    "_BoolOr": _BoolOr,
    mkBoolEQ: mkBoolEQ,
    "_BoolEQ": _BoolEQ,
    mkBoolNE: mkBoolNE,
    "_BoolNE": _BoolNE,
    mkBoolIf: mkBoolIf,
    "_BoolIf": _BoolIf,
    mkNatural: mkNatural,
    "_Natural": _Natural,
    mkNaturalLit: mkNaturalLit,
    "_NaturalLit": _NaturalLit,
    "_NaturalLit_0": _NaturalLit_0,
    "_NaturalLit_1": _NaturalLit_1,
    mkNaturalFold: mkNaturalFold,
    "_NaturalFold": _NaturalFold,
    mkNaturalBuild: mkNaturalBuild,
    "_NaturalBuild": _NaturalBuild,
    mkNaturalIsZero: mkNaturalIsZero,
    "_NaturalIsZero": _NaturalIsZero,
    mkNaturalEven: mkNaturalEven,
    "_NaturalEven": _NaturalEven,
    mkNaturalOdd: mkNaturalOdd,
    "_NaturalOdd": _NaturalOdd,
    mkNaturalToInteger: mkNaturalToInteger,
    "_NaturalToInteger": _NaturalToInteger,
    mkNaturalShow: mkNaturalShow,
    "_NaturalShow": _NaturalShow,
    mkNaturalSubtract: mkNaturalSubtract,
    "_NaturalSubtract": _NaturalSubtract,
    mkNaturalPlus: mkNaturalPlus,
    "_NaturalPlus": _NaturalPlus,
    mkNaturalTimes: mkNaturalTimes,
    "_NaturalTimes": _NaturalTimes,
    mkInteger: mkInteger,
    "_Integer": _Integer,
    mkIntegerLit: mkIntegerLit,
    "_IntegerLit": _IntegerLit,
    mkIntegerShow: mkIntegerShow,
    "_IntegerShow": _IntegerShow,
    mkIntegerToDouble: mkIntegerToDouble,
    "_IntegerToDouble": _IntegerToDouble,
    mkDouble: mkDouble,
    "_Double": _Double,
    mkDoubleLit: mkDoubleLit,
    "_DoubleLit": _DoubleLit,
    mkDoubleShow: mkDoubleShow,
    "_DoubleShow": _DoubleShow,
    mkText: mkText,
    "_Text": _Text,
    mkTextLit: mkTextLit,
    "mkTextLit'": mkTextLit$prime,
    "_TextLit": _TextLit,
    "_TextLit_empty": _TextLit_empty,
    "_TextLit_single": _TextLit_single,
    mkTextAppend: mkTextAppend,
    "_TextAppend": _TextAppend,
    mkTextShow: mkTextShow,
    "_TextShow": _TextShow,
    mkList: mkList,
    "_List": _List,
    mkListLit: mkListLit,
    "_ListLit": _ListLit,
    mkListAppend: mkListAppend,
    "_ListAppend": _ListAppend,
    mkListFold: mkListFold,
    "_ListFold": _ListFold,
    mkListBuild: mkListBuild,
    "_ListBuild": _ListBuild,
    mkListLength: mkListLength,
    "_ListLength": _ListLength,
    mkListHead: mkListHead,
    "_ListHead": _ListHead,
    mkListLast: mkListLast,
    "_ListLast": _ListLast,
    mkListIndexed: mkListIndexed,
    "_ListIndexed": _ListIndexed,
    mkListReverse: mkListReverse,
    "_ListReverse": _ListReverse,
    mkOptional: mkOptional,
    "_Optional": _Optional,
    mkSome: mkSome,
    "_Some": _Some,
    mkNone: mkNone,
    "_None": _None,
    mkOptionalFold: mkOptionalFold,
    "_OptionalFold": _OptionalFold,
    mkOptionalBuild: mkOptionalBuild,
    "_OptionalBuild": _OptionalBuild,
    mkRecord: mkRecord,
    "_Record": _Record,
    "_Record_empty": _Record_empty,
    mkRecordLit: mkRecordLit,
    "_RecordLit": _RecordLit,
    "_RecordLit_empty": _RecordLit_empty,
    mkUnion: mkUnion,
    "_Union": _Union,
    "_Union_empty": _Union_empty,
    mkCombine: mkCombine,
    "_Combine": _Combine,
    mkCombineTypes: mkCombineTypes,
    "_CombineTypes": _CombineTypes,
    mkPrefer: mkPrefer,
    "_Prefer": _Prefer,
    mkMerge: mkMerge,
    "_Merge": _Merge,
    mkToMap: mkToMap,
    "_ToMap": _ToMap,
    mkField: mkField,
    "_Field": _Field,
    mkProject: mkProject,
    "_Project": _Project,
    mkAssert: mkAssert,
    "_Assert": _Assert,
    mkEquivalent: mkEquivalent,
    "_Equivalent": _Equivalent,
    mkImportAlt: mkImportAlt,
    "_ImportAlt": _ImportAlt,
    mkUsingHeaders: mkUsingHeaders,
    "_UsingHeaders": _UsingHeaders,
    mkHashed: mkHashed,
    "_Hashed": _Hashed,
    mkEmbed: mkEmbed,
    "_Embed": _Embed
};

},{"../Control.Applicative/index.js":17,"../Control.Category/index.js":24,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor.App/index.js":133,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Iso/index.js":170,"../Data.Lens.Prism/index.js":175,"../Data.Maybe/index.js":187,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Semiring/index.js":223,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Map/index.js":284}],263:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_Fold = require("../Matryoshka.Fold/index.js");
var Expr = function (x) {
    return x;
};
var newtypeExpr = new Data_Newtype.Newtype(function (n) {
    return n;
}, Expr);
var recursiveExpr = new Matryoshka_Class_Recursive.Recursive(function () {
    return Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF);
}, (function () {
    var $9 = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))(Data_Newtype.wrap(newtypeExpr));
    var $10 = Matryoshka_Class_Recursive.project(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF));
    var $11 = Data_Newtype.unwrap(newtypeExpr);
    return function ($12) {
        return $9($10($11($12)));
    };
})());
var eqExpr = function (dictEq1) {
    return function (dictEq) {
        return function (dictEq2) {
            return Control_Comonad_Cofree.eqCofree(Dhall_Core_AST_Types.eq1ExprRowVF(dictEq1)(dictEq2))(dictEq);
        };
    };
};
var denote = Matryoshka_Fold.transCata(recursiveExpr)(Dhall_Core_AST_Types.corecursiveExpr)((function () {
    var $13 = Control_Comonad.extract(Data_Tuple.comonadTuple);
    return function ($14) {
        return $13(Control_Comonad_Env_Trans.runEnvT($14));
    };
})());
var corecursiveExpr = new Matryoshka_Class_Corecursive.Corecursive(function () {
    return Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF);
}, (function () {
    var $15 = Data_Newtype.wrap(newtypeExpr);
    var $16 = Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF));
    var $17 = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))(Data_Newtype.unwrap(newtypeExpr));
    return function ($18) {
        return $15($16($17($18)));
    };
})());
var innote = function (s) {
    return Matryoshka_Fold.transCata(Dhall_Core_AST_Types.recursiveExpr)(corecursiveExpr)((function () {
        var $19 = Data_Tuple.Tuple.create(s);
        return function ($20) {
            return Control_Comonad_Env_Trans.EnvT($19($20));
        };
    })());
};
var notateIndexFrom = function (dictFunctorWithIndex) {
    var go = function (ix) {
        return function (e) {
            return Matryoshka_Class_Corecursive.embed(corecursiveExpr)(Control_Comonad_Env_Trans.mapEnvT(Data_FunctorWithIndex.mapWithIndex(Dhall_Core_AST_Types.functorWithIndexERVF(dictFunctorWithIndex))(function (i$prime) {
                return go(new Data_List_Types.Cons(Control_Applicative.pure(Data_Lazy.applicativeLazy)(i$prime), ix));
            }))(Control_Comonad_Env_Trans.withEnvT(Data_Function.applyFlipped(ix))(Matryoshka_Class_Recursive.project(recursiveExpr)(e))));
        };
    };
    return go;
};
var notateIndex = function (dictFunctorWithIndex) {
    return notateIndexFrom(dictFunctorWithIndex)(Data_List_Types.Nil.value);
};
var bifunctorExpr = function (dictFunctor) {
    return new Data_Bifunctor.Bifunctor(function (f) {
        return function (g) {
            return Matryoshka_Fold.transCata(recursiveExpr)(corecursiveExpr)((function () {
                var $21 = Control_Comonad_Env_Trans.withEnvT(f);
                var $22 = Control_Comonad_Env_Trans.mapEnvT(Data_Bifunctor.lmap(Dhall_Core_AST_Types.bifunctorERVF)(g));
                return function ($23) {
                    return $21($22($23));
                };
            })());
        };
    });
};
module.exports = {
    Expr: Expr,
    denote: denote,
    innote: innote,
    notateIndex: notateIndex,
    notateIndexFrom: notateIndexFrom,
    newtypeExpr: newtypeExpr,
    eqExpr: eqExpr,
    recursiveExpr: recursiveExpr,
    corecursiveExpr: corecursiveExpr,
    bifunctorExpr: bifunctorExpr
};

},{"../Control.Applicative/index.js":17,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Data.Bifunctor/index.js":98,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Lazy/index.js":156,"../Data.List.Types/index.js":182,"../Data.Newtype/index.js":197,"../Data.Tuple/index.js":251,"../Dhall.Core.AST.Types/index.js":268,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.Fold/index.js":358}],264:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var move = function (dictIsSymbol) {
    return function (dictCons) {
        return function (sym) {
            return function (ix) {
                return function (path) {
                    return new Data_List_Types.Cons(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(ix), path);
                };
            };
        };
    };
};
var moveF = function (dictIsSymbol) {
    return function (dictCons) {
        return function (sym) {
            return function (ix) {
                return Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(move(dictIsSymbol)(dictCons)(sym)(ix));
            };
        };
    };
};
var stepF = function (dictIsSymbol) {
    return function (dictCons) {
        return function (sym) {
            return moveF(dictIsSymbol)(dictCons)(sym)(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordNil)));
        };
    };
};
var step = function (dictIsSymbol) {
    return function (dictCons) {
        return function (sym) {
            return move(dictIsSymbol)(dictCons)(sym)(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordNil)));
        };
    };
};
var allWithin = Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Maybe.applicativeMaybe)(Data_Variant.on()(new Data_Symbol.IsSymbol(function () {
    return "within";
}))(Dhall_Core_AST_Types_Basics["_S"])(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Plus.empty(Data_Maybe.plusMaybe))));
module.exports = {
    move: move,
    moveF: moveF,
    stepF: stepF,
    step: step,
    allWithin: allWithin
};

},{"../Control.Applicative/index.js":17,"../Control.Plus/index.js":65,"../Data.Bifunctor/index.js":98,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Variant/index.js":259,"../Dhall.Core.AST.Types.Basics/index.js":267}],265:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Dhall_Core_AST_Noted = require("../Dhall.Core.AST.Noted/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_Zippers_Recursive = require("../Dhall.Core.Zippers.Recursive/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var OverCasesM = function (x) {
    return x;
};
var runOverCasesM = function (dictRowToList) {
    return function (dictVariantFTravCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (dictApplicative) {
                            return function (dictTraversable) {
                                return function (v) {
                                    return function (rest) {
                                        return function (cases) {
                                            return v(Data_Functor_Variant.expandTravMatch(dictRowToList)(dictVariantFTravCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(dictUnion)(dictUnion)(dictApplicative)(dictTraversable)(cases)(rest));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var runOverCases = function (dictRowToList) {
    return function (dictVariantFMapCases) {
        return function (dictRowToList1) {
            return function (dictVariantTags) {
                return function (dictVariantFMaps) {
                    return function (dictUnion) {
                        return function (v) {
                            return function (rest) {
                                return function (cases) {
                                    var $53 = Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity);
                                    var $54 = v((function () {
                                        var $56 = Data_Functor_Variant.expandOverMatch(dictRowToList)(dictVariantFMapCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(dictUnion)(dictUnion)(cases)(rest);
                                        return function ($57) {
                                            return Data_Identity.Identity($56($57));
                                        };
                                    })());
                                    return function ($55) {
                                        return $53($54($55));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var runAlgebraNotedM = function (dictFunctor) {
    return function (df) {
        return function (alg) {
            var travEnvT = function (f) {
                return function (v) {
                    return Data_Functor.map(dictFunctor)((function () {
                        var $58 = Data_Tuple.Tuple.create(v.value0);
                        return function ($59) {
                            return Control_Comonad_Env_Trans.EnvT($58($59));
                        };
                    })())(f(v.value1));
                };
            };
            var go = function (i) {
                return function (e) {
                    return alg(i)({
                        unlayer: (function () {
                            var $60 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
                            var $61 = Control_Comonad.extract(Data_Tuple.comonadTuple);
                            var $62 = Data_Newtype.unwrap(Control_Comonad_Env_Trans.newtypeEnvT);
                            var $63 = Matryoshka_Class_Recursive.project(Dhall_Core_AST_Noted.recursiveExpr);
                            return function ($64) {
                                return $60($61($62($63($64))));
                            };
                        })(),
                        layer: (function () {
                            var $65 = Matryoshka_Class_Corecursive.embed(Dhall_Core_AST_Noted.corecursiveExpr);
                            var $66 = Data_Newtype.wrap(Control_Comonad_Env_Trans.newtypeEnvT);
                            var $67 = Data_Tuple.Tuple.create(df);
                            var $68 = Data_Newtype.wrap(Dhall_Core_AST_Types.newtypeERVF);
                            return function ($69) {
                                return $65($66($67($68($69))));
                            };
                        })(),
                        overlayer: (function () {
                            var $70 = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(Dhall_Core_Zippers_Recursive["_recurse"](Dhall_Core_AST_Noted.recursiveExpr)(Dhall_Core_AST_Noted.corecursiveExpr)(Data_Profunctor_Star.profunctorStar(dictFunctor)));
                            var $71 = Data_Newtype.traverse(dictFunctor)(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.ERVF);
                            return function ($72) {
                                return $70(travEnvT($71($72)));
                            };
                        })(),
                        recurse: go
                    })(e);
                };
            };
            return go;
        };
    };
};
var runAlgebraNoted = function (df) {
    return function (alg) {
        return function (i) {
            return function (e) {
                return Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(runAlgebraNotedM(Data_Identity.functorIdentity)(df)(alg)(i)(e));
            };
        };
    };
};
var runAlgebraExprM = function (dictFunctor) {
    return function (alg) {
        var go = function (i) {
            return function (e) {
                return alg(i)({
                    unlayer: (function () {
                        var $73 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
                        var $74 = Matryoshka_Class_Recursive.project(Dhall_Core_AST_Types.recursiveExpr);
                        return function ($75) {
                            return $73($74($75));
                        };
                    })(),
                    layer: (function () {
                        var $76 = Matryoshka_Class_Corecursive.embed(Dhall_Core_AST_Types.corecursiveExpr);
                        var $77 = Data_Newtype.wrap(Dhall_Core_AST_Types.newtypeERVF);
                        return function ($78) {
                            return $76($77($78));
                        };
                    })(),
                    overlayer: (function () {
                        var $79 = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(Dhall_Core_Zippers_Recursive["_recurse"](Dhall_Core_AST_Types.recursiveExpr)(Dhall_Core_AST_Types.corecursiveExpr)(Data_Profunctor_Star.profunctorStar(dictFunctor)));
                        var $80 = Data_Newtype.traverse(dictFunctor)(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.ERVF);
                        return function ($81) {
                            return $79($80($81));
                        };
                    })(),
                    recurse: go
                })(e);
            };
        };
        return go;
    };
};
var runAlgebraExpr = function (alg) {
    return function (i) {
        return function (e) {
            return Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(runAlgebraExprM(Data_Identity.functorIdentity)(alg)(i)(e));
        };
    };
};
var elim1M = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictRowToList) {
                return function (dictVariantFTravCases) {
                    return function (dictRowToList1) {
                        return function (dictVariantTags) {
                            return function (dictVariantFMaps) {
                                return function (dictUnion) {
                                    return function (dictApplicative) {
                                        return function (dictTraversable) {
                                            return function (sym) {
                                                return function (handler) {
                                                    return Data_Variant.on(dictCons)(dictIsSymbol)(sym)(function (i) {
                                                        return function (node) {
                                                            return runOverCasesM(dictRowToList)(dictVariantFTravCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(dictApplicative)(dictTraversable)(node.overlayer)(node.recurse(Data_Variant.inj(dictCons1)(dictIsSymbol)(sym)(i)))(handler(i)(node));
                                                        };
                                                    });
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var elim1 = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictRowToList) {
                return function (dictVariantFMapCases) {
                    return function (dictRowToList1) {
                        return function (dictVariantTags) {
                            return function (dictVariantFMaps) {
                                return function (dictUnion) {
                                    return function (sym) {
                                        return function (handler) {
                                            return Data_Variant.on(dictCons)(dictIsSymbol)(sym)(function (i) {
                                                return function (node) {
                                                    var $82 = runOverCases(dictRowToList)(dictVariantFMapCases)(dictRowToList1)(dictVariantTags)(dictVariantFMaps)(dictUnion)(node.overlayer)(Data_Functor.map(Data_Functor.functorFn)(Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity))(node.recurse(Data_Variant.inj(dictCons1)(dictIsSymbol)(sym)(i))))(handler(i)((function () {
                                                        var $50 = {};
                                                        for (var $51 in node) {
                                                            if ({}.hasOwnProperty.call(node, $51)) {
                                                                $50[$51] = node[$51];
                                                            };
                                                        };
                                                        $50.recurse = (function () {
                                                            var $84 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity));
                                                            return function ($85) {
                                                                return $84(node.recurse($85));
                                                            };
                                                        })();
                                                        return $50;
                                                    })()));
                                                    return function ($83) {
                                                        return Data_Identity.Identity($82($83));
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    OverCasesM: OverCasesM,
    runOverCases: runOverCases,
    runOverCasesM: runOverCasesM,
    elim1: elim1,
    elim1M: elim1M,
    runAlgebraExpr: runAlgebraExpr,
    runAlgebraExprM: runAlgebraExprM,
    runAlgebraNoted: runAlgebraNoted,
    runAlgebraNotedM: runAlgebraNotedM
};

},{"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Semigroupoid/index.js":68,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197,"../Data.Profunctor.Star/index.js":211,"../Data.Tuple/index.js":251,"../Data.Variant/index.js":259,"../Dhall.Core.AST.Noted/index.js":263,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Core.Zippers.Recursive/index.js":273,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356}],266:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var rewriteTopDownA = function (dictApplicative) {
    return function (dictTraversable) {
        return function (dictUnion) {
            return function (rw1) {
                var go = function (expr) {
                    return rw1((function () {
                        var $22 = Data_Functor.map((dictApplicative.Apply0()).Functor0())((function () {
                            var $25 = Data_Functor_Variant.expand(dictUnion);
                            return function ($26) {
                                return Dhall_Core_AST_Types.embedW($25($26));
                            };
                        })());
                        var $23 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(go);
                        return function ($24) {
                            return $22($23($24));
                        };
                    })())(Dhall_Core_AST_Types.projectW(expr));
                };
                return go;
            };
        };
    };
};
var rewriteTopDown = function (dictUnion) {
    return function (rw1) {
        var go = function (expr) {
            return rw1((function () {
                var $27 = Data_Functor_Variant.expand(dictUnion);
                var $28 = Data_Functor.map(Data_Functor_Variant.functorVariantF)(go);
                return function ($29) {
                    return Dhall_Core_AST_Types.embedW($27($28($29)));
                };
            })())(Dhall_Core_AST_Types.projectW(expr));
        };
        return go;
    };
};
var rewriteBottomUpM = function (dictMonad) {
    return function (dictTraversable) {
        return function (dictUnion) {
            return function (rw1) {
                var go = function (expr) {
                    return Control_Bind.bindFlipped(dictMonad.Bind1())(rw1((function () {
                        var $30 = Data_Functor_Variant.expand(dictUnion);
                        return function ($31) {
                            return Dhall_Core_AST_Types.embedW($30($31));
                        };
                    })()))(Data_Traversable.traverse(Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Annot";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Assert";
                    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Bool";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolAnd";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolEQ";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))(Dhall_Core_AST_Types_Basics.traversableTriplet)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolLit";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolNE";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolOr";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Combine";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "CombineTypes";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Const";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Double";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "DoubleLit";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "DoubleShow";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Embed";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Equivalent";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Hashed";
                    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ImportAlt";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Integer";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerLit";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerShow";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerToDouble";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    }))(Dhall_Core_AST_Types_Basics.traversableLetF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "List";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListAppend";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListBuild";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListHead";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListIndexed";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLast";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLength";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ListReverse";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))(Dhall_Core_AST_Types_Basics.traversableMergeF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Natural";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalBuild";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalEven";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalFold";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalIsZero";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalOdd";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalPlus";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalShow";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalSubtract";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalTimes";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalToInteger";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Optional";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "OptionalBuild";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "OptionalFold";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Prefer";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "RecordLit";
                    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Text";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "TextAppend";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "TextLit";
                    }))(Dhall_Core_AST_Types_Basics.traversableTextLitF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "TextShow";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Union";
                    }))(Data_Functor_Compose.traversableCompose(dictTraversable)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(dictMonad.Applicative0())(go)(Dhall_Core_AST_Types.projectW(expr)));
                };
                return go;
            };
        };
    };
};
var rewriteBottomUpA$prime = function (dictApplicative) {
    return function (dictTraversable) {
        return function (dictTraversable1) {
            return function (dictUnion) {
                return function (rw1) {
                    var go = function (expr) {
                        return rw1((function () {
                            var $32 = Data_Functor.map((dictApplicative.Apply0()).Functor0())((function () {
                                var $35 = Data_Functor_Variant.expand(dictUnion);
                                return function ($36) {
                                    return Dhall_Core_AST_Types.embedW($35($36));
                                };
                            })());
                            var $33 = Data_Traversable.sequence(dictTraversable1)(dictApplicative);
                            return function ($34) {
                                return $32($33($34));
                            };
                        })())(Data_Functor.map(Data_Functor_Variant.functorVariantF)(go)(Dhall_Core_AST_Types.projectW(expr)));
                    };
                    return go;
                };
            };
        };
    };
};
var rewriteBottomUpA = function (dictApplicative) {
    return function (dictTraversable) {
        return function (dictUnion) {
            return function (rw1) {
                var go = function (expr) {
                    return rw1((function () {
                        var $37 = Data_Functor_Variant.expand(dictUnion);
                        return function ($38) {
                            return Dhall_Core_AST_Types.embedW($37($38));
                        };
                    })())(Data_Functor.map(Data_Functor_Variant.functorVariantF)(go)(Dhall_Core_AST_Types.projectW(expr)));
                };
                return go;
            };
        };
    };
};
var rewriteBottomUp = function (dictUnion) {
    return function (rw1) {
        var go = function (expr) {
            return rw1((function () {
                var $39 = Data_Functor_Variant.expand(dictUnion);
                return function ($40) {
                    return Dhall_Core_AST_Types.embedW($39($40));
                };
            })())(Data_Functor.map(Data_Functor_Variant.functorVariantF)(go)(Dhall_Core_AST_Types.projectW(expr)));
        };
        return go;
    };
};
var hoistExpr = function (dictFunctor) {
    return function (nat) {
        return Data_Newtype.over(Dhall_Core_AST_Types.newtypeExpr)(Dhall_Core_AST_Types.newtypeExpr)(Dhall_Core_AST_Types.Expr)(Control_Monad_Free.hoistFree(function (a) {
            return Data_Functor_Variant.expandOverMatch()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
                return "Union";
            })))(new Data_Symbol.IsSymbol(function () {
                return "RecordLit";
            })))(new Data_Symbol.IsSymbol(function () {
                return "Record";
            })))(new Data_Symbol.IsSymbol(function () {
                return "Project";
            })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Functor_Compose.functorCompose(dictFunctor)(Data_Maybe.functorMaybe)))(Type_Equality.refl)(dictFunctor))(Type_Equality.refl)(dictFunctor))(Type_Equality.refl)(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither)))()()()({
                Project: function (v) {
                    return Data_Functor_Product.bihoistProduct(Control_Category.identity(Control_Category.categoryFn))(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Newtype.over(Data_Functor_App.newtypeApp)(Data_Functor_App.newtypeApp)(Data_Functor_App.App)(nat)))(v);
                },
                Record: Data_Function.apply(nat),
                RecordLit: Data_Function.apply(nat),
                Union: Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)(nat)
            })(Control_Category.identity(Control_Category.categoryFn))(a);
        }));
    };
};
var unordered = function (dictMapLike) {
    return hoistExpr(Data_Map_Internal.functorMap)(Dhall_Map.unordered(dictMapLike));
};
var convTo = function (dictMapLike) {
    return function (dictMapLike1) {
        var $41 = hoistExpr(((dictMapLike1.TraversableWithIndex2()).Traversable2()).Functor0());
        var $42 = Dhall_Map.convTo(dictMapLike)(dictMapLike1);
        return function ($43) {
            return $41($42($43));
        };
    };
};
var conv = function (dictMapLike) {
    return function (dictMapLike1) {
        return hoistExpr(((dictMapLike1.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.conv(dictMapLike)(dictMapLike1));
    };
};
module.exports = {
    hoistExpr: hoistExpr,
    conv: conv,
    convTo: convTo,
    unordered: unordered,
    rewriteTopDown: rewriteTopDown,
    rewriteBottomUp: rewriteBottomUp,
    rewriteTopDownA: rewriteTopDownA,
    rewriteBottomUpM: rewriteBottomUpM,
    rewriteBottomUpA: rewriteBottomUpA,
    "rewriteBottomUpA'": rewriteBottomUpA$prime
};

},{"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Free/index.js":42,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor.App/index.js":133,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Variant.Internal/index.js":258,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Map/index.js":284,"../Type.Equality/index.js":388}],267:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Dhall_Core_Zippers = require("../Dhall.Core.Zippers/index.js");
var Dhall_Core_Zippers_Merge = require("../Dhall.Core.Zippers.Merge/index.js");
var Triplet0 = (function () {
    function Triplet0(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Triplet0.create = function (value0) {
        return function (value1) {
            return new Triplet0(value0, value1);
        };
    };
    return Triplet0;
})();
var Triplet1 = (function () {
    function Triplet1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Triplet1.create = function (value0) {
        return function (value1) {
            return new Triplet1(value0, value1);
        };
    };
    return Triplet1;
})();
var Triplet2 = (function () {
    function Triplet2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Triplet2.create = function (value0) {
        return function (value1) {
            return new Triplet2(value0, value1);
        };
    };
    return Triplet2;
})();
var Triplet = (function () {
    function Triplet(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Triplet.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Triplet(value0, value1, value2);
            };
        };
    };
    return Triplet;
})();
var Three1 = (function () {
    function Three1() {

    };
    Three1.value = new Three1();
    return Three1;
})();
var Three2 = (function () {
    function Three2() {

    };
    Three2.value = new Three2();
    return Three2;
})();
var Three3 = (function () {
    function Three3() {

    };
    Three3.value = new Three3();
    return Three3;
})();
var TextLit = (function () {
    function TextLit(value0) {
        this.value0 = value0;
    };
    TextLit.create = function (value0) {
        return new TextLit(value0);
    };
    return TextLit;
})();
var TextInterp = (function () {
    function TextInterp(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TextInterp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TextInterp(value0, value1, value2);
            };
        };
    };
    return TextInterp;
})();
var TextInterp0 = (function () {
    function TextInterp0(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TextInterp0.create = function (value0) {
        return function (value1) {
            return new TextInterp0(value0, value1);
        };
    };
    return TextInterp0;
})();
var TextInterp1 = (function () {
    function TextInterp1(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TextInterp1.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TextInterp1(value0, value1, value2);
            };
        };
    };
    return TextInterp1;
})();
var Pair0 = (function () {
    function Pair0(value0) {
        this.value0 = value0;
    };
    Pair0.create = function (value0) {
        return new Pair0(value0);
    };
    return Pair0;
})();
var Pair1 = (function () {
    function Pair1(value0) {
        this.value0 = value0;
    };
    Pair1.create = function (value0) {
        return new Pair1(value0);
    };
    return Pair1;
})();
var Pair = (function () {
    function Pair(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Pair.create = function (value0) {
        return function (value1) {
            return new Pair(value0, value1);
        };
    };
    return Pair;
})();
var MergeF0 = (function () {
    function MergeF0(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MergeF0.create = function (value0) {
        return function (value1) {
            return new MergeF0(value0, value1);
        };
    };
    return MergeF0;
})();
var MergeF1 = (function () {
    function MergeF1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MergeF1.create = function (value0) {
        return function (value1) {
            return new MergeF1(value0, value1);
        };
    };
    return MergeF1;
})();
var MergeF2 = (function () {
    function MergeF2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    MergeF2.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new MergeF2(value0, value1, value2);
            };
        };
    };
    return MergeF2;
})();
var MergeF = (function () {
    function MergeF(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    MergeF.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new MergeF(value0, value1, value2);
            };
        };
    };
    return MergeF;
})();
var LetF0 = (function () {
    function LetF0(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    LetF0.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new LetF0(value0, value1, value2, value3);
                };
            };
        };
    };
    return LetF0;
})();
var LetF1 = (function () {
    function LetF1(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LetF1.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LetF1(value0, value1, value2);
            };
        };
    };
    return LetF1;
})();
var LetF2 = (function () {
    function LetF2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LetF2.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LetF2(value0, value1, value2);
            };
        };
    };
    return LetF2;
})();
var LetF = (function () {
    function LetF(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    LetF.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new LetF(value0, value1, value2, value3);
                };
            };
        };
    };
    return LetF;
})();
var BindingBody0 = (function () {
    function BindingBody0(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BindingBody0.create = function (value0) {
        return function (value1) {
            return new BindingBody0(value0, value1);
        };
    };
    return BindingBody0;
})();
var BindingBody1 = (function () {
    function BindingBody1(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    BindingBody1.create = function (value0) {
        return function (value1) {
            return new BindingBody1(value0, value1);
        };
    };
    return BindingBody1;
})();
var BindingBody = (function () {
    function BindingBody(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    BindingBody.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new BindingBody(value0, value1, value2);
            };
        };
    };
    return BindingBody;
})();
var showThree = new Data_Show.Show(function (v) {
    if (v instanceof Three1) {
        return "Three1";
    };
    if (v instanceof Three2) {
        return "Three2";
    };
    if (v instanceof Three3) {
        return "Three3";
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 41, column 1 - line 44, column 25): " + [ v.constructor.name ]);
});
var pureTextLitF = function (a) {
    return new TextInterp("", a, new TextLit(""));
};
var isEmptyTextLitF = function (v) {
    if (v instanceof TextLit && v.value0 === "") {
        return true;
    };
    return false;
};
var genericTriplet = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
}, function (x) {
    return new Triplet(x.value0, x.value1.value0, x.value1.value1);
});
var showTriplet = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericTriplet)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))))(new Data_Symbol.IsSymbol(function () {
        return "Triplet";
    }))));
};
var genericTextLitF = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof TextLit) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof TextInterp) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2)));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 220, column 1 - line 220, column 58): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new TextLit(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr) {
        return new TextInterp(x.value0.value0, x.value0.value1.value0, x.value0.value1.value1);
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 220, column 1 - line 220, column 58): " + [ x.constructor.name ]);
});
var showTextLitF = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericTextLitF)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(showTextLitF(dictShow)))))(new Data_Symbol.IsSymbol(function () {
        return "TextInterp";
    })))));
};
var genericPair = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, x.value1);
}, function (x) {
    return new Pair(x.value0, x.value1);
});
var showPair = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPair)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow)))(new Data_Symbol.IsSymbol(function () {
        return "Pair";
    }))));
};
var genericMergeF = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
}, function (x) {
    return new MergeF(x.value0, x.value1.value0, x.value1.value1);
});
var showMergeF = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMergeF)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)))))(new Data_Symbol.IsSymbol(function () {
        return "MergeF";
    }))));
};
var genericLetF = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, x.value3)));
}, function (x) {
    return new LetF(x.value0, x.value1.value0, x.value1.value1.value0, x.value1.value1.value1);
});
var showLetF = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericLetF)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow)))))(new Data_Symbol.IsSymbol(function () {
        return "LetF";
    }))));
};
var genericBindingBody = new Data_Generic_Rep.Generic(function (x) {
    return new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2));
}, function (x) {
    return new BindingBody(x.value0, x.value1.value0, x.value1.value1);
});
var showBindingBody = function (dictShow) {
    return new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericBindingBody)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))(Data_Generic_Rep_Show.genericShowArgsArgument(dictShow))))(new Data_Symbol.IsSymbol(function () {
        return "BindingBody";
    }))));
};
var functorTriplet$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Triplet0) {
            return new Triplet0(f(v.value0), f(v.value1));
        };
        if (v instanceof Triplet1) {
            return new Triplet1(f(v.value0), f(v.value1));
        };
        if (v instanceof Triplet2) {
            return new Triplet2(f(v.value0), f(v.value1));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 174, column 1 - line 177, column 50): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergeTriplet$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorTriplet$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Triplet0 && v2 instanceof Triplet0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Triplet0.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(new Data_Maybe.Just(v(v1.value1)(v2.value1)));
            };
            if (v1 instanceof Triplet1 && v2 instanceof Triplet1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Triplet1.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(new Data_Maybe.Just(v(v1.value1)(v2.value1)));
            };
            if (v1 instanceof Triplet2 && v2 instanceof Triplet2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Triplet2.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(new Data_Maybe.Just(v(v1.value1)(v2.value1)));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorTriplet = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Triplet(f(v.value0), f(v.value1), f(v.value2));
    };
});
var functorWithIndexTriplet = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTriplet;
}, function (f) {
    return function (v) {
        return new Triplet(f(Three1.value)(v.value0), f(Three2.value)(v.value1), f(Three3.value)(v.value2));
    };
});
var mergeTriplet = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorTriplet;
}, function (f) {
    return function (v) {
        return function (v1) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Triplet.create))(new Data_Maybe.Just(f(v.value0)(v1.value0))))(new Data_Maybe.Just(f(v.value1)(v1.value1))))(new Data_Maybe.Just(f(v.value2)(v1.value2)));
        };
    };
});
var functorTextLitF = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof TextLit) {
            return new TextLit(v.value0);
        };
        if (v instanceof TextInterp) {
            return new TextInterp(v.value0, f(v.value1), Data_Functor.map(functorTextLitF)(f)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 228, column 1 - line 230, column 62): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var functorTextLitF$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof TextInterp0) {
            return new TextInterp0(v.value0, Data_Functor.map(functorTextLitF)(f)(v.value1));
        };
        if (v instanceof TextInterp1) {
            return new TextInterp1(v.value0, f(v.value1), Data_Functor.map(functorTextLitF$prime)(f)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 277, column 1 - line 279, column 64): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var functorWithIndexTextLitF = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTextLitF;
}, function (f) {
    return function (v) {
        if (v instanceof TextLit) {
            return new TextLit(v.value0);
        };
        if (v instanceof TextInterp) {
            return new TextInterp(v.value0, f(Data_Semiring.zero(Data_Natural.semiringNatural))(v.value1), Data_FunctorWithIndex.mapWithIndex(functorWithIndexTextLitF)(function (i) {
                return f(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(i));
            })(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 232, column 1 - line 234, column 103): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergeTextLitF = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorTextLitF;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof TextLit && v2 instanceof TextLit) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(TextLit.create))((function () {
                    var $757 = v1.value0 === v2.value0;
                    if ($757) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })());
            };
            if (v1 instanceof TextInterp && v2 instanceof TextInterp) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(TextInterp.create))((function () {
                    var $760 = v1.value0 === v2.value0;
                    if ($760) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(new Data_Maybe.Just(v(v1.value1)(v2.value1))))(Dhall_Core_Zippers_Merge.mergeWith(mergeTextLitF)(v)(v1.value2)(v2.value2));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var mergeTextLitF$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorTextLitF$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof TextInterp0 && v2 instanceof TextInterp0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(TextInterp0.create))((function () {
                    var $770 = v1.value0 === v2.value0;
                    if ($770) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(Dhall_Core_Zippers_Merge.mergeWith(mergeTextLitF)(v)(v1.value1)(v2.value1));
            };
            if (v1 instanceof TextInterp1 && v2 instanceof TextInterp1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(TextInterp1.create))((function () {
                    var $775 = v1.value0 === v2.value0;
                    if ($775) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(new Data_Maybe.Just(v(v1.value1)(v2.value1))))(Dhall_Core_Zippers_Merge.mergeWith(mergeTextLitF$prime)(v)(v1.value2)(v2.value2));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorPair$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Pair0) {
            return new Pair0(f(v.value0));
        };
        if (v instanceof Pair1) {
            return new Pair1(f(v.value0));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 92, column 1 - line 94, column 34): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergePair$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorPair$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Pair0 && v2 instanceof Pair0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Pair0.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0)));
            };
            if (v1 instanceof Pair1 && v2 instanceof Pair1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Pair1.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0)));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorPair = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Pair(f(v.value0), f(v.value1));
    };
});
var functorWithIndexPair = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorPair;
}, function (f) {
    return function (v) {
        return new Pair(f(false)(v.value0), f(true)(v.value1));
    };
});
var mergePair = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorPair;
}, function (f) {
    return function (v) {
        return function (v1) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Pair.create))(new Data_Maybe.Just(f(v.value0)(v1.value0))))(new Data_Maybe.Just(f(v.value1)(v1.value1)));
        };
    };
});
var functorMergeF$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof MergeF0) {
            return new MergeF0(f(v.value0), Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1));
        };
        if (v instanceof MergeF1) {
            return new MergeF1(f(v.value0), Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1));
        };
        if (v instanceof MergeF2) {
            return new MergeF2(f(v.value0), f(v.value1), Data_Functor.map(Data_Const.functorConst)(f)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 360, column 1 - line 363, column 62): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergeMergeF$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorMergeF$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof MergeF0 && v2 instanceof MergeF0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(MergeF0.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(v)(v1.value1)(v2.value1));
            };
            if (v1 instanceof MergeF1 && v2 instanceof MergeF1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(MergeF1.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(v)(v1.value1)(v2.value1));
            };
            if (v1 instanceof MergeF2 && v2 instanceof MergeF2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(MergeF2.create))(new Data_Maybe.Just(v(v1.value0)(v2.value0))))(new Data_Maybe.Just(v(v1.value1)(v2.value1))))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(v)(v1.value2)(v2.value2));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorMergeF = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new MergeF(f(v.value0), f(v.value1), Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value2));
    };
});
var functorWithIndexMergeF = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorMergeF;
}, function (f) {
    return function (v) {
        return new MergeF(f(Three1.value)(v.value0), f(Three2.value)(v.value1), Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexMaybe)(function (i) {
            return f(Data_Function["const"](Three3.value)(i));
        })(v.value2));
    };
});
var mergeMergeF = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorMergeF;
}, function (f) {
    return function (v) {
        return function (v1) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(MergeF.create))(new Data_Maybe.Just(f(v.value0)(v1.value0))))(new Data_Maybe.Just(f(v.value1)(v1.value1))))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(f)(v.value2)(v1.value2));
        };
    };
});
var functorLetF$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof LetF0) {
            return new LetF0(v.value0, Data_Functor.map(Data_Const.functorConst)(f)(v.value1), f(v.value2), f(v.value3));
        };
        if (v instanceof LetF1) {
            return new LetF1(v.value0, Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1), f(v.value2));
        };
        if (v instanceof LetF2) {
            return new LetF2(v.value0, Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1), f(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 451, column 1 - line 454, column 52): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergeLetF$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorLetF$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof LetF0 && v2 instanceof LetF0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(LetF0.create))((function () {
                    var $868 = v1.value0 === v2.value0;
                    if ($868) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(v)(v1.value1)(v2.value1)))(new Data_Maybe.Just(v(v1.value2)(v2.value2))))(new Data_Maybe.Just(v(v1.value3)(v2.value3)));
            };
            if (v1 instanceof LetF1 && v2 instanceof LetF1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(LetF1.create))((function () {
                    var $877 = v1.value0 === v2.value0;
                    if ($877) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(v)(v1.value1)(v2.value1)))(new Data_Maybe.Just(v(v1.value2)(v2.value2)));
            };
            if (v1 instanceof LetF2 && v2 instanceof LetF2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(LetF2.create))((function () {
                    var $884 = v1.value0 === v2.value0;
                    if ($884) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(v)(v1.value1)(v2.value1)))(new Data_Maybe.Just(v(v1.value2)(v2.value2)));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorLetF = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new LetF(v.value0, Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1), f(v.value2), f(v.value3));
    };
});
var functorWithIndexLetF = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorLetF;
}, function (f) {
    return function (v) {
        return new LetF(v.value0, Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexMaybe)(function (i) {
            return f(Data_Function["const"](Three1.value)(i));
        })(v.value1), f(Three2.value)(v.value2), f(Three3.value)(v.value3));
    };
});
var mergeLetF = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorLetF;
}, function (f) {
    return function (v) {
        return function (v1) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(LetF.create))((function () {
                var $906 = v.value0 === v1.value0;
                if ($906) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            })()))(Dhall_Core_Zippers_Merge.mergeWith(Dhall_Core_Zippers_Merge.mergeMaybe)(f)(v.value1)(v1.value1)))(new Data_Maybe.Just(f(v.value2)(v1.value2))))(new Data_Maybe.Just(f(v.value3)(v1.value3)));
        };
    };
});
var functorBindingBody$prime = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof BindingBody0) {
            return new BindingBody0(v.value0, f(v.value1));
        };
        if (v instanceof BindingBody1) {
            return new BindingBody1(v.value0, f(v.value1));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 542, column 1 - line 544, column 52): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var mergeBindingBody$prime = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorBindingBody$prime;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof BindingBody0 && v2 instanceof BindingBody0) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(BindingBody0.create))((function () {
                    var $924 = v1.value0 === v2.value0;
                    if ($924) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(new Data_Maybe.Just(v(v1.value1)(v2.value1)));
            };
            if (v1 instanceof BindingBody1 && v2 instanceof BindingBody1) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(BindingBody1.create))((function () {
                    var $929 = v1.value0 === v2.value0;
                    if ($929) {
                        return new Data_Maybe.Just(v1.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })()))(new Data_Maybe.Just(v(v1.value1)(v2.value1)));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var functorBindingBody = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new BindingBody(v.value0, f(v.value1), f(v.value2));
    };
});
var functorWithIndexBindingBody = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorBindingBody;
}, function (f) {
    return function (v) {
        return new BindingBody(v.value0, f(false)(v.value1), f(true)(v.value2));
    };
});
var mergeBindingBody = new Dhall_Core_Zippers_Merge.Merge(function () {
    return functorBindingBody;
}, function (f) {
    return function (v) {
        return function (v1) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(BindingBody.create))((function () {
                var $947 = v.value0 === v1.value0;
                if ($947) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            })()))(new Data_Maybe.Just(f(v.value1)(v1.value1))))(new Data_Maybe.Just(f(v.value2)(v1.value2)));
        };
    };
});
var foldableTriplet$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Triplet0) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(f(v.value1));
            };
            if (v instanceof Triplet1) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(f(v.value1));
            };
            if (v instanceof Triplet2) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(f(v.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 179, column 1 - line 190, column 47): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof Triplet0) {
                return f(f(b)(v.value0))(v.value1);
            };
            if (v instanceof Triplet1) {
                return f(f(b)(v.value0))(v.value1);
            };
            if (v instanceof Triplet2) {
                return f(f(b)(v.value0))(v.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 179, column 1 - line 190, column 47): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof Triplet0) {
                return f(v.value0)(f(v.value1)(b));
            };
            if (v instanceof Triplet1) {
                return f(v.value0)(f(v.value1)(b));
            };
            if (v instanceof Triplet2) {
                return f(v.value0)(f(v.value1)(b));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 179, column 1 - line 190, column 47): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableTriplet$prime = new Data_Traversable.Traversable(function () {
    return foldableTriplet$prime;
}, function () {
    return functorTriplet$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Triplet0) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet0.create)(v.value0))(v.value1);
        };
        if (v instanceof Triplet1) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet1.create)(v.value0))(v.value1);
        };
        if (v instanceof Triplet2) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet2.create)(v.value0))(v.value1);
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 192, column 1 - line 199, column 53): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Triplet0) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet0.create)(f(v.value0)))(f(v.value1));
            };
            if (v instanceof Triplet1) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet1.create)(f(v.value0)))(f(v.value1));
            };
            if (v instanceof Triplet2) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet2.create)(f(v.value0)))(f(v.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 192, column 1 - line 199, column 53): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableTriplet = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(f(v.value2)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(f(f(b)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v.value0)(f(v.value1)(f(v.value2)(b)));
        };
    };
});
var foldableWithIndexTriplet = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTriplet;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Three1.value)(v.value0))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(Three2.value)(v.value1))(f(Three3.value)(v.value2)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(Three3.value)(f(Three2.value)(f(Three1.value)(b)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(Three1.value)(v.value0)(f(Three2.value)(v.value1)(f(Three3.value)(v.value2)(b)));
        };
    };
});
var traversableTriplet = new Data_Traversable.Traversable(function () {
    return foldableTriplet;
}, function () {
    return functorTriplet;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet.create)(v.value0))(v.value1))(v.value2);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet.create)(f(v.value0)))(f(v.value1)))(f(v.value2));
        };
    };
});
var traversableWithIndexTriplet = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTriplet;
}, function () {
    return functorWithIndexTriplet;
}, function () {
    return traversableTriplet;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Triplet.create)(f(Three1.value)(v.value0)))(f(Three2.value)(v.value1)))(f(Three3.value)(v.value2));
        };
    };
});
var foldableTextLitF = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof TextLit) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof TextInterp) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(Data_Foldable.foldMap(foldableTextLitF)(dictMonoid)(f)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 236, column 1 - line 244, column 57): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextLit) {
                return b;
            };
            if (v instanceof TextInterp) {
                return Data_Foldable.foldl(foldableTextLitF)(f)(f(b)(v.value1))(v.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 236, column 1 - line 244, column 57): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextLit) {
                return b;
            };
            if (v instanceof TextInterp) {
                return f(v.value1)(Data_Foldable.foldr(foldableTextLitF)(f)(b)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 236, column 1 - line 244, column 57): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableTextLitF$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof TextInterp0) {
                return Data_Foldable.foldMap(foldableTextLitF)(dictMonoid)(f)(v.value1);
            };
            if (v instanceof TextInterp1) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(Data_Foldable.foldMap(foldableTextLitF$prime)(dictMonoid)(f)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 281, column 1 - line 289, column 58): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextInterp0) {
                return Data_Foldable.foldl(foldableTextLitF)(f)(b)(v.value1);
            };
            if (v instanceof TextInterp1) {
                return Data_Foldable.foldl(foldableTextLitF$prime)(f)(f(b)(v.value1))(v.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 281, column 1 - line 289, column 58): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextInterp0) {
                return Data_Foldable.foldr(foldableTextLitF)(f)(b)(v.value1);
            };
            if (v instanceof TextInterp1) {
                return f(v.value1)(Data_Foldable.foldr(foldableTextLitF$prime)(f)(b)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 281, column 1 - line 289, column 58): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableWithIndexTextLitF = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTextLitF;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof TextLit) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof TextInterp) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Semiring.zero(Data_Natural.semiringNatural))(v.value1))(Data_FoldableWithIndex.foldMapWithIndex(foldableWithIndexTextLitF)(dictMonoid)(function (i) {
                    return f(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(i));
                })(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 246, column 1 - line 254, column 98): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextLit) {
                return b;
            };
            if (v instanceof TextInterp) {
                return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexTextLitF)(function (i) {
                    return f(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(i));
                })(f(Data_Semiring.zero(Data_Natural.semiringNatural))(b)(v.value1))(v.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 246, column 1 - line 254, column 98): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof TextLit) {
                return b;
            };
            if (v instanceof TextInterp) {
                return f(Data_Semiring.zero(Data_Natural.semiringNatural))(v.value1)(Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexTextLitF)(function (i) {
                    return f(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(i));
                })(b)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 246, column 1 - line 254, column 98): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableTextLitF = new Data_Traversable.Traversable(function () {
    return foldableTextLitF;
}, function () {
    return functorTextLitF;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof TextLit) {
            return Control_Applicative.pure(dictApplicative)(new TextLit(v.value0));
        };
        if (v instanceof TextInterp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp.create(v.value0))(v.value1))(Data_Traversable.sequence(traversableTextLitF)(dictApplicative)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 256, column 1 - line 261, column 70): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof TextLit) {
                return Control_Applicative.pure(dictApplicative)(new TextLit(v.value0));
            };
            if (v instanceof TextInterp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp.create(v.value0))(f(v.value1)))(Data_Traversable.traverse(traversableTextLitF)(dictApplicative)(f)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 256, column 1 - line 261, column 70): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableTextLitF$prime = new Data_Traversable.Traversable(function () {
    return foldableTextLitF$prime;
}, function () {
    return functorTextLitF$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof TextInterp0) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp0.create(v.value0))(Data_Traversable.sequence(traversableTextLitF)(dictApplicative)(v.value1));
        };
        if (v instanceof TextInterp1) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp1.create(v.value0))(v.value1))(Data_Traversable.sequence(traversableTextLitF$prime)(dictApplicative)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 291, column 1 - line 296, column 72): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof TextInterp0) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp0.create(v.value0))(Data_Traversable.traverse(traversableTextLitF)(dictApplicative)(f)(v.value1));
            };
            if (v instanceof TextInterp1) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp1.create(v.value0))(f(v.value1)))(Data_Traversable.traverse(traversableTextLitF$prime)(dictApplicative)(f)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 291, column 1 - line 296, column 72): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableWithIndexTextLitF = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTextLitF;
}, function () {
    return functorWithIndexTextLitF;
}, function () {
    return traversableTextLitF;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof TextLit) {
                return Control_Applicative.pure(dictApplicative)(new TextLit(v.value0));
            };
            if (v instanceof TextInterp) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(TextInterp.create(v.value0))(f(Data_Semiring.zero(Data_Natural.semiringNatural))(v.value1)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexTextLitF)(dictApplicative)(function (i) {
                    return f(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(i));
                })(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 263, column 1 - line 265, column 117): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldablePair$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Pair0) {
                return f(v.value0);
            };
            if (v instanceof Pair1) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 96, column 1 - line 104, column 34): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof Pair0) {
                return f(b)(v.value0);
            };
            if (v instanceof Pair1) {
                return f(b)(v.value0);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 96, column 1 - line 104, column 34): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof Pair0) {
                return f(v.value0)(b);
            };
            if (v instanceof Pair1) {
                return f(v.value0)(b);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 96, column 1 - line 104, column 34): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversablePair$prime = new Data_Traversable.Traversable(function () {
    return foldablePair$prime;
}, function () {
    return functorPair$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Pair0) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair0.create)(v.value0);
        };
        if (v instanceof Pair1) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair1.create)(v.value0);
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 106, column 1 - line 111, column 37): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof Pair0) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair0.create)(f(v.value0));
            };
            if (v instanceof Pair1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair1.create)(f(v.value0));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 106, column 1 - line 111, column 37): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldablePair = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(f(v.value1));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(f(b)(v.value0))(v.value1);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v.value0)(f(v.value1)(b));
        };
    };
});
var foldableWithIndexPair = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldablePair;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(false)(v.value0))(f(true)(v.value1));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(true)(f(false)(b)(v.value0))(v.value1);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(false)(v.value0)(f(true)(v.value1)(b));
        };
    };
});
var traversablePair = new Data_Traversable.Traversable(function () {
    return foldablePair;
}, function () {
    return functorPair;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair.create)(f(v.value0)))(f(v.value1));
        };
    };
});
var traversableWithIndexPair = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexPair;
}, function () {
    return functorWithIndexPair;
}, function () {
    return traversablePair;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Pair.create)(f(false)(v.value0)))(f(true)(v.value1));
        };
    };
});
var foldableMergeF$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof MergeF0) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1));
            };
            if (v instanceof MergeF1) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1));
            };
            if (v instanceof MergeF2) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(Data_Foldable.foldMap(Data_Const.foldableConst)(dictMonoid)(f)(v.value2)));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 365, column 1 - line 376, column 62): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof MergeF0) {
                return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(f(b)(v.value0))(v.value1);
            };
            if (v instanceof MergeF1) {
                return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(f(b)(v.value0))(v.value1);
            };
            if (v instanceof MergeF2) {
                return Data_Foldable.foldl(Data_Const.foldableConst)(f)(f(f(b)(v.value0))(v.value1))(v.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 365, column 1 - line 376, column 62): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof MergeF0) {
                return f(v.value0)(Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(b)(v.value1));
            };
            if (v instanceof MergeF1) {
                return f(v.value0)(Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(b)(v.value1));
            };
            if (v instanceof MergeF2) {
                return f(v.value0)(f(v.value1)(Data_Foldable.foldr(Data_Const.foldableConst)(f)(b)(v.value2)));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 365, column 1 - line 376, column 62): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableMergeF$prime = new Data_Traversable.Traversable(function () {
    return foldableMergeF$prime;
}, function () {
    return functorMergeF$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof MergeF0) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF0.create)(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value1));
        };
        if (v instanceof MergeF1) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF1.create)(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value1));
        };
        if (v instanceof MergeF2) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF2.create)(v.value0))(v.value1))(Data_Traversable.sequence(Data_Const.traversableConst)(dictApplicative)(v.value2));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 378, column 1 - line 385, column 70): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof MergeF0) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF0.create)(f(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value1));
            };
            if (v instanceof MergeF1) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF1.create)(f(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value1));
            };
            if (v instanceof MergeF2) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF2.create)(f(v.value0)))(f(v.value1)))(Data_Traversable.traverse(Data_Const.traversableConst)(dictApplicative)(f)(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 378, column 1 - line 385, column 70): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableMergeF = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value2)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(f(f(b)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v.value0)(f(v.value1)(Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(b)(v.value2)));
        };
    };
});
var foldableWithIndexMergeF = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableMergeF;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Three1.value)(v.value0))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(Three2.value)(v.value1))(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(dictMonoid)(function (i) {
                return f(Data_Function["const"](Three3.value)(i));
            })(v.value2)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(function (i) {
                return f(Data_Function["const"](Three3.value)(i));
            })(f(Three2.value)(f(Three1.value)(b)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(Three1.value)(v.value0)(f(Three2.value)(v.value1)(Data_FoldableWithIndex.foldrWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(function (i) {
                return f(Data_Function["const"](Three3.value)(i));
            })(b)(v.value2)));
        };
    };
});
var traversableMergeF = new Data_Traversable.Traversable(function () {
    return foldableMergeF;
}, function () {
    return functorMergeF;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF.create)(v.value0))(v.value1))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value2));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF.create)(f(v.value0)))(f(v.value1)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value2));
        };
    };
});
var traversableWithIndexMergeF = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexMergeF;
}, function () {
    return functorWithIndexMergeF;
}, function () {
    return traversableMergeF;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(MergeF.create)(f(Three1.value)(v.value0)))(f(Three2.value)(v.value1)))(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexMaybe)(dictApplicative)(function (i) {
                return f(Data_Function["const"](Three3.value)(i));
            })(v.value2));
        };
    };
});
var foldableLetF$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof LetF0) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Const.foldableConst)(dictMonoid)(f)(v.value1))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value2))(f(v.value3)));
            };
            if (v instanceof LetF1) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1))(f(v.value2));
            };
            if (v instanceof LetF2) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1))(f(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 456, column 1 - line 467, column 52): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof LetF0) {
                return f(f(Data_Foldable.foldl(Data_Const.foldableConst)(f)(b)(v.value1))(v.value2))(v.value3);
            };
            if (v instanceof LetF1) {
                return f(Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(b)(v.value1))(v.value2);
            };
            if (v instanceof LetF2) {
                return f(Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(b)(v.value1))(v.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 456, column 1 - line 467, column 52): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof LetF0) {
                return Data_Foldable.foldr(Data_Const.foldableConst)(f)(f(v.value2)(f(v.value3)(b)))(v.value1);
            };
            if (v instanceof LetF1) {
                return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(f(v.value2)(b))(v.value1);
            };
            if (v instanceof LetF2) {
                return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(f(v.value2)(b))(v.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 456, column 1 - line 467, column 52): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableLetF$prime = new Data_Traversable.Traversable(function () {
    return foldableLetF$prime;
}, function () {
    return functorLetF$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof LetF0) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF0.create(v.value0))(Data_Traversable.sequence(Data_Const.traversableConst)(dictApplicative)(v.value1)))(v.value2))(v.value3);
        };
        if (v instanceof LetF1) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF1.create(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value1)))(v.value2);
        };
        if (v instanceof LetF2) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF2.create(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value1)))(v.value2);
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 469, column 1 - line 476, column 60): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof LetF0) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF0.create(v.value0))(Data_Traversable.traverse(Data_Const.traversableConst)(dictApplicative)(f)(v.value1)))(f(v.value2)))(f(v.value3));
            };
            if (v instanceof LetF1) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF1.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value1)))(f(v.value2));
            };
            if (v instanceof LetF2) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF2.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value1)))(f(v.value2));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 469, column 1 - line 476, column 60): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableLetF = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value2))(f(v.value3)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(f(Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f)(b)(v.value1))(v.value2))(v.value3);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f)(f(v.value2)(f(v.value3)(b)))(v.value1);
        };
    };
});
var foldableWithIndexLetF = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableLetF;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(dictMonoid)(function (i) {
                return f(Data_Function["const"](Three1.value)(i));
            })(v.value1))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(Three2.value)(v.value2))(f(Three3.value)(v.value3)));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(Three3.value)(f(Three2.value)(Data_FoldableWithIndex.foldlWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(function (i) {
                return f(Data_Function["const"](Three1.value)(i));
            })(b)(v.value1))(v.value2))(v.value3);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_FoldableWithIndex.foldableWithIndexMaybe)(function (i) {
                return f(Data_Function["const"](Three1.value)(i));
            })(f(Three2.value)(v.value2)(f(Three3.value)(v.value3)(b)))(v.value1);
        };
    };
});
var traversableLetF = new Data_Traversable.Traversable(function () {
    return foldableLetF;
}, function () {
    return functorLetF;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF.create(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableMaybe)(dictApplicative)(v.value1)))(v.value2))(v.value3);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f)(v.value1)))(f(v.value2)))(f(v.value3));
        };
    };
});
var traversableWithIndexLetF = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexLetF;
}, function () {
    return functorWithIndexLetF;
}, function () {
    return traversableLetF;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(LetF.create(v.value0))(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexMaybe)(dictApplicative)(function (i) {
                return f(Data_Function["const"](Three1.value)(i));
            })(v.value1)))(f(Three2.value)(v.value2)))(f(Three3.value)(v.value3));
        };
    };
});
var foldableBindingBody$prime = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof BindingBody0) {
                return f(v.value1);
            };
            if (v instanceof BindingBody1) {
                return f(v.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 546, column 1 - line 554, column 43): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof BindingBody0) {
                return f(b)(v.value1);
            };
            if (v instanceof BindingBody1) {
                return f(b)(v.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 546, column 1 - line 554, column 43): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            if (v instanceof BindingBody0) {
                return f(v.value1)(b);
            };
            if (v instanceof BindingBody1) {
                return f(v.value1)(b);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 546, column 1 - line 554, column 43): " + [ f.constructor.name, b.constructor.name, v.constructor.name ]);
        };
    };
});
var traversableBindingBody$prime = new Data_Traversable.Traversable(function () {
    return foldableBindingBody$prime;
}, function () {
    return functorBindingBody$prime;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof BindingBody0) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody0.create(v.value0))(v.value1);
        };
        if (v instanceof BindingBody1) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody1.create(v.value0))(v.value1);
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 556, column 1 - line 561, column 55): " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            if (v instanceof BindingBody0) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody0.create(v.value0))(f(v.value1));
            };
            if (v instanceof BindingBody1) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody1.create(v.value0))(f(v.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 556, column 1 - line 561, column 55): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
});
var foldableBindingBody = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(f(v.value2));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(f(b)(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(v.value1)(f(v.value2)(b));
        };
    };
});
var foldableWithIndexBindingBody = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableBindingBody;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(f(false)(v.value1))(f(true)(v.value2));
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(true)(f(false)(b)(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (b) {
        return function (v) {
            return f(false)(v.value1)(f(true)(v.value2)(b));
        };
    };
});
var traversableBindingBody = new Data_Traversable.Traversable(function () {
    return foldableBindingBody;
}, function () {
    return functorBindingBody;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody.create(v.value0))(v.value1))(v.value2);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody.create(v.value0))(f(v.value1)))(f(v.value2));
        };
    };
});
var traversableWithIndexBindingBody = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexBindingBody;
}, function () {
    return functorWithIndexBindingBody;
}, function () {
    return traversableBindingBody;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(BindingBody.create(v.value0))(f(false)(v.value1)))(f(true)(v.value2));
        };
    };
});
var eqTriplet$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Triplet0 && y instanceof Triplet0) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Triplet1 && y instanceof Triplet1) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof Triplet2 && y instanceof Triplet2) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            return false;
        };
    });
};
var ordTriplet$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTriplet$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Triplet0 && y instanceof Triplet0) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Triplet0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Triplet0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Triplet1 && y instanceof Triplet1) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof Triplet1) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Triplet1) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Triplet2 && y instanceof Triplet2) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 170, column 1 - line 170, column 57): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqTriplet = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2);
        };
    });
};
var ordTriplet = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTriplet(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(dictOrd)(x.value2)(y.value2);
        };
    });
};
var eqThree = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Three1 && y instanceof Three1) {
            return true;
        };
        if (x instanceof Three2 && y instanceof Three2) {
            return true;
        };
        if (x instanceof Three3 && y instanceof Three3) {
            return true;
        };
        return false;
    };
});
var ordThree = new Data_Ord.Ord(function () {
    return eqThree;
}, function (x) {
    return function (y) {
        if (x instanceof Three1 && y instanceof Three1) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Three1) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Three1) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Three2 && y instanceof Three2) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Three2) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Three2) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Three3 && y instanceof Three3) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 40, column 1 - line 40, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqTextLitF = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof TextLit && y instanceof TextLit) {
                return x.value0 === y.value0;
            };
            if (x instanceof TextInterp && y instanceof TextInterp) {
                return x.value0 === y.value0 && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(eqTextLitF(dictEq))(x.value2)(y.value2);
            };
            return false;
        };
    });
};
var eqTextLitF$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof TextInterp0 && y instanceof TextInterp0) {
                return x.value0 === y.value0 && Data_Eq.eq(eqTextLitF(dictEq))(x.value1)(y.value1);
            };
            if (x instanceof TextInterp1 && y instanceof TextInterp1) {
                return x.value0 === y.value0 && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(eqTextLitF$prime(dictEq))(x.value2)(y.value2);
            };
            return false;
        };
    });
};
var ordTextLitF = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTextLitF(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof TextLit && y instanceof TextLit) {
                return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            };
            if (x instanceof TextLit) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof TextLit) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof TextInterp && y instanceof TextInterp) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(ordTextLitF(dictOrd))(x.value2)(y.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 223, column 1 - line 223, column 57): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var ordTextLitF$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTextLitF$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof TextInterp0 && y instanceof TextInterp0) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(ordTextLitF(dictOrd))(x.value1)(y.value1);
            };
            if (x instanceof TextInterp0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof TextInterp0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof TextInterp1 && y instanceof TextInterp1) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(ordTextLitF$prime(dictOrd))(x.value2)(y.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 273, column 1 - line 273, column 59): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqPair$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof Pair0 && y instanceof Pair0) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            if (x instanceof Pair1 && y instanceof Pair1) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            };
            return false;
        };
    });
};
var ordPair$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPair$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof Pair0 && y instanceof Pair0) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            if (x instanceof Pair0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Pair0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Pair1 && y instanceof Pair1) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 88, column 1 - line 88, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqPair = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
        };
    });
};
var ordPair = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqPair(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
        };
    });
};
var eqMergeF$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof MergeF0 && y instanceof MergeF0) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value1)(y.value1);
            };
            if (x instanceof MergeF1 && y instanceof MergeF1) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value1)(y.value1);
            };
            if (x instanceof MergeF2 && y instanceof MergeF2) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(Data_Const.eqConst(Data_Eq.eqUnit))(x.value2)(y.value2);
            };
            return false;
        };
    });
};
var ordMergeF$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMergeF$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof MergeF0 && y instanceof MergeF0) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value1)(y.value1);
            };
            if (x instanceof MergeF0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof MergeF0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof MergeF1 && y instanceof MergeF1) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value1)(y.value1);
            };
            if (x instanceof MergeF1) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof MergeF1) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof MergeF2 && y instanceof MergeF2) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Data_Const.ordConst(Data_Ord.ordUnit))(x.value2)(y.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 356, column 1 - line 356, column 55): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqMergeF = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value2)(y.value2);
        };
    });
};
var ordMergeF = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqMergeF(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value2)(y.value2);
        };
    });
};
var eqLetF$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof LetF0 && y instanceof LetF0) {
                return x.value0 === y.value0 && Data_Eq.eq(Data_Const.eqConst(Data_Eq.eqUnit))(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2) && Data_Eq.eq(dictEq)(x.value3)(y.value3);
            };
            if (x instanceof LetF1 && y instanceof LetF1) {
                return x.value0 === y.value0 && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2);
            };
            if (x instanceof LetF2 && y instanceof LetF2) {
                return x.value0 === y.value0 && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2);
            };
            return false;
        };
    });
};
var ordLetF$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqLetF$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof LetF0 && y instanceof LetF0) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Data_Const.ordConst(Data_Ord.ordUnit))(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v2 = Data_Ord.compare(dictOrd)(x.value2)(y.value2);
                if (v2 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v2 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value3)(y.value3);
            };
            if (x instanceof LetF0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LetF0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LetF1 && y instanceof LetF1) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value2)(y.value2);
            };
            if (x instanceof LetF1) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LetF1) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LetF2 && y instanceof LetF2) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value2)(y.value2);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 447, column 1 - line 447, column 51): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqLetF = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return x.value0 === y.value0 && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2) && Data_Eq.eq(dictEq)(x.value3)(y.value3);
        };
    });
};
var ordLetF = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqLetF(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v2 = Data_Ord.compare(dictOrd)(x.value2)(y.value2);
            if (v2 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v2 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(dictOrd)(x.value3)(y.value3);
        };
    });
};
var eqBindingBody$prime = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            if (x instanceof BindingBody0 && y instanceof BindingBody0) {
                return x.value0 === y.value0 && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            if (x instanceof BindingBody1 && y instanceof BindingBody1) {
                return x.value0 === y.value0 && Data_Eq.eq(dictEq)(x.value1)(y.value1);
            };
            return false;
        };
    });
};
var ordBindingBody$prime = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqBindingBody$prime(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            if (x instanceof BindingBody0 && y instanceof BindingBody0) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            if (x instanceof BindingBody0) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof BindingBody0) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof BindingBody1 && y instanceof BindingBody1) {
                var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 538, column 1 - line 538, column 65): " + [ x.constructor.name, y.constructor.name ]);
        };
    });
};
var eqBindingBody = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return x.value0 === y.value0 && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(dictEq)(x.value2)(y.value2);
        };
    });
};
var ordBindingBody = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqBindingBody(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(dictOrd)(x.value2)(y.value2);
        };
    });
};
var eq1Triplet$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTriplet$prime(dictEq));
});
var ord1Triplet$prime = new Data_Ord.Ord1(function () {
    return eq1Triplet$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordTriplet$prime(dictOrd));
});
var eq1Triplet = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTriplet(dictEq));
});
var ord1Triplet = new Data_Ord.Ord1(function () {
    return eq1Triplet;
}, function (dictOrd) {
    return Data_Ord.compare(ordTriplet(dictOrd));
});
var eq1TextLitF$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTextLitF$prime(dictEq));
});
var ord1TextLitF$prime = new Data_Ord.Ord1(function () {
    return eq1TextLitF$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordTextLitF$prime(dictOrd));
});
var eq1TextLitF = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTextLitF(dictEq));
});
var ord1TextLitF = new Data_Ord.Ord1(function () {
    return eq1TextLitF;
}, function (dictOrd) {
    return Data_Ord.compare(ordTextLitF(dictOrd));
});
var eq1Pair$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqPair$prime(dictEq));
});
var ord1Pair$prime = new Data_Ord.Ord1(function () {
    return eq1Pair$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordPair$prime(dictOrd));
});
var eq1Pair = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqPair(dictEq));
});
var ord1Pair = new Data_Ord.Ord1(function () {
    return eq1Pair;
}, function (dictOrd) {
    return Data_Ord.compare(ordPair(dictOrd));
});
var eq1MergeF$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMergeF$prime(dictEq));
});
var ord1MergeF$prime = new Data_Ord.Ord1(function () {
    return eq1MergeF$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordMergeF$prime(dictOrd));
});
var eq1MergeF = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqMergeF(dictEq));
});
var ord1MergeF = new Data_Ord.Ord1(function () {
    return eq1MergeF;
}, function (dictOrd) {
    return Data_Ord.compare(ordMergeF(dictOrd));
});
var eq1LetF$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLetF$prime(dictEq));
});
var ord1LetF$prime = new Data_Ord.Ord1(function () {
    return eq1LetF$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordLetF$prime(dictOrd));
});
var eq1LetF = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqLetF(dictEq));
});
var ord1LetF = new Data_Ord.Ord1(function () {
    return eq1LetF;
}, function (dictOrd) {
    return Data_Ord.compare(ordLetF(dictOrd));
});
var eq1BindingBody$prime = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqBindingBody$prime(dictEq));
});
var ord1BindingBody$prime = new Data_Ord.Ord1(function () {
    return eq1BindingBody$prime;
}, function (dictOrd) {
    return Data_Ord.compare(ordBindingBody$prime(dictOrd));
});
var eq1BindingBody = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqBindingBody(dictEq));
});
var ord1BindingBody = new Data_Ord.Ord1(function () {
    return eq1BindingBody;
}, function (dictOrd) {
    return Data_Ord.compare(ordBindingBody(dictOrd));
});
var containerITriplet = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof Triplet0) {
        return Three1.value;
    };
    if (v instanceof Triplet1) {
        return Three2.value;
    };
    if (v instanceof Triplet2) {
        return Three3.value;
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 214, column 1 - line 217, column 30): " + [ v.constructor.name ]);
});
var containerTriplet = new Dhall_Core_Zippers.Container(function () {
    return containerITriplet;
}, function () {
    return eq1Triplet;
}, function () {
    return eq1Triplet$prime;
}, function () {
    return functorTriplet$prime;
}, function () {
    return functorTriplet;
}, function () {
    return mergeTriplet;
}, function () {
    return mergeTriplet$prime;
}, function () {
    return ordThree;
}, function () {
    return traversableTriplet$prime;
}, function () {
    return traversableWithIndexTriplet;
}, function (v) {
    return new Triplet(new Dhall_Core_Zippers.ZF(v.value0, Data_Lazy.defer(function (v1) {
        return new Triplet0(v.value1, v.value2);
    })), new Dhall_Core_Zippers.ZF(v.value1, Data_Lazy.defer(function (v1) {
        return new Triplet1(v.value0, v.value2);
    })), new Dhall_Core_Zippers.ZF(v.value2, Data_Lazy.defer(function (v1) {
        return new Triplet2(v.value0, v.value1);
    })));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof Triplet0) {
        return new Triplet(v.value0, v1.value0, v1.value1);
    };
    if (v1 instanceof Triplet1) {
        return new Triplet(v1.value0, v.value0, v1.value1);
    };
    if (v1 instanceof Triplet2) {
        return new Triplet(v1.value0, v1.value1, v.value0);
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 207, column 21 - line 210, column 46): " + [ v1.constructor.name ]);
});
var containerITextLitF = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof TextInterp0) {
        return Data_Semiring.zero(Data_Natural.semiringNatural);
    };
    if (v instanceof TextInterp1) {
        return Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))(Dhall_Core_Zippers.ixF(containerITextLitF)(v.value2));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 310, column 1 - line 312, column 42): " + [ v.constructor.name ]);
});
var containerTextLitF = new Dhall_Core_Zippers.Container(function () {
    return containerITextLitF;
}, function () {
    return eq1TextLitF;
}, function () {
    return eq1TextLitF$prime;
}, function () {
    return functorTextLitF$prime;
}, function () {
    return functorTextLitF;
}, function () {
    return mergeTextLitF;
}, function () {
    return mergeTextLitF$prime;
}, function () {
    return Data_Natural.ordNatural;
}, function () {
    return traversableTextLitF$prime;
}, function () {
    return traversableWithIndexTextLitF;
}, function (v) {
    if (v instanceof TextLit) {
        return new TextLit(v.value0);
    };
    if (v instanceof TextInterp) {
        return new TextInterp(v.value0, new Dhall_Core_Zippers.ZF(v.value1, Data_Lazy.defer(function (v1) {
            return new TextInterp0(v.value0, v.value2);
        })), Data_Functor.mapFlipped(functorTextLitF)(Dhall_Core_Zippers.downZF(containerTextLitF)(v.value2))(Dhall_Core_Zippers["_contextZF'"](Data_Profunctor_Strong.strongFn)(Data_Functor.map(Data_Lazy.functorLazy)(function (z) {
            return new TextInterp1(v.value0, v.value1, z);
        }))));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 302, column 1 - line 308, column 152): " + [ v.constructor.name ]);
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof TextInterp0) {
        return new TextInterp(v1.value0, v.value0, v1.value1);
    };
    if (v1 instanceof TextInterp1) {
        return new TextInterp(v1.value0, v1.value1, Dhall_Core_Zippers.upZF(containerTextLitF)(new Dhall_Core_Zippers.ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value2))));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 303, column 21 - line 305, column 67): " + [ v1.constructor.name ]);
});
var containerIPair = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof Pair0) {
        return false;
    };
    if (v instanceof Pair1) {
        return true;
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 124, column 1 - line 126, column 23): " + [ v.constructor.name ]);
});
var containerPair = new Dhall_Core_Zippers.Container(function () {
    return containerIPair;
}, function () {
    return eq1Pair;
}, function () {
    return eq1Pair$prime;
}, function () {
    return functorPair$prime;
}, function () {
    return functorPair;
}, function () {
    return mergePair;
}, function () {
    return mergePair$prime;
}, function () {
    return Data_Ord.ordBoolean;
}, function () {
    return traversablePair$prime;
}, function () {
    return traversableWithIndexPair;
}, function (v) {
    return new Pair(new Dhall_Core_Zippers.ZF(v.value0, Data_Lazy.defer(function (v1) {
        return new Pair0(v.value1);
    })), new Dhall_Core_Zippers.ZF(v.value1, Data_Lazy.defer(function (v1) {
        return new Pair1(v.value0);
    })));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof Pair0) {
        return new Pair(v.value0, v1.value0);
    };
    if (v1 instanceof Pair1) {
        return new Pair(v1.value0, v.value0);
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 118, column 21 - line 120, column 34): " + [ v1.constructor.name ]);
});
var containerIMergeF = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof MergeF0) {
        return Three1.value;
    };
    if (v instanceof MergeF1) {
        return Three2.value;
    };
    if (v instanceof MergeF2) {
        return Data_Function["const"](Three3.value)(Dhall_Core_Zippers.ixF(Dhall_Core_Zippers.containerIConst)(v.value2));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 400, column 1 - line 403, column 45): " + [ v.constructor.name ]);
});
var containerMergeF = new Dhall_Core_Zippers.Container(function () {
    return containerIMergeF;
}, function () {
    return eq1MergeF;
}, function () {
    return eq1MergeF$prime;
}, function () {
    return functorMergeF$prime;
}, function () {
    return functorMergeF;
}, function () {
    return mergeMergeF;
}, function () {
    return mergeMergeF$prime;
}, function () {
    return ordThree;
}, function () {
    return traversableMergeF$prime;
}, function () {
    return traversableWithIndexMergeF;
}, function (v) {
    return new MergeF(new Dhall_Core_Zippers.ZF(v.value0, Data_Lazy.defer(function (v1) {
        return new MergeF0(v.value1, v.value2);
    })), new Dhall_Core_Zippers.ZF(v.value1, Data_Lazy.defer(function (v1) {
        return new MergeF1(v.value0, v.value2);
    })), Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Dhall_Core_Zippers.downZF(Dhall_Core_Zippers.containerMaybe)(v.value2))(Dhall_Core_Zippers["_contextZF'"](Data_Profunctor_Strong.strongFn)(Data_Functor.map(Data_Lazy.functorLazy)(function (z) {
        return new MergeF2(v.value0, v.value1, z);
    }))));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof MergeF0) {
        return new MergeF(v.value0, v1.value0, v1.value1);
    };
    if (v1 instanceof MergeF1) {
        return new MergeF(v1.value0, v.value0, v1.value1);
    };
    if (v1 instanceof MergeF2) {
        return new MergeF(v1.value0, v1.value1, Dhall_Core_Zippers.upZF(Dhall_Core_Zippers.containerMaybe)(new Dhall_Core_Zippers.ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value2))));
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 393, column 21 - line 396, column 61): " + [ v1.constructor.name ]);
});
var containerILetF = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof LetF0) {
        return Data_Function["const"](Three1.value)(Dhall_Core_Zippers.ixF(Dhall_Core_Zippers.containerIConst)(v.value1));
    };
    if (v instanceof LetF1) {
        return Three2.value;
    };
    if (v instanceof LetF2) {
        return Three3.value;
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 491, column 1 - line 494, column 29): " + [ v.constructor.name ]);
});
var containerLetF = new Dhall_Core_Zippers.Container(function () {
    return containerILetF;
}, function () {
    return eq1LetF;
}, function () {
    return eq1LetF$prime;
}, function () {
    return functorLetF$prime;
}, function () {
    return functorLetF;
}, function () {
    return mergeLetF;
}, function () {
    return mergeLetF$prime;
}, function () {
    return ordThree;
}, function () {
    return traversableLetF$prime;
}, function () {
    return traversableWithIndexLetF;
}, function (v) {
    return new LetF(v.value0, Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Dhall_Core_Zippers.downZF(Dhall_Core_Zippers.containerMaybe)(v.value1))(Dhall_Core_Zippers["_contextZF'"](Data_Profunctor_Strong.strongFn)(Data_Functor.map(Data_Lazy.functorLazy)(function (z) {
        return new LetF0(v.value0, z, v.value2, v.value3);
    }))), new Dhall_Core_Zippers.ZF(v.value2, Data_Lazy.defer(function (v1) {
        return new LetF1(v.value0, v.value1, v.value3);
    })), new Dhall_Core_Zippers.ZF(v.value3, Data_Lazy.defer(function (v1) {
        return new LetF2(v.value0, v.value1, v.value2);
    })));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof LetF0) {
        return new LetF(v1.value0, Dhall_Core_Zippers.upZF(Dhall_Core_Zippers.containerMaybe)(new Dhall_Core_Zippers.ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value1))), v1.value2, v1.value3);
    };
    if (v1 instanceof LetF1) {
        return new LetF(v1.value0, v1.value1, v.value0, v1.value2);
    };
    if (v1 instanceof LetF2) {
        return new LetF(v1.value0, v1.value1, v1.value2, v.value0);
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 484, column 21 - line 487, column 44): " + [ v1.constructor.name ]);
});
var containerIBindingBody = new Dhall_Core_Zippers.ContainerI(function (v) {
    if (v instanceof BindingBody0) {
        return false;
    };
    if (v instanceof BindingBody1) {
        return true;
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 574, column 1 - line 576, column 32): " + [ v.constructor.name ]);
});
var containerBindingBody = new Dhall_Core_Zippers.Container(function () {
    return containerIBindingBody;
}, function () {
    return eq1BindingBody;
}, function () {
    return eq1BindingBody$prime;
}, function () {
    return functorBindingBody$prime;
}, function () {
    return functorBindingBody;
}, function () {
    return mergeBindingBody;
}, function () {
    return mergeBindingBody$prime;
}, function () {
    return Data_Ord.ordBoolean;
}, function () {
    return traversableBindingBody$prime;
}, function () {
    return traversableWithIndexBindingBody;
}, function (v) {
    return new BindingBody(v.value0, new Dhall_Core_Zippers.ZF(v.value1, Data_Lazy.defer(function (v1) {
        return new BindingBody0(v.value0, v.value2);
    })), new Dhall_Core_Zippers.ZF(v.value2, Data_Lazy.defer(function (v1) {
        return new BindingBody1(v.value0, v.value1);
    })));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    if (v1 instanceof BindingBody0) {
        return new BindingBody(v1.value0, v.value0, v1.value1);
    };
    if (v1 instanceof BindingBody1) {
        return new BindingBody(v1.value0, v1.value1, v.value0);
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 568, column 21 - line 570, column 52): " + [ v1.constructor.name ]);
});
var altTextLitF = new Control_Alt.Alt(function () {
    return functorTextLitF;
}, function (v) {
    return function (v1) {
        if (v instanceof TextLit && v1 instanceof TextLit) {
            return new TextLit(v.value0 + v1.value0);
        };
        if (v instanceof TextLit && v1 instanceof TextInterp) {
            return new TextInterp(v.value0 + v1.value0, v1.value1, v1.value2);
        };
        if (v instanceof TextInterp) {
            return new TextInterp(v.value0, v.value1, Control_Alt.alt(altTextLitF)(v.value2)(v1));
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types.Basics (line 588, column 1 - line 591, column 62): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var plusTextLitF = new Control_Plus.Plus(function () {
    return altTextLitF;
}, new TextLit(Data_Monoid.mempty(Data_Monoid.monoidString)));
var textLitFFromEithers = function (dictFoldable) {
    return Data_Foldable.oneOfMap(dictFoldable)(plusTextLitF)(Data_Either.either(TextLit.create)(pureTextLitF));
};
var semigroupTextLitF = new Data_Semigroup.Semigroup(Control_Alt.alt(altTextLitF));
var monoidTextLitF = new Data_Monoid.Monoid(function () {
    return semigroupTextLitF;
}, new TextLit(Data_Monoid.mempty(Data_Monoid.monoidString)));
var _S = Data_Symbol.SProxy.value;
module.exports = {
    "_S": _S,
    Three1: Three1,
    Three2: Three2,
    Three3: Three3,
    Pair: Pair,
    Pair0: Pair0,
    Pair1: Pair1,
    Triplet: Triplet,
    Triplet0: Triplet0,
    Triplet1: Triplet1,
    Triplet2: Triplet2,
    TextLit: TextLit,
    TextInterp: TextInterp,
    TextInterp0: TextInterp0,
    TextInterp1: TextInterp1,
    MergeF: MergeF,
    MergeF0: MergeF0,
    MergeF1: MergeF1,
    MergeF2: MergeF2,
    LetF: LetF,
    LetF0: LetF0,
    LetF1: LetF1,
    LetF2: LetF2,
    BindingBody: BindingBody,
    BindingBody0: BindingBody0,
    BindingBody1: BindingBody1,
    isEmptyTextLitF: isEmptyTextLitF,
    pureTextLitF: pureTextLitF,
    textLitFFromEithers: textLitFFromEithers,
    eqThree: eqThree,
    ordThree: ordThree,
    showThree: showThree,
    genericPair: genericPair,
    showPair: showPair,
    eqPair: eqPair,
    ordPair: ordPair,
    eq1Pair: eq1Pair,
    ord1Pair: ord1Pair,
    functorPair: functorPair,
    functorWithIndexPair: functorWithIndexPair,
    foldablePair: foldablePair,
    foldableWithIndexPair: foldableWithIndexPair,
    traversablePair: traversablePair,
    traversableWithIndexPair: traversableWithIndexPair,
    mergePair: mergePair,
    "eqPair'": eqPair$prime,
    "ordPair'": ordPair$prime,
    "eq1Pair'": eq1Pair$prime,
    "ord1Pair'": ord1Pair$prime,
    "functorPair'": functorPair$prime,
    "foldablePair'": foldablePair$prime,
    "traversablePair'": traversablePair$prime,
    "mergePair'": mergePair$prime,
    containerPair: containerPair,
    containerIPair: containerIPair,
    genericTriplet: genericTriplet,
    showTriplet: showTriplet,
    eqTriplet: eqTriplet,
    ordTriplet: ordTriplet,
    eq1Triplet: eq1Triplet,
    ord1Triplet: ord1Triplet,
    functorTriplet: functorTriplet,
    functorWithIndexTriplet: functorWithIndexTriplet,
    foldableTriplet: foldableTriplet,
    foldableWithIndexTriplet: foldableWithIndexTriplet,
    traversableTriplet: traversableTriplet,
    traversableWithIndexTriplet: traversableWithIndexTriplet,
    mergeTriplet: mergeTriplet,
    "eqTriplet'": eqTriplet$prime,
    "ordTriplet'": ordTriplet$prime,
    "eq1Triplet'": eq1Triplet$prime,
    "ord1Triplet'": ord1Triplet$prime,
    "functorTriplet'": functorTriplet$prime,
    "foldableTriplet'": foldableTriplet$prime,
    "traversableTriplet'": traversableTriplet$prime,
    "mergeTriplet'": mergeTriplet$prime,
    containerTriplet: containerTriplet,
    containerITriplet: containerITriplet,
    genericTextLitF: genericTextLitF,
    showTextLitF: showTextLitF,
    eqTextLitF: eqTextLitF,
    ordTextLitF: ordTextLitF,
    eq1TextLitF: eq1TextLitF,
    ord1TextLitF: ord1TextLitF,
    functorTextLitF: functorTextLitF,
    functorWithIndexTextLitF: functorWithIndexTextLitF,
    foldableTextLitF: foldableTextLitF,
    foldableWithIndexTextLitF: foldableWithIndexTextLitF,
    traversableTextLitF: traversableTextLitF,
    traversableWithIndexTextLitF: traversableWithIndexTextLitF,
    mergeTextLitF: mergeTextLitF,
    "eqTextLitF'": eqTextLitF$prime,
    "ordTextLitF'": ordTextLitF$prime,
    "eq1TextLitF'": eq1TextLitF$prime,
    "ord1TextLitF'": ord1TextLitF$prime,
    "functorTextLitF'": functorTextLitF$prime,
    "foldableTextLitF'": foldableTextLitF$prime,
    "traversableTextLitF'": traversableTextLitF$prime,
    "mergeTextLitF'": mergeTextLitF$prime,
    containerTextLitF: containerTextLitF,
    containerITextLitF: containerITextLitF,
    genericMergeF: genericMergeF,
    showMergeF: showMergeF,
    eqMergeF: eqMergeF,
    ordMergeF: ordMergeF,
    eq1MergeF: eq1MergeF,
    ord1MergeF: ord1MergeF,
    functorMergeF: functorMergeF,
    functorWithIndexMergeF: functorWithIndexMergeF,
    foldableMergeF: foldableMergeF,
    foldableWithIndexMergeF: foldableWithIndexMergeF,
    traversableMergeF: traversableMergeF,
    traversableWithIndexMergeF: traversableWithIndexMergeF,
    mergeMergeF: mergeMergeF,
    "eqMergeF'": eqMergeF$prime,
    "ordMergeF'": ordMergeF$prime,
    "eq1MergeF'": eq1MergeF$prime,
    "ord1MergeF'": ord1MergeF$prime,
    "functorMergeF'": functorMergeF$prime,
    "foldableMergeF'": foldableMergeF$prime,
    "traversableMergeF'": traversableMergeF$prime,
    "mergeMergeF'": mergeMergeF$prime,
    containerMergeF: containerMergeF,
    containerIMergeF: containerIMergeF,
    genericLetF: genericLetF,
    showLetF: showLetF,
    eqLetF: eqLetF,
    ordLetF: ordLetF,
    eq1LetF: eq1LetF,
    ord1LetF: ord1LetF,
    functorLetF: functorLetF,
    functorWithIndexLetF: functorWithIndexLetF,
    foldableLetF: foldableLetF,
    foldableWithIndexLetF: foldableWithIndexLetF,
    traversableLetF: traversableLetF,
    traversableWithIndexLetF: traversableWithIndexLetF,
    mergeLetF: mergeLetF,
    "eqLetF'": eqLetF$prime,
    "ordLetF'": ordLetF$prime,
    "eq1LetF'": eq1LetF$prime,
    "ord1LetF'": ord1LetF$prime,
    "functorLetF'": functorLetF$prime,
    "foldableLetF'": foldableLetF$prime,
    "traversableLetF'": traversableLetF$prime,
    "mergeLetF'": mergeLetF$prime,
    containerLetF: containerLetF,
    containerILetF: containerILetF,
    genericBindingBody: genericBindingBody,
    showBindingBody: showBindingBody,
    eqBindingBody: eqBindingBody,
    ordBindingBody: ordBindingBody,
    eq1BindingBody: eq1BindingBody,
    ord1BindingBody: ord1BindingBody,
    functorBindingBody: functorBindingBody,
    functorWithIndexBindingBody: functorWithIndexBindingBody,
    foldableBindingBody: foldableBindingBody,
    foldableWithIndexBindingBody: foldableWithIndexBindingBody,
    traversableBindingBody: traversableBindingBody,
    traversableWithIndexBindingBody: traversableWithIndexBindingBody,
    mergeBindingBody: mergeBindingBody,
    "eqBindingBody'": eqBindingBody$prime,
    "ordBindingBody'": ordBindingBody$prime,
    "eq1BindingBody'": eq1BindingBody$prime,
    "ord1BindingBody'": ord1BindingBody$prime,
    "functorBindingBody'": functorBindingBody$prime,
    "foldableBindingBody'": foldableBindingBody$prime,
    "traversableBindingBody'": traversableBindingBody$prime,
    "mergeBindingBody'": mergeBindingBody$prime,
    containerBindingBody: containerBindingBody,
    containerIBindingBody: containerIBindingBody,
    altTextLitF: altTextLitF,
    plusTextLitF: plusTextLitF,
    semigroupTextLitF: semigroupTextLitF,
    monoidTextLitF: monoidTextLitF
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Comonad/index.js":30,"../Control.Plus/index.js":65,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Generic.Rep.Show/index.js":146,"../Data.Generic.Rep/index.js":147,"../Data.Lazy/index.js":156,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Natural/index.js":196,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Dhall.Core.Zippers.Merge/index.js":272,"../Dhall.Core.Zippers/index.js":274}],268:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Core_Zippers = require("../Dhall.Core.Zippers/index.js");
var Dhall_Core_Zippers_Merge = require("../Dhall.Core.Zippers.Merge/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_Fold = require("../Matryoshka.Fold/index.js");
var Matryoshka_Pattern_CoEnvT = require("../Matryoshka.Pattern.CoEnvT/index.js");
var V = (function () {
    function V(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    V.create = function (value0) {
        return function (value1) {
            return new V(value0, value1);
        };
    };
    return V;
})();
var Type = (function () {
    function Type() {

    };
    Type.value = new Type();
    return Type;
})();
var Kind = (function () {
    function Kind() {

    };
    Kind.value = new Kind();
    return Kind;
})();
var Sort = (function () {
    function Sort() {

    };
    Sort.value = new Sort();
    return Sort;
})();
var ERVFI = function (x) {
    return x;
};
var ERVF$prime = function (x) {
    return x;
};
var ERVF = function (x) {
    return x;
};
var Expr = function (x) {
    return x;
};
var vfCase = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (df) {
                return function (f) {
                    return function (k) {
                        return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(k)(function (a) {
                            return Data_Functor_Variant.on(dictCons1)(dictIsSymbol)(k)(f(a))(Data_Functor_Variant["default"](df));
                        });
                    };
                };
            };
        };
    };
};
var vfEq1Case = function (dictIsSymbol) {
    return function (dictEq1) {
        return function (dictEq) {
            return function (dictCons) {
                return function (dictCons1) {
                    return vfCase(dictIsSymbol)(dictCons)(dictCons1)(false)(Data_Eq.eq1(dictEq1)(dictEq));
                };
            };
        };
    };
};
var vfEqCase = function (dictIsSymbol) {
    return function (dictEq) {
        return function (dictCons) {
            return function (dictCons1) {
                return vfCase(dictIsSymbol)(dictCons)(dictCons1)(false)(Data_Eq.eq(dictEq));
            };
        };
    };
};
var vfOrd1Case = function (dictIsSymbol) {
    return function (dictOrd1) {
        return function (dictOrd) {
            return function (dictCons) {
                return function (dictCons1) {
                    return vfCase(dictIsSymbol)(dictCons)(dictCons1)(Data_Ordering.LT.value)(Data_Ord.compare1(dictOrd1)(dictOrd));
                };
            };
        };
    };
};
var vfOrdCase = function (dictIsSymbol) {
    return function (dictOrd) {
        return function (dictCons) {
            return function (dictCons1) {
                return vfCase(dictIsSymbol)(dictCons)(dictCons1)(Data_Ordering.LT.value)(Data_Ord.compare(dictOrd));
            };
        };
    };
};
var traversableExpr = function (dictTraversable) {
    return Control_Monad_Free.traversableFree(Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.traversableTriplet)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.traversableLetF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.traversableMergeF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.traversableTextLitF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.traversableCompose(dictTraversable)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()));
};
var traversableERVF$prime = function (dictTraversable) {
    return function (dictTraversable1) {
        return Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics["traversableTriplet'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics["traversableBindingBody'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics["traversableLetF'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Dhall_Core_Zippers["traversableProduct'"](Data_Traversable.traversableMaybe)(Data_Const.traversableConst)(Data_Traversable.traversableArray)(Dhall_Core_Zippers["traversableArray'"]))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics["traversableMergeF'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics["traversableBindingBody'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Dhall_Core_Zippers["traversableProduct'"](Data_Identity.traversableIdentity)(Data_Const.traversableConst)(Data_Either.traversableEither)(Data_Const.traversableConst))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictTraversable1)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictTraversable1)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics["traversableTextLitF'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Dhall_Core_Zippers["traversableProduct'"](Data_Identity.traversableIdentity)(Data_Const.traversableConst)(Data_Traversable.traversableMaybe)(Data_Const.traversableConst))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Dhall_Core_Zippers["traversableCompose'"](dictTraversable1)(Data_Traversable.traversableMaybe)(Data_Const.traversableConst))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics["traversablePair'"])(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()());
    };
};
var traversableERVF = function (dictTraversable) {
    return Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.traversableTriplet)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Embed";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.traversableLetF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.traversableMergeF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(dictTraversable)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.traversableTextLitF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.traversableCompose(dictTraversable)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()());
};
var showVar = new Data_Show.Show(function (v) {
    return v.value0 + ("@" + Data_Show.show(Data_Show.showInt)(v.value1));
});
var showExpr = function (dictTraversableWithIndex) {
    return function (dictShow) {
        return new Data_Show.Show(function (v) {
            var mb = function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return "(Nothing)";
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return "(Just " + (v1.value0 + ")");
                };
                throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 464, column 7 - line 466, column 39): " + [ v1.constructor.name ]);
            };
            var lits = function (e) {
                return "[" + (Data_String_Common.joinWith(", ")(e) + "]");
            };
            var rec = function (e) {
                return lits(Data_FoldableWithIndex.foldMapWithIndex(dictTraversableWithIndex.FoldableWithIndex1())(Data_Monoid.monoidArray)(function (k) {
                    return function (v1) {
                        return [ "(Tuple " + (Data_Show.show(Data_Show.showString)(k) + (v1 + ")")) ];
                    };
                })(e));
            };
            var binop = function (tag) {
                return function (v1) {
                    return "(mk" + (tag + (" " + (v1.value0 + (v1.value1 + ")"))));
                };
            };
            var show1 = (function () {
                var $263 = Data_Either.either(function (e) {
                    return "(mkEmbed (" + (Data_Show.show(dictShow)(e) + "))");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Union";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (a) {
                    return "(mkUnion " + (rec(Data_Functor.map((dictTraversableWithIndex.Traversable2()).Functor0())(mb)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(a))) + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "TextLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (e) {
                    var v1 = function (e$prime) {
                        if (e$prime instanceof Dhall_Core_AST_Types_Basics.TextLit) {
                            return "(TextLit " + (Data_Show.show(Data_Show.showString)(e$prime.value0) + ")");
                        };
                        if (e$prime instanceof Dhall_Core_AST_Types_Basics.TextInterp) {
                            return "(TextInterp " + (Data_Show.show(Data_Show.showString)(e$prime.value0) + (e$prime.value1 + (v1(e$prime.value2) + ")")));
                        };
                        throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 567, column 22 - line 569, column 84): " + [ e$prime.constructor.name ]);
                    };
                    return "(mkTextLit " + (v1(e) + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Var";
                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                    var $266 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                    return function ($267) {
                        return (function (v1) {
                            return "(mkVar (V " + (Data_Show.show(Data_Show.showString)(v1.value0) + (Data_Show.show(Data_Show.showInt)(v1.value1) + "))"));
                        })($266($267));
                    };
                })())(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Const";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    if (v1 instanceof Type) {
                        return "(mkConst Type)";
                    };
                    if (v1 instanceof Kind) {
                        return "(mkConst Kind)";
                    };
                    if (v1 instanceof Sort) {
                        return "(mkConst Sort)";
                    };
                    throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 557, column 10 - line 560, column 48): " + [ v1.constructor.name ]);
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "TextShow";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkTextShow"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "OptionalBuild";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkOptionalBuild"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "OptionalFold";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkOptionalFold"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListReverse";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListReverse"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListIndexed";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListIndexed"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListLast";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListLast"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListHead";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListHead"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListLength";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListLength"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListFold";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListFold"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListBuild";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkListBuild"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "DoubleShow";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkDoubleShow"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "IntegerToDouble";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkIntegerToDouble"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "IntegerShow";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkIntegerShow"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalSubtract";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalSubtract"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalShow";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalShow"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalToInteger";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalToInteger"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalOdd";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalOdd"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalEven";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalEven"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalIsZero";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalIsZero"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalBuild";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalBuild"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalFold";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNaturalFold"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Optional";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkOptional"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "List";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkList"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Text";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkText"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Double";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkDouble"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Integer";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkInteger"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Natural";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNatural"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Bool";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkBool"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "DoubleLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                    var $268 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                    return function ($269) {
                        return (function (b) {
                            return "(mkDoubleLit " + (Data_Show.show(Data_Show.showNumber)(b) + ")");
                        })($268($269));
                    };
                })())(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "IntegerLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                    var $270 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                    return function ($271) {
                        return (function (b) {
                            return "(mkIntegerLit " + (Data_Show.show(Data_Show.showInt)(b) + ")");
                        })($270($271));
                    };
                })())(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                    var $272 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                    return function ($273) {
                        return (function (b) {
                            return "(mkNaturalLit " + (Data_Show.show(Data_Natural.showNatural)(b) + ")");
                        })($272($273));
                    };
                })())(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                    var $274 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                    return function ($275) {
                        return (function (b) {
                            return "(mkBoolLit " + (Data_Show.show(Data_Show.showBoolean)(b) + ")");
                        })($274($275));
                    };
                })())(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "RecordLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (a) {
                    return "(mkRecordLit " + (rec(a) + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Record";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (a) {
                    return "(mkRecord " + (rec(a) + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Project";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    if (v1.value1 instanceof Data_Either.Left) {
                        return "(mkProject " + (v1.value0 + (" (Left " + (rec(Data_Functor.map((dictTraversableWithIndex.Traversable2()).Functor0())(Data_Show.show(Data_Unit.showUnit))(v1.value1.value0)) + "))")));
                    };
                    if (v1.value1 instanceof Data_Either.Right) {
                        return "(mkProject " + (v1.value0 + (" (Right " + (v1.value1.value0 + "))")));
                    };
                    throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 513, column 51 - line 515, column 69): " + [ v1.value1.constructor.name ]);
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Pi";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkPi " + (v1.value0 + (v1.value1 + (v1.value2 + ")")));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ToMap";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkToMap " + (v1.value0 + (mb(v1.value1) + ")"));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Merge";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkMerge " + (v1.value0 + (v1.value1 + (mb(v1.value2) + ")")));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListLit";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkListLit " + (mb(v1.value0) + (lits(v1.value1) + ")"));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Let";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkLet " + (v1.value0 + (mb(v1.value1) + (v1.value2 + (v1.value3 + ")"))));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Lam";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkLam " + (Data_Show.show(Data_Show.showString)(v1.value0) + (v1.value1 + (v1.value2 + ")")));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Field";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkField " + (v1.value1 + (Data_Show.show(Data_Show.showString)(v1.value0) + ")"));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Assert";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkAssert " + (v1 + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Some";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkSome " + (v1 + ")");
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolIf";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkBoolIf " + (v1.value0 + (v1.value1 + (v1.value2 + ")")));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Hashed";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkHashed " + (Data_Show.show(Data_Show.showString)(v1.value0) + (" " + (v1.value1 + ")")));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Equivalent";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("Equivalent"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "UsingHeaders";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("UsingHeaders"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ImportAlt";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("ImportAlt"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Prefer";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("Prefer"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "CombineTypes";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("CombineTypes"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Combine";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("Combine"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "ListAppend";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("ListAppend"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "TextAppend";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("TextAppend"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalTimes";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("NaturalTimes"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "NaturalPlus";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("NaturalPlus"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolNE";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("BoolNE"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolEQ";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("BoolEQ"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolOr";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("BoolOr"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "BoolAnd";
                }))(Dhall_Core_AST_Types_Basics["_S"])(binop("BoolAnd"))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "App";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkApp " + (v1.value0 + (v1.value1 + ")"));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Annot";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                    return "(mkAnnot " + (v1.value0 + (v1.value1 + ")"));
                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "None";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"]("mkNone"))(Data_Functor_Variant.case_))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
                var $264 = Data_Newtype.unwrap(Matryoshka_Pattern_CoEnvT.newtypeEnvT);
                return function ($265) {
                    return $263($264($265));
                };
            })();
            return Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveFree(Data_Functor_Variant.functorVariantF))(show1)(v);
        });
    };
};
var showERVFI = Data_Variant.showVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
    return "Var";
})))(new Data_Symbol.IsSymbol(function () {
    return "UsingHeaders";
})))(new Data_Symbol.IsSymbol(function () {
    return "Union";
})))(new Data_Symbol.IsSymbol(function () {
    return "ToMap";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "Text";
})))(new Data_Symbol.IsSymbol(function () {
    return "Some";
})))(new Data_Symbol.IsSymbol(function () {
    return "RecordLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Record";
})))(new Data_Symbol.IsSymbol(function () {
    return "Project";
})))(new Data_Symbol.IsSymbol(function () {
    return "Prefer";
})))(new Data_Symbol.IsSymbol(function () {
    return "Pi";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Optional";
})))(new Data_Symbol.IsSymbol(function () {
    return "None";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalToInteger";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalTimes";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalSubtract";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalPlus";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalOdd";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalIsZero";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalEven";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Natural";
})))(new Data_Symbol.IsSymbol(function () {
    return "Merge";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListReverse";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLength";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLast";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListIndexed";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListHead";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "List";
})))(new Data_Symbol.IsSymbol(function () {
    return "Let";
})))(new Data_Symbol.IsSymbol(function () {
    return "Lam";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerToDouble";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Integer";
})))(new Data_Symbol.IsSymbol(function () {
    return "ImportAlt";
})))(new Data_Symbol.IsSymbol(function () {
    return "Hashed";
})))(new Data_Symbol.IsSymbol(function () {
    return "Field";
})))(new Data_Symbol.IsSymbol(function () {
    return "Equivalent";
})))(new Data_Symbol.IsSymbol(function () {
    return "Embed";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Double";
})))(new Data_Symbol.IsSymbol(function () {
    return "Const";
})))(new Data_Symbol.IsSymbol(function () {
    return "CombineTypes";
})))(new Data_Symbol.IsSymbol(function () {
    return "Combine";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolOr";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolNE";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolIf";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolEQ";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolAnd";
})))(new Data_Symbol.IsSymbol(function () {
    return "Bool";
})))(new Data_Symbol.IsSymbol(function () {
    return "Assert";
})))(new Data_Symbol.IsSymbol(function () {
    return "App";
})))(new Data_Symbol.IsSymbol(function () {
    return "Annot";
})))(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantNil)(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Tuple.showTuple(Data_Show.showString)(Data_Unit.showUnit)))(Data_Either.showEither(Data_Unit.showUnit)(Data_Unit.showUnit)))(Data_Void.showVoid))(Data_Natural.showNatural))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Unit.showUnit))(Data_Show.showString))(Data_Show.showString))(Data_Either.showEither(Data_Unit.showUnit)(Data_Unit.showUnit)))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Dhall_Core_AST_Types_Basics.showThree))(Data_Void.showVoid))(Data_Either.showEither(Data_Unit.showUnit)(Data_Show.showInt)))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Void.showVoid))(Dhall_Core_AST_Types_Basics.showThree))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Unit.showUnit))(Data_Unit.showUnit))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Void.showVoid))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Void.showVoid))(Dhall_Core_AST_Types_Basics.showThree))(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Void.showVoid))(Data_Unit.showUnit))(Data_Show.showBoolean))(Data_Show.showBoolean));
var showConst = new Data_Show.Show(function (v) {
    if (v instanceof Type) {
        return "Type";
    };
    if (v instanceof Kind) {
        return "Kind";
    };
    if (v instanceof Sort) {
        return "Sort";
    };
    throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 45, column 1 - line 48, column 21): " + [ v.constructor.name ]);
});
var ordERVFI = Data_Variant.ordVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
    return "Var";
})))(new Data_Symbol.IsSymbol(function () {
    return "UsingHeaders";
})))(new Data_Symbol.IsSymbol(function () {
    return "Union";
})))(new Data_Symbol.IsSymbol(function () {
    return "ToMap";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "Text";
})))(new Data_Symbol.IsSymbol(function () {
    return "Some";
})))(new Data_Symbol.IsSymbol(function () {
    return "RecordLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Record";
})))(new Data_Symbol.IsSymbol(function () {
    return "Project";
})))(new Data_Symbol.IsSymbol(function () {
    return "Prefer";
})))(new Data_Symbol.IsSymbol(function () {
    return "Pi";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Optional";
})))(new Data_Symbol.IsSymbol(function () {
    return "None";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalToInteger";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalTimes";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalSubtract";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalPlus";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalOdd";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalIsZero";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalEven";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Natural";
})))(new Data_Symbol.IsSymbol(function () {
    return "Merge";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListReverse";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLength";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLast";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListIndexed";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListHead";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "List";
})))(new Data_Symbol.IsSymbol(function () {
    return "Let";
})))(new Data_Symbol.IsSymbol(function () {
    return "Lam";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerToDouble";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Integer";
})))(new Data_Symbol.IsSymbol(function () {
    return "ImportAlt";
})))(new Data_Symbol.IsSymbol(function () {
    return "Hashed";
})))(new Data_Symbol.IsSymbol(function () {
    return "Field";
})))(new Data_Symbol.IsSymbol(function () {
    return "Equivalent";
})))(new Data_Symbol.IsSymbol(function () {
    return "Embed";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Double";
})))(new Data_Symbol.IsSymbol(function () {
    return "Const";
})))(new Data_Symbol.IsSymbol(function () {
    return "CombineTypes";
})))(new Data_Symbol.IsSymbol(function () {
    return "Combine";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolOr";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolNE";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolIf";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolEQ";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolAnd";
})))(new Data_Symbol.IsSymbol(function () {
    return "Bool";
})))(new Data_Symbol.IsSymbol(function () {
    return "Assert";
})))(new Data_Symbol.IsSymbol(function () {
    return "App";
})))(new Data_Symbol.IsSymbol(function () {
    return "Annot";
})))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Eq.eqUnit)))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqUnit)))(Data_Eq.eqVoid))(Data_Natural.eqNatural))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqUnit))(Data_Eq.eqString))(Data_Eq.eqString))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqUnit)))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqVoid))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqInt)))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqUnit))(Data_Eq.eqUnit))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqUnit))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantCons(Data_Variant.ordVariantNil)(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Ord.ordUnit)))(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Ord.ordUnit)))(Data_Ord.ordVoid))(Data_Natural.ordNatural))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordUnit))(Data_Ord.ordString))(Data_Ord.ordString))(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Ord.ordUnit)))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Dhall_Core_AST_Types_Basics.ordThree))(Data_Ord.ordVoid))(Data_Either.ordEither(Data_Ord.ordUnit)(Data_Ord.ordInt)))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Dhall_Core_AST_Types_Basics.ordThree))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Ord.ordUnit))(Data_Ord.ordUnit))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordVoid))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Dhall_Core_AST_Types_Basics.ordThree))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean))(Data_Ord.ordVoid))(Data_Ord.ordUnit))(Data_Ord.ordBoolean))(Data_Ord.ordBoolean));
var newtypeExpr = new Data_Newtype.Newtype(function (n) {
    return n;
}, Expr);
var newtypeERVFI = new Data_Newtype.Newtype(function (n) {
    return n;
}, ERVFI);
var newtypeERVF$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, ERVF$prime);
var newtypeERVF = new Data_Newtype.Newtype(function (n) {
    return n;
}, ERVF);
var monadExpr = Control_Monad_Free.freeMonad;
var mergeERVF$prime = function (dictEq1) {
    return function (dictTraversable) {
        return function (dictTraversable1) {
            return function (dictMerge) {
                return function (dictMerge1) {
                    return Dhall_Core_Zippers_Merge.mergeVariantF()(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Annot";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Assert";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Bool";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolAnd";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolEQ";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeTriplet'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolLit";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolNE";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "BoolOr";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Combine";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "CombineTypes";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Const";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Double";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "DoubleLit";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "DoubleShow";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Embed";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Equivalent";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqString))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Hashed";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqString))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ImportAlt";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Integer";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerLit";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerShow";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "IntegerToDouble";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeBindingBody'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeLetF'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "List";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListAppend";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListBuild";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListHead";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListIndexed";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLast";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLength";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()()(Dhall_Core_Zippers["mergeProduct'"](Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers["mergeArray'"]))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ListReverse";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeMergeF'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Natural";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalBuild";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalEven";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalFold";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalIsZero";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalOdd";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalPlus";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalShow";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalSubtract";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalTimes";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "NaturalToInteger";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Optional";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "OptionalBuild";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "OptionalFold";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeBindingBody'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Prefer";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))()()(Dhall_Core_Zippers["mergeProduct'"](Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeEither(Data_Functor_App.eqApp(dictEq1)(Data_Eq.eqUnit)))(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit)))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()()(dictMerge1)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "RecordLit";
                    }))()()(dictMerge1)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Text";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "TextAppend";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "TextLit";
                    }))()()(Dhall_Core_AST_Types_Basics["mergeTextLitF'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "TextShow";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))()()(Dhall_Core_Zippers["mergeProduct'"](Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit)))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Union";
                    }))()()(Dhall_Core_Zippers["mergeCompose'"](dictMerge1)(dictTraversable1)(Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit)))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    }))()()(Dhall_Core_AST_Types_Basics["mergePair'"])(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeVFRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
                };
            };
        };
    };
};
var functorExpr = Control_Monad_Free.freeFunctor;
var functorERVF$prime = Data_Functor_Variant.functorVariantF;
var functorERVF = Data_Functor_Variant.functorVariantF;
var functorWithIndexERVF = function (dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
        return functorERVF;
    }, function (f) {
        return function (v) {
            return Dhall_Core_Zippers.mapWithIndexV()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Annot";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "App";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Assert";
            }))(Data_Identity.functorWithIndexIdentity)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Bool";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolAnd";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolEQ";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolIf";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexTriplet)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolLit";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolNE";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "BoolOr";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Combine";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "CombineTypes";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Const";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Double";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "DoubleLit";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "DoubleShow";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Embed";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Equivalent";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Field";
            }))(Data_Tuple.functorWithIndexTuple)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Hashed";
            }))(Data_Tuple.functorWithIndexTuple)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ImportAlt";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Integer";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "IntegerLit";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "IntegerShow";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "IntegerToDouble";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Lam";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexBindingBody)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Let";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexLetF)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "List";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListAppend";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListBuild";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListFold";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListHead";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListIndexed";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListLast";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListLength";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListLit";
            }))(Data_Functor_Product.functorWithIndexProduct(Data_FunctorWithIndex.functorWithIndexMaybe)(Data_FunctorWithIndex.functorWithIndexArray))()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ListReverse";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Merge";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexMergeF)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Natural";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalBuild";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalEven";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalFold";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalIsZero";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalLit";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalOdd";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalPlus";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalShow";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalSubtract";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalTimes";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "NaturalToInteger";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "None";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Optional";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "OptionalBuild";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "OptionalFold";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Pi";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexBindingBody)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Prefer";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Project";
            }))(Data_Functor_Product.functorWithIndexProduct(Data_Identity.functorWithIndexIdentity)(Data_Either.functorWithIndexEither))()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Record";
            }))(dictFunctorWithIndex)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "RecordLit";
            }))(dictFunctorWithIndex)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Some";
            }))(Data_Identity.functorWithIndexIdentity)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Text";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "TextAppend";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "TextLit";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexTextLitF)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "TextShow";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "ToMap";
            }))(Data_Functor_Product.functorWithIndexProduct(Data_Identity.functorWithIndexIdentity)(Data_FunctorWithIndex.functorWithIndexMaybe))()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Union";
            }))(Data_Functor_Compose.functorWithIndexCompose(dictFunctorWithIndex)(Data_FunctorWithIndex.functorWithIndexMaybe))()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "UsingHeaders";
            }))(Dhall_Core_AST_Types_Basics.functorWithIndexPair)()()()()(Dhall_Core_Zippers.functorWithIndexVRLCons(new Data_Symbol.IsSymbol(function () {
                return "Var";
            }))(Data_Const.functorWithIndexConst)()()()()(Dhall_Core_Zippers.functorWithIndexVRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(function ($276) {
                return f(ERVFI($276));
            })(v);
        };
    });
};
var recursiveExpr = new Matryoshka_Class_Recursive.Recursive(function () {
    return functorERVF;
}, (function () {
    var $277 = Data_Either.either((function () {
        var $283 = Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"]);
        var $284 = Data_Newtype.wrap(Data_Const.newtypeConst);
        return function ($285) {
            return $283($284($285));
        };
    })())(Data_Functor_Variant.expand());
    var $278 = Data_Newtype.unwrap(Matryoshka_Pattern_CoEnvT.newtypeEnvT);
    var $279 = Data_Functor.map(Matryoshka_Pattern_CoEnvT.functorEnvT(Data_Functor_Variant.functorVariantF))(Expr);
    var $280 = Matryoshka_Class_Recursive.project(Matryoshka_Class_Recursive.recursiveFree(Data_Functor_Variant.functorVariantF));
    var $281 = Data_Newtype.unwrap(newtypeExpr);
    return function ($282) {
        return ERVF($277($278($279($280($281($282))))));
    };
})());
var projectW = (function () {
    var $286 = Data_Newtype.unwrap(newtypeERVF);
    var $287 = Matryoshka_Class_Recursive.project(recursiveExpr);
    return function ($288) {
        return $286($287($288));
    };
})();
var foldableExpr = function (dictFoldable) {
    return Control_Monad_Free.foldableFree(Data_Functor_Variant.functorVariantF)(Data_Functor_Variant.foldableVariantF()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.foldableCompose(dictFoldable)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())()));
};
var foldableERVF$prime = function (dictFoldable) {
    return function (dictFoldable1) {
        return Data_Functor_Variant.foldableVariantF()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics["foldableTriplet'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics["foldableBindingBody'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics["foldableLetF'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Dhall_Core_Zippers["foldableProduct'"](Data_Foldable.foldableMaybe)(Data_Const.foldableConst)(Data_Foldable.foldableArray)(Dhall_Core_Zippers["foldableArray'"]))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics["foldableMergeF'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics["foldableBindingBody'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Dhall_Core_Zippers["foldableProduct'"](Data_Identity.foldableIdentity)(Data_Const.foldableConst)(Data_Either.foldableEither)(Data_Const.foldableConst))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictFoldable1)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictFoldable1)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics["foldableTextLitF'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Dhall_Core_Zippers["foldableProduct'"](Data_Identity.foldableIdentity)(Data_Const.foldableConst)(Data_Foldable.foldableMaybe)(Data_Const.foldableConst))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Dhall_Core_Zippers["foldableCompose'"](dictFoldable1)(Data_Foldable.foldableMaybe)(Data_Const.foldableConst))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics["foldablePair'"])(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())());
    };
};
var foldableERVF = function (dictFoldable) {
    return Data_Functor_Variant.foldableVariantF()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Embed";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.foldableCompose(dictFoldable)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())());
};
var foldableWithIndexERVF = function (dictFunctorWithIndex) {
    return function (dictFoldableWithIndex) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableERVF(dictFoldableWithIndex.Foldable0());
        }, function (dictMonoid) {
            return function (f) {
                var $289 = Data_Foldable.fold(foldableERVF(dictFoldableWithIndex.Foldable0()))(dictMonoid);
                var $290 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexERVF(dictFunctorWithIndex))(f);
                return function ($291) {
                    return $289($290($291));
                };
            };
        }, function (f) {
            return function (z) {
                var $292 = Data_Foldable.foldl(foldableERVF(dictFoldableWithIndex.Foldable0()))(function (z$prime) {
                    return function (v) {
                        return f(v.value0)(z$prime)(v.value1);
                    };
                })(z);
                var $293 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexERVF(dictFunctorWithIndex))(Data_Tuple.Tuple.create);
                return function ($294) {
                    return $292($293($294));
                };
            };
        }, function (f) {
            return function (z) {
                var $295 = Data_Foldable.foldr(foldableERVF(dictFoldableWithIndex.Foldable0()))(function (v) {
                    return function (z$prime) {
                        return f(v.value0)(v.value1)(z$prime);
                    };
                })(z);
                var $296 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexERVF(dictFunctorWithIndex))(Data_Tuple.Tuple.create);
                return function ($297) {
                    return $295($296($297));
                };
            };
        });
    };
};
var traversableWithIndexERVF = function (dictTraversableWithIndex) {
    return new Data_TraversableWithIndex.TraversableWithIndex(function () {
        return foldableWithIndexERVF(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex.FoldableWithIndex1());
    }, function () {
        return functorWithIndexERVF(dictTraversableWithIndex.FunctorWithIndex0());
    }, function () {
        return traversableERVF(dictTraversableWithIndex.Traversable2());
    }, function (dictApplicative) {
        return function (f) {
            var $298 = Data_Traversable.sequence(traversableERVF(dictTraversableWithIndex.Traversable2()))(dictApplicative);
            var $299 = Data_FunctorWithIndex.mapWithIndex(functorWithIndexERVF(dictTraversableWithIndex.FunctorWithIndex0()))(f);
            return function ($300) {
                return $298($299($300));
            };
        };
    });
};
var eqVar = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.value0 === y.value0 && x.value1 === y.value1;
    };
});
var ordVar = new Data_Ord.Ord(function () {
    return eqVar;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Ord.ordInt)(x.value1)(y.value1);
    };
});
var eqERVFI = Data_Variant.eqVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
    return "Var";
})))(new Data_Symbol.IsSymbol(function () {
    return "UsingHeaders";
})))(new Data_Symbol.IsSymbol(function () {
    return "Union";
})))(new Data_Symbol.IsSymbol(function () {
    return "ToMap";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "TextAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "Text";
})))(new Data_Symbol.IsSymbol(function () {
    return "Some";
})))(new Data_Symbol.IsSymbol(function () {
    return "RecordLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Record";
})))(new Data_Symbol.IsSymbol(function () {
    return "Project";
})))(new Data_Symbol.IsSymbol(function () {
    return "Prefer";
})))(new Data_Symbol.IsSymbol(function () {
    return "Pi";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "OptionalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Optional";
})))(new Data_Symbol.IsSymbol(function () {
    return "None";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalToInteger";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalTimes";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalSubtract";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalPlus";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalOdd";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalIsZero";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalEven";
})))(new Data_Symbol.IsSymbol(function () {
    return "NaturalBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "Natural";
})))(new Data_Symbol.IsSymbol(function () {
    return "Merge";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListReverse";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLength";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListLast";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListIndexed";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListHead";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListFold";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListBuild";
})))(new Data_Symbol.IsSymbol(function () {
    return "ListAppend";
})))(new Data_Symbol.IsSymbol(function () {
    return "List";
})))(new Data_Symbol.IsSymbol(function () {
    return "Let";
})))(new Data_Symbol.IsSymbol(function () {
    return "Lam";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerToDouble";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "IntegerLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Integer";
})))(new Data_Symbol.IsSymbol(function () {
    return "ImportAlt";
})))(new Data_Symbol.IsSymbol(function () {
    return "Hashed";
})))(new Data_Symbol.IsSymbol(function () {
    return "Field";
})))(new Data_Symbol.IsSymbol(function () {
    return "Equivalent";
})))(new Data_Symbol.IsSymbol(function () {
    return "Embed";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleShow";
})))(new Data_Symbol.IsSymbol(function () {
    return "DoubleLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "Double";
})))(new Data_Symbol.IsSymbol(function () {
    return "Const";
})))(new Data_Symbol.IsSymbol(function () {
    return "CombineTypes";
})))(new Data_Symbol.IsSymbol(function () {
    return "Combine";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolOr";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolNE";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolLit";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolIf";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolEQ";
})))(new Data_Symbol.IsSymbol(function () {
    return "BoolAnd";
})))(new Data_Symbol.IsSymbol(function () {
    return "Bool";
})))(new Data_Symbol.IsSymbol(function () {
    return "Assert";
})))(new Data_Symbol.IsSymbol(function () {
    return "App";
})))(new Data_Symbol.IsSymbol(function () {
    return "Annot";
})))(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantCons(Data_Variant.eqVariantNil)(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Tuple.eqTuple(Data_Eq.eqString)(Data_Eq.eqUnit)))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqUnit)))(Data_Eq.eqVoid))(Data_Natural.eqNatural))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqUnit))(Data_Eq.eqString))(Data_Eq.eqString))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqUnit)))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqVoid))(Data_Either.eqEither(Data_Eq.eqUnit)(Data_Eq.eqInt)))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqUnit))(Data_Eq.eqUnit))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqVoid))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Dhall_Core_AST_Types_Basics.eqThree))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean))(Data_Eq.eqVoid))(Data_Eq.eqUnit))(Data_Eq.eqBoolean))(Data_Eq.eqBoolean));
var eqConst = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Type && y instanceof Type) {
            return true;
        };
        if (x instanceof Kind && y instanceof Kind) {
            return true;
        };
        if (x instanceof Sort && y instanceof Sort) {
            return true;
        };
        return false;
    };
});
var mergeERVF = function (dictEq) {
    return function (dictEq1) {
        return function (dictTraversable) {
            return function (dictMerge) {
                return Dhall_Core_Zippers_Merge.mergeVariantF()(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Annot";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "App";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Assert";
                }))()()(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Bool";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolAnd";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolEQ";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolIf";
                }))()()(Dhall_Core_AST_Types_Basics.mergeTriplet)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolLit";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqBoolean))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolNE";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "BoolOr";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Combine";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "CombineTypes";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Const";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(eqConst))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Double";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "DoubleLit";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqNumber))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "DoubleShow";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Embed";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(dictEq))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Equivalent";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Field";
                }))()()(Dhall_Core_Zippers_Merge.mergeTuple(Data_Eq.eqString))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Hashed";
                }))()()(Dhall_Core_Zippers_Merge.mergeTuple(Data_Eq.eqString))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ImportAlt";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Integer";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "IntegerLit";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqInt))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "IntegerShow";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "IntegerToDouble";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Lam";
                }))()()(Dhall_Core_AST_Types_Basics.mergeBindingBody)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Let";
                }))()()(Dhall_Core_AST_Types_Basics.mergeLetF)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "List";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListAppend";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListBuild";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListFold";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListHead";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListIndexed";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListLast";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListLength";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListLit";
                }))()()(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeArray))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ListReverse";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Merge";
                }))()()(Dhall_Core_AST_Types_Basics.mergeMergeF)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Natural";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalBuild";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalEven";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalFold";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalIsZero";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalLit";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Natural.eqNatural))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalOdd";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalPlus";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalShow";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalSubtract";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalTimes";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "NaturalToInteger";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "None";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Optional";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "OptionalBuild";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "OptionalFold";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Pi";
                }))()()(Dhall_Core_AST_Types_Basics.mergeBindingBody)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Prefer";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Project";
                }))()()(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeEither(Data_Functor_App.eqApp(dictEq1)(Data_Eq.eqUnit))))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Record";
                }))()()(dictMerge)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "RecordLit";
                }))()()(dictMerge)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Some";
                }))()()(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Text";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "TextAppend";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "TextLit";
                }))()()(Dhall_Core_AST_Types_Basics.mergeTextLitF)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "TextShow";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "ToMap";
                }))()()(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeMaybe))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Union";
                }))()()(Dhall_Core_Zippers_Merge.mergeCompose(dictTraversable)(dictMerge)(Dhall_Core_Zippers_Merge.mergeMaybe))(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "UsingHeaders";
                }))()()(Dhall_Core_AST_Types_Basics.mergePair)(Dhall_Core_Zippers_Merge.mergeVFRLCons(new Data_Symbol.IsSymbol(function () {
                    return "Var";
                }))()()(Dhall_Core_Zippers_Merge.mergeConst(eqVar))(Dhall_Core_Zippers_Merge.mergeVFRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
            };
        };
    };
};
var ordConst = new Data_Ord.Ord(function () {
    return eqConst;
}, function (x) {
    return function (y) {
        if (x instanceof Type && y instanceof Type) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Type) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Type) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Kind && y instanceof Kind) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Kind) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Kind) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Sort && y instanceof Sort) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.AST.Types (line 44, column 1 - line 44, column 38): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eq1ExprRowVF$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return new Data_Eq.Eq1(function (dictEq2) {
                return function (v) {
                    return function (v1) {
                        return vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "UsingHeaders";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))(Dhall_Core_Zippers["eq1Compose'"](dictEq11)(Data_Maybe.eq1Maybe)(Data_Const.eq1Const(Data_Eq.eqUnit)))(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ToMap";
                        }))(Dhall_Core_Zippers["eqProduct'"](Data_Identity.eq1Identity)(Data_Const.eq1Const(Data_Eq.eqUnit))(Data_Maybe.eq1Maybe)(Data_Const.eq1Const(Data_Eq.eqUnit))(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "TextShow";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "TextLit";
                        }))(Dhall_Core_AST_Types_Basics["eqTextLitF'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "TextAppend";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Text";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                            return "Some";
                        }))(Data_Const.eq1Const(Data_Eq.eqUnit))(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))(dictEq11)(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                            return "Record";
                        }))(dictEq11)(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Project";
                        }))(Dhall_Core_Zippers["eqProduct'"](Data_Identity.eq1Identity)(Data_Const.eq1Const(Data_Eq.eqUnit))(Data_Either.eq1Either(Data_Functor_App.eqApp(dictEq1)(Data_Eq.eqUnit)))(Data_Const.eq1Const(Data_Eq.eqUnit))(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Prefer";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Pi";
                        }))(Dhall_Core_AST_Types_Basics["eqBindingBody'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "OptionalFold";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "OptionalBuild";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Optional";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "None";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalSubtract";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalToInteger";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalTimes";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalShow";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalPlus";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalOdd";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalIsZero";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalFold";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalEven";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalBuild";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Merge";
                        }))(Dhall_Core_AST_Types_Basics["eqMergeF'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListReverse";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(Dhall_Core_Zippers["eqProduct'"](Data_Maybe.eq1Maybe)(Data_Const.eq1Const(Data_Eq.eqUnit))(Data_Eq.eq1Array)(Dhall_Core_Zippers["eq1Array'"])(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLength";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLast";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListIndexed";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListHead";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListFold";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListBuild";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Let";
                        }))(Dhall_Core_AST_Types_Basics["eqLetF'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(Dhall_Core_AST_Types_Basics["eqBindingBody'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerToDouble";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerShow";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerLit";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Integer";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "ImportAlt";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Hashed";
                        }))(Data_Const.eqConst(Data_Eq.eqString))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Field";
                        }))(Data_Const.eqConst(Data_Eq.eqString))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Equivalent";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Embed";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "DoubleShow";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "DoubleLit";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Double";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Const";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "CombineTypes";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Combine";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolOr";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolNE";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolLit";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolIf";
                        }))(Dhall_Core_AST_Types_Basics["eqTriplet'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolEQ";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolAnd";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Bool";
                        }))(Data_Const.eqConst(Data_Eq.eqVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Assert";
                        }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                            return "Annot";
                        }))(Dhall_Core_AST_Types_Basics["eqPair'"](dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Variant.case_))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v)(v1);
                    };
                };
            });
        };
    };
};
var eqExprRowVF$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return function (dictEq2) {
                return new Data_Eq.Eq(Data_Eq.eq1(eq1ExprRowVF$prime(dictEq1)(dictEq11)(dictEq))(dictEq2));
            };
        };
    };
};
var ord1ExprRowVF$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return new Data_Ord.Ord1(function () {
                return eq1ExprRowVF$prime(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }, function (dictOrd2) {
                return function (v) {
                    return function (v1) {
                        return vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "UsingHeaders";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))(Dhall_Core_Zippers["ord1Compose'"](dictOrd11)(Data_Maybe.ord1Maybe)(Data_Const.ord1Const(Data_Ord.ordUnit)))(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ToMap";
                        }))(Dhall_Core_Zippers["ordProduct'"](Data_Identity.ord1Identity)(Data_Const.ord1Const(Data_Ord.ordUnit))(Data_Maybe.ord1Maybe)(Data_Const.ord1Const(Data_Ord.ordUnit))(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "TextShow";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "TextLit";
                        }))(Dhall_Core_AST_Types_Basics["ordTextLitF'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "TextAppend";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Text";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                            return "Some";
                        }))(Data_Const.ord1Const(Data_Ord.ordUnit))(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))(dictOrd11)(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                            return "Record";
                        }))(dictOrd11)(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Project";
                        }))(Dhall_Core_Zippers["ordProduct'"](Data_Identity.ord1Identity)(Data_Const.ord1Const(Data_Ord.ordUnit))(Data_Either.ord1Either(Data_Functor_App.ordApp(dictOrd1)(Data_Ord.ordUnit)))(Data_Const.ord1Const(Data_Ord.ordUnit))(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Prefer";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Pi";
                        }))(Dhall_Core_AST_Types_Basics["ordBindingBody'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "OptionalFold";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "OptionalBuild";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Optional";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "None";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalSubtract";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalToInteger";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalTimes";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalShow";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalPlus";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalOdd";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalIsZero";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalFold";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalEven";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "NaturalBuild";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Merge";
                        }))(Dhall_Core_AST_Types_Basics["ordMergeF'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListReverse";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(Dhall_Core_Zippers["ordProduct'"](Data_Maybe.ord1Maybe)(Data_Const.ord1Const(Data_Ord.ordUnit))(Data_Ord.ord1Array)(Dhall_Core_Zippers["ord1Array'"])(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLength";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListLast";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListIndexed";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListHead";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListFold";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListBuild";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Let";
                        }))(Dhall_Core_AST_Types_Basics["ordLetF'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(Dhall_Core_AST_Types_Basics["ordBindingBody'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerToDouble";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerShow";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "IntegerLit";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Integer";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "ImportAlt";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Hashed";
                        }))(Data_Const.ordConst(Data_Ord.ordString))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Field";
                        }))(Data_Const.ordConst(Data_Ord.ordString))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Equivalent";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Embed";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "DoubleShow";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "DoubleLit";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Double";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Const";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "CombineTypes";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Combine";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolOr";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolNE";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolLit";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolIf";
                        }))(Dhall_Core_AST_Types_Basics["ordTriplet'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolEQ";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "BoolAnd";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Bool";
                        }))(Data_Const.ordConst(Data_Ord.ordVoid))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Assert";
                        }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                            return "Annot";
                        }))(Dhall_Core_AST_Types_Basics["ordPair'"](dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Variant.case_))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v)(v1);
                    };
                };
            });
        };
    };
};
var ordExprRowVF$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return function (dictOrd2) {
                return new Data_Ord.Ord(function () {
                    return eqExprRowVF$prime(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0())(dictOrd2.Eq0());
                }, Data_Ord.compare1(ord1ExprRowVF$prime(dictOrd1)(dictOrd11)(dictOrd))(dictOrd2));
            };
        };
    };
};
var eq1ExprRowVF = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq1(function (dictEq2) {
            return function (v) {
                return function (v1) {
                    return vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))(Data_Const.eqConst(eqVar))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                        return "Union";
                    }))(Data_Functor_Compose.eq1Compose(dictEq1)(Data_Maybe.eq1Maybe))(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))(Data_Functor_Product.eqProduct(Data_Identity.eq1Identity)(Data_Maybe.eq1Maybe)(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "TextShow";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "TextLit";
                    }))(Dhall_Core_AST_Types_Basics.eqTextLitF(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "TextAppend";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Text";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))(Data_Identity.eq1Identity)(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                        return "RecordLit";
                    }))(dictEq1)(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEq1Case(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))(dictEq1)(dictEq2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))(Data_Functor_Product.eqProduct(Data_Identity.eq1Identity)(Data_Either.eq1Either(Data_Functor_App.eqApp(dictEq1)(Data_Eq.eqUnit)))(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Prefer";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))(Dhall_Core_AST_Types_Basics.eqBindingBody(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "OptionalFold";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "OptionalBuild";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Optional";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalSubtract";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalToInteger";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalTimes";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalShow";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalPlus";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalOdd";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))(Data_Const.eqConst(Data_Natural.eqNatural))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalIsZero";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalFold";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalEven";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalBuild";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Natural";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))(Dhall_Core_AST_Types_Basics.eqMergeF(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListReverse";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))(Data_Functor_Product.eqProduct(Data_Maybe.eq1Maybe)(Data_Eq.eq1Array)(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLength";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLast";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListIndexed";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListHead";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListBuild";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ListAppend";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "List";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    }))(Dhall_Core_AST_Types_Basics.eqLetF(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(Dhall_Core_AST_Types_Basics.eqBindingBody(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerToDouble";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerShow";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerLit";
                    }))(Data_Const.eqConst(Data_Eq.eqInt))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Integer";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "ImportAlt";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Hashed";
                    }))(Data_Tuple.eqTuple(Data_Eq.eqString)(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))(Data_Tuple.eqTuple(Data_Eq.eqString)(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Equivalent";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Embed";
                    }))(Data_Const.eqConst(dictEq))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "DoubleShow";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "DoubleLit";
                    }))(Data_Const.eqConst(Data_Eq.eqNumber))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Double";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Const";
                    }))(Data_Const.eqConst(eqConst))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "CombineTypes";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Combine";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolOr";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolNE";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolLit";
                    }))(Data_Const.eqConst(Data_Eq.eqBoolean))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))(Dhall_Core_AST_Types_Basics.eqTriplet(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolEQ";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolAnd";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Bool";
                    }))(Data_Const.eqConst(Data_Eq.eqUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Assert";
                    }))(Data_Identity.eqIdentity(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfEqCase(new Data_Symbol.IsSymbol(function () {
                        return "Annot";
                    }))(Dhall_Core_AST_Types_Basics.eqPair(dictEq2))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Variant.case_))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v)(v1);
                };
            };
        });
    };
};
var eqExpr = function (dictEq1) {
    return function (dictEq) {
        return new Data_Eq.Eq(function (e1) {
            return function (e2) {
                return Data_Eq.eq1(eq1ExprRowVF(dictEq1)(dictEq))(eqExpr(dictEq1)(dictEq))(Matryoshka_Class_Recursive.project(recursiveExpr)(e1))(Matryoshka_Class_Recursive.project(recursiveExpr)(e2));
            };
        });
    };
};
var eqExprRowVF = function (dictEq1) {
    return function (dictEq) {
        return function (dictEq2) {
            return new Data_Eq.Eq(Data_Eq.eq1(eq1ExprRowVF(dictEq1)(dictEq))(dictEq2));
        };
    };
};
var ord1ExprRowVF = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord1(function () {
            return eq1ExprRowVF(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (dictOrd2) {
            return function (v) {
                return function (v1) {
                    return vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))(Data_Const.ordConst(ordVar))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                        return "Union";
                    }))(Data_Functor_Compose.ord1Compose(dictOrd1)(Data_Maybe.ord1Maybe))(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))(Data_Functor_Product.ordProduct(Data_Identity.ord1Identity)(Data_Maybe.ord1Maybe)(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "TextShow";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "TextLit";
                    }))(Dhall_Core_AST_Types_Basics.ordTextLitF(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "TextAppend";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Text";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))(Data_Identity.ord1Identity)(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                        return "RecordLit";
                    }))(dictOrd1)(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrd1Case(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))(dictOrd1)(dictOrd2)()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))(Data_Functor_Product.ordProduct(Data_Identity.ord1Identity)(Data_Either.ord1Either(Data_Functor_App.ordApp(dictOrd1)(Data_Ord.ordUnit)))(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Prefer";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))(Dhall_Core_AST_Types_Basics.ordBindingBody(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "OptionalFold";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "OptionalBuild";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Optional";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalSubtract";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalToInteger";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalTimes";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalShow";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalPlus";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalOdd";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))(Data_Const.ordConst(Data_Natural.ordNatural))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalIsZero";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalFold";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalEven";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "NaturalBuild";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Natural";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))(Dhall_Core_AST_Types_Basics.ordMergeF(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListReverse";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))(Data_Functor_Product.ordProduct(Data_Maybe.ord1Maybe)(Data_Ord.ord1Array)(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLength";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListLast";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListIndexed";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListHead";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListBuild";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ListAppend";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "List";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    }))(Dhall_Core_AST_Types_Basics.ordLetF(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(Dhall_Core_AST_Types_Basics.ordBindingBody(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerToDouble";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerShow";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "IntegerLit";
                    }))(Data_Const.ordConst(Data_Ord.ordInt))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Integer";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "ImportAlt";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Hashed";
                    }))(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Equivalent";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Embed";
                    }))(Data_Const.ordConst(dictOrd))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "DoubleShow";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "DoubleLit";
                    }))(Data_Const.ordConst(Data_Ord.ordNumber))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Double";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Const";
                    }))(Data_Const.ordConst(ordConst))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "CombineTypes";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Combine";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolOr";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolNE";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolLit";
                    }))(Data_Const.ordConst(Data_Ord.ordBoolean))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))(Dhall_Core_AST_Types_Basics.ordTriplet(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolEQ";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "BoolAnd";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Bool";
                    }))(Data_Const.ordConst(Data_Ord.ordUnit))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Assert";
                    }))(Data_Identity.ordIdentity(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(vfOrdCase(new Data_Symbol.IsSymbol(function () {
                        return "Annot";
                    }))(Dhall_Core_AST_Types_Basics.ordPair(dictOrd2))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Variant.case_))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v)(v1);
                };
            };
        });
    };
};
var ordExpr = function (dictOrd1) {
    return function (dictOrd) {
        return new Data_Ord.Ord(function () {
            return eqExpr(dictOrd1.Eq10())(dictOrd.Eq0());
        }, function (e1) {
            return function (e2) {
                return Data_Ord.compare1(ord1ExprRowVF(dictOrd1)(dictOrd))(ordExpr(dictOrd1)(dictOrd))(Matryoshka_Class_Recursive.project(recursiveExpr)(e1))(Matryoshka_Class_Recursive.project(recursiveExpr)(e2));
            };
        });
    };
};
var ordExprRowVF = function (dictOrd1) {
    return function (dictOrd) {
        return function (dictOrd2) {
            return new Data_Ord.Ord(function () {
                return eqExprRowVF(dictOrd1.Eq10())(dictOrd.Eq0())(dictOrd2.Eq0());
            }, Data_Ord.compare1(ord1ExprRowVF(dictOrd1)(dictOrd))(dictOrd2));
        };
    };
};
var eq1Expr = function (dictEq1) {
    return new Data_Eq.Eq1(function (dictEq) {
        return Data_Eq.eq(eqExpr(dictEq1)(dictEq));
    });
};
var ord1Expr = function (dictOrd1) {
    return new Data_Ord.Ord1(function () {
        return eq1Expr(dictOrd1.Eq10());
    }, function (dictOrd) {
        return Data_Ord.compare(ordExpr(dictOrd1)(dictOrd));
    });
};
var corecursiveExpr = new Matryoshka_Class_Corecursive.Corecursive(function () {
    return functorERVF;
}, (function () {
    var $301 = Data_Newtype.wrap(newtypeExpr);
    var $302 = Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveFree(Data_Functor_Variant.functorVariantF));
    var $303 = Data_Functor.map(Matryoshka_Pattern_CoEnvT.functorEnvT(Data_Functor_Variant.functorVariantF))(Data_Newtype.un(newtypeExpr)(Expr));
    var $304 = Data_Newtype.wrap(Matryoshka_Pattern_CoEnvT.newtypeEnvT);
    var $305 = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "Embed";
    }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
        var $308 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        return function ($309) {
            return Data_Either.Left.create($308($309));
        };
    })())(Data_Either.Right.create);
    var $306 = Data_Newtype.un(newtypeERVF)(ERVF);
    return function ($307) {
        return $301($302($303($304($305($306($307))))));
    };
})());
var embedW = (function () {
    var $310 = Matryoshka_Class_Corecursive.embed(corecursiveExpr);
    var $311 = Data_Newtype.wrap(newtypeERVF);
    return function ($312) {
        return $310($311($312));
    };
})();
var containerIERVF = function (dictContainerI) {
    return new Dhall_Core_Zippers.ContainerI(function (v) {
        return Dhall_Core_Zippers.ixFV()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Dhall_Core_Zippers.containerIConst)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics.containerITriplet)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Dhall_Core_Zippers.containerIConst)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Dhall_Core_Zippers.containerIConst)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics.containerIBindingBody)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics.containerILetF)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Dhall_Core_Zippers.containerIProduct(Dhall_Core_Zippers.containerIConst)(Dhall_Core_Zippers.containerIArray))()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics.containerIMergeF)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics.containerIBindingBody)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Dhall_Core_Zippers.containerIProduct(Dhall_Core_Zippers.containerIConst)(Dhall_Core_Zippers.containerIConst))()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictContainerI)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictContainerI)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Dhall_Core_Zippers.containerIConst)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics.containerITextLitF)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Dhall_Core_Zippers.containerIProduct(Dhall_Core_Zippers.containerIConst)(Dhall_Core_Zippers.containerIConst))()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Dhall_Core_Zippers.containerICompose(dictContainerI)(Dhall_Core_Zippers.containerIConst))()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics.containerIPair)()()()(Dhall_Core_Zippers.containerIVRLCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Dhall_Core_Zippers.containerIConstVoid)()()()(Dhall_Core_Zippers.containerIVRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v);
    });
};
var containerERVF = function (dictOrd) {
    return function (dictFunctor) {
        return function (dictEq1) {
            return function (dictMerge) {
                return function (dictTraversable) {
                    return function (dictContainer) {
                        return new Dhall_Core_Zippers.Container(function () {
                            return containerIERVF(dictContainer.ContainerI7());
                        }, function () {
                            return eq1ExprRowVF(dictContainer.Eq10())(dictOrd.Eq0());
                        }, function () {
                            return eq1ExprRowVF$prime(dictContainer.Eq10())(dictContainer.Eq11())(dictOrd.Eq0());
                        }, function () {
                            return functorERVF$prime;
                        }, function () {
                            return functorERVF;
                        }, function () {
                            return mergeERVF(dictOrd.Eq0())(dictContainer.Eq10())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3());
                        }, function () {
                            return mergeERVF$prime(dictContainer.Eq10())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Traversable6())(dictContainer.Merge3())(dictContainer.Merge4());
                        }, function () {
                            return ordERVFI;
                        }, function () {
                            return traversableERVF$prime((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Traversable6());
                        }, function () {
                            return traversableWithIndexERVF(dictContainer.TraversableWithIndex5());
                        }, function (v) {
                            return Data_Functor.mapFlipped(Data_Functor_Variant.functorVariantF)(Dhall_Core_Zippers.downZFV()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Annot";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "App";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Assert";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerIdentity)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Bool";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolAnd";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolEQ";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolIf";
                            }))(Dhall_Core_AST_Types_Basics["functorTriplet'"])(Dhall_Core_AST_Types_Basics.containerTriplet)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqBoolean))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolNE";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolOr";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Combine";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "CombineTypes";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Const";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(eqConst))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Double";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "DoubleLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqNumber))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "DoubleShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Embed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(dictOrd.Eq0()))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Equivalent";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Field";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerTuple(Data_Eq.eqString))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Hashed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerTuple(Data_Eq.eqString))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ImportAlt";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Integer";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqInt))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerToDouble";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Lam";
                            }))(Dhall_Core_AST_Types_Basics["functorBindingBody'"])(Dhall_Core_AST_Types_Basics.containerBindingBody)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            }))(Dhall_Core_AST_Types_Basics["functorLetF'"])(Dhall_Core_AST_Types_Basics.containerLetF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "List";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListAppend";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListHead";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListIndexed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLast";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLength";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLit";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Maybe.functorMaybe)(Data_Const.functorConst)(Data_Functor.functorArray)(Dhall_Core_Zippers["functorArray'"]))(Dhall_Core_Zippers.containerProduct(Data_Maybe.eq1Maybe)(Data_Eq.eq1Array)(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers["functorArray'"])(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray)(Dhall_Core_Zippers.containerMaybe)(Dhall_Core_Zippers.containerArray))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListReverse";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))(Dhall_Core_AST_Types_Basics["functorMergeF'"])(Dhall_Core_AST_Types_Basics.containerMergeF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Natural";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalEven";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalIsZero";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Natural.eqNatural))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalOdd";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalPlus";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalSubtract";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalTimes";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalToInteger";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "None";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Optional";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "OptionalBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "OptionalFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Pi";
                            }))(Dhall_Core_AST_Types_Basics["functorBindingBody'"])(Dhall_Core_AST_Types_Basics.containerBindingBody)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Prefer";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Project";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Identity.functorIdentity)(Data_Const.functorConst)(Data_Either.functorEither)(Data_Const.functorConst))(Dhall_Core_Zippers.containerProduct(Data_Identity.eq1Identity)(Data_Either.eq1Either(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit)))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeEither(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit)))(Data_Const.functorConst)(Data_Identity.traversableIdentity)(Data_Either.traversableEither)(Dhall_Core_Zippers.containerIdentity)(Dhall_Core_Zippers.containerEither(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit))))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))(dictContainer.Functor8())(dictContainer)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "RecordLit";
                            }))(dictContainer.Functor8())(dictContainer)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Some";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerIdentity)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Text";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextAppend";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextLit";
                            }))(Dhall_Core_AST_Types_Basics["functorTextLitF'"])(Dhall_Core_AST_Types_Basics.containerTextLitF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ToMap";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Identity.functorIdentity)(Data_Const.functorConst)(Data_Maybe.functorMaybe)(Data_Const.functorConst))(Dhall_Core_Zippers.containerProduct(Data_Identity.eq1Identity)(Data_Maybe.eq1Maybe)(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeMaybe)(Data_Const.functorConst)(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe)(Dhall_Core_Zippers.containerIdentity)(Dhall_Core_Zippers.containerMaybe))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Union";
                            }))(Dhall_Core_Zippers["functorCompose'"](dictContainer.Functor8())(Data_Maybe.functorMaybe)(Data_Const.functorConst))(Dhall_Core_Zippers.containerCompose(dictContainer.Eq10())(Data_Maybe.eq1Maybe)((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(Dhall_Core_Zippers_Merge.mergeMaybe)(dictContainer.Functor8())(Data_Const.functorConst)(Data_Traversable.traversableMaybe)(dictContainer)(Dhall_Core_Zippers.containerMaybe))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "UsingHeaders";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Var";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(eqVar))()()()()()(Dhall_Core_Zippers.containerVRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v))(Dhall_Core_Zippers["_contextZF"](Data_Profunctor_Strong.strongFn)(ERVF$prime));
                        }, function (v) {
                            return Dhall_Core_Zippers.upZFV()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Annot";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "App";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Assert";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerIdentity)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Bool";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolAnd";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolEQ";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolIf";
                            }))(Dhall_Core_AST_Types_Basics["functorTriplet'"])(Dhall_Core_AST_Types_Basics.containerTriplet)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqBoolean))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolNE";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "BoolOr";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Combine";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "CombineTypes";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Const";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(eqConst))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Double";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "DoubleLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqNumber))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "DoubleShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Embed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(dictOrd.Eq0()))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Equivalent";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Field";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerTuple(Data_Eq.eqString))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Hashed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerTuple(Data_Eq.eqString))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ImportAlt";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Integer";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqInt))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "IntegerToDouble";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Lam";
                            }))(Dhall_Core_AST_Types_Basics["functorBindingBody'"])(Dhall_Core_AST_Types_Basics.containerBindingBody)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            }))(Dhall_Core_AST_Types_Basics["functorLetF'"])(Dhall_Core_AST_Types_Basics.containerLetF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "List";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListAppend";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListHead";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListIndexed";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLast";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLength";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListLit";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Maybe.functorMaybe)(Data_Const.functorConst)(Data_Functor.functorArray)(Dhall_Core_Zippers["functorArray'"]))(Dhall_Core_Zippers.containerProduct(Data_Maybe.eq1Maybe)(Data_Eq.eq1Array)(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeMaybe)(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers["functorArray'"])(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray)(Dhall_Core_Zippers.containerMaybe)(Dhall_Core_Zippers.containerArray))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ListReverse";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))(Dhall_Core_AST_Types_Basics["functorMergeF'"])(Dhall_Core_AST_Types_Basics.containerMergeF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Natural";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalEven";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalIsZero";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalLit";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Natural.eqNatural))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalOdd";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalPlus";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalSubtract";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalTimes";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "NaturalToInteger";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "None";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Optional";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "OptionalBuild";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "OptionalFold";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Pi";
                            }))(Dhall_Core_AST_Types_Basics["functorBindingBody'"])(Dhall_Core_AST_Types_Basics.containerBindingBody)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Prefer";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Project";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Identity.functorIdentity)(Data_Const.functorConst)(Data_Either.functorEither)(Data_Const.functorConst))(Dhall_Core_Zippers.containerProduct(Data_Identity.eq1Identity)(Data_Either.eq1Either(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit)))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeEither(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit)))(Data_Const.functorConst)(Data_Identity.traversableIdentity)(Data_Either.traversableEither)(Dhall_Core_Zippers.containerIdentity)(Dhall_Core_Zippers.containerEither(Data_Functor_App.eqApp(dictContainer.Eq10())(Data_Eq.eqUnit))))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))(dictContainer.Functor8())(dictContainer)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "RecordLit";
                            }))(dictContainer.Functor8())(dictContainer)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Some";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerIdentity)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Text";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextAppend";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextLit";
                            }))(Dhall_Core_AST_Types_Basics["functorTextLitF'"])(Dhall_Core_AST_Types_Basics.containerTextLitF)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "TextShow";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(Data_Eq.eqUnit))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "ToMap";
                            }))(Dhall_Core_Zippers["functorProduct'"](Data_Identity.functorIdentity)(Data_Const.functorConst)(Data_Maybe.functorMaybe)(Data_Const.functorConst))(Dhall_Core_Zippers.containerProduct(Data_Identity.eq1Identity)(Data_Maybe.eq1Maybe)(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeIdentity)(Dhall_Core_Zippers_Merge.mergeMaybe)(Data_Const.functorConst)(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe)(Dhall_Core_Zippers.containerIdentity)(Dhall_Core_Zippers.containerMaybe))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Union";
                            }))(Dhall_Core_Zippers["functorCompose'"](dictContainer.Functor8())(Data_Maybe.functorMaybe)(Data_Const.functorConst))(Dhall_Core_Zippers.containerCompose(dictContainer.Eq10())(Data_Maybe.eq1Maybe)((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(Dhall_Core_Zippers_Merge.mergeMaybe)(dictContainer.Functor8())(Data_Const.functorConst)(Data_Traversable.traversableMaybe)(dictContainer)(Dhall_Core_Zippers.containerMaybe))()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "UsingHeaders";
                            }))(Dhall_Core_AST_Types_Basics["functorPair'"])(Dhall_Core_AST_Types_Basics.containerPair)()()()()()(Dhall_Core_Zippers.containerVRLCons(new Data_Symbol.IsSymbol(function () {
                                return "Var";
                            }))(Data_Const.functorConst)(Dhall_Core_Zippers.containerConst(eqVar))()()()()()(Dhall_Core_Zippers.containerVRLNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(new Dhall_Core_Zippers.ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(Data_Newtype.unwrap(newtypeERVF$prime)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1)))));
                        });
                    };
                };
            };
        };
    };
};
var bindExpr = Control_Monad_Free.freeBind;
var bifunctorERVF = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return ERVF(Data_Functor.map(Data_Functor_Variant.functorVariantF)(g)(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                return "Embed";
            }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                var $313 = Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                    return "Embed";
                }))(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"]);
                var $314 = Data_Bifunctor.lmap(Data_Const.bifunctorConst)(f);
                return function ($315) {
                    return $313($314($315));
                };
            })())(Data_Functor_Variant.expand())(v)));
        };
    };
});
var applyExpr = Control_Monad_Free.freeApply;
var applicativeExpr = Control_Monad_Free.freeApplicative;
module.exports = {
    Type: Type,
    Kind: Kind,
    Sort: Sort,
    V: V,
    Expr: Expr,
    projectW: projectW,
    embedW: embedW,
    vfCase: vfCase,
    vfEqCase: vfEqCase,
    vfEq1Case: vfEq1Case,
    vfOrdCase: vfOrdCase,
    vfOrd1Case: vfOrd1Case,
    ERVF: ERVF,
    "ERVF'": ERVF$prime,
    ERVFI: ERVFI,
    eqConst: eqConst,
    ordConst: ordConst,
    showConst: showConst,
    eqVar: eqVar,
    ordVar: ordVar,
    showVar: showVar,
    newtypeExpr: newtypeExpr,
    recursiveExpr: recursiveExpr,
    corecursiveExpr: corecursiveExpr,
    showExpr: showExpr,
    eqExpr: eqExpr,
    eq1Expr: eq1Expr,
    ordExpr: ordExpr,
    ord1Expr: ord1Expr,
    newtypeERVF: newtypeERVF,
    functorERVF: functorERVF,
    foldableERVF: foldableERVF,
    traversableERVF: traversableERVF,
    mergeERVF: mergeERVF,
    bifunctorERVF: bifunctorERVF,
    "newtypeERVF'": newtypeERVF$prime,
    "functorERVF'": functorERVF$prime,
    "foldableERVF'": foldableERVF$prime,
    "traversableERVF'": traversableERVF$prime,
    "mergeERVF'": mergeERVF$prime,
    newtypeERVFI: newtypeERVFI,
    eqERVFI: eqERVFI,
    ordERVFI: ordERVFI,
    showERVFI: showERVFI,
    functorWithIndexERVF: functorWithIndexERVF,
    foldableWithIndexERVF: foldableWithIndexERVF,
    traversableWithIndexERVF: traversableWithIndexERVF,
    eqExprRowVF: eqExprRowVF,
    eq1ExprRowVF: eq1ExprRowVF,
    ordExprRowVF: ordExprRowVF,
    ord1ExprRowVF: ord1ExprRowVF,
    "eqExprRowVF'": eqExprRowVF$prime,
    "eq1ExprRowVF'": eq1ExprRowVF$prime,
    "ordExprRowVF'": ordExprRowVF$prime,
    "ord1ExprRowVF'": ord1ExprRowVF$prime,
    containerIERVF: containerIERVF,
    containerERVF: containerERVF,
    functorExpr: functorExpr,
    applyExpr: applyExpr,
    applicativeExpr: applicativeExpr,
    bindExpr: bindExpr,
    monadExpr: monadExpr,
    foldableExpr: foldableExpr,
    traversableExpr: traversableExpr
};

},{"../Control.Applicative/index.js":17,"../Control.Comonad/index.js":30,"../Control.Monad.Free/index.js":42,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.App/index.js":133,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Identity/index.js":150,"../Data.Lazy/index.js":156,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Profunctor.Strong/index.js":212,"../Data.Show/index.js":226,"../Data.String.Common/index.js":232,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Variant.Internal/index.js":258,"../Data.Variant/index.js":259,"../Data.Void/index.js":260,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.Zippers.Merge/index.js":272,"../Dhall.Core.Zippers/index.js":274,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.Fold/index.js":358,"../Matryoshka.Pattern.CoEnvT/index.js":359}],269:[function(require,module,exports){
(function (process){
exports.getEnv = function() {
  return process.env;
};

exports.responseHeaders = function(resp) {
  var obj = {};
  Array.from(resp.headers.entries()).forEach(function(item) {
    obj[item[0]] = item[1];
  });
  return obj;
};

exports.windowFetch = function() {
  return window.fetch;
};

exports.nodeFetch = function() {
  return require("node-fetch").default;
};

}).call(this,require('_process'))
},{"_process":443,"node-fetch":3}],270:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Core_Imports_Types = require("../Dhall.Core.Imports.Types/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Milkis = require("../Milkis/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Node_FS_Aff = require("../Node.FS.Aff/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var toHeader = function (dictMapLike) {
    var $93 = Data_Function.flip(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(Dhall_Core_AST_Types_Basics["_S"]))(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Plus.empty(Data_Maybe.plusMaybe)))(function (m) {
        var getLit = (function () {
            var $95 = Data_Function.flip(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                return "TextLit";
            }))(Dhall_Core_AST_Types_Basics["_S"]))(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Plus.empty(Data_Maybe.plusMaybe)))(function (v) {
                if (v instanceof Dhall_Core_AST_Types_Basics.TextLit) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0);
                };
                return Control_Plus.empty(Data_Maybe.plusMaybe);
            });
            return function ($96) {
                return $95(Dhall_Core_AST_Types.projectW($96));
            };
        })();
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
            return function (v1) {
                return {
                    header: v,
                    value: v1
                };
            };
        })(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(getLit)(Dhall_Map.get(dictMapLike)("mapKey")(m))))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(getLit)(Dhall_Map.get(dictMapLike)("mapValue")(m)));
    });
    return function ($94) {
        return $93(Dhall_Core_AST_Types.projectW($94));
    };
};
var toHeaders = function (dictMapLike) {
    var $97 = Data_Function.flip(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Dhall_Core_AST_Types_Basics["_S"]))(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Plus.empty(Data_Maybe.plusMaybe)))(function (v) {
        return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(toHeader(dictMapLike))(v.value1);
    });
    return function ($98) {
        return $97(Dhall_Core_AST_Types.projectW($98));
    };
};
var nodeRetrieveFile = function (path) {
    return Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path);
};
var nodeReadBinary = function (file) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readFile(file))((function () {
        var $99 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
        return function ($100) {
            return $99(Node_Buffer.toArrayBuffer($100));
        };
    })());
};
var nodeCacheIn = function (dir) {
    return {
        get: function (hash) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readFile(dir + ("/dhall/1220" + hash)))((function () {
                var $101 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                return function ($102) {
                    return $101(Node_Buffer.toArrayBuffer($102));
                };
            })());
        },
        put: function (hash) {
            return function (val) {
                return Control_Bind.bindFlipped(Effect_Aff.bindAff)(Node_FS_Aff.writeFile(dir + ("/dhall/1220" + hash)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromArrayBuffer(val)));
            };
        }
    };
};
var moveHere = function (v) {
    return function (v1) {
        if (v1 instanceof Dhall_Core_Imports_Types.Local && v1.value0 instanceof Dhall_Core_Imports_Types.Absolute) {
            return v1;
        };
        if (v1 instanceof Dhall_Core_Imports_Types.Local && v1.value0 instanceof Dhall_Core_Imports_Types.Home) {
            return v1;
        };
        if (v1 instanceof Dhall_Core_Imports_Types.Local && v1.value0 instanceof Dhall_Core_Imports_Types.Parent) {
            var adddir = Dhall_Core_Imports_Types.Directory(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Array.reverse(Data_String_Common.split("/")(v + "/.."))));
            return new Dhall_Core_Imports_Types.Local(Dhall_Core_Imports_Types.Here.value, {
                directory: Data_Semigroup.append(Dhall_Core_Imports_Types.semigroupDirectory)(adddir)(v1.value1.directory),
                file: v1.value1.file
            });
        };
        if (v1 instanceof Dhall_Core_Imports_Types.Local && v1.value0 instanceof Dhall_Core_Imports_Types.Here) {
            var adddir = Dhall_Core_Imports_Types.Directory(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Array.reverse(Data_String_Common.split("/")(v))));
            return new Dhall_Core_Imports_Types.Local(Dhall_Core_Imports_Types.Here.value, {
                directory: Data_Semigroup.append(Dhall_Core_Imports_Types.semigroupDirectory)(adddir)(v1.value1.directory),
                file: v1.value1.file
            });
        };
        return v1;
    };
};
var milkisRetrieveURL = function (impl) {
    return function (headers) {
        var infos = function (resp) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Milkis.text(resp))(function (v) {
                var resHeaders = Data_Functor.mapFlipped(Data_Functor.functorArray)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)($foreign.responseHeaders(resp)))(function (v1) {
                    return {
                        header: v1.value0,
                        value: v1.value1
                    };
                });
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    result: v,
                    headers: resHeaders
                });
            });
        };
        var $103 = Control_Bind.bindFlipped(Effect_Aff.bindAff)(infos);
        var $104 = Data_Function.flip(Milkis.fetch(impl)())({
            method: Milkis.getMethod,
            headers: Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(headers)(function (v) {
                return new Data_Tuple.Tuple(v.header, v.value);
            }))
        });
        return function ($105) {
            return $103($104(Milkis.URL($105)));
        };
    };
};
var nodeRetrieveURL = function (headers) {
    return function (url) {
        return milkisRetrieveURL($foreign.nodeFetch(Data_Unit.unit))(headers)(url);
    };
};
var windowRetrieveURL = function (headers) {
    return function (url) {
        return milkisRetrieveURL($foreign.windowFetch(Data_Unit.unit))(headers)(url);
    };
};
var lookupEnv = function (k) {
    return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))($foreign.getEnv);
};
var nodeCache = (function () {
    var xdg = lookupEnv("XDG_CACHE_HOME");
    var home = Data_Functor.mapFlipped(Effect.functorEffect)(lookupEnv("HOME"))(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return v + "/.cache";
    }));
    var dirs = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff))([ xdg, home ]);
    var onDirs = function (f) {
        return Control_Bind.bind(Effect_Aff.bindAff)(dirs)(Data_Foldable.oneOfMap(Data_Foldable.foldableArray)(Effect_Aff.plusAff)(Data_Foldable.oneOfMap(Data_Foldable.foldableMaybe)(Effect_Aff.plusAff)(f)));
    };
    return {
        get: function (hash) {
            return onDirs(function (dir) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readFile(dir + ("/dhall/1220" + hash)))((function () {
                    var $106 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                    return function ($107) {
                        return $106(Node_Buffer.toArrayBuffer($107));
                    };
                })());
            });
        },
        put: function (hash) {
            return function (val) {
                return onDirs(function (dir) {
                    return Control_Bind.bindFlipped(Effect_Aff.bindAff)(Node_FS_Aff.writeFile(dir + ("/dhall/1220" + hash)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer.fromArrayBuffer(val)));
                });
            };
        }
    };
})();
var nodeRetrieveEnv = function (name) {
    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
        var v = lookupEnv(name)();
        if (v instanceof Data_Maybe.Nothing) {
            return Effect_Exception["throw"]("Unknown envionment variable: " + name)();
        };
        if (v instanceof Data_Maybe.Just) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Retrieve (line 40, column 56 - line 42, column 19): " + [ v.constructor.name ]);
    });
};
var nodeRetrieve = function (i) {
    if (i instanceof Dhall_Core_Imports_Types.Missing) {
        return Control_Plus.empty(Effect_Aff.plusAff);
    };
    if (i instanceof Dhall_Core_Imports_Types.Env) {
        return Data_Functor.mapFlipped(Effect_Aff.functorAff)(nodeRetrieveEnv(i.value0))(function (v) {
            return {
                headers: [  ],
                result: v
            };
        });
    };
    if (i instanceof Dhall_Core_Imports_Types.Local) {
        return Data_Functor.mapFlipped(Effect_Aff.functorAff)(nodeRetrieveFile(Dhall_Core_Imports_Types.prettyFilePrefix(i.value0) + Dhall_Core_Imports_Types.prettyFile(i.value1)))(function (v) {
            return {
                headers: [  ],
                result: v
            };
        });
    };
    if (i instanceof Dhall_Core_Imports_Types.Remote) {
        return nodeRetrieveURL(Data_Maybe.fromMaybe(Control_Plus.empty(Control_Plus.plusArray))(Dhall_Core_Imports_Types.getHeaders(i)))(Dhall_Core_Imports_Types.prettyURL(i.value0));
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Retrieve (line 82, column 18 - line 89, column 20): " + [ i.constructor.name ]);
};
var locationType = function (dictMapLike) {
    return Dhall_Core_AST_Constructors.mkUnion(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("Environment")(new Data_Maybe.Just(Dhall_Core_AST_Constructors.mkText)), Data_Tuple.Tuple.create("Local")(new Data_Maybe.Just(Dhall_Core_AST_Constructors.mkText)), Data_Tuple.Tuple.create("Missing")(Data_Maybe.Nothing.value), Data_Tuple.Tuple.create("Remote")(new Data_Maybe.Just(Dhall_Core_AST_Constructors.mkText)) ]));
};
var headerType = function (dictMapLike) {
    return Dhall_Core_AST_Constructors.mkRecord(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("mapKey", Dhall_Core_AST_Constructors.mkText), new Data_Tuple.Tuple("mapValue", Dhall_Core_AST_Constructors.mkText) ]));
};
var fromLocation = function (dictMapLike) {
    return function (v) {
        if (v instanceof Dhall_Core_Imports_Types.Missing) {
            return Dhall_Core_AST_Constructors.mkField(locationType(dictMapLike))("Missing");
        };
        if (v instanceof Dhall_Core_Imports_Types.Env) {
            return Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkField(locationType(dictMapLike))("Environment"))(Dhall_Core_AST_Constructors["mkTextLit'"](v.value0));
        };
        if (v instanceof Dhall_Core_Imports_Types.Local) {
            return Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkField(locationType(dictMapLike))("Local"))(Dhall_Core_AST_Constructors["mkTextLit'"](Dhall_Core_Imports_Types.prettyFilePrefix(v.value0) + Dhall_Core_Imports_Types.prettyFile(v.value1)));
        };
        if (v instanceof Dhall_Core_Imports_Types.Remote) {
            return Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkField(locationType(dictMapLike))("Remote"))(Dhall_Core_AST_Constructors["mkTextLit'"](Dhall_Core_Imports_Types.prettyURL(v.value0)));
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Retrieve (line 138, column 16 - line 145, column 20): " + [ v.constructor.name ]);
    };
};
var fromHeader = function (dictMapLike) {
    return function (v) {
        return Dhall_Core_AST_Constructors.mkRecordLit(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("mapKey")(Dhall_Core_AST_Constructors["mkTextLit'"](v.header)), Data_Tuple.Tuple.create("mapValue")(Dhall_Core_AST_Constructors["mkTextLit'"](v.value)) ]));
    };
};
var fromHeaders = function (dictMapLike) {
    return function (v) {
        if (v.length === 0) {
            return Dhall_Core_AST_Constructors.mkListLit(new Data_Maybe.Just(headerType(dictMapLike)))([  ]);
        };
        return Dhall_Core_AST_Constructors.mkListLit(Data_Maybe.Nothing.value)(Data_Functor.map(Data_Functor.functorArray)(fromHeader(dictMapLike))(v));
    };
};
var appendHeader = function (dictMapLike) {
    return function (a) {
        return function (b) {
            var v = function (v1) {
                return Dhall_Core_AST_Constructors.mkListAppend(a)(b);
            };
            var $78 = Data_Lens_Fold.preview(Dhall_Core_AST_Constructors["_ListLit"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(Dhall_Core_AST_Types.projectW(a));
            if ($78 instanceof Data_Maybe.Just) {
                var $79 = Data_Lens_Fold.preview(Dhall_Core_AST_Constructors["_ListLit"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(Dhall_Core_AST_Types.projectW(b));
                if ($79 instanceof Data_Maybe.Just) {
                    var xy = Data_Semigroup.append(Data_Semigroup.semigroupArray)($78.value0.values)($79.value0.values);
                    if (xy.length === 0) {
                        return Dhall_Core_AST_Constructors.mkListLit(new Data_Maybe.Just(headerType(dictMapLike)))([  ]);
                    };
                    return Dhall_Core_AST_Constructors.mkListLit(Data_Maybe.Nothing.value)(xy);
                };
                return v(true);
            };
            return v(true);
        };
    };
};
var desugarHeaders = function (dictMapLike) {
    var go = function (headers) {
        return function (expr) {
            return Dhall_Core_AST_Types.embedW((function () {
                var exprF = Dhall_Core_AST_Types.projectW(expr);
                return Data_Functor_Variant.onMatch()(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()({
                    Embed: function (v) {
                        var $$new = Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "Embed";
                        }))(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(Data_Const.Const(v));
                        var headers0 = Dhall_Core_AST_Constructors.mkListLit(new Data_Maybe.Just(headerType(dictMapLike)))([  ]);
                        var v1 = function (v2) {
                            return $$new;
                        };
                        if (v.importType instanceof Dhall_Core_Imports_Types.Remote) {
                            var $87 = Data_Foldable.foldr(Data_List_Types.foldableList)(appendHeader(dictMapLike))(headers0)(headers);
                            var $88 = Data_Eq.notEq(Dhall_Core_AST_Types.eqExpr((dictMapLike.Ord11()).Eq10())(Dhall_Core_Imports_Types.eqImport))($87)(headers0);
                            if ($88) {
                                return Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                    return "UsingHeaders";
                                }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(Dhall_Core_AST_Types.embedW($$new), $87));
                            };
                            return v1(true);
                        };
                        return v1(true);
                    },
                    UsingHeaders: function (v) {
                        return Dhall_Core_AST_Types.projectW(go(new Data_List_Types.Cons(go(Data_List_Types.Nil.value)(v.value1), headers))(v.value0));
                    }
                })(function (v) {
                    return Data_Functor.map(Data_Functor_Variant.functorVariantF)(go(headers))(exprF);
                })(exprF);
            })());
        };
    };
    return go(Data_List_Types.Nil.value);
};
module.exports = {
    lookupEnv: lookupEnv,
    nodeRetrieveEnv: nodeRetrieveEnv,
    nodeRetrieveFile: nodeRetrieveFile,
    milkisRetrieveURL: milkisRetrieveURL,
    nodeRetrieveURL: nodeRetrieveURL,
    windowRetrieveURL: windowRetrieveURL,
    moveHere: moveHere,
    nodeRetrieve: nodeRetrieve,
    nodeReadBinary: nodeReadBinary,
    nodeCacheIn: nodeCacheIn,
    nodeCache: nodeCache,
    locationType: locationType,
    fromLocation: fromLocation,
    headerType: headerType,
    toHeaders: toHeaders,
    toHeader: toHeader,
    fromHeaders: fromHeaders,
    fromHeader: fromHeader,
    appendHeader: appendHeader,
    desugarHeaders: desugarHeaders,
    getEnv: $foreign.getEnv,
    responseHeaders: $foreign.responseHeaders,
    nodeFetch: $foreign.nodeFetch,
    windowFetch: $foreign.windowFetch
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Plus/index.js":65,"../Data.Array/index.js":91,"../Data.Const/index.js":108,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Internal.Forget/index.js":162,"../Data.List.Types/index.js":182,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Semigroup/index.js":221,"../Data.String.Common/index.js":232,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unit/index.js":257,"../Data.Variant.Internal/index.js":258,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Core.Imports.Types/index.js":271,"../Dhall.Map/index.js":284,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect/index.js":309,"../Foreign.Object/index.js":315,"../Milkis/index.js":363,"../Node.Buffer/index.js":365,"../Node.Encoding/index.js":367,"../Node.FS.Aff/index.js":368,"../Type.Equality/index.js":388,"./foreign.js":269}],271:[function(require,module,exports){
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var HTTP = (function () {
    function HTTP() {

    };
    HTTP.value = new HTTP();
    return HTTP;
})();
var HTTPS = (function () {
    function HTTPS() {

    };
    HTTPS.value = new HTTPS();
    return HTTPS;
})();

// | How to interpret the import's contents (i.e. as Dhall code or raw text)
var Code = (function () {
    function Code() {

    };
    Code.value = new Code();
    return Code;
})();

// | How to interpret the import's contents (i.e. as Dhall code or raw text)
var RawText = (function () {
    function RawText() {

    };
    RawText.value = new RawText();
    return RawText;
})();

// | How to interpret the import's contents (i.e. as Dhall code or raw text)
var Location = (function () {
    function Location() {

    };
    Location.value = new Location();
    return Location;
})();
var Absolute = (function () {
    function Absolute() {

    };
    Absolute.value = new Absolute();
    return Absolute;
})();
var Here = (function () {
    function Here() {

    };
    Here.value = new Here();
    return Here;
})();
var Parent = (function () {
    function Parent() {

    };
    Parent.value = new Parent();
    return Parent;
})();
var Home = (function () {
    function Home() {

    };
    Home.value = new Home();
    return Home;
})();

// Most of this is just copied from dhall-haskell without further thought so far
// | Internal representation of a directory that stores the path components in
// | reverse order
// | In other words, the directory `/foo/bar/baz` is encoded as
// | `Directory { components = [ "baz", "bar", "foo" ] }`
var Directory = function (x) {
    return x;
};

// | A `File` is a `directory` followed by one additional path component
// | representing the `file` name
var File = function (x) {
    return x;
};
var URL = function (x) {
    return x;
};

// | The type of import (i.e. local vs. remote vs. environment)
var Local = (function () {
    function Local(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Local.create = function (value0) {
        return function (value1) {
            return new Local(value0, value1);
        };
    };
    return Local;
})();

// | The type of import (i.e. local vs. remote vs. environment)
var Remote = (function () {
    function Remote(value0) {
        this.value0 = value0;
    };
    Remote.create = function (value0) {
        return new Remote(value0);
    };
    return Remote;
})();

// | The type of import (i.e. local vs. remote vs. environment)
var Env = (function () {
    function Env(value0) {
        this.value0 = value0;
    };
    Env.create = function (value0) {
        return new Env(value0);
    };
    return Env;
})();

// | The type of import (i.e. local vs. remote vs. environment)
var Missing = (function () {
    function Missing() {

    };
    Missing.value = new Missing();
    return Missing;
})();

// | Reference to an external resource
var Import = function (x) {
    return x;
};
var showScheme = new Data_Show.Show(function (v) {
    if (v instanceof HTTP) {
        return "http";
    };
    if (v instanceof HTTPS) {
        return "https";
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 75, column 1 - line 77, column 23): " + [ v.constructor.name ]);
});
var semigroupDirectory = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(v1)(v);
    };
});
var semigroupFile = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            directory: Data_Semigroup.append(semigroupDirectory)(v.directory)(v1.directory),
            file: v1.file
        };
    };
});
var prettyFilePrefix = function (v) {
    if (v instanceof Absolute) {
        return "";
    };
    if (v instanceof Here) {
        return ".";
    };
    if (v instanceof Parent) {
        return "..";
    };
    if (v instanceof Home) {
        return "~";
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 66, column 1 - line 66, column 41): " + [ v.constructor.name ]);
};
var prettyDirectory = function (v) {
    return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(function (v1) {
        return "/" + v1;
    })(Data_List.reverse(v));
};
var prettyFile = function (v) {
    return prettyDirectory(v.directory) + ("/" + v.file);
};
var prettyURL = function (v) {
    var queryDoc = (function () {
        if (v.query instanceof Data_Maybe.Nothing) {
            return "";
        };
        if (v.query instanceof Data_Maybe.Just) {
            return "?" + v.query.value0;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 97, column 16 - line 99, column 28): " + [ v.query.constructor.name ]);
    })();
    return Data_Show.show(showScheme)(v.scheme) + ("://" + (v.authority + (prettyFile(v.path) + queryDoc)));
};
var prettyImportType = function (v) {
    if (v instanceof Env) {
        return "env:" + v.value0;
    };
    if (v instanceof Missing) {
        return "missing";
    };
    if (v instanceof Local) {
        return prettyFilePrefix(v.value0) + prettyFile(v.value1);
    };
    if (v instanceof Remote) {
        var prettyHeader = function (v1) {
            return "{ mapKey = " + (Data_Show.show(Data_Show.showString)(v1.header) + (", mapValue = " + (Data_Show.show(Data_Show.showString)(v1.value) + " }")));
        };
        var prettyHeaders = function (h) {
            return " using " + ("[ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(Data_Functor.map(Data_Functor.functorArray)(prettyHeader)(h)) + " ]"));
        };
        return prettyURL(v.value0) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(prettyHeaders)(v.value0.headers);
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 143, column 1 - line 143, column 41): " + [ v.constructor.name ]);
};
var prettyImport = function (v) {
    var suffix = (function () {
        if (v.importMode instanceof RawText) {
            return " as Text";
        };
        if (v.importMode instanceof Location) {
            return " as Location";
        };
        if (v.importMode instanceof Code) {
            return "";
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 194, column 18 - line 197, column 26): " + [ v.importMode.constructor.name ]);
    })();
    return prettyImportType(v.importType) + suffix;
};
var showImport = new Data_Show.Show(prettyImport);
var parent = {
    directory: Control_Applicative.pure(Data_List_Types.applicativeList)(".."),
    file: ""
};
var semigroupImportType = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Local && (v1 instanceof Local && v1.value0 instanceof Here)) {
            return new Local(v.value0, Data_Semigroup.append(semigroupFile)(v.value1)(v1.value1));
        };
        if (v instanceof Remote && (v1 instanceof Local && v1.value0 instanceof Here)) {
            return new Remote({
                scheme: v.value0.scheme,
                authority: v.value0.authority,
                path: Data_Semigroup.append(semigroupFile)(v.value0.path)(v1.value1),
                query: v.value0.query,
                headers: v.value0.headers
            });
        };
        if (v instanceof Local && (v1 instanceof Local && v1.value0 instanceof Parent)) {
            return new Local(v.value0, Data_Semigroup.append(semigroupFile)(v.value1)(Data_Semigroup.append(semigroupFile)(parent)(v1.value1)));
        };
        if (v instanceof Remote && (v1 instanceof Local && v1.value0 instanceof Parent)) {
            return new Remote({
                scheme: v.value0.scheme,
                authority: v.value0.authority,
                path: Data_Semigroup.append(semigroupFile)(v.value0.path)(Data_Semigroup.append(semigroupFile)(parent)(v1.value1)),
                query: v.value0.query,
                headers: v.value0.headers
            });
        };
        return v1;
    };
});
var semigroupImport = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return {
            importType: Data_Semigroup.append(semigroupImportType)(v.importType)(v1.importType),
            importMode: v1.importMode
        };
    };
});
var monoidDirectory = new Data_Monoid.Monoid(function () {
    return semigroupDirectory;
}, Data_Monoid.mempty(Data_List_Types.monoidList));
var isLocal = function (v) {
    if (v instanceof Remote) {
        return false;
    };
    if (v instanceof Local) {
        return true;
    };
    if (v instanceof Env) {
        return true;
    };
    if (v instanceof Missing) {
        return false;
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 121, column 1 - line 121, column 33): " + [ v.constructor.name ]);
};
var getHeaders = function (v) {
    if (v instanceof Remote) {
        return v.value0.headers;
    };
    return Data_Maybe.Nothing.value;
};
var getHeader = function (header) {
    return Data_Array.mapMaybe(function (r) {
        var $161 = Data_String_Common.toLower(r.header) === Data_String_Common.toLower(header);
        if ($161) {
            return new Data_Maybe.Just(r.value);
        };
        return Data_Maybe.Nothing.value;
    });
};
var eqScheme = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof HTTP && y instanceof HTTP) {
            return true;
        };
        if (x instanceof HTTPS && y instanceof HTTPS) {
            return true;
        };
        return false;
    };
});
var ordScheme = new Data_Ord.Ord(function () {
    return eqScheme;
}, function (x) {
    return function (y) {
        if (x instanceof HTTP && y instanceof HTTP) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof HTTP) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof HTTP) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof HTTPS && y instanceof HTTPS) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 74, column 1 - line 74, column 40): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqImportMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Code && y instanceof Code) {
            return true;
        };
        if (x instanceof RawText && y instanceof RawText) {
            return true;
        };
        if (x instanceof Location && y instanceof Location) {
            return true;
        };
        return false;
    };
});
var ordImportMode = new Data_Ord.Ord(function () {
    return eqImportMode;
}, function (x) {
    return function (y) {
        if (x instanceof Code && y instanceof Code) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Code) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Code) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof RawText && y instanceof RawText) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof RawText) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof RawText) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Location && y instanceof Location) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 169, column 1 - line 169, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqFilePrefix = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Absolute && y instanceof Absolute) {
            return true;
        };
        if (x instanceof Here && y instanceof Here) {
            return true;
        };
        if (x instanceof Parent && y instanceof Parent) {
            return true;
        };
        if (x instanceof Home && y instanceof Home) {
            return true;
        };
        return false;
    };
});
var ordFilePrefix = new Data_Ord.Ord(function () {
    return eqFilePrefix;
}, function (x) {
    return function (y) {
        if (x instanceof Absolute && y instanceof Absolute) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Absolute) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Absolute) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Here && y instanceof Here) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Here) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Here) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Parent && y instanceof Parent) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Parent) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Parent) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Home && y instanceof Home) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 64, column 1 - line 64, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var eqDirectory = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqString))(x)(y);
    };
});
var eqFile = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqDirectory)(x.directory)(y.directory) && x.file === y.file;
    };
});
var eqURL = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x.authority === y.authority && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "value";
        }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
            return "header";
        }))(Data_Eq.eqString)))))(x.headers)(y.headers) && Data_Eq.eq(eqFile)(x.path)(y.path) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(x.query)(y.query) && Data_Eq.eq(eqScheme)(x.scheme)(y.scheme);
    };
});
var eqImportType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Local && y instanceof Local) {
            return Data_Eq.eq(eqFilePrefix)(x.value0)(y.value0) && Data_Eq.eq(eqFile)(x.value1)(y.value1);
        };
        if (x instanceof Remote && y instanceof Remote) {
            return Data_Eq.eq(eqURL)(x.value0)(y.value0);
        };
        if (x instanceof Env && y instanceof Env) {
            return x.value0 === y.value0;
        };
        if (x instanceof Missing && y instanceof Missing) {
            return true;
        };
        return false;
    };
});
var eqImport = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(eqImportMode)(x.importMode)(y.importMode) && Data_Eq.eq(eqImportType)(x.importType)(y.importType);
    };
});
var ordDirectory = new Data_Ord.Ord(function () {
    return eqDirectory;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_List_Types.ordList(Data_Ord.ordString))(x)(y);
    };
});
var ordFile = new Data_Ord.Ord(function () {
    return eqFile;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(ordDirectory)(x.directory)(y.directory);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_Ord.ordString)(x.file)(y.file);
    };
});
var ordURL = new Data_Ord.Ord(function () {
    return eqURL;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Ord.ordString)(x.authority)(y.authority);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v1 = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordArray(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()(new Data_Symbol.IsSymbol(function () {
            return "value";
        }))(Data_Ord.ordString))()(new Data_Symbol.IsSymbol(function () {
            return "header";
        }))(Data_Ord.ordString)))))(x.headers)(y.headers);
        if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v2 = Data_Ord.compare(ordFile)(x.path)(y.path);
        if (v2 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v2 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        var v3 = Data_Ord.compare(Data_Maybe.ordMaybe(Data_Ord.ordString))(x.query)(y.query);
        if (v3 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v3 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(ordScheme)(x.scheme)(y.scheme);
    };
});
var ordImportType = new Data_Ord.Ord(function () {
    return eqImportType;
}, function (x) {
    return function (y) {
        if (x instanceof Local && y instanceof Local) {
            var v = Data_Ord.compare(ordFilePrefix)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordFile)(x.value1)(y.value1);
        };
        if (x instanceof Local) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Local) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Remote && y instanceof Remote) {
            return Data_Ord.compare(ordURL)(x.value0)(y.value0);
        };
        if (x instanceof Remote) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Remote) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Env && y instanceof Env) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof Env) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Env) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Missing && y instanceof Missing) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 112, column 1 - line 112, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var ordImport = new Data_Ord.Ord(function () {
    return eqImport;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(ordImportMode)(x.importMode)(y.importMode);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(ordImportType)(x.importType)(y.importType);
    };
});
var canonicalizeDirectory = function (v) {
    var rec = function (v1) {
        if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
        };
        if (v1 instanceof Data_List_Types.Cons && v1.value0 === ".") {
            return v1.value1;
        };
        if (v1 instanceof Data_List_Types.Cons && v1.value0 === "..") {
            var v2 = rec(v1.value1);
            if (v2 instanceof Data_List_Types.Nil) {
                return new Data_List_Types.Cons("..", Data_List_Types.Nil.value);
            };
            if (v2 instanceof Data_List_Types.Cons && v2.value0 === "..") {
                return new Data_List_Types.Cons("..", new Data_List_Types.Cons("..", v2.value1));
            };
            if (v2 instanceof Data_List_Types.Cons) {
                return v2.value1;
            };
            throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 34, column 20 - line 37, column 17): " + [ v2.constructor.name ]);
        };
        if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, rec(v1.value1));
        };
        throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 32, column 3 - line 32, column 16): " + [ v1.constructor.name ]);
    };
    return rec(v);
};
var canonicalizeFile = function (v) {
    return {
        directory: canonicalizeDirectory(v.directory),
        file: v.file
    };
};
var canonicalizeImportType = function (v) {
    if (v instanceof Local) {
        return new Local(v.value0, canonicalizeFile(v.value1));
    };
    if (v instanceof Remote) {
        return new Remote({
            scheme: v.value0.scheme,
            authority: v.value0.authority,
            path: canonicalizeFile(v.value0.path),
            query: v.value0.query,
            headers: v.value0.headers
        });
    };
    if (v instanceof Env) {
        return new Env(v.value0);
    };
    if (v instanceof Missing) {
        return Missing.value;
    };
    throw new Error("Failed pattern match at Dhall.Core.Imports.Types (line 157, column 1 - line 157, column 51): " + [ v.constructor.name ]);
};
var canonicalizeImport = function (v) {
    return {
        importType: canonicalizeImportType(v.importType),
        importMode: v.importMode
    };
};
var addHeaders = function (headers) {
    return function (v) {
        if (v.importType instanceof Remote) {
            var url$prime = {
                headers: Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_Semigroup.semigroupArray))(new Data_Maybe.Just(headers))(v.importType.value0.headers),
                authority: v.importType.value0.authority,
                path: v.importType.value0.path,
                query: v.importType.value0.query,
                scheme: v.importType.value0.scheme
            };
            return {
                importMode: v.importMode,
                importType: new Remote(url$prime)
            };
        };
        return v;
    };
};
module.exports = {
    Directory: Directory,
    prettyDirectory: prettyDirectory,
    canonicalizeDirectory: canonicalizeDirectory,
    File: File,
    prettyFile: prettyFile,
    canonicalizeFile: canonicalizeFile,
    Absolute: Absolute,
    Here: Here,
    Parent: Parent,
    Home: Home,
    prettyFilePrefix: prettyFilePrefix,
    HTTP: HTTP,
    HTTPS: HTTPS,
    URL: URL,
    prettyURL: prettyURL,
    Local: Local,
    Remote: Remote,
    Env: Env,
    Missing: Missing,
    parent: parent,
    getHeaders: getHeaders,
    isLocal: isLocal,
    prettyImportType: prettyImportType,
    canonicalizeImportType: canonicalizeImportType,
    Code: Code,
    RawText: RawText,
    Location: Location,
    Import: Import,
    prettyImport: prettyImport,
    canonicalizeImport: canonicalizeImport,
    getHeader: getHeader,
    addHeaders: addHeaders,
    eqDirectory: eqDirectory,
    ordDirectory: ordDirectory,
    semigroupDirectory: semigroupDirectory,
    monoidDirectory: monoidDirectory,
    eqFile: eqFile,
    ordFile: ordFile,
    semigroupFile: semigroupFile,
    eqFilePrefix: eqFilePrefix,
    ordFilePrefix: ordFilePrefix,
    eqScheme: eqScheme,
    ordScheme: ordScheme,
    showScheme: showScheme,
    eqURL: eqURL,
    ordURL: ordURL,
    eqImportType: eqImportType,
    ordImportType: ordImportType,
    semigroupImportType: semigroupImportType,
    eqImportMode: eqImportMode,
    ordImportMode: ordImportMode,
    eqImport: eqImport,
    ordImport: ordImport,
    semigroupImport: semigroupImport,
    showImport: showImport
};

},{"../Control.Applicative/index.js":17,"../Data.Array/index.js":91,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.String.Common/index.js":232,"../Data.Symbol/index.js":240}],272:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Coproduct = require("../Data.Functor.Coproduct/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var MergeVFRL = function (mergeWithVFRL) {
    this.mergeWithVFRL = mergeWithVFRL;
};
var Merge = function (Functor0, mergeWith) {
    this.Functor0 = Functor0;
    this.mergeWith = mergeWith;
};
var viaThese = function (v) {
    return function (v1) {
        if (v1 instanceof Data_These.Both) {
            return new Data_Maybe.Just(v(v1.value0)(v1.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var mergeWithVFRL = function (dict) {
    return dict.mergeWithVFRL;
};
var mergeWithVF = function (dictRowToList) {
    return function (dictMergeVFRL) {
        return mergeWithVFRL(dictMergeVFRL)(Type_Data_RowList.RLProxy.value);
    };
};
var mergeWithOfMapLike = function (dictMapLike) {
    return function (f) {
        return function (ma) {
            return function (mb) {
                return Data_Traversable.sequence((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Maybe.applicativeMaybe)(Dhall_Map.unionWith(dictMapLike)(Data_Function["const"]((function () {
                    var $141 = viaThese(f);
                    return function ($142) {
                        return Data_Maybe.Just.create($141($142));
                    };
                })()))(ma)(mb));
            };
        };
    };
};
var mergeWith = function (dict) {
    return dict.mergeWith;
};
var mergeVariantF = function (dictRowToList) {
    return function (dictMergeVFRL) {
        return new Merge(function () {
            return Data_Functor_Variant.functorVariantF;
        }, mergeWithVF(dictRowToList)(dictMergeVFRL));
    };
};
var mergeVFRLNil = new MergeVFRL(function (v) {
    return function (v1) {
        return Data_Functor_Variant.case_;
    };
});
var mergeVFRLCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictUnion) {
            return function (dictMerge) {
                return function (dictMergeVFRL) {
                    return new MergeVFRL(function (v) {
                        return function (f) {
                            return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function (fa) {
                                return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function (fb) {
                                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictMerge.Functor0())(Data_Symbol.SProxy.value))(mergeWith(dictMerge)(f)(fa)(fb));
                                })(function (v1) {
                                    return Data_Maybe.Nothing.value;
                                });
                            })(function (va$prime) {
                                return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)(function (v1) {
                                    return Data_Maybe.Nothing.value;
                                })(function (vb$prime) {
                                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor_Variant.expand(dictUnion))(mergeWithVFRL(dictMergeVFRL)(Type_Data_RowList.RLProxy.value)(f)(va$prime)(vb$prime));
                                });
                            });
                        };
                    });
                };
            };
        };
    };
};
var mergeTuple = function (dictEq) {
    return new Merge(function () {
        return Data_Tuple.functorTuple;
    }, function (f) {
        return function (v) {
            return function (v1) {
                var $71 = Data_Eq.eq(dictEq)(v.value0)(v1.value0);
                if ($71) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, f(v.value1)(v1.value1)));
                };
                return Data_Maybe.Nothing.value;
            };
        };
    });
};
var mergeThese = function (dictEq) {
    return new Merge(function () {
        return Data_These.functorThese;
    }, function (f) {
        return function (v) {
            return function (v1) {
                if (v instanceof Data_These.This && (v1 instanceof Data_These.This && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                    return new Data_Maybe.Just(new Data_These.This(v.value0));
                };
                if (v instanceof Data_These.That && v1 instanceof Data_These.That) {
                    return new Data_Maybe.Just(new Data_These.That(f(v.value0)(v1.value0)));
                };
                if (v instanceof Data_These.Both && (v1 instanceof Data_These.Both && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                    return new Data_Maybe.Just(new Data_These.Both(v.value0, f(v.value1)(v1.value1)));
                };
                return Data_Maybe.Nothing.value;
            };
        };
    });
};
var mergeProduct = function (dictMerge) {
    return function (dictMerge1) {
        return new Merge(function () {
            return Data_Functor_Product.functorProduct(dictMerge.Functor0())(dictMerge1.Functor0());
        }, function (f) {
            return function (v) {
                return function (v1) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor_Product.Product)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(mergeWith(dictMerge)(f)(v.value0)(v1.value0)))(mergeWith(dictMerge1)(f)(v.value1)(v1.value1)));
                };
            };
        });
    };
};
var mergeNonEmptyArray = new Merge(function () {
    return Data_Array_NonEmpty_Internal.functorNonEmptyArray;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (Data_Array_NonEmpty.length(v1) === Data_Array_NonEmpty.length(v2)) {
                return new Data_Maybe.Just(Data_Array_NonEmpty.zipWith(v)(v1)(v2));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var mergeNonEmpty = function (dictMerge) {
    return new Merge(function () {
        return Data_NonEmpty.functorNonEmpty(dictMerge.Functor0());
    }, function (f) {
        return function (v) {
            return function (v1) {
                return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(mergeWith(dictMerge)(f)(v.value1)(v1.value1))(function (l) {
                    return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), l);
                });
            };
        };
    });
};
var mergeMaybe = new Merge(function () {
    return Data_Maybe.functorMaybe;
}, function (f) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(new Data_Maybe.Just(f(v.value0)(v1.value0)));
            };
            if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(Data_Maybe.Nothing.value);
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var mergeMap = function (dictOrd) {
    return new Merge(function () {
        return Data_Map_Internal.functorMap;
    }, function (f) {
        return function (ma) {
            return function (mb) {
                return Data_Traversable.sequence(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Dhall_Map.unionWithMapThese(dictOrd)(Data_Function["const"]((function () {
                    var $143 = viaThese(f);
                    return function ($144) {
                        return Data_Maybe.Just.create($143($144));
                    };
                })()))(ma)(mb));
            };
        };
    });
};
var mergeList = new Merge(function () {
    return Data_List_Types.functorList;
}, function (f) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(mergeWith(mergeList)(f)(v.value1)(v1.value1))(function (l) {
                    return new Data_List_Types.Cons(f(v.value0)(v1.value0), l);
                });
            };
            if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Nil) {
                return new Data_Maybe.Just(Data_List_Types.Nil.value);
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var mergeInsOrdMap = function (dictOrd) {
    return new Merge(function () {
        return Dhall_Map.functorIOSM;
    }, mergeWithOfMapLike(Dhall_Map.strMapIshIOSM(dictOrd)));
};
var mergeIdentity = new Merge(function () {
    return Data_Identity.functorIdentity;
}, function (f) {
    return function (v) {
        return function (v1) {
            return new Data_Maybe.Just(f(v)(v1));
        };
    };
});
var mergeEither = function (dictEq) {
    return new Merge(function () {
        return Data_Either.functorEither;
    }, function (f) {
        return function (v) {
            return function (v1) {
                if (v instanceof Data_Either.Left && (v1 instanceof Data_Either.Left && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                    return new Data_Maybe.Just(new Data_Either.Left(v.value0));
                };
                if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                    return new Data_Maybe.Just(new Data_Either.Right(f(v.value0)(v1.value0)));
                };
                return Data_Maybe.Nothing.value;
            };
        };
    });
};
var mergeCoproduct = function (dictMerge) {
    return function (dictMerge1) {
        return new Merge(function () {
            return Data_Functor_Coproduct.functorCoproduct(dictMerge.Functor0())(dictMerge1.Functor0());
        }, function (f) {
            return function (v) {
                return function (v1) {
                    if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(function ($145) {
                            return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($145));
                        })(mergeWith(dictMerge)(f)(v.value0)(v1.value0));
                    };
                    if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(function ($146) {
                            return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($146));
                        })(mergeWith(dictMerge1)(f)(v.value0)(v1.value0));
                    };
                    return Data_Maybe.Nothing.value;
                };
            };
        });
    };
};
var mergeConst = function (dictEq) {
    return new Merge(function () {
        return Data_Const.functorConst;
    }, function (v) {
        return function (v1) {
            return function (v2) {
                var $134 = Data_Eq.eq(dictEq)(v1)(v2);
                if ($134) {
                    return new Data_Maybe.Just(v1);
                };
                return Data_Maybe.Nothing.value;
            };
        };
    });
};
var mergeCompose = function (dictTraversable) {
    return function (dictMerge) {
        return function (dictMerge1) {
            return new Merge(function () {
                return Data_Functor_Compose.functorCompose(dictMerge.Functor0())(dictMerge1.Functor0());
            }, function (f) {
                return function (v) {
                    return function (v1) {
                        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)((function () {
                            var $147 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor_Compose.Compose);
                            var $148 = Data_Traversable.sequence(dictTraversable)(Data_Maybe.applicativeMaybe);
                            return function ($149) {
                                return $147($148($149));
                            };
                        })())(mergeWith(dictMerge)(mergeWith(dictMerge1)(f))(v)(v1));
                    };
                };
            });
        };
    };
};
var mergeArray = new Merge(function () {
    return Data_Functor.functorArray;
}, function (v) {
    return function (v1) {
        return function (v2) {
            if (Data_Array.length(v1) === Data_Array.length(v2)) {
                return new Data_Maybe.Just(Data_Array.zipWith(v)(v1)(v2));
            };
            return Data_Maybe.Nothing.value;
        };
    };
});
var merge = function (dictMerge) {
    return mergeWith(dictMerge)(Data_Tuple.Tuple.create);
};
var eq1OfMerge = function (dictFoldable) {
    return function (dictMerge) {
        return function (dictEq) {
            return function (fa) {
                return function (fb) {
                    return Data_Foldable.any(Data_Foldable.foldableMaybe)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.and(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean))(mergeWith(dictMerge)(Data_Eq.eq(dictEq))(fa)(fb));
                };
            };
        };
    };
};
module.exports = {
    mergeWith: mergeWith,
    mergeWithVFRL: mergeWithVFRL,
    Merge: Merge,
    merge: merge,
    eq1OfMerge: eq1OfMerge,
    viaThese: viaThese,
    mergeWithOfMapLike: mergeWithOfMapLike,
    mergeWithVF: mergeWithVF,
    MergeVFRL: MergeVFRL,
    mergeIdentity: mergeIdentity,
    mergeConst: mergeConst,
    mergeTuple: mergeTuple,
    mergeMaybe: mergeMaybe,
    mergeEither: mergeEither,
    mergeThese: mergeThese,
    mergeList: mergeList,
    mergeNonEmpty: mergeNonEmpty,
    mergeArray: mergeArray,
    mergeNonEmptyArray: mergeNonEmptyArray,
    mergeProduct: mergeProduct,
    mergeCoproduct: mergeCoproduct,
    mergeCompose: mergeCompose,
    mergeMap: mergeMap,
    mergeInsOrdMap: mergeInsOrdMap,
    mergeVFRLNil: mergeVFRLNil,
    mergeVFRLCons: mergeVFRLCons,
    mergeVariantF: mergeVariantF
};

},{"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Data.Array.NonEmpty.Internal/index.js":85,"../Data.Array.NonEmpty/index.js":86,"../Data.Array/index.js":91,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Coproduct/index.js":136,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.List.Types/index.js":182,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.NonEmpty/index.js":198,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Dhall.Map/index.js":284,"../Type.Data.RowList/index.js":387}],273:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Dhall_Core_Zippers = require("../Dhall.Core.Zippers/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var ZRec = (function () {
    function ZRec(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ZRec.create = function (value0) {
        return function (value1) {
            return new ZRec(value0, value1);
        };
    };
    return ZRec;
})();
var upZRec = function (dictCorecursive) {
    return function (dictContainer) {
        return function (v) {
            if (v.value1 instanceof Data_List_Types.Nil) {
                return new Data_Either.Left(v.value0);
            };
            if (v.value1 instanceof Data_List_Types.Cons) {
                return Data_Either.Right.create(new ZRec(Matryoshka_Class_Corecursive.embed(dictCorecursive)(Dhall_Core_Zippers.upZF(dictContainer)(new Dhall_Core_Zippers.ZF(v.value0, v.value1.value0))), v.value1.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.Zippers.Recursive (line 83, column 1 - line 87, column 36): " + [ v.constructor.name ]);
        };
    };
};
var topZRec = function (dictCorecursive) {
    return function (dictContainer) {
        return function (z) {
            return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(topZRec(dictCorecursive)(dictContainer))(upZRec(dictCorecursive)(dictContainer)(z));
        };
    };
};
var ixParentContexts = function (dictContainerI) {
    return function (context) {
        return Data_Functor.mapFlipped(Data_List_Types.functorList)(context)(Data_Functor.map(Data_Lazy.functorLazy)(Dhall_Core_Zippers.ixF(dictContainerI)));
    };
};
var ixZRec = function (dictContainerI) {
    return function (v) {
        return ixParentContexts(dictContainerI)(v.value1);
    };
};
var hasIndices = function (dictRecursive) {
    return function (dictEq) {
        return function (dictFoldableWithIndex) {
            return function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Types.Nil) {
                        return true;
                    };
                    if (v instanceof Data_List_Types.Cons) {
                        return Data_FoldableWithIndex.anyWithIndex(dictFoldableWithIndex)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (i$prime) {
                            return function (t$prime) {
                                var $46 = Data_Eq.eq(dictEq)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0))(i$prime);
                                if ($46) {
                                    return hasIndices(dictRecursive)(dictEq)(dictFoldableWithIndex)(v.value1)(t$prime);
                                };
                                return false;
                            };
                        })(Matryoshka_Class_Recursive.project(dictRecursive)(v1));
                    };
                    throw new Error("Failed pattern match at Dhall.Core.Zippers.Recursive (line 31, column 1 - line 36, column 28): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        };
    };
};
var downZRec = function (dictRecursive) {
    return function (dictContainer) {
        return function (v) {
            return Data_Functor.mapFlipped(dictContainer.Functor9())(Dhall_Core_Zippers.downZF(dictContainer)(Matryoshka_Class_Recursive.project(dictRecursive)(v.value0)))(function (v1) {
                return new ZRec(v1.value0, new Data_List_Types.Cons(v1.value1, v.value1));
            });
        };
    };
};
var previewIndicesZRec = function (dictRecursive) {
    return function (dictContainer) {
        return function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe);
            };
            if (v instanceof Data_List_Types.Cons) {
                return Control_Bind.composeKleisli(Data_Maybe.bindMaybe)((function () {
                    var $64 = Data_Lens_Fold.firstOf(Dhall_Core_Zippers["_ix"](dictContainer.TraversableWithIndex5())((dictContainer.Ord2()).Eq0())(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0))(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)));
                    var $65 = downZRec(dictRecursive)(dictContainer);
                    return function ($66) {
                        return $64($65($66));
                    };
                })())(previewIndicesZRec(dictRecursive)(dictContainer)(v.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.Zippers.Recursive (line 41, column 1 - line 45, column 46): " + [ v.constructor.name ]);
        };
    };
};
var _recurse = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictProfunctor) {
            return Data_Lens_Iso.iso(Matryoshka_Class_Recursive.project(dictRecursive))(Matryoshka_Class_Corecursive.embed(dictCorecursive))(dictProfunctor);
        };
    };
};
var _ixes_wholeZRec = function (dictContainer) {
    return function (dictRecursive) {
        return function (dictCorecursive) {
            return function (dictChoice) {
                return Data_Lens_Prism["prism'"](Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(ixZRec(dictContainer.ContainerI7()))(topZRec(dictCorecursive)(dictContainer)))(function (v) {
                    return previewIndicesZRec(dictRecursive)(dictContainer)(v.value0)(new ZRec(v.value1, Data_List_Types.Nil.value));
                })(dictChoice);
            };
        };
    };
};
var _ixes = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictTraversableWithIndex) {
            return function (dictEq) {
                return function (v) {
                    return function (dictWander) {
                        if (v instanceof Data_List_Types.Nil) {
                            return Control_Category.identity(Control_Category.categoryFn);
                        };
                        if (v instanceof Data_List_Types.Cons) {
                            var $67 = _recurse(dictRecursive)(dictCorecursive)((dictWander.Choice1()).Profunctor0());
                            var $68 = Dhall_Core_Zippers["_ix"](dictTraversableWithIndex)(dictEq)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0))(dictWander);
                            var $69 = _ixes(dictRecursive)(dictCorecursive)(dictTraversableWithIndex)(dictEq)(v.value1)(dictWander);
                            return function ($70) {
                                return $67($68($69($70)));
                            };
                        };
                        throw new Error("Failed pattern match at Dhall.Core.Zippers.Recursive (line 54, column 1 - line 60, column 30): " + [ v.constructor.name ]);
                    };
                };
            };
        };
    };
};
module.exports = {
    ZRec: ZRec,
    ixZRec: ixZRec,
    ixParentContexts: ixParentContexts,
    hasIndices: hasIndices,
    previewIndicesZRec: previewIndicesZRec,
    "_recurse": _recurse,
    "_ixes": _ixes,
    "_ixes_wholeZRec": _ixes_wholeZRec,
    downZRec: downZRec,
    upZRec: upZRec,
    topZRec: topZRec
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lazy/index.js":156,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Iso/index.js":170,"../Data.Lens.Prism/index.js":175,"../Data.List.Types/index.js":182,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Profunctor.Strong/index.js":212,"../Dhall.Core.Zippers/index.js":274,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356}],274:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Coproduct = require("../Data.Functor.Coproduct/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Indexed = require("../Data.Lens.Indexed/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Re = require("../Data.Lens.Internal.Re/index.js");
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Lens_Traversal = require("../Data.Lens.Traversal/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Core_Zippers_Merge = require("../Dhall.Core.Zippers.Merge/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var ZF = (function () {
    function ZF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ZF.create = function (value0) {
        return function (value1) {
            return new ZF(value0, value1);
        };
    };
    return ZF;
})();
var ZF4 = function (x) {
    return x;
};
var Product$prime = function (x) {
    return x;
};
var NonEmpty$prime = function (x) {
    return x;
};
var Map$prime = function (x) {
    return x;
};
var InsOrdMap$prime = function (x) {
    return x;
};
var Compose$prime = function (x) {
    return x;
};
var ArrayN = function (x) {
    return x;
};
var FunctorWithIndexVRL = function (mapWithIndexVRL) {
    this.mapWithIndexVRL = mapWithIndexVRL;
};
var ContainerVRL = function (downZFVRL, upZFVRL) {
    this.downZFVRL = downZFVRL;
    this.upZFVRL = upZFVRL;
};
var ContainerIVRL = function (ixFVRL) {
    this.ixFVRL = ixFVRL;
};
var ContainerI = function (ixF) {
    this.ixF = ixF;
};
var Container = function (ContainerI7, Eq10, Eq11, Functor8, Functor9, Merge3, Merge4, Ord2, Traversable6, TraversableWithIndex5, downZF, upZF) {
    this.ContainerI7 = ContainerI7;
    this.Eq10 = Eq10;
    this.Eq11 = Eq11;
    this.Functor8 = Functor8;
    this.Functor9 = Functor9;
    this.Merge3 = Merge3;
    this.Merge4 = Merge4;
    this.Ord2 = Ord2;
    this.Traversable6 = Traversable6;
    this.TraversableWithIndex5 = TraversableWithIndex5;
    this.downZF = downZF;
    this.upZF = upZF;
};
var zf4 = function (v) {
    return ZF4;
};
var upZFVRL = function (dict) {
    return dict.upZFVRL;
};
var upZFV = function (dictRowToList) {
    return function (dictContainerVRL) {
        return upZFVRL(dictContainerVRL)(Type_Data_RowList.RLProxy.value);
    };
};
var upZF = function (dict) {
    return dict.upZF;
};
var unZF4 = function (v) {
    return v;
};
var upZF4 = function (dictContainer) {
    var $553 = upZF(dictContainer);
    return function ($554) {
        return $553(unZF4($554));
    };
};
var traversableWithIndexProduct$prime = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return function (dictTraversableWithIndex2) {
            return function (dictTraversableWithIndex3) {
                return Data_Functor_Coproduct.traversableWithIndexCoproduct(Data_Functor_Product.traversableWithIndexProduct(dictTraversableWithIndex1)(dictTraversableWithIndex2))(Data_Functor_Product.traversableWithIndexProduct(dictTraversableWithIndex)(dictTraversableWithIndex3));
            };
        };
    };
};
var traversableWithIndexMap$prime = Data_Functor_Product.traversableWithIndexProduct(Data_Const.traversableWithIndexConst)(Data_Map_Internal.traversableWithIndexMap);
var traversableWithIndexInsOrdMap$prime = Data_Functor_Product.traversableWithIndexProduct(Data_Const.traversableWithIndexConst)(Data_Functor_Product.traversableWithIndexProduct(Dhall_Map.traversableWithIndexIOSM)(Dhall_Map.traversableWithIndexIOSM));
var traversableWithIndexCompose$prime = function (dictTraversableWithIndex) {
    return function (dictTraversableWithIndex1) {
        return function (dictTraversableWithIndex2) {
            return Data_Functor_Product.traversableWithIndexProduct(Data_Functor_Compose.traversableWithIndexCompose(dictTraversableWithIndex)(dictTraversableWithIndex1))(dictTraversableWithIndex2);
        };
    };
};
var traversableWithIndexArray$prime = Data_Functor_Product.traversableWithIndexProduct(Data_TraversableWithIndex.traversableWithIndexArray)(Data_TraversableWithIndex.traversableWithIndexArray);
var traversableProduct$prime = function (dictTraversable) {
    return function (dictTraversable1) {
        return function (dictTraversable2) {
            return function (dictTraversable3) {
                return Data_Functor_Coproduct.traversableCoproduct(Data_Functor_Product.traversableProduct(dictTraversable1)(dictTraversable2))(Data_Functor_Product.traversableProduct(dictTraversable)(dictTraversable3));
            };
        };
    };
};
var traversableNonEmpty$prime = function (dictTraversable) {
    return function (dictTraversable1) {
        return Data_Functor_Coproduct.traversableCoproduct(dictTraversable)(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(dictTraversable1));
    };
};
var traversableMap$prime = Data_Functor_Product.traversableProduct(Data_Const.traversableConst)(Data_Map_Internal.traversableMap);
var traversableInsOrdMap$prime = Data_Functor_Product.traversableProduct(Data_Const.traversableConst)(Data_Functor_Product.traversableProduct(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM));
var traversableCompose$prime = function (dictTraversable) {
    return function (dictTraversable1) {
        return function (dictTraversable2) {
            return Data_Functor_Product.traversableProduct(Data_Functor_Compose.traversableCompose(dictTraversable)(dictTraversable1))(dictTraversable2);
        };
    };
};
var traversableArray$prime = Data_Functor_Product.traversableProduct(Data_Traversable.traversableArray)(Data_Traversable.traversableArray);
var ordProduct$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd12) {
            return function (dictOrd13) {
                return function (dictOrd) {
                    return Data_Functor_Coproduct.ordCoproduct(Data_Functor_Product.ord1Product(dictOrd11)(dictOrd12))(Data_Functor_Product.ord1Product(dictOrd1)(dictOrd13))(dictOrd);
                };
            };
        };
    };
};
var ordNonEmpty$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd) {
            return Data_Functor_Coproduct.ordCoproduct(dictOrd1)(Data_Functor_Product.ord1Product(Data_Identity.ord1Identity)(dictOrd11))(dictOrd);
        };
    };
};
var ordMap$prime = function (dictOrd) {
    return function (dictOrd1) {
        return Data_Functor_Product.ordProduct(Data_Const.ord1Const(dictOrd))(Data_Map_Internal.ord1Map(dictOrd))(dictOrd1);
    };
};
var ordInsOrdMap$prime = function (dictOrd) {
    return function (dictOrd1) {
        return Data_Functor_Product.ordProduct(Data_Const.ord1Const(dictOrd))(Data_Functor_Product.ord1Product(Dhall_Map.ord1IOSM(dictOrd))(Dhall_Map.ord1IOSM(dictOrd)))(dictOrd1);
    };
};
var ordCompose$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd12) {
            return function (dictOrd) {
                return Data_Functor_Product.ordProduct(Data_Functor_Compose.ord1Compose(dictOrd1)(dictOrd11))(dictOrd12)(dictOrd);
            };
        };
    };
};
var ordArray$prime = function (dictOrd) {
    return Data_Functor_Product.ordProduct(Data_Ord.ord1Array)(Data_Ord.ord1Array)(dictOrd);
};
var ord1Product$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd12) {
            return function (dictOrd13) {
                return Data_Functor_Coproduct.ord1Coproduct(Data_Functor_Product.ord1Product(dictOrd11)(dictOrd12))(Data_Functor_Product.ord1Product(dictOrd1)(dictOrd13));
            };
        };
    };
};
var ord1NonEmpty$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return Data_Functor_Coproduct.ord1Coproduct(dictOrd1)(Data_Functor_Product.ord1Product(Data_Identity.ord1Identity)(dictOrd11));
    };
};
var ord1Map$prime = function (dictOrd) {
    return Data_Functor_Product.ord1Product(Data_Const.ord1Const(dictOrd))(Data_Map_Internal.ord1Map(dictOrd));
};
var ord1InsOrdMap$prime = function (dictOrd) {
    return Data_Functor_Product.ord1Product(Data_Const.ord1Const(dictOrd))(Data_Functor_Product.ord1Product(Dhall_Map.ord1IOSM(dictOrd))(Dhall_Map.ord1IOSM(dictOrd)));
};
var ord1Compose$prime = function (dictOrd1) {
    return function (dictOrd11) {
        return function (dictOrd12) {
            return Data_Functor_Product.ord1Product(Data_Functor_Compose.ord1Compose(dictOrd1)(dictOrd11))(dictOrd12);
        };
    };
};
var ord1Array$prime = Data_Functor_Product.ord1Product(Data_Ord.ord1Array)(Data_Ord.ord1Array);
var newtypeZF4 = new Data_Newtype.Newtype(function (n) {
    return n;
}, ZF4);
var newtypeProduct$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, Product$prime);
var newtypeNonEmpty$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, NonEmpty$prime);
var newtypeMap$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, Map$prime);
var newtypeInsOrdMap$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, InsOrdMap$prime);
var newtypeCompose$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, Compose$prime);
var newtypeArray$prime = new Data_Newtype.Newtype(function (n) {
    return n;
}, ArrayN);
var mergeProduct$prime = function (dictMerge) {
    return function (dictMerge1) {
        return function (dictMerge2) {
            return function (dictMerge3) {
                return Dhall_Core_Zippers_Merge.mergeCoproduct(Dhall_Core_Zippers_Merge.mergeProduct(dictMerge1)(dictMerge2))(Dhall_Core_Zippers_Merge.mergeProduct(dictMerge)(dictMerge3));
            };
        };
    };
};
var mergeNonEmpty$prime = function (dictMerge) {
    return function (dictMerge1) {
        return Dhall_Core_Zippers_Merge.mergeCoproduct(dictMerge)(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeIdentity)(dictMerge1));
    };
};
var mergeMap$prime = function (dictOrd) {
    return Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeMap(dictOrd));
};
var mergeInsOrdMap$prime = function (dictOrd) {
    return Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd)));
};
var mergeCompose$prime = function (dictMerge) {
    return function (dictTraversable) {
        return function (dictMerge1) {
            return function (dictMerge2) {
                return Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeCompose(dictTraversable)(dictMerge)(dictMerge1))(dictMerge2);
            };
        };
    };
};
var mergeArray$prime = Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers_Merge.mergeArray);
var mapWithIndexVRL = function (dict) {
    return dict.mapWithIndexVRL;
};
var mapWithIndexV = function (dictRowToList) {
    return function (dictFunctorWithIndexVRL) {
        return mapWithIndexVRL(dictFunctorWithIndexVRL)(Type_Data_RowList.RLProxy.value);
    };
};
var ixFVRL = function (dict) {
    return dict.ixFVRL;
};
var ixFV = function (dictRowToList) {
    return function (dictContainerIVRL) {
        return ixFVRL(dictContainerIVRL)(Type_Data_RowList.RLProxy.value);
    };
};
var ixF = function (dict) {
    return dict.ixF;
};
var ixZF = function (dictContainerI) {
    return function (v) {
        return ixF(dictContainerI)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1));
    };
};
var ixZF4 = function (dictContainerI) {
    var $555 = ixZF(dictContainerI);
    return function ($556) {
        return $555(unZF4($556));
    };
};
var functorZF = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new ZF(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(dictFunctor)(f))(v.value1));
        };
    });
};
var functorZF4 = function (dictFunctor) {
    return functorZF(dictFunctor);
};
var functorWithIndexVRLNil = new FunctorWithIndexVRL(function (v) {
    return function (v1) {
        return Data_Functor_Variant.case_;
    };
});
var functorWithIndexVRLCons = function (dictIsSymbol) {
    return function (dictFunctorWithIndex) {
        return function (dictCons) {
            return function (dictCons1) {
                return function (dictUnion) {
                    return function (dictUnion1) {
                        return function (dictFunctorWithIndexVRL) {
                            return new FunctorWithIndexVRL(function (v) {
                                return function (f) {
                                    return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                        var $557 = Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctorWithIndex.Functor0())(Data_Symbol.SProxy.value);
                                        var $558 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)((function () {
                                            var $560 = Data_Variant.inj(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value);
                                            return function ($561) {
                                                return f($560($561));
                                            };
                                        })());
                                        return function ($559) {
                                            return $557($558($559));
                                        };
                                    })())((function () {
                                        var $562 = Data_Functor_Variant.expand(dictUnion1);
                                        var $563 = mapWithIndexVRL(dictFunctorWithIndexVRL)(Type_Data_RowList.RLProxy.value)((function () {
                                            var $565 = Data_Variant.expand(dictUnion);
                                            return function ($566) {
                                                return f($565($566));
                                            };
                                        })());
                                        return function ($564) {
                                            return $562($563($564));
                                        };
                                    })());
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var functorWithIndexProduct$prime = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return function (dictFunctorWithIndex2) {
            return function (dictFunctorWithIndex3) {
                return Data_Functor_Coproduct.functorWithIndexCoproduct(Data_Functor_Product.functorWithIndexProduct(dictFunctorWithIndex1)(dictFunctorWithIndex2))(Data_Functor_Product.functorWithIndexProduct(dictFunctorWithIndex)(dictFunctorWithIndex3));
            };
        };
    };
};
var functorWithIndexMap$prime = Data_Functor_Product.functorWithIndexProduct(Data_Const.functorWithIndexConst)(Data_Map_Internal.functorWithIndexMap);
var functorWithIndexInsOrdMap$prime = Data_Functor_Product.functorWithIndexProduct(Data_Const.functorWithIndexConst)(Data_Functor_Product.functorWithIndexProduct(Dhall_Map.functorWithIndexIOSM)(Dhall_Map.functorWithIndexIOSM));
var functorWithIndexCompose$prime = function (dictFunctorWithIndex) {
    return function (dictFunctorWithIndex1) {
        return function (dictFunctorWithIndex2) {
            return Data_Functor_Product.functorWithIndexProduct(Data_Functor_Compose.functorWithIndexCompose(dictFunctorWithIndex)(dictFunctorWithIndex1))(dictFunctorWithIndex2);
        };
    };
};
var functorWithIndexArray$prime = Data_Functor_Product.functorWithIndexProduct(Data_FunctorWithIndex.functorWithIndexArray)(Data_FunctorWithIndex.functorWithIndexArray);
var functorProduct$prime = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictFunctor3) {
                return Data_Functor_Coproduct.functorCoproduct(Data_Functor_Product.functorProduct(dictFunctor1)(dictFunctor2))(Data_Functor_Product.functorProduct(dictFunctor)(dictFunctor3));
            };
        };
    };
};
var functorNonEmpty$prime = function (dictFunctor) {
    return function (dictFunctor1) {
        return Data_Functor_Coproduct.functorCoproduct(dictFunctor)(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(dictFunctor1));
    };
};
var functorMap$prime = Data_Functor_Product.functorProduct(Data_Const.functorConst)(Data_Map_Internal.functorMap);
var functorInsOrdMap$prime = Data_Functor_Product.functorProduct(Data_Const.functorConst)(Data_Functor_Product.functorProduct(Dhall_Map.functorIOSM)(Dhall_Map.functorIOSM));
var functorCompose$prime = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return Data_Functor_Product.functorProduct(Data_Functor_Compose.functorCompose(dictFunctor)(dictFunctor1))(dictFunctor2);
        };
    };
};
var functorArray$prime = Data_Functor_Product.functorProduct(Data_Functor.functorArray)(Data_Functor.functorArray);
var foldableZF4 = function (dictFoldable) {
    return function (dictContainer) {
        return new Data_Foldable.Foldable(function (dictMonoid) {
            return function (f) {
                var $567 = Data_Foldable.foldMap(((dictContainer.TraversableWithIndex5()).Traversable2()).Foldable1())(dictMonoid)(f);
                var $568 = upZF4(dictContainer);
                return function ($569) {
                    return $567($568($569));
                };
            };
        }, function (f) {
            return function (b) {
                var $570 = Data_Foldable.foldl(((dictContainer.TraversableWithIndex5()).Traversable2()).Foldable1())(f)(b);
                var $571 = upZF4(dictContainer);
                return function ($572) {
                    return $570($571($572));
                };
            };
        }, function (f) {
            return function (b) {
                var $573 = Data_Foldable.foldr(((dictContainer.TraversableWithIndex5()).Traversable2()).Foldable1())(f)(b);
                var $574 = upZF4(dictContainer);
                return function ($575) {
                    return $573($574($575));
                };
            };
        });
    };
};
var foldableWithIndexZF4 = function (dictFoldableWithIndex) {
    return function (dictContainer) {
        return new Data_FoldableWithIndex.FoldableWithIndex(function () {
            return foldableZF4(((dictContainer.TraversableWithIndex5()).Traversable2()).Foldable1())(dictContainer);
        }, function (dictMonoid) {
            return function (f) {
                var $576 = Data_FoldableWithIndex.foldMapWithIndex((dictContainer.TraversableWithIndex5()).FoldableWithIndex1())(dictMonoid)(f);
                var $577 = upZF4(dictContainer);
                return function ($578) {
                    return $576($577($578));
                };
            };
        }, function (f) {
            return function (b) {
                var $579 = Data_FoldableWithIndex.foldlWithIndex((dictContainer.TraversableWithIndex5()).FoldableWithIndex1())(f)(b);
                var $580 = upZF4(dictContainer);
                return function ($581) {
                    return $579($580($581));
                };
            };
        }, function (f) {
            return function (b) {
                var $582 = Data_FoldableWithIndex.foldrWithIndex((dictContainer.TraversableWithIndex5()).FoldableWithIndex1())(f)(b);
                var $583 = upZF4(dictContainer);
                return function ($584) {
                    return $582($583($584));
                };
            };
        });
    };
};
var foldableWithIndexProduct$prime = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return function (dictFoldableWithIndex2) {
            return function (dictFoldableWithIndex3) {
                return Data_Functor_Coproduct.foldableWithIndexCoproduct(Data_Functor_Product.foldableWithIndexProduct(dictFoldableWithIndex1)(dictFoldableWithIndex2))(Data_Functor_Product.foldableWithIndexProduct(dictFoldableWithIndex)(dictFoldableWithIndex3));
            };
        };
    };
};
var foldableWithIndexMap$prime = Data_Functor_Product.foldableWithIndexProduct(Data_Const.foldableWithIndexConst)(Data_Map_Internal.foldableWithIndexMap);
var foldableWithIndexInsOrdMap$prime = Data_Functor_Product.foldableWithIndexProduct(Data_Const.foldableWithIndexConst)(Data_Functor_Product.foldableWithIndexProduct(Dhall_Map.foldableWithIndexIOSM)(Dhall_Map.foldableWithIndexIOSM));
var foldableWithIndexCompose$prime = function (dictFoldableWithIndex) {
    return function (dictFoldableWithIndex1) {
        return function (dictFoldableWithIndex2) {
            return Data_Functor_Product.foldableWithIndexProduct(Data_Functor_Compose.foldableWithIndexCompose(dictFoldableWithIndex)(dictFoldableWithIndex1))(dictFoldableWithIndex2);
        };
    };
};
var foldableWithIndexArray$prime = Data_Functor_Product.foldableWithIndexProduct(Data_FoldableWithIndex.foldableWithIndexArray)(Data_FoldableWithIndex.foldableWithIndexArray);
var foldableProduct$prime = function (dictFoldable) {
    return function (dictFoldable1) {
        return function (dictFoldable2) {
            return function (dictFoldable3) {
                return Data_Functor_Coproduct.foldableCoproduct(Data_Functor_Product.foldableProduct(dictFoldable1)(dictFoldable2))(Data_Functor_Product.foldableProduct(dictFoldable)(dictFoldable3));
            };
        };
    };
};
var foldableNonEmpty$prime = function (dictFoldable) {
    return function (dictFoldable1) {
        return Data_Functor_Coproduct.foldableCoproduct(dictFoldable)(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(dictFoldable1));
    };
};
var foldableMap$prime = Data_Functor_Product.foldableProduct(Data_Const.foldableConst)(Data_Map_Internal.foldableMap);
var foldableInsOrdMap$prime = Data_Functor_Product.foldableProduct(Data_Const.foldableConst)(Data_Functor_Product.foldableProduct(Dhall_Map.foldableIOSM)(Dhall_Map.foldableIOSM));
var foldableCompose$prime = function (dictFoldable) {
    return function (dictFoldable1) {
        return function (dictFoldable2) {
            return Data_Functor_Product.foldableProduct(Data_Functor_Compose.foldableCompose(dictFoldable)(dictFoldable1))(dictFoldable2);
        };
    };
};
var foldableArray$prime = Data_Functor_Product.foldableProduct(Data_Foldable.foldableArray)(Data_Foldable.foldableArray);
var eqProduct$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq12) {
            return function (dictEq13) {
                return function (dictEq) {
                    return Data_Functor_Coproduct.eqCoproduct(Data_Functor_Product.eq1Product(dictEq11)(dictEq12))(Data_Functor_Product.eq1Product(dictEq1)(dictEq13))(dictEq);
                };
            };
        };
    };
};
var eqNonEmpty$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq) {
            return Data_Functor_Coproduct.eqCoproduct(dictEq1)(Data_Functor_Product.eq1Product(Data_Identity.eq1Identity)(dictEq11))(dictEq);
        };
    };
};
var eqMap$prime = function (dictEq) {
    return function (dictEq1) {
        return Data_Functor_Product.eqProduct(Data_Const.eq1Const(dictEq))(Data_Map_Internal.eq1Map(dictEq))(dictEq1);
    };
};
var eqInsOrdMap$prime = function (dictEq) {
    return function (dictEq1) {
        return Data_Functor_Product.eqProduct(Data_Const.eq1Const(dictEq))(Data_Functor_Product.eq1Product(Dhall_Map.eq1IOSM(dictEq))(Dhall_Map.eq1IOSM(dictEq)))(dictEq1);
    };
};
var eqCompose$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq12) {
            return function (dictEq) {
                return Data_Functor_Product.eqProduct(Data_Functor_Compose.eq1Compose(dictEq1)(dictEq11))(dictEq12)(dictEq);
            };
        };
    };
};
var eqArray$prime = function (dictEq) {
    return Data_Functor_Product.eqProduct(Data_Eq.eq1Array)(Data_Eq.eq1Array)(dictEq);
};
var eq1Product$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq12) {
            return function (dictEq13) {
                return Data_Functor_Coproduct.eq1Coproduct(Data_Functor_Product.eq1Product(dictEq11)(dictEq12))(Data_Functor_Product.eq1Product(dictEq1)(dictEq13));
            };
        };
    };
};
var eq1NonEmpty$prime = function (dictEq1) {
    return function (dictEq11) {
        return Data_Functor_Coproduct.eq1Coproduct(dictEq1)(Data_Functor_Product.eq1Product(Data_Identity.eq1Identity)(dictEq11));
    };
};
var eq1Map$prime = function (dictEq) {
    return Data_Functor_Product.eq1Product(Data_Const.eq1Const(dictEq))(Data_Map_Internal.eq1Map(dictEq));
};
var eq1InsOrdMap$prime = function (dictEq) {
    return Data_Functor_Product.eq1Product(Data_Const.eq1Const(dictEq))(Data_Functor_Product.eq1Product(Dhall_Map.eq1IOSM(dictEq))(Dhall_Map.eq1IOSM(dictEq)));
};
var eq1Compose$prime = function (dictEq1) {
    return function (dictEq11) {
        return function (dictEq12) {
            return Data_Functor_Product.eq1Product(Data_Functor_Compose.eq1Compose(dictEq1)(dictEq11))(dictEq12);
        };
    };
};
var eq1Array$prime = Data_Functor_Product.eq1Product(Data_Eq.eq1Array)(Data_Eq.eq1Array);
var downZFVRL = function (dict) {
    return dict.downZFVRL;
};
var downZFV = function (dictRowToList) {
    return function (dictContainerVRL) {
        return downZFVRL(dictContainerVRL)(Type_Data_RowList.RLProxy.value);
    };
};
var downZF = function (dict) {
    return dict.downZF;
};
var downZF4 = function (dictContainer) {
    var $585 = Data_Functor.map(dictContainer.Functor9())(ZF4);
    var $586 = downZF(dictContainer);
    return function ($587) {
        return $585($586($587));
    };
};
var deferAp = function (f) {
    return function (a) {
        return Data_Lazy.defer(function (v) {
            return f(a);
        });
    };
};
var containerVRLNil = new ContainerVRL(function (v) {
    return Data_Functor_Variant.case_;
}, function (v) {
    return function (v1) {
        return Data_Functor_Variant.case_(Control_Comonad.extract(Data_Lazy.comonadLazy)(v1.value1));
    };
});
var containerIVRLNil = new ContainerIVRL(function (v) {
    return Data_Functor_Variant.case_;
});
var containerIVRLCons = function (dictIsSymbol) {
    return function (dictContainerI) {
        return function (dictCons) {
            return function (dictCons1) {
                return function (dictUnion) {
                    return function (dictContainerIVRL) {
                        return new ContainerIVRL(function (v) {
                            return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                var $588 = Data_Variant.inj(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value);
                                var $589 = ixF(dictContainerI);
                                return function ($590) {
                                    return $588($589($590));
                                };
                            })())((function () {
                                var $591 = Data_Variant.expand(dictUnion);
                                var $592 = ixFVRL(dictContainerIVRL)(Type_Data_RowList.RLProxy.value);
                                return function ($593) {
                                    return $591($592($593));
                                };
                            })());
                        });
                    };
                };
            };
        };
    };
};
var containerIProduct = function (dictContainerI) {
    return function (dictContainerI1) {
        return new ContainerI(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Either.Left.create(ixF(dictContainerI)(v.value0.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Either.Right.create(ixF(dictContainerI1)(v.value0.value1));
            };
            throw new Error("Failed pattern match at Dhall.Core.Zippers (line 408, column 1 - line 410, column 77): " + [ v.constructor.name ]);
        });
    };
};
var containerINonEmpty = function (dictContainerI) {
    return new ContainerI(function (v) {
        if (v instanceof Data_Either.Left) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Maybe.Just(ixF(dictContainerI)(v.value0.value1));
        };
        throw new Error("Failed pattern match at Dhall.Core.Zippers (line 522, column 1 - line 524, column 79): " + [ v.constructor.name ]);
    });
};
var containerIMap = new ContainerI(function (v) {
    return v.value0;
});
var containerMap = function (dictOrd) {
    return new Container(function () {
        return containerIMap;
    }, function () {
        return Data_Map_Internal.eq1Map(dictOrd.Eq0());
    }, function () {
        return eq1Map$prime(dictOrd.Eq0());
    }, function () {
        return functorMap$prime;
    }, function () {
        return Data_Map_Internal.functorMap;
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeMap(dictOrd);
    }, function () {
        return mergeMap$prime(dictOrd);
    }, function () {
        return dictOrd;
    }, function () {
        return traversableMap$prime;
    }, function () {
        return Data_Map_Internal.traversableWithIndexMap;
    }, function (as) {
        return Data_FunctorWithIndex.mapWithIndex(Data_Map_Internal.functorWithIndexMap)(function (i) {
            return function (a) {
                return new ZF(a, Data_Lazy.defer(function (v) {
                    return new Data_Tuple.Tuple(i, Data_Map_Internal["delete"](dictOrd)(i)(as));
                }));
            };
        })(as);
    }, function (v) {
        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
        return Data_Map_Internal.insert(dictOrd)(v1.value0)(v.value0)(v1.value1);
    });
};
var containerIIdentity = new ContainerI(function (v) {
    return Data_Unit.unit;
});
var containerIIOSM = function (dictOrd) {
    return new ContainerI(function (v) {
        return v.value0;
    });
};
var containerIOSM = function (dictOrd) {
    return new Container(function () {
        return containerIIOSM(dictOrd);
    }, function () {
        return Dhall_Map.eq1IOSM(dictOrd.Eq0());
    }, function () {
        return eq1InsOrdMap$prime(dictOrd.Eq0());
    }, function () {
        return functorInsOrdMap$prime;
    }, function () {
        return Dhall_Map.functorIOSM;
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd);
    }, function () {
        return mergeInsOrdMap$prime(dictOrd);
    }, function () {
        return dictOrd;
    }, function () {
        return traversableInsOrdMap$prime;
    }, function () {
        return Dhall_Map.traversableWithIndexIOSM;
    }, function (v) {
        return Dhall_Map.mkIOSM((function () {
            var l = Data_Array.length(v);
            return Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                return function (v1) {
                    return Data_Tuple.Tuple.create(v1.value0)(new ZF(v1.value1, Data_Lazy.defer(function (v2) {
                        var prev = Dhall_Map.mkIOSM(Data_Array.slice(0)(i)(v));
                        var next = Dhall_Map.mkIOSM(Data_Array.slice(i + 1 | 0)(l)(v));
                        return new Data_Tuple.Tuple(v1.value0, new Data_Tuple.Tuple(prev, next));
                    })));
                };
            });
        })()(v));
    }, function (v) {
        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
        return Dhall_Map.mkIOSM(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Dhall_Map.unIOSM(v1.value1.value0))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ new Data_Tuple.Tuple(v1.value0, v.value0) ])(Dhall_Map.unIOSM(v1.value1.value1))));
    });
};
var containerICoproduct = function (dictContainerI) {
    return function (dictContainerI1) {
        return new ContainerI(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Either.Left.create(ixF(dictContainerI)(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return Data_Either.Right.create(ixF(dictContainerI1)(v.value0));
            };
            throw new Error("Failed pattern match at Dhall.Core.Zippers (line 354, column 1 - line 356, column 46): " + [ v.constructor.name ]);
        });
    };
};
var containerIConstVoid = new ContainerI(function (v) {
    return v;
});
var containerIConst = new ContainerI(function (v) {
    return Data_Unit.unit;
});
var containerIdentity = new Container(function () {
    return containerIConst;
}, function () {
    return Data_Identity.eq1Identity;
}, function () {
    return Data_Const.eq1Const(Data_Eq.eqUnit);
}, function () {
    return Data_Const.functorConst;
}, function () {
    return Data_Identity.functorIdentity;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeIdentity;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit);
}, function () {
    return Data_Ord.ordUnit;
}, function () {
    return Data_Const.traversableConst;
}, function () {
    return Data_Identity.traversableWithIndexIdentity;
}, function (v) {
    return new ZF(v, Control_Applicative.pure(Data_Lazy.applicativeLazy)(Data_Unit.unit));
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    return v.value0;
});
var containerMaybe = new Container(function () {
    return containerIConst;
}, function () {
    return Data_Maybe.eq1Maybe;
}, function () {
    return Data_Const.eq1Const(Data_Eq.eqUnit);
}, function () {
    return Data_Const.functorConst;
}, function () {
    return Data_Maybe.functorMaybe;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeMaybe;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit);
}, function () {
    return Data_Ord.ordUnit;
}, function () {
    return Data_Const.traversableConst;
}, function () {
    return Data_TraversableWithIndex.traversableWithIndexMaybe;
}, function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(Data_Unit.unit)));
    };
    throw new Error("Failed pattern match at Dhall.Core.Zippers (line 478, column 1 - line 482, column 52): " + [ v.constructor.name ]);
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    return new Data_Maybe.Just(v.value0);
});
var containerTuple = function (dictEq) {
    return new Container(function () {
        return containerIConst;
    }, function () {
        return Data_Tuple.eq1Tuple(dictEq);
    }, function () {
        return Data_Const.eq1Const(dictEq);
    }, function () {
        return Data_Const.functorConst;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeTuple(dictEq);
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeConst(dictEq);
    }, function () {
        return Data_Ord.ordUnit;
    }, function () {
        return Data_Const.traversableConst;
    }, function () {
        return Data_Tuple.traversableWithIndexTuple;
    }, function (v) {
        return new Data_Tuple.Tuple(v.value0, new ZF(v.value1, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0)));
    }, function (v) {
        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
        return new Data_Tuple.Tuple(v1, v.value0);
    });
};
var containerICompose = function (dictContainerI) {
    return function (dictContainerI1) {
        return new ContainerI(function (v) {
            return new Data_Tuple.Tuple(ixF(dictContainerI)(v.value0), ixF(dictContainerI1)(v.value1));
        });
    };
};
var containerIArray = new ContainerI(function (v) {
    return Data_Array.length(v.value0);
});
var containerEither = function (dictEq) {
    return new Container(function () {
        return containerIConst;
    }, function () {
        return Data_Either.eq1Either(dictEq);
    }, function () {
        return Data_Const.eq1Const(Data_Eq.eqUnit);
    }, function () {
        return Data_Const.functorConst;
    }, function () {
        return Data_Either.functorEither;
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeEither(dictEq);
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqUnit);
    }, function () {
        return Data_Ord.ordUnit;
    }, function () {
        return Data_Const.traversableConst;
    }, function () {
        return Data_Either.traversableWithIndexEither;
    }, function (v) {
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(Data_Unit.unit)));
        };
        throw new Error("Failed pattern match at Dhall.Core.Zippers (line 487, column 1 - line 491, column 54): " + [ v.constructor.name ]);
    }, function (v) {
        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
        return new Data_Either.Right(v.value0);
    });
};
var containerConst = function (dictEq) {
    return new Container(function () {
        return containerIConstVoid;
    }, function () {
        return Data_Const.eq1Const(dictEq);
    }, function () {
        return Data_Const.eq1Const(Data_Eq.eqVoid);
    }, function () {
        return Data_Const.functorConst;
    }, function () {
        return Data_Const.functorConst;
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeConst(dictEq);
    }, function () {
        return Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid);
    }, function () {
        return Data_Ord.ordVoid;
    }, function () {
        return Data_Const.traversableConst;
    }, function () {
        return Data_Const.traversableWithIndexConst;
    }, function (v) {
        return v;
    }, function (v) {
        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
        return Data_Void.absurd(v1);
    });
};
var arrayN = function (prev) {
    return function (next) {
        return new Data_Tuple.Tuple(prev, next);
    };
};
var containerArray = new Container(function () {
    return containerIArray;
}, function () {
    return Data_Eq.eq1Array;
}, function () {
    return eq1Array$prime;
}, function () {
    return functorArray$prime;
}, function () {
    return Data_Functor.functorArray;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeArray;
}, function () {
    return mergeArray$prime;
}, function () {
    return Data_Ord.ordInt;
}, function () {
    return traversableArray$prime;
}, function () {
    return Data_TraversableWithIndex.traversableWithIndexArray;
}, function (as) {
    var l = Data_Array.length(as);
    return Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
        return function (a) {
            return new ZF(a, Data_Lazy.defer(function (v) {
                return arrayN(Data_Array.slice(0)(i)(as))(Data_Array.slice(i + 1 | 0)(l)(as));
            }));
        };
    })(as);
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v.value0 ])(v1.value1));
});
var containerNonEmptyArray = new Container(function () {
    return containerIArray;
}, function () {
    return Data_Array_NonEmpty_Internal.eq1NonEmptyArray;
}, function () {
    return eq1Array$prime;
}, function () {
    return functorArray$prime;
}, function () {
    return Data_Array_NonEmpty_Internal.functorNonEmptyArray;
}, function () {
    return Dhall_Core_Zippers_Merge.mergeNonEmptyArray;
}, function () {
    return mergeArray$prime;
}, function () {
    return Data_Ord.ordInt;
}, function () {
    return traversableArray$prime;
}, function () {
    return Data_Array_NonEmpty_Internal.traversableWithIndexNonEmptyArray;
}, function (as) {
    var l = Data_Array_NonEmpty.length(as);
    return Data_FunctorWithIndex.mapWithIndex(Data_Array_NonEmpty_Internal.functorWithIndexNonEmptyArray)(function (i) {
        return function (a) {
            return new ZF(a, Data_Lazy.defer(function (v) {
                return arrayN(Data_Array_NonEmpty.slice(0)(i)(as))(Data_Array_NonEmpty.slice(i + 1 | 0)(l)(as));
            }));
        };
    })(as);
}, function (v) {
    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
    return Data_Array_NonEmpty.appendArray(Data_Array_NonEmpty["snoc'"](v1.value0)(v.value0))(v1.value1);
});
var aroundZF = function (dictContainer) {
    return function (v) {
        var upZF_f$prime = function (v1) {
            return new ZF(v1.value0, deferAp(upZF(dictContainer))(v1));
        };
        return new ZF(v, Data_Lazy.defer(function (v1) {
            return Data_Functor.mapFlipped(dictContainer.Functor9())(downZF(dictContainer)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1)))(upZF_f$prime);
        }));
    };
};
var extendZF = function (dictContainer) {
    return new Control_Extend.Extend(function () {
        return functorZF(dictContainer.Functor9());
    }, function (f) {
        var $594 = Data_Functor.map(functorZF(dictContainer.Functor9()))(f);
        var $595 = aroundZF(dictContainer);
        return function ($596) {
            return $594($595($596));
        };
    });
};
var comonadZF = function (dictContainer) {
    return new Control_Comonad.Comonad(function () {
        return extendZF(dictContainer);
    }, function (v) {
        return v.value0;
    });
};
var comonadZF4 = function (dictContainer) {
    return comonadZF(dictContainer);
};
var extendZF4 = function (dictContainer) {
    return extendZF(dictContainer);
};
var _ix = function (dictTraversableWithIndex) {
    return function (dictEq) {
        return function (i) {
            return function (dictWander) {
                return Data_Lens_Indexed.unIndex((dictWander.Choice1()).Profunctor0())(Data_Lens_Traversal.elementsOf(dictWander)(function (dictWander1) {
                    return Data_Lens_Indexed.itraversed(dictTraversableWithIndex)(dictWander1);
                })(Data_Eq.eq(dictEq)(i)));
            };
        };
    };
};
var previewIndexZF = function (dictContainer) {
    return function (i) {
        var $597 = Data_Lens_Fold.firstOf(_ix(dictContainer.TraversableWithIndex5())((dictContainer.Ord2()).Eq0())(i)(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)));
        var $598 = downZF(dictContainer);
        return function ($599) {
            return $597($598($599));
        };
    };
};
var _ix_wholeZF = function (dictContainer) {
    return function (dictChoice) {
        var $600 = Data_Lens_Iso_Newtype["_Newtype"](Control_Comonad_Env_Trans.newtypeEnvT)(Control_Comonad_Env_Trans.newtypeEnvT)(dictChoice.Profunctor0());
        var $601 = Data_Lens_Prism["prism'"](Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(ixZF(dictContainer.ContainerI7()))(upZF(dictContainer)))(Data_Tuple.uncurry(previewIndexZF(dictContainer)))(dictChoice);
        return function ($602) {
            return $600($601($602));
        };
    };
};
var _ix_wholeZF4 = function (dictContainer) {
    return function (dictChoice) {
        var $603 = _ix_wholeZF(dictContainer)(dictChoice);
        var $604 = Data_Lens_Iso.re(Data_Lens_Iso_Newtype["_Newtype"](newtypeZF4)(newtypeZF4)(Data_Lens_Internal_Re.profunctorRe(dictChoice.Profunctor0())));
        return function ($605) {
            return $603($604($605));
        };
    };
};
var previewIndexZF4 = function (dictContainer) {
    return function (i) {
        var $606 = Data_Functor.map(Data_Maybe.functorMaybe)(ZF4);
        var $607 = previewIndexZF(dictContainer)(i);
        return function ($608) {
            return $606($607($608));
        };
    };
};
var unsafeGetIndexZF = function (dictContainer) {
    return function (dictPartial) {
        return function (i) {
            return function (f) {
                return Data_Maybe.fromJust(dictPartial)(previewIndexZF(dictContainer)(i)(f));
            };
        };
    };
};
var unsafeGetIndexZF4 = function (dictContainer) {
    return function (dictPartial) {
        return function (i) {
            return function (f) {
                return ZF4(unsafeGetIndexZF(dictContainer)(dictPartial)(i)(f));
            };
        };
    };
};
var functorWithIndexZF4 = function (dictFunctorWithIndex) {
    return function (dictTraversable) {
        return function (dictFunctor) {
            return function (dictContainer) {
                return new Data_FunctorWithIndex.FunctorWithIndex(function () {
                    return functorZF4(dictContainer.Functor8());
                }, function (f) {
                    return function (z) {
                        return unsafeGetIndexZF4(dictContainer)()(ixZF4(dictContainer.ContainerI7())(z))(Data_FunctorWithIndex.mapWithIndex((dictContainer.TraversableWithIndex5()).FunctorWithIndex0())(f)(upZF4(dictContainer)(z)));
                    };
                });
            };
        };
    };
};
var traversableZF4 = function (dictTraversable) {
    return function (dictFunctor) {
        return function (dictContainer) {
            return new Data_Traversable.Traversable(function () {
                return foldableZF4(((dictContainer.TraversableWithIndex5()).Traversable2()).Foldable1())(dictContainer);
            }, function () {
                return functorZF4(dictContainer.Functor8());
            }, function (dictApplicative) {
                return function (z) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(unsafeGetIndexZF4(dictContainer)()(ixZF4(dictContainer.ContainerI7())(z)))(Data_Traversable.sequence((dictContainer.TraversableWithIndex5()).Traversable2())(dictApplicative)(upZF4(dictContainer)(z)));
                };
            }, function (dictApplicative) {
                return function (f) {
                    return function (z) {
                        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(unsafeGetIndexZF4(dictContainer)()(ixZF4(dictContainer.ContainerI7())(z)))(Data_Traversable.traverse((dictContainer.TraversableWithIndex5()).Traversable2())(dictApplicative)(f)(upZF4(dictContainer)(z)));
                    };
                };
            });
        };
    };
};
var traversableWithIndexZF4 = function (dictTraversableWithIndex) {
    return function (dictFunctor) {
        return function (dictContainer) {
            return new Data_TraversableWithIndex.TraversableWithIndex(function () {
                return foldableWithIndexZF4((dictContainer.TraversableWithIndex5()).FoldableWithIndex1())(dictContainer);
            }, function () {
                return functorWithIndexZF4((dictContainer.TraversableWithIndex5()).FunctorWithIndex0())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Functor8())(dictContainer);
            }, function () {
                return traversableZF4((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Functor8())(dictContainer);
            }, function (dictApplicative) {
                return function (f) {
                    return function (z) {
                        return Data_Functor.map((dictApplicative.Apply0()).Functor0())(unsafeGetIndexZF4(dictContainer)()(ixZF4(dictContainer.ContainerI7())(z)))(Data_TraversableWithIndex.traverseWithIndex(dictContainer.TraversableWithIndex5())(dictApplicative)(f)(upZF4(dictContainer)(z)));
                    };
                };
            });
        };
    };
};
var _focusZF = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value0;
    })(function (v) {
        return function (x) {
            return new ZF(x, v.value1);
        };
    })(dictStrong);
};
var _focusZF4 = function (dictStrong) {
    var $609 = Data_Lens_Iso_Newtype["_Newtype"](newtypeZF4)(newtypeZF4)(dictStrong.Profunctor0());
    var $610 = _focusZF(dictStrong);
    return function ($611) {
        return $609($610($611));
    };
};
var _contextZF$prime = function (dictStrong) {
    return Data_Lens_Lens.lens(function (v) {
        return v.value1;
    })(function (v) {
        return function (fx) {
            return new ZF(v.value0, fx);
        };
    })(dictStrong);
};
var _contextZF4$prime = function (dictStrong) {
    var $612 = Data_Lens_Iso_Newtype["_Newtype"](newtypeZF4)(newtypeZF4)(dictStrong.Profunctor0());
    var $613 = _contextZF$prime(dictStrong);
    return function ($614) {
        return $612($613($614));
    };
};
var containerNonEmpty = function (dictEq1) {
    return function (dictTraversable) {
        return function (dictMerge) {
            return function (dictFunctor) {
                return function (dictContainer) {
                    return new Container(function () {
                        return containerINonEmpty(dictContainer.ContainerI7());
                    }, function () {
                        return Data_NonEmpty.eq1NonEmpty(dictContainer.Eq10());
                    }, function () {
                        return eq1NonEmpty$prime(dictContainer.Eq10())(dictContainer.Eq11());
                    }, function () {
                        return functorNonEmpty$prime(dictContainer.Functor9())(dictContainer.Functor8());
                    }, function () {
                        return Data_NonEmpty.functorNonEmpty(dictContainer.Functor9());
                    }, function () {
                        return Dhall_Core_Zippers_Merge.mergeNonEmpty(dictContainer.Merge3());
                    }, function () {
                        return mergeNonEmpty$prime(dictContainer.Merge3())(dictContainer.Merge4());
                    }, function () {
                        return Data_Maybe.ordMaybe(dictContainer.Ord2());
                    }, function () {
                        return traversableNonEmpty$prime((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Traversable6());
                    }, function () {
                        return Data_NonEmpty.traversableWithIndexNonEmpty(dictContainer.TraversableWithIndex5());
                    }, function (v) {
                        return new Data_NonEmpty.NonEmpty(new ZF(v.value0, Data_Lazy.defer(function (v1) {
                            return new Data_Either.Left(v.value1);
                        })), Data_Functor.mapFlipped(dictContainer.Functor9())(downZF(dictContainer)(v.value1))(_contextZF$prime(Data_Profunctor_Strong.strongFn)(Data_Functor.map(Data_Lazy.functorLazy)(function (f$primea) {
                            return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, f$primea));
                        }))));
                    }, function (v) {
                        var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
                        if (v1 instanceof Data_Either.Left) {
                            return new Data_NonEmpty.NonEmpty(v.value0, v1.value0);
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return new Data_NonEmpty.NonEmpty(v1.value0.value0, upZF(dictContainer)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0.value1))));
                        };
                        throw new Error("Failed pattern match at Dhall.Core.Zippers (line 513, column 21 - line 516, column 43): " + [ v1.constructor.name ]);
                    });
                };
            };
        };
    };
};
var injector = function (dictFunctor) {
    return function (fg) {
        return function (f$primeg$prime) {
            var $615 = Data_Functor.map(dictFunctor)(_contextZF$prime(Data_Profunctor_Strong.strongFn)(Data_Functor.map(Data_Lazy.functorLazy)(f$primeg$prime)));
            return function ($616) {
                return fg($615($616));
            };
        };
    };
};
var containerCoproduct = function (dictEq1) {
    return function (dictEq11) {
        return function (dictMerge) {
            return function (dictMerge1) {
                return function (dictFunctor) {
                    return function (dictFunctor1) {
                        return function (dictContainer) {
                            return function (dictContainer1) {
                                return new Container(function () {
                                    return containerICoproduct(dictContainer.ContainerI7())(dictContainer1.ContainerI7());
                                }, function () {
                                    return Data_Functor_Coproduct.eq1Coproduct(dictContainer.Eq10())(dictContainer1.Eq10());
                                }, function () {
                                    return Data_Functor_Coproduct.eq1Coproduct(dictContainer.Eq11())(dictContainer1.Eq11());
                                }, function () {
                                    return Data_Functor_Coproduct.functorCoproduct(dictContainer.Functor8())(dictContainer1.Functor8());
                                }, function () {
                                    return Data_Functor_Coproduct.functorCoproduct(dictContainer.Functor9())(dictContainer1.Functor9());
                                }, function () {
                                    return Dhall_Core_Zippers_Merge.mergeCoproduct(dictContainer.Merge3())(dictContainer1.Merge3());
                                }, function () {
                                    return Dhall_Core_Zippers_Merge.mergeCoproduct(dictContainer.Merge4())(dictContainer1.Merge4());
                                }, function () {
                                    return Data_Either.ordEither(dictContainer.Ord2())(dictContainer1.Ord2());
                                }, function () {
                                    return Data_Functor_Coproduct.traversableCoproduct(dictContainer.Traversable6())(dictContainer1.Traversable6());
                                }, function () {
                                    return Data_Functor_Coproduct.traversableWithIndexCoproduct(dictContainer.TraversableWithIndex5())(dictContainer1.TraversableWithIndex5());
                                }, function (v) {
                                    if (v instanceof Data_Either.Left) {
                                        return injector(dictContainer.Functor9())(Data_Functor_Coproduct.left)(Data_Functor_Coproduct.left)(downZF(dictContainer)(v.value0));
                                    };
                                    if (v instanceof Data_Either.Right) {
                                        return injector(dictContainer1.Functor9())(Data_Functor_Coproduct.right)(Data_Functor_Coproduct.right)(downZF(dictContainer1)(v.value0));
                                    };
                                    throw new Error("Failed pattern match at Dhall.Core.Zippers (line 359, column 1 - line 365, column 70): " + [ v.constructor.name ]);
                                }, function (v) {
                                    var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
                                    if (v1 instanceof Data_Either.Left) {
                                        return Data_Functor_Coproduct.left(upZF(dictContainer)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0))));
                                    };
                                    if (v1 instanceof Data_Either.Right) {
                                        return Data_Functor_Coproduct.right(upZF(dictContainer1)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0))));
                                    };
                                    throw new Error("Failed pattern match at Dhall.Core.Zippers (line 363, column 23 - line 365, column 70): " + [ v1.constructor.name ]);
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
var containerVRLCons = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictContainer) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (dictCons2) {
                        return function (dictUnion) {
                            return function (dictUnion1) {
                                return function (dictContainerVRL) {
                                    return new ContainerVRL(function (v) {
                                        return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(Data_Symbol.SProxy.value)((function () {
                                            var $617 = injector(dictContainer.Functor9())(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictContainer.Functor9())(Data_Symbol.SProxy.value))(Data_Functor_Variant.inj(dictCons1)(dictIsSymbol)(dictContainer.Functor8())(Data_Symbol.SProxy.value));
                                            var $618 = downZF(dictContainer);
                                            return function ($619) {
                                                return $617($618($619));
                                            };
                                        })())((function () {
                                            var $620 = injector(Data_Functor_Variant.functorVariantF)(Data_Functor_Variant.expand(dictUnion))(Data_Functor_Variant.expand(dictUnion1));
                                            var $621 = downZFVRL(dictContainerVRL)(Type_Data_RowList.RLProxy.value);
                                            return function ($622) {
                                                return $620($621($622));
                                            };
                                        })());
                                    }, function (v) {
                                        return function (v1) {
                                            return Data_Functor_Variant.on(dictCons1)(dictIsSymbol)(Data_Symbol.SProxy.value)(function (z$prime) {
                                                return Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictContainer.Functor9())(Data_Symbol.SProxy.value)(upZF(dictContainer)(new ZF(v1.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(z$prime))));
                                            })(function (z$prime) {
                                                return Data_Functor_Variant.expand(dictUnion)(upZFVRL(dictContainerVRL)(Type_Data_RowList.RLProxy.value)(new ZF(v1.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(z$prime))));
                                            })(Control_Comonad.extract(Data_Lazy.comonadLazy)(v1.value1));
                                        };
                                    });
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var _contextZF = function (dictStrong) {
    var $623 = _contextZF$prime(dictStrong);
    var $624 = Data_Lens_Iso.iso(Control_Comonad.extract(Data_Lazy.comonadLazy))(Control_Applicative.pure(Data_Lazy.applicativeLazy))(dictStrong.Profunctor0());
    return function ($625) {
        return $623($624($625));
    };
};
var _contextZF4 = function (dictStrong) {
    var $626 = Data_Lens_Iso_Newtype["_Newtype"](newtypeZF4)(newtypeZF4)(dictStrong.Profunctor0());
    var $627 = _contextZF(dictStrong);
    return function ($628) {
        return $626($627($628));
    };
};
var containerCompose = function (dictEq1) {
    return function (dictEq11) {
        return function (dictTraversable) {
            return function (dictMerge) {
                return function (dictMerge1) {
                    return function (dictFunctor) {
                        return function (dictFunctor1) {
                            return function (dictTraversable1) {
                                return function (dictContainer) {
                                    return function (dictContainer1) {
                                        return new Container(function () {
                                            return containerICompose(dictContainer.ContainerI7())(dictContainer1.ContainerI7());
                                        }, function () {
                                            return Data_Functor_Compose.eq1Compose(dictContainer.Eq10())(dictContainer1.Eq10());
                                        }, function () {
                                            return eq1Compose$prime(dictContainer.Eq11())(dictContainer1.Eq10())(dictContainer1.Eq11());
                                        }, function () {
                                            return functorCompose$prime(dictContainer.Functor8())(dictContainer1.Functor9())(dictContainer1.Functor8());
                                        }, function () {
                                            return Data_Functor_Compose.functorCompose(dictContainer.Functor9())(dictContainer1.Functor9());
                                        }, function () {
                                            return Dhall_Core_Zippers_Merge.mergeCompose((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3());
                                        }, function () {
                                            return mergeCompose$prime(dictContainer.Merge4())(dictContainer.Traversable6())(dictContainer1.Merge3())(dictContainer1.Merge4());
                                        }, function () {
                                            return Data_Tuple.ordTuple(dictContainer.Ord2())(dictContainer1.Ord2());
                                        }, function () {
                                            return traversableCompose$prime(dictContainer.Traversable6())((dictContainer1.TraversableWithIndex5()).Traversable2())(dictContainer1.Traversable6());
                                        }, function () {
                                            return Data_Functor_Compose.traversableWithIndexCompose(dictContainer.TraversableWithIndex5())(dictContainer1.TraversableWithIndex5());
                                        }, function (v) {
                                            return Data_Functor_Compose.Compose(Data_Functor.mapFlipped(dictContainer.Functor9())(downZF(dictContainer)(v))(function (v1) {
                                                return Data_Functor.mapFlipped(dictContainer1.Functor9())(downZF(dictContainer1)(v1.value0))(_contextZF(Data_Profunctor_Strong.strongFn)(function (a) {
                                                    return Data_Functor_Product.product(Control_Comonad.extract(Data_Lazy.comonadLazy)(v1.value1))(a);
                                                }));
                                            }));
                                        }, function (v) {
                                            var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
                                            return Data_Functor_Compose.Compose(upZF(dictContainer)(new ZF(upZF(dictContainer1)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value1))), Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0))));
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var containerProduct = function (dictEq1) {
    return function (dictEq11) {
        return function (dictFunctor) {
            return function (dictMerge) {
                return function (dictMerge1) {
                    return function (dictFunctor1) {
                        return function (dictTraversable) {
                            return function (dictTraversable1) {
                                return function (dictContainer) {
                                    return function (dictContainer1) {
                                        return new Container(function () {
                                            return containerIProduct(dictContainer.ContainerI7())(dictContainer1.ContainerI7());
                                        }, function () {
                                            return Data_Functor_Product.eq1Product(dictContainer.Eq10())(dictContainer1.Eq10());
                                        }, function () {
                                            return eq1Product$prime(dictContainer.Eq10())(dictContainer.Eq11())(dictContainer1.Eq10())(dictContainer1.Eq11());
                                        }, function () {
                                            return functorProduct$prime(dictContainer.Functor9())(dictContainer.Functor8())(dictContainer1.Functor9())(dictContainer1.Functor8());
                                        }, function () {
                                            return Data_Functor_Product.functorProduct(dictContainer.Functor9())(dictContainer1.Functor9());
                                        }, function () {
                                            return Dhall_Core_Zippers_Merge.mergeProduct(dictContainer.Merge3())(dictContainer1.Merge3());
                                        }, function () {
                                            return mergeProduct$prime(dictContainer.Merge3())(dictContainer.Merge4())(dictContainer1.Merge3())(dictContainer1.Merge4());
                                        }, function () {
                                            return Data_Either.ordEither(dictContainer.Ord2())(dictContainer1.Ord2());
                                        }, function () {
                                            return traversableProduct$prime((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Traversable6())((dictContainer1.TraversableWithIndex5()).Traversable2())(dictContainer1.Traversable6());
                                        }, function () {
                                            return Data_Functor_Product.traversableWithIndexProduct(dictContainer.TraversableWithIndex5())(dictContainer1.TraversableWithIndex5());
                                        }, function (v) {
                                            return Data_Functor_Product.Product(new Data_Tuple.Tuple(Data_Functor.mapFlipped(dictContainer.Functor9())(downZF(dictContainer)(v.value0))(_contextZF(Data_Profunctor_Strong.strongFn)(function (cf) {
                                                return new Data_Either.Left(new Data_Tuple.Tuple(cf, v.value1));
                                            })), Data_Functor.mapFlipped(dictContainer1.Functor9())(downZF(dictContainer1)(v.value1))(_contextZF(Data_Profunctor_Strong.strongFn)(function (cg) {
                                                return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, cg));
                                            }))));
                                        }, function (v) {
                                            var v1 = Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
                                            if (v1 instanceof Data_Either.Left) {
                                                return Data_Functor_Product.product(upZF(dictContainer)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0.value0))))(v1.value0.value1);
                                            };
                                            if (v1 instanceof Data_Either.Right) {
                                                return Data_Functor_Product.product(v1.value0.value0)(upZF(dictContainer1)(new ZF(v.value0, Control_Applicative.pure(Data_Lazy.applicativeLazy)(v1.value0.value1))));
                                            };
                                            throw new Error("Failed pattern match at Dhall.Core.Zippers (line 419, column 23 - line 423, column 50): " + [ v1.constructor.name ]);
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var containerArray$prime = new Container(function () {
    return containerIProduct(containerIArray)(containerIArray);
}, function () {
    return eq1Array$prime;
}, function () {
    return eq1Product$prime(Data_Eq.eq1Array)(eq1Array$prime)(Data_Eq.eq1Array)(eq1Array$prime);
}, function () {
    return functorProduct$prime(Data_Functor.functorArray)(functorArray$prime)(Data_Functor.functorArray)(functorArray$prime);
}, function () {
    return functorArray$prime;
}, function () {
    return mergeArray$prime;
}, function () {
    return mergeProduct$prime(Dhall_Core_Zippers_Merge.mergeArray)(mergeArray$prime)(Dhall_Core_Zippers_Merge.mergeArray)(mergeArray$prime);
}, function () {
    return Data_Either.ordEither(Data_Ord.ordInt)(Data_Ord.ordInt);
}, function () {
    return traversableProduct$prime(Data_Traversable.traversableArray)(traversableArray$prime)(Data_Traversable.traversableArray)(traversableArray$prime);
}, function () {
    return traversableWithIndexArray$prime;
}, Data_Newtype.over(newtypeArray$prime)(newtypeArray$prime)(ArrayN)(downZF(containerProduct(Data_Eq.eq1Array)(Data_Eq.eq1Array)(functorArray$prime)(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers_Merge.mergeArray)(functorArray$prime)(Data_Traversable.traversableArray)(Data_Traversable.traversableArray)(containerArray)(containerArray))), (function () {
    var $629 = upZF(containerProduct(Data_Eq.eq1Array)(Data_Eq.eq1Array)(functorArray$prime)(Dhall_Core_Zippers_Merge.mergeArray)(Dhall_Core_Zippers_Merge.mergeArray)(functorArray$prime)(Data_Traversable.traversableArray)(Data_Traversable.traversableArray)(containerArray)(containerArray));
    return function ($630) {
        return ArrayN($629($630));
    };
})());
var containerCompose$prime = function (dictContainer) {
    return function (dictEq1) {
        return function (dictFunctor) {
            return function (dictTraversable) {
                return function (dictMerge) {
                    return function (dictContainer1) {
                        return function (dictEq11) {
                            return function (dictTraversable1) {
                                return function (dictMerge1) {
                                    return function (dictContainer2) {
                                        return function (dictFunctor1) {
                                            return new Container(function () {
                                                return containerIProduct(containerICompose(dictContainer.ContainerI7())(dictContainer1.ContainerI7()))(dictContainer2.ContainerI7());
                                            }, function () {
                                                return eq1Compose$prime(dictContainer.Eq10())(dictContainer1.Eq10())(dictContainer1.Eq11());
                                            }, function () {
                                                return eq1Product$prime(Data_Functor_Compose.eq1Compose(dictContainer.Eq10())(dictContainer1.Eq10()))(eq1Compose$prime(dictContainer.Eq11())(dictContainer1.Eq10())(dictContainer1.Eq11()))(dictContainer1.Eq11())(dictContainer2.Eq11());
                                            }, function () {
                                                return functorProduct$prime(Data_Functor_Compose.functorCompose(dictContainer.Functor9())(dictContainer1.Functor9()))(functorCompose$prime(dictContainer.Functor8())(dictContainer1.Functor9())(dictContainer1.Functor8()))(dictContainer1.Functor8())(dictContainer2.Functor8());
                                            }, function () {
                                                return functorCompose$prime(dictContainer.Functor9())(dictContainer1.Functor9())(dictContainer1.Functor8());
                                            }, function () {
                                                return mergeCompose$prime(dictContainer.Merge3())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer1.Merge3())(dictContainer1.Merge4());
                                            }, function () {
                                                return mergeProduct$prime(Dhall_Core_Zippers_Merge.mergeCompose((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3()))(mergeCompose$prime(dictContainer.Merge4())(dictContainer.Traversable6())(dictContainer1.Merge3())(dictContainer1.Merge4()))(dictContainer1.Merge4())(dictContainer2.Merge4());
                                            }, function () {
                                                return Data_Either.ordEither(Data_Tuple.ordTuple(dictContainer.Ord2())(dictContainer1.Ord2()))(dictContainer2.Ord2());
                                            }, function () {
                                                return traversableProduct$prime(Data_Functor_Compose.traversableCompose((dictContainer.TraversableWithIndex5()).Traversable2())((dictContainer1.TraversableWithIndex5()).Traversable2()))(traversableCompose$prime(dictContainer.Traversable6())((dictContainer1.TraversableWithIndex5()).Traversable2())(dictContainer1.Traversable6()))(dictContainer1.Traversable6())(dictContainer2.Traversable6());
                                            }, function () {
                                                return traversableWithIndexCompose$prime(dictContainer.TraversableWithIndex5())(dictContainer1.TraversableWithIndex5())(dictContainer2.TraversableWithIndex5());
                                            }, Data_Newtype.over(newtypeCompose$prime)(newtypeCompose$prime)(Compose$prime)(downZF(containerProduct(Data_Functor_Compose.eq1Compose(dictContainer.Eq10())(dictContainer1.Eq10()))(dictContainer1.Eq11())(functorCompose$prime(dictContainer.Functor8())(dictContainer1.Functor9())(dictContainer1.Functor8()))(Dhall_Core_Zippers_Merge.mergeCompose((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3()))(dictContainer1.Merge4())(dictContainer2.Functor8())(Data_Functor_Compose.traversableCompose((dictContainer.TraversableWithIndex5()).Traversable2())((dictContainer1.TraversableWithIndex5()).Traversable2()))(dictContainer1.Traversable6())(containerCompose(dictContainer.Eq10())(dictContainer1.Eq10())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3())(dictContainer.Functor8())(dictContainer1.Functor8())((dictContainer1.TraversableWithIndex5()).Traversable2())(dictContainer)(dictContainer1))(dictContainer2))), (function () {
                                                var $631 = upZF(containerProduct(Data_Functor_Compose.eq1Compose(dictContainer.Eq10())(dictContainer1.Eq10()))(dictContainer1.Eq11())(functorCompose$prime(dictContainer.Functor8())(dictContainer1.Functor9())(dictContainer1.Functor8()))(Dhall_Core_Zippers_Merge.mergeCompose((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3()))(dictContainer1.Merge4())(dictContainer2.Functor8())(Data_Functor_Compose.traversableCompose((dictContainer.TraversableWithIndex5()).Traversable2())((dictContainer1.TraversableWithIndex5()).Traversable2()))(dictContainer1.Traversable6())(containerCompose(dictContainer.Eq10())(dictContainer1.Eq10())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Merge3())(dictContainer1.Merge3())(dictContainer.Functor8())(dictContainer1.Functor8())((dictContainer1.TraversableWithIndex5()).Traversable2())(dictContainer)(dictContainer1))(dictContainer2));
                                                return function ($632) {
                                                    return Compose$prime($631($632));
                                                };
                                            })());
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var containerInsOrdMap$prime = function (dictOrd) {
    return new Container(function () {
        return containerIProduct(containerIConstVoid)(containerIProduct(containerIIOSM(dictOrd))(containerIIOSM(dictOrd)));
    }, function () {
        return eq1InsOrdMap$prime(dictOrd.Eq0());
    }, function () {
        return eq1Product$prime(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Const.eq1Const(Data_Eq.eqVoid))(Data_Functor_Product.eq1Product(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0())))(eq1Product$prime(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(eq1InsOrdMap$prime(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(eq1InsOrdMap$prime(dictOrd.Eq0())));
    }, function () {
        return functorProduct$prime(Data_Const.functorConst)(Data_Const.functorConst)(Data_Functor_Product.functorProduct(Dhall_Map.functorIOSM)(Dhall_Map.functorIOSM))(functorProduct$prime(Dhall_Map.functorIOSM)(functorInsOrdMap$prime)(Dhall_Map.functorIOSM)(functorInsOrdMap$prime));
    }, function () {
        return functorInsOrdMap$prime;
    }, function () {
        return mergeInsOrdMap$prime(dictOrd);
    }, function () {
        return mergeProduct$prime(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd)))(mergeProduct$prime(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(mergeInsOrdMap$prime(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(mergeInsOrdMap$prime(dictOrd)));
    }, function () {
        return Data_Either.ordEither(Data_Ord.ordVoid)(Data_Either.ordEither(dictOrd)(dictOrd));
    }, function () {
        return traversableProduct$prime(Data_Const.traversableConst)(Data_Const.traversableConst)(Data_Functor_Product.traversableProduct(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM))(traversableProduct$prime(Dhall_Map.traversableIOSM)(traversableInsOrdMap$prime)(Dhall_Map.traversableIOSM)(traversableInsOrdMap$prime));
    }, function () {
        return traversableWithIndexInsOrdMap$prime;
    }, Data_Newtype.over(newtypeInsOrdMap$prime)(newtypeInsOrdMap$prime)(InsOrdMap$prime)(downZF(containerProduct(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Functor_Product.eq1Product(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0())))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd)))(functorProduct$prime(Dhall_Map.functorIOSM)(functorInsOrdMap$prime)(Dhall_Map.functorIOSM)(functorInsOrdMap$prime))(Data_Const.traversableConst)(Data_Functor_Product.traversableProduct(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM))(containerConst(dictOrd.Eq0()))(containerProduct(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(functorInsOrdMap$prime)(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(functorInsOrdMap$prime)(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM)(containerIOSM(dictOrd))(containerIOSM(dictOrd))))), (function () {
        var $633 = upZF(containerProduct(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Functor_Product.eq1Product(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0())))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeProduct(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd)))(functorProduct$prime(Dhall_Map.functorIOSM)(functorInsOrdMap$prime)(Dhall_Map.functorIOSM)(functorInsOrdMap$prime))(Data_Const.traversableConst)(Data_Functor_Product.traversableProduct(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM))(containerConst(dictOrd.Eq0()))(containerProduct(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(Dhall_Map.eq1IOSM(dictOrd.Eq0()))(functorInsOrdMap$prime)(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(Dhall_Core_Zippers_Merge.mergeInsOrdMap(dictOrd))(functorInsOrdMap$prime)(Dhall_Map.traversableIOSM)(Dhall_Map.traversableIOSM)(containerIOSM(dictOrd))(containerIOSM(dictOrd))));
        return function ($634) {
            return InsOrdMap$prime($633($634));
        };
    })());
};
var containerMap$prime = function (dictOrd) {
    return new Container(function () {
        return containerIProduct(containerIConstVoid)(containerIMap);
    }, function () {
        return eq1Map$prime(dictOrd.Eq0());
    }, function () {
        return eq1Product$prime(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Const.eq1Const(Data_Eq.eqVoid))(Data_Map_Internal.eq1Map(dictOrd.Eq0()))(eq1Map$prime(dictOrd.Eq0()));
    }, function () {
        return functorProduct$prime(Data_Const.functorConst)(Data_Const.functorConst)(Data_Map_Internal.functorMap)(functorMap$prime);
    }, function () {
        return functorMap$prime;
    }, function () {
        return mergeMap$prime(dictOrd);
    }, function () {
        return mergeProduct$prime(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeConst(Data_Eq.eqVoid))(Dhall_Core_Zippers_Merge.mergeMap(dictOrd))(mergeMap$prime(dictOrd));
    }, function () {
        return Data_Either.ordEither(Data_Ord.ordVoid)(dictOrd);
    }, function () {
        return traversableProduct$prime(Data_Const.traversableConst)(Data_Const.traversableConst)(Data_Map_Internal.traversableMap)(traversableMap$prime);
    }, function () {
        return traversableWithIndexMap$prime;
    }, Data_Newtype.over(newtypeMap$prime)(newtypeMap$prime)(Map$prime)(downZF(containerProduct(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Map_Internal.eq1Map(dictOrd.Eq0()))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeMap(dictOrd))(functorMap$prime)(Data_Const.traversableConst)(Data_Map_Internal.traversableMap)(containerConst(dictOrd.Eq0()))(containerMap(dictOrd)))), (function () {
        var $635 = upZF(containerProduct(Data_Const.eq1Const(dictOrd.Eq0()))(Data_Map_Internal.eq1Map(dictOrd.Eq0()))(Data_Const.functorConst)(Dhall_Core_Zippers_Merge.mergeConst(dictOrd.Eq0()))(Dhall_Core_Zippers_Merge.mergeMap(dictOrd))(functorMap$prime)(Data_Const.traversableConst)(Data_Map_Internal.traversableMap)(containerConst(dictOrd.Eq0()))(containerMap(dictOrd)));
        return function ($636) {
            return Map$prime($635($636));
        };
    })());
};
var containerProduct$prime = function (dictContainer) {
    return function (dictEq1) {
        return function (dictTraversable) {
            return function (dictMerge) {
                return function (dictContainer1) {
                    return function (dictFunctor) {
                        return function (dictContainer2) {
                            return function (dictEq11) {
                                return function (dictTraversable1) {
                                    return function (dictMerge1) {
                                        return function (dictContainer3) {
                                            return function (dictFunctor1) {
                                                return new Container(function () {
                                                    return containerICoproduct(containerIProduct(dictContainer1.ContainerI7())(dictContainer2.ContainerI7()))(containerIProduct(dictContainer.ContainerI7())(dictContainer3.ContainerI7()));
                                                }, function () {
                                                    return eq1Product$prime(dictContainer.Eq10())(dictContainer.Eq11())(dictContainer2.Eq10())(dictContainer2.Eq11());
                                                }, function () {
                                                    return Data_Functor_Coproduct.eq1Coproduct(eq1Product$prime(dictContainer.Eq11())(dictContainer1.Eq11())(dictContainer2.Eq10())(dictContainer2.Eq11()))(eq1Product$prime(dictContainer.Eq10())(dictContainer.Eq11())(dictContainer2.Eq11())(dictContainer3.Eq11()));
                                                }, function () {
                                                    return Data_Functor_Coproduct.functorCoproduct(functorProduct$prime(dictContainer.Functor8())(dictContainer1.Functor8())(dictContainer2.Functor9())(dictContainer2.Functor8()))(functorProduct$prime(dictContainer.Functor9())(dictContainer.Functor8())(dictContainer2.Functor8())(dictContainer3.Functor8()));
                                                }, function () {
                                                    return functorProduct$prime(dictContainer.Functor9())(dictContainer.Functor8())(dictContainer2.Functor9())(dictContainer2.Functor8());
                                                }, function () {
                                                    return mergeProduct$prime(dictContainer.Merge3())(dictContainer.Merge4())(dictContainer2.Merge3())(dictContainer2.Merge4());
                                                }, function () {
                                                    return Dhall_Core_Zippers_Merge.mergeCoproduct(mergeProduct$prime(dictContainer.Merge4())(dictContainer1.Merge4())(dictContainer2.Merge3())(dictContainer2.Merge4()))(mergeProduct$prime(dictContainer.Merge3())(dictContainer.Merge4())(dictContainer2.Merge4())(dictContainer3.Merge4()));
                                                }, function () {
                                                    return Data_Either.ordEither(Data_Either.ordEither(dictContainer1.Ord2())(dictContainer2.Ord2()))(Data_Either.ordEither(dictContainer.Ord2())(dictContainer3.Ord2()));
                                                }, function () {
                                                    return Data_Functor_Coproduct.traversableCoproduct(traversableProduct$prime(dictContainer.Traversable6())(dictContainer1.Traversable6())((dictContainer2.TraversableWithIndex5()).Traversable2())(dictContainer2.Traversable6()))(traversableProduct$prime((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer.Traversable6())(dictContainer2.Traversable6())(dictContainer3.Traversable6()));
                                                }, function () {
                                                    return traversableWithIndexProduct$prime(dictContainer.TraversableWithIndex5())(dictContainer1.TraversableWithIndex5())(dictContainer2.TraversableWithIndex5())(dictContainer3.TraversableWithIndex5());
                                                }, Data_Newtype.over(newtypeProduct$prime)(newtypeProduct$prime)(Product$prime)(downZF(containerCoproduct(Data_Functor_Product.eq1Product(dictContainer.Eq11())(dictContainer2.Eq10()))(Data_Functor_Product.eq1Product(dictContainer.Eq10())(dictContainer2.Eq11()))(Dhall_Core_Zippers_Merge.mergeProduct(dictContainer.Merge4())(dictContainer2.Merge3()))(Dhall_Core_Zippers_Merge.mergeProduct(dictContainer.Merge3())(dictContainer2.Merge4()))(functorProduct$prime(dictContainer.Functor8())(dictContainer1.Functor8())(dictContainer2.Functor9())(dictContainer2.Functor8()))(functorProduct$prime(dictContainer.Functor9())(dictContainer.Functor8())(dictContainer2.Functor8())(dictContainer3.Functor8()))(containerProduct(dictContainer.Eq11())(dictContainer2.Eq10())(dictContainer1.Functor8())(dictContainer.Merge4())(dictContainer2.Merge3())(dictContainer2.Functor8())(dictContainer.Traversable6())((dictContainer2.TraversableWithIndex5()).Traversable2())(dictContainer1)(dictContainer2))(containerProduct(dictContainer.Eq10())(dictContainer2.Eq11())(dictContainer.Functor8())(dictContainer.Merge3())(dictContainer2.Merge4())(dictContainer3.Functor8())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer2.Traversable6())(dictContainer)(dictContainer3)))), (function () {
                                                    var $637 = upZF(containerCoproduct(Data_Functor_Product.eq1Product(dictContainer.Eq11())(dictContainer2.Eq10()))(Data_Functor_Product.eq1Product(dictContainer.Eq10())(dictContainer2.Eq11()))(Dhall_Core_Zippers_Merge.mergeProduct(dictContainer.Merge4())(dictContainer2.Merge3()))(Dhall_Core_Zippers_Merge.mergeProduct(dictContainer.Merge3())(dictContainer2.Merge4()))(functorProduct$prime(dictContainer.Functor8())(dictContainer1.Functor8())(dictContainer2.Functor9())(dictContainer2.Functor8()))(functorProduct$prime(dictContainer.Functor9())(dictContainer.Functor8())(dictContainer2.Functor8())(dictContainer3.Functor8()))(containerProduct(dictContainer.Eq11())(dictContainer2.Eq10())(dictContainer1.Functor8())(dictContainer.Merge4())(dictContainer2.Merge3())(dictContainer2.Functor8())(dictContainer.Traversable6())((dictContainer2.TraversableWithIndex5()).Traversable2())(dictContainer1)(dictContainer2))(containerProduct(dictContainer.Eq10())(dictContainer2.Eq11())(dictContainer.Functor8())(dictContainer.Merge3())(dictContainer2.Merge4())(dictContainer3.Functor8())((dictContainer.TraversableWithIndex5()).Traversable2())(dictContainer2.Traversable6())(dictContainer)(dictContainer3)));
                                                    return function ($638) {
                                                        return Product$prime($637($638));
                                                    };
                                                })());
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    downZF: downZF,
    downZFVRL: downZFVRL,
    ixF: ixF,
    ixFVRL: ixFVRL,
    mapWithIndexVRL: mapWithIndexVRL,
    upZF: upZF,
    upZFVRL: upZFVRL,
    ContainerI: ContainerI,
    Container: Container,
    mapWithIndexV: mapWithIndexV,
    FunctorWithIndexVRL: FunctorWithIndexVRL,
    ixFV: ixFV,
    ContainerIVRL: ContainerIVRL,
    upZFV: upZFV,
    downZFV: downZFV,
    ContainerVRL: ContainerVRL,
    injector: injector,
    deferAp: deferAp,
    ZF: ZF,
    aroundZF: aroundZF,
    ixZF: ixZF,
    "_ix": _ix,
    previewIndexZF: previewIndexZF,
    unsafeGetIndexZF: unsafeGetIndexZF,
    "_contextZF": _contextZF,
    "_contextZF'": _contextZF$prime,
    "_focusZF": _focusZF,
    "_ix_wholeZF": _ix_wholeZF,
    ZF4: ZF4,
    zf4: zf4,
    unZF4: unZF4,
    upZF4: upZF4,
    downZF4: downZF4,
    ixZF4: ixZF4,
    previewIndexZF4: previewIndexZF4,
    unsafeGetIndexZF4: unsafeGetIndexZF4,
    "_contextZF4": _contextZF4,
    "_contextZF4'": _contextZF4$prime,
    "_focusZF4": _focusZF4,
    "_ix_wholeZF4": _ix_wholeZF4,
    "Product'": Product$prime,
    "Compose'": Compose$prime,
    "NonEmpty'": NonEmpty$prime,
    ArrayN: ArrayN,
    arrayN: arrayN,
    "Map'": Map$prime,
    "InsOrdMap'": InsOrdMap$prime,
    functorWithIndexVRLNil: functorWithIndexVRLNil,
    functorWithIndexVRLCons: functorWithIndexVRLCons,
    containerIVRLNil: containerIVRLNil,
    containerIVRLCons: containerIVRLCons,
    containerVRLNil: containerVRLNil,
    containerVRLCons: containerVRLCons,
    functorZF: functorZF,
    extendZF: extendZF,
    comonadZF: comonadZF,
    newtypeZF4: newtypeZF4,
    functorZF4: functorZF4,
    extendZF4: extendZF4,
    comonadZF4: comonadZF4,
    foldableZF4: foldableZF4,
    traversableZF4: traversableZF4,
    functorWithIndexZF4: functorWithIndexZF4,
    foldableWithIndexZF4: foldableWithIndexZF4,
    traversableWithIndexZF4: traversableWithIndexZF4,
    containerIConstVoid: containerIConstVoid,
    containerIConst: containerIConst,
    containerIIdentity: containerIIdentity,
    containerConst: containerConst,
    containerIdentity: containerIdentity,
    containerICoproduct: containerICoproduct,
    containerCoproduct: containerCoproduct,
    "newtypeProduct'": newtypeProduct$prime,
    "eqProduct'": eqProduct$prime,
    "ordProduct'": ordProduct$prime,
    "eq1Product'": eq1Product$prime,
    "ord1Product'": ord1Product$prime,
    "functorProduct'": functorProduct$prime,
    "foldableProduct'": foldableProduct$prime,
    "traversableProduct'": traversableProduct$prime,
    "mergeProduct'": mergeProduct$prime,
    "functorWithIndexProduct'": functorWithIndexProduct$prime,
    "foldableWithIndexProduct'": foldableWithIndexProduct$prime,
    "traversableWithIndexProduct'": traversableWithIndexProduct$prime,
    "containerProduct'": containerProduct$prime,
    containerIProduct: containerIProduct,
    containerProduct: containerProduct,
    "newtypeCompose'": newtypeCompose$prime,
    "eqCompose'": eqCompose$prime,
    "ordCompose'": ordCompose$prime,
    "eq1Compose'": eq1Compose$prime,
    "ord1Compose'": ord1Compose$prime,
    "functorCompose'": functorCompose$prime,
    "foldableCompose'": foldableCompose$prime,
    "traversableCompose'": traversableCompose$prime,
    "mergeCompose'": mergeCompose$prime,
    "functorWithIndexCompose'": functorWithIndexCompose$prime,
    "foldableWithIndexCompose'": foldableWithIndexCompose$prime,
    "traversableWithIndexCompose'": traversableWithIndexCompose$prime,
    "containerCompose'": containerCompose$prime,
    containerICompose: containerICompose,
    containerCompose: containerCompose,
    containerMaybe: containerMaybe,
    containerEither: containerEither,
    containerTuple: containerTuple,
    "newtypeNonEmpty'": newtypeNonEmpty$prime,
    "eqNonEmpty'": eqNonEmpty$prime,
    "ordNonEmpty'": ordNonEmpty$prime,
    "eq1NonEmpty'": eq1NonEmpty$prime,
    "ord1NonEmpty'": ord1NonEmpty$prime,
    "functorNonEmpty'": functorNonEmpty$prime,
    "foldableNonEmpty'": foldableNonEmpty$prime,
    "traversableNonEmpty'": traversableNonEmpty$prime,
    "mergeNonEmpty'": mergeNonEmpty$prime,
    containerNonEmpty: containerNonEmpty,
    containerINonEmpty: containerINonEmpty,
    "newtypeArray'": newtypeArray$prime,
    "eqArray'": eqArray$prime,
    "ordArray'": ordArray$prime,
    "eq1Array'": eq1Array$prime,
    "ord1Array'": ord1Array$prime,
    "functorArray'": functorArray$prime,
    "foldableArray'": foldableArray$prime,
    "traversableArray'": traversableArray$prime,
    "functorWithIndexArray'": functorWithIndexArray$prime,
    "foldableWithIndexArray'": foldableWithIndexArray$prime,
    "traversableWithIndexArray'": traversableWithIndexArray$prime,
    "mergeArray'": mergeArray$prime,
    "containerArray'": containerArray$prime,
    containerIArray: containerIArray,
    containerArray: containerArray,
    containerNonEmptyArray: containerNonEmptyArray,
    "newtypeMap'": newtypeMap$prime,
    "eqMap'": eqMap$prime,
    "ordMap'": ordMap$prime,
    "eq1Map'": eq1Map$prime,
    "ord1Map'": ord1Map$prime,
    "functorMap'": functorMap$prime,
    "foldableMap'": foldableMap$prime,
    "traversableMap'": traversableMap$prime,
    "functorWithIndexMap'": functorWithIndexMap$prime,
    "foldableWithIndexMap'": foldableWithIndexMap$prime,
    "traversableWithIndexMap'": traversableWithIndexMap$prime,
    "mergeMap'": mergeMap$prime,
    "containerMap'": containerMap$prime,
    containerIMap: containerIMap,
    containerMap: containerMap,
    "newtypeInsOrdMap'": newtypeInsOrdMap$prime,
    "eqInsOrdMap'": eqInsOrdMap$prime,
    "ordInsOrdMap'": ordInsOrdMap$prime,
    "eq1InsOrdMap'": eq1InsOrdMap$prime,
    "ord1InsOrdMap'": ord1InsOrdMap$prime,
    "functorInsOrdMap'": functorInsOrdMap$prime,
    "foldableInsOrdMap'": foldableInsOrdMap$prime,
    "traversableInsOrdMap'": traversableInsOrdMap$prime,
    "mergeInsOrdMap'": mergeInsOrdMap$prime,
    "functorWithIndexInsOrdMap'": functorWithIndexInsOrdMap$prime,
    "foldableWithIndexInsOrdMap'": foldableWithIndexInsOrdMap$prime,
    "traversableWithIndexInsOrdMap'": traversableWithIndexInsOrdMap$prime,
    "containerInsOrdMap'": containerInsOrdMap$prime,
    containerIIOSM: containerIIOSM,
    containerIOSM: containerIOSM
};

},{"../Control.Applicative/index.js":17,"../Control.Category/index.js":24,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Data.Array.NonEmpty.Internal/index.js":85,"../Data.Array.NonEmpty/index.js":86,"../Data.Array/index.js":91,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Coproduct/index.js":136,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Identity/index.js":150,"../Data.Lazy/index.js":156,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Indexed/index.js":159,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Re/index.js":165,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Iso/index.js":170,"../Data.Lens.Lens/index.js":173,"../Data.Lens.Prism/index.js":175,"../Data.Lens.Traversal/index.js":178,"../Data.Map.Internal/index.js":184,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Variant/index.js":259,"../Data.Void/index.js":260,"../Dhall.Core.Zippers.Merge/index.js":272,"../Dhall.Map/index.js":284,"../Type.Data.RowList/index.js":387}],275:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Lens_Tuple = require("../Data.Lens.Lens.Tuple/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Core_AST_Noted = require("../Dhall.Core.AST.Noted/index.js");
var Dhall_Core_AST_Operations_Location = require("../Dhall.Core.AST.Operations.Location/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Core_Imports_Types = require("../Dhall.Core.Imports.Types/index.js");
var Dhall_Core_Zippers = require("../Dhall.Core.Zippers/index.js");
var Dhall_Core_Zippers_Recursive = require("../Dhall.Core.Zippers.Recursive/index.js");
var Dhall_Interactive_Halogen_AST = require("../Dhall.Interactive.Halogen.AST/index.js");
var Dhall_Interactive_Halogen_AST_Tree = require("../Dhall.Interactive.Halogen.AST.Tree/index.js");
var Dhall_Interactive_Halogen_Icons = require("../Dhall.Interactive.Halogen.Icons/index.js");
var Dhall_Interactive_Halogen_Inputs = require("../Dhall.Interactive.Halogen.Inputs/index.js");
var Dhall_Lib_Timeline = require("../Dhall.Lib.Timeline/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Dhall_Parser = require("../Dhall.Parser/index.js");
var Dhall_TypeCheck = require("../Dhall.TypeCheck/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Validation_These = require("../Validation.These/index.js");
var Select = (function () {
    function Select(value0) {
        this.value0 = value0;
    };
    Select.create = function (value0) {
        return new Select(value0);
    };
    return Select;
})();
var Un_Focus = (function () {
    function Un_Focus(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Un_Focus.create = function (value0) {
        return function (value1) {
            return new Un_Focus(value0, value1);
        };
    };
    return Un_Focus;
})();
var SetSelection = (function () {
    function SetSelection(value0) {
        this.value0 = value0;
    };
    SetSelection.create = function (value0) {
        return new SetSelection(value0);
    };
    return SetSelection;
})();
var SetView = (function () {
    function SetView(value0) {
        this.value0 = value0;
    };
    SetView.create = function (value0) {
        return new SetView(value0);
    };
    return SetView;
})();
var NoGlobalActions = (function () {
    function NoGlobalActions(value0) {
        this.value0 = value0;
    };
    NoGlobalActions.create = function (value0) {
        return new NoGlobalActions(value0);
    };
    return NoGlobalActions;
})();
var $$Set = (function () {
    function $$Set(value0) {
        this.value0 = value0;
    };
    $$Set.create = function (value0) {
        return new $$Set(value0);
    };
    return $$Set;
})();
var Undo = (function () {
    function Undo() {

    };
    Undo.value = new Undo();
    return Undo;
})();
var Redo = (function () {
    function Redo() {

    };
    Redo.value = new Redo();
    return Redo;
})();
var NewView = (function () {
    function NewView(value0) {
        this.value0 = value0;
    };
    NewView.create = function (value0) {
        return new NewView(value0);
    };
    return NewView;
})();
var DeleteView = (function () {
    function DeleteView() {

    };
    DeleteView.value = new DeleteView();
    return DeleteView;
})();
var EditAction = (function () {
    function EditAction(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    EditAction.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new EditAction(value0, value1, value2);
            };
        };
    };
    return EditAction;
})();
var Output = (function () {
    function Output(value0) {
        this.value0 = value0;
    };
    Output.create = function (value0) {
        return new Output(value0);
    };
    return Output;
})();
var Check = (function () {
    function Check(value0) {
        this.value0 = value0;
    };
    Check.create = function (value0) {
        return new Check(value0);
    };
    return Check;
})();
var UserInput = (function () {
    function UserInput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UserInput.create = function (value0) {
        return function (value1) {
            return new UserInput(value0, value1);
        };
    };
    return UserInput;
})();
var ViewInitialize = (function () {
    function ViewInitialize(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ViewInitialize.create = function (value0) {
        return function (value1) {
            return new ViewInitialize(value0, value1);
        };
    };
    return ViewInitialize;
})();
var ViewAction = (function () {
    function ViewAction(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ViewAction.create = function (value0) {
        return function (value1) {
            return new ViewAction(value0, value1);
        };
    };
    return ViewAction;
})();
var Raise = (function () {
    function Raise(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Raise.create = function (value0) {
        return function (value1) {
            return new Raise(value0, value1);
        };
    };
    return Raise;
})();
var Receive = (function () {
    function Receive(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Receive.create = function (value0) {
        return function (value1) {
            return new Receive(value0, value1);
        };
    };
    return Receive;
})();
var unWriterT = function (dictFunctor) {
    var $165 = Data_Functor.map(dictFunctor)(Data_Tuple.fst);
    return function ($166) {
        return $165(Control_Monad_Writer_Trans.runWriterT($166));
    };
};
var tagERVFI = (function () {
    var binop = function (v) {
        if (v) {
            return "R";
        };
        return "L";
    };
    var $167 = Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()({
        BoolLit: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalLit: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        IntegerLit: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        DoubleLit: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Bool: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Natural: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Integer: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Double: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Text: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        List: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Optional: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Const: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalFold: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalBuild: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalIsZero: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalEven: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalOdd: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalToInteger: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalShow: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        NaturalSubtract: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        IntegerShow: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        IntegerToDouble: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        DoubleShow: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListBuild: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListFold: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListLength: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListHead: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListLast: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListIndexed: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        ListReverse: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        OptionalFold: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        OptionalBuild: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        TextShow: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        TextLit: function (i) {
            return "interp@" + Data_Show.show(Data_Natural.showNatural)(i);
        },
        ListLit: Data_Either.either(function (v) {
            return "type";
        })(function (i) {
            return "value@" + Data_Show.show(Data_Show.showInt)(i);
        }),
        Some: function (v) {
            return "value";
        },
        None: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        RecordLit: function (v) {
            return "values@" + Data_Show.show(Data_Show.showString)(v);
        },
        Record: function (v) {
            return "types@" + Data_Show.show(Data_Show.showString)(v);
        },
        Union: function (v) {
            return "types@" + Data_Show.show(Data_Show.showString)(v.value0);
        },
        BoolAnd: binop,
        BoolOr: binop,
        BoolEQ: binop,
        BoolNE: binop,
        NaturalPlus: binop,
        NaturalTimes: binop,
        TextAppend: binop,
        ListAppend: binop,
        Combine: binop,
        CombineTypes: binop,
        Prefer: binop,
        ImportAlt: binop,
        UsingHeaders: binop,
        Equivalent: binop,
        Hashed: function (v) {
            return "expr";
        },
        BoolIf: function (v) {
            if (v instanceof Dhall_Core_AST_Types_Basics.Three1) {
                return "if";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three2) {
                return "then";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three3) {
                return "else";
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 420, column 15 - line 423, column 23): " + [ v.constructor.name ]);
        },
        Field: function (v) {
            return "expr";
        },
        Project: function (v) {
            if (v instanceof Data_Either.Left) {
                return "expr";
            };
            if (v instanceof Data_Either.Right) {
                return "fields";
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 425, column 16 - line 427, column 36): " + [ v.constructor.name ]);
        },
        Merge: function (v) {
            if (v instanceof Dhall_Core_AST_Types_Basics.Three1) {
                return "handlers";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three2) {
                return "arg";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three3) {
                return "type";
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 428, column 14 - line 431, column 23): " + [ v.constructor.name ]);
        },
        ToMap: function (v) {
            if (v instanceof Data_Either.Left) {
                return "expr";
            };
            if (v instanceof Data_Either.Right) {
                return "type";
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 432, column 14 - line 434, column 34): " + [ v.constructor.name ]);
        },
        Assert: function (v) {
            return "assertion";
        },
        App: (function () {
            var $170 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            return function ($171) {
                return (function (v) {
                    if (v) {
                        return "fn";
                    };
                    return "arg";
                })($170($171));
            };
        })(),
        Annot: (function () {
            var $172 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            return function ($173) {
                return (function (v) {
                    if (v) {
                        return "value";
                    };
                    return "type";
                })($172($173));
            };
        })(),
        Lam: (function () {
            var $174 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            return function ($175) {
                return (function (v) {
                    if (v) {
                        return "type";
                    };
                    return "body";
                })($174($175));
            };
        })(),
        Pi: (function () {
            var $176 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            return function ($177) {
                return (function (v) {
                    if (v) {
                        return "type";
                    };
                    return "body";
                })($176($177));
            };
        })(),
        Let: function (v) {
            if (v instanceof Dhall_Core_AST_Types_Basics.Three1) {
                return "type";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three2) {
                return "value";
            };
            if (v instanceof Dhall_Core_AST_Types_Basics.Three3) {
                return "body";
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 440, column 12 - line 443, column 23): " + [ v.constructor.name ]);
        },
        Var: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd),
        Embed: Control_Category.identity(Control_Category.categoryFn)(Data_Void.absurd)
    });
    var $168 = Data_Newtype.un(Dhall_Core_AST_Types.newtypeERVFI)(Dhall_Core_AST_Types.ERVFI);
    return function ($169) {
        return $167($168($169));
    };
})();
var renderReference = function (v) {
    if (v instanceof Dhall_TypeCheck.Text) {
        return Halogen_HTML_Core.text(v.value0);
    };
    if (v instanceof Dhall_TypeCheck.Br) {
        return Halogen_HTML_Elements.br_;
    };
    if (v instanceof Dhall_TypeCheck.Href) {
        return Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href(v.value0) ])([ Halogen_HTML_Core.text(v.value1) ]);
    };
    if (v instanceof Dhall_TypeCheck.Reference) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference") ])([ v.value0 ]);
    };
    if (v instanceof Dhall_TypeCheck.List) {
        return Halogen_HTML_Elements.ol([ Halogen_HTML_Properties.class_("reference-list") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.value0)(function (a) {
            return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.class_("reference-item") ])([ renderReference(a) ]);
        }));
    };
    if (v instanceof Dhall_TypeCheck.Compare) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-left") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-title") ])([ Halogen_HTML_Core.text(v.value0) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-body") ])([ v.value1 ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-right") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-title") ])([ Halogen_HTML_Core.text(v.value2) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("reference-compare-body") ])([ v.value3 ]) ]) ]);
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 343, column 19 - line 359, column 6): " + [ v.constructor.name ]);
};
var renderReferences = function (renderA) {
    return function (as) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("references") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
            var $178 = Data_Functor.map(Dhall_TypeCheck.functorReference)(renderA);
            return function ($179) {
                return renderReference($178($179));
            };
        })())(as));
    };
};
var renderERVFI = function (ervfi) {
    return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("index") ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("type") ])([ Halogen_HTML_Core.text(ervfi.type) ]), Halogen_HTML_Core.text(" "), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("tag") ])([ Halogen_HTML_Core.text(tagERVFI(ervfi)) ]) ]);
};
var renderLoc = function (loc) {
    return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("location") ])(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidArray)([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("breadcrumb-sep") ])([  ]) ])(Control_Alt.alt(Data_List_Types.altList)(Control_Applicative.pure(Data_List_Types.applicativeList)(Control_Applicative.pure(Control_Applicative.applicativeArray)(Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("home")("Top of expression"))))(Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList)(function (i) {
        var $180 = Control_Applicative.pure(Control_Applicative.applicativeArray);
        var $181 = Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()({
            within: Data_Function.apply(renderERVFI),
            alphaNormalize: function (v) {
                return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("underline")("Alpha normalized");
            },
            normalize: function (v) {
                return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("cpu")("Normalized");
            },
            typecheck: function (v) {
                return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("type")("Typechecked");
            },
            shift: function (v) {
                return Halogen_HTML_Core.text("\u2191(" + (Data_Show.show(Dhall_Core_AST_Types.showVar)(v.variable) + (", " + (Data_Show.show(Data_Show.showInt)(v.delta) + ")"))));
            },
            substitute: function (v) {
                return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("cloud-snow")("After Substitution");
            }
        });
        return function ($182) {
            return $180($181($182));
        };
    })(Data_List.reverse(loc)))));
};
var renderErrorRef = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Halogen_HTML_Core.text("(missing)");
    };
    if (v instanceof Data_Maybe.Just) {
        var v1 = Control_Comonad.extract(Data_List_Types.comonadNonEmptyList)(Dhall_TypeCheck.topLoc(v.value0));
        if (v1.value1 instanceof Data_Maybe.Nothing) {
            return Halogen_HTML_Elements.div_([ renderLoc(v1.value0), Data_Newtype.un(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML)(Data_Functor.mapFlipped(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Dhall_Interactive_Halogen_AST_Tree.renderExprWith(Dhall_Core_Imports_Types.showImport)({
                interactive: false,
                editable: false
            })(Data_Monoid.mempty(Dhall_Interactive_Halogen_AST_Tree.monoidCustomize))(Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                return "collapsed";
            }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))))(Dhall_TypeCheck.plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(v.value0))))((function () {
                var $183 = ViewAction.create(Data_Unit.unit);
                var $184 = Data_Bifoldable.bifoldMap(Data_These.bifoldableThese)(Data_Monoid.monoidArray)(Control_Applicative.pure(Control_Applicative.applicativeArray))((function () {
                    var $186 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                    return function ($187) {
                        return $186(SetView.create($187));
                    };
                })());
                return function ($185) {
                    return $183($184($185));
                };
            })())) ]);
        };
        if (v1.value1 instanceof Data_Maybe.Just) {
            return Halogen_HTML_Elements.div_([ Data_Newtype.un(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML)(Data_Functor.mapFlipped(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Dhall_Interactive_Halogen_AST_Tree.renderExprWith(Dhall_Core_Imports_Types.showImport)({
                interactive: false,
                editable: false
            })(Data_Monoid.mempty(Dhall_Interactive_Halogen_AST_Tree.monoidCustomize))(Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                return "collapsed";
            }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))))(Dhall_TypeCheck.plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(v.value0))))((function () {
                var $188 = ViewAction.create(Data_Unit.unit);
                var $189 = Data_Bifoldable.bifoldMap(Data_These.bifoldableThese)(Data_Monoid.monoidArray)(Control_Applicative.pure(Control_Applicative.applicativeArray))((function () {
                    var $191 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                    return function ($192) {
                        return $191(SetView.create($192));
                    };
                })());
                return function ($190) {
                    return $188($189($190));
                };
            })())) ]);
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 316, column 30 - line 328, column 6): " + [ v1.constructor.name ]);
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 312, column 1 - line 314, column 42): " + [ v.constructor.name ]);
};
var renderLocation = function (loc) {
    return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("location") ])(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidArray)([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("breadcrumb-sep") ])([  ]) ])((function () {
        var len = Data_List.length(loc);
        return Control_Alt.alt(Data_List_Types.altList)(Control_Applicative.pure(Data_List_Types.applicativeList)(Control_Applicative.pure(Control_Applicative.applicativeArray)(Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(len))("home")("Top of expression"))))(Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList)(function (i) {
            var $193 = Control_Applicative.pure(Control_Applicative.applicativeArray);
            var $194 = (function () {
                var act = new Data_Maybe.Just((len - i | 0) - 1 | 0);
                return Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()({
                    within: (function () {
                        var $196 = Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(act)) ]);
                        var $197 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                        return function ($198) {
                            return $196($197(renderERVFI($198)));
                        };
                    })(),
                    alphaNormalize: function (v) {
                        return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(act)("underline")("Alpha normalized");
                    },
                    normalize: function (v) {
                        return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(act)("cpu")("Normalized");
                    },
                    typecheck: function (v) {
                        return Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(act)("type")("Typechecked");
                    }
                });
            })();
            return function ($195) {
                return $193($194($195));
            };
        })(Data_List.reverse(loc)));
    })()));
};
var hole = Control_Applicative.pure(Dhall_Core_AST_Types.applicativeExpr)(Data_Maybe.Nothing.value);
var tpi = function (v) {
    return hole;
};
var _ixes_Ann = function (dictTraversableWithIndex) {
    return function (v) {
        return function (dictWander) {
            if (v instanceof Data_List_Types.Nil) {
                return Control_Category.identity(Control_Category.categoryFn);
            };
            if (v instanceof Data_List_Types.Cons) {
                var $199 = Dhall_Core_Zippers_Recursive["_recurse"](Dhall_Core_AST_Noted.recursiveExpr)(Dhall_Core_AST_Noted.corecursiveExpr)((dictWander.Choice1()).Profunctor0());
                var $200 = Data_Lens_Iso_Newtype["_Newtype"](Control_Comonad_Env_Trans.newtypeEnvT)(Control_Comonad_Env_Trans.newtypeEnvT)((dictWander.Choice1()).Profunctor0());
                var $201 = Data_Lens_Lens_Tuple["_2"](dictWander.Strong0());
                var $202 = Dhall_Core_Zippers["_ix"](Dhall_Core_AST_Types.traversableWithIndexERVF(dictTraversableWithIndex))(Dhall_Core_AST_Types.eqERVFI)(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0))(dictWander);
                var $203 = _ixes_Ann(dictTraversableWithIndex)(v.value1)(dictWander);
                return function ($204) {
                    return $199($200($201($202($203($204)))));
                };
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 163, column 1 - line 164, column 56): " + [ v.constructor.name ]);
        };
    };
};
var viewer = (function () {
    var renderInfo = function (st) {
        var steps = Data_Functor.map(Data_List_Types.functorList)(Data_Variant.expand())(st.view);
        var base = Dhall_TypeCheck.oneStopShop(Dhall_Map.strMapIshIOSM(Data_Ord.ordString))(Data_Maybe.eqMaybe(Dhall_Core_Imports_Types.eqImport))(Data_Maybe.showMaybe(Dhall_Core_Imports_Types.showImport))((function () {
            var $205 = Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring));
            return function ($206) {
                return $205(tpi($206));
            };
        })())(Dhall_Core_AST_Noted.denote(st.value));
        var to = unWriterT(Validation_These.functorErroring)(base.locate(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(steps, Data_Maybe.Nothing.value))));
        var $$typeof = Control_Bind.bindFlipped(Validation_These.bindErroring)((function () {
            var $207 = unWriterT(Validation_These.functorErroring);
            return function ($208) {
                return $207(Dhall_TypeCheck.typecheckStep($208));
            };
        })())(to);
        var window = Data_Functor.map(Validation_These.functorErroring)((function () {
            var $209 = Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                return "collapsed";
            }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))));
            var $210 = Dhall_TypeCheck.plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(Dhall_TypeCheck.functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
            return function ($211) {
                return $209($210($211));
            };
        })())(to);
        return {
            st: st,
            window: window,
            oxpr: base.oxpr,
            explain: base.explain,
            editable: Data_Maybe.isJust(Dhall_Core_AST_Operations_Location.allWithin(st.view)),
            exists: Data_Foldable.any(Validation_These.foldableErroring)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_HeytingAlgebra.tt(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(window),
            typechecks: Data_Foldable.any(Validation_These.foldableErroring)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_HeytingAlgebra.tt(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))($$typeof)
        };
    };
    var render = function (r) {
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("expr-viewer") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("header") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new Raise(Data_Unit.unit, DeleteView.value)))("x-square")("Close this view"), Halogen_HTML_Core.text(" "), Data_Functor.mapFlipped(Halogen_HTML_Core.functorHTML)(renderLocation(r.st.view))(function (i) {
            return new ViewAction(Data_Unit.unit, [ new Un_Focus(i, Control_Plus.empty(Data_List_Types.plusList)) ]);
        }) ]), (function () {
            if (r.window instanceof Validation_These.Success) {
                return Data_Newtype.un(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML)((function () {
                    var selectHere = Dhall_Interactive_Halogen_AST_Tree.mkActions((function () {
                        var $212 = Control_Comonad.extract(Data_Tuple.comonadTuple);
                        var $213 = Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF));
                        var $214 = Data_Newtype.unwrap(Dhall_Core_AST_Noted.newtypeExpr);
                        return function ($215) {
                            return (function (i) {
                                var here = Data_Functor.map(Data_List_Types.functorList)((function () {
                                    var $216 = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "within";
                                    }))(Dhall_Core_AST_Types_Basics["_S"]);
                                    var $217 = Control_Comonad.extract(Data_Lazy.comonadLazy);
                                    return function ($218) {
                                        return $216($217($218));
                                    };
                                })())(i);
                                var focus = function (loc) {
                                    return new Data_Maybe.Just(function (v) {
                                        return Data_These.This.create(new Un_Focus(0, loc));
                                    });
                                };
                                return [ {
                                    icon: "at-sign",
                                    action: focus(here),
                                    tooltip: "Move view here"
                                }, {
                                    icon: "cpu",
                                    action: focus(new Data_List_Types.Cons(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "normalize";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])({}), here)),
                                    tooltip: "View this node, normalized"
                                }, {
                                    icon: "type",
                                    action: focus(new Data_List_Types.Cons(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "typecheck";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])({}), here)),
                                    tooltip: "View the type of this node"
                                }, {
                                    icon: "underline",
                                    action: focus(new Data_List_Types.Cons(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "alphaNormalize";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])({}), here)),
                                    tooltip: "Alpha normalized"
                                } ];
                            })($212($213($214($215))));
                        };
                    })());
                    var opts = {
                        interactive: true,
                        editable: r.editable
                    };
                    return Data_Functor.mapFlipped(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Dhall_Interactive_Halogen_AST_Tree.renderExprWith(Dhall_Core_Imports_Types.showImport)(opts)(Data_Semigroup.append(Dhall_Interactive_Halogen_AST_Tree.semigroupCustomize)(Dhall_Interactive_Halogen_AST_Tree.selectable(Data_Maybe.showMaybe(Dhall_Core_Imports_Types.showImport))({
                        interactive: true,
                        editable: opts.editable
                    })(r.st.selection)(Select.create))(Data_Semigroup.append(Dhall_Interactive_Halogen_AST_Tree.semigroupCustomize)(selectHere)(Dhall_Interactive_Halogen_AST_Tree.collapsible({
                        interactive: false,
                        editable: opts.editable
                    }))))(r.window.value0))((function () {
                        var $219 = ViewAction.create(Data_Unit.unit);
                        var $220 = Data_Bifoldable.bifoldMap(Data_These.bifoldableThese)(Data_Monoid.monoidArray)(Control_Applicative.pure(Control_Applicative.applicativeArray))((function () {
                            var $222 = Control_Applicative.pure(Control_Applicative.applicativeArray);
                            return function ($223) {
                                return $222(SetView.create($223));
                            };
                        })());
                        return function ($221) {
                            return $219($220($221));
                        };
                    })());
                })());
            };
            if (r.window instanceof Validation_These["Error"]) {
                var $105 = Data_Array_NonEmpty.toArray(r.window.value0);
                return Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_("errors") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)($105)(function (v) {
                    return Halogen_HTML_Elements.li([ Halogen_HTML_Properties.class_("error-display") ])([ Halogen_HTML_Elements.h3([ Halogen_HTML_Properties.class_("error-name") ])([ Halogen_HTML_Core.text(v.tag.type) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("error-location") ])([ renderLoc(Data_Tuple.fst(Control_Comonad.extract(Data_List_Types.comonadNonEmptyList)(v.location))) ]), renderReferences(renderErrorRef)(r.explain(v)) ]);
                }));
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 236, column 9 - line 272, column 20): " + [ r.window.constructor.name ]);
        })(), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("edit-bar") ])(Data_Monoid.guard(Data_Monoid.monoidArray)(r.editable && Data_Maybe.isJust(r.st.selection))([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new ViewAction(Data_Unit.unit, [ new SetSelection(Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
            return "collapsed";
        }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))))(Control_Applicative.pure(Dhall_Core_AST_Types.applicativeExpr)(Data_Maybe.Nothing.value))) ])))("trash-2")("Delete this node"), Halogen_HTML_Core.text(" "), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(r.st.parsed)((function () {
            var $224 = ViewAction.create(Data_Unit.unit);
            var $225 = Control_Applicative.pure(Control_Applicative.applicativeArray);
            return function ($226) {
                return $224($225(SetSelection.create($226)));
            };
        })()))("edit-3")("Replace this node with parsed content"), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Maybe.Nothing.value)("at-sign")("editing at \u2026"), Data_Functor.mapFlipped(Halogen_HTML_Core.functorHTML)(renderLocation(Data_Functor.map(Data_List_Types.functorList)((function () {
            var $227 = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "within";
            }))(Dhall_Core_AST_Types_Basics["_S"]);
            var $228 = Control_Comonad.extract(Data_Lazy.comonadLazy);
            return function ($229) {
                return $227($228($229));
            };
        })())(Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_List_Types.monoidList)(r.st.selection))))(function (i) {
            return ViewAction.create(Data_Unit.unit)(Control_Applicative.pure(Control_Applicative.applicativeArray)(Select.create(Data_Functor.map(Data_Maybe.functorMaybe)(Data_List.drop(i))(r.st.selection))));
        }) ])) ]);
    };
    var $$eval = function (v) {
        if (v instanceof ViewInitialize) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                return "view";
            }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(v.value1));
        };
        if (v instanceof Receive) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                return "parsed";
            }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(v.value1.parsed))(function () {
                return Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                    return "value";
                }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(v.value1.value);
            }));
        };
        if (v instanceof Raise) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Halogen_Query_HalogenM.raise(v.value1));
        };
        if (v instanceof ViewAction) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Data_Foldable.for_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableArray)(v.value1)(function (v1) {
                if (v1 instanceof Select) {
                    return Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "selection";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(v1.value0);
                };
                if (v1 instanceof Un_Focus) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "view";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(function (view) {
                        return Data_Semigroup.append(Data_List_Types.semigroupList)(v1.value1)(Data_List.drop(v1.value0)(view));
                    }))(function () {
                        return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_List["null"])(v1.value1))(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                            return "selection";
                        }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value));
                    });
                };
                if (v1 instanceof SetView) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v2) {
                        var v3 = Dhall_Core_AST_Operations_Location.allWithin(v2.view);
                        var v4 = function (v5) {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                        };
                        if (v3 instanceof Data_Maybe.Just) {
                            var $126 = Data_Functor.map(Data_List_Types.functorList)(Control_Applicative.pure(Data_Lazy.applicativeLazy))(v3.value0);
                            var $127 = Data_Lens_Fold.has(Data_HeytingAlgebra.heytingAlgebraBoolean)(_ixes_Ann(Dhall_Map.traversableWithIndexIOSM)($126)(Data_Lens_Internal_Forget.wanderForget(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))))(v2.value);
                            if ($127) {
                                var $$new = Data_Lens_Setter.set(_ixes_Ann(Dhall_Map.traversableWithIndexIOSM)($126)(Data_Lens_Internal_Wander.wanderFunction))(v1.value0)(v2.value);
                                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Dhall_Core_AST_Noted.eqExpr(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                    return "collapsed";
                                }))(Data_Monoid_Disj.eqDisj(Data_Eq.eqBoolean))))(Data_Maybe.eqMaybe(Dhall_Core_Imports_Types.eqImport)))($$new)(v2.value))(Halogen_Query_HalogenM.raise(new $$Set($$new)));
                            };
                            return v4(true);
                        };
                        return v4(true);
                    });
                };
                if (v1 instanceof SetSelection) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v2) {
                        var v4 = Dhall_Core_AST_Operations_Location.allWithin(v2.view);
                        var v5 = function (v6) {
                            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                        };
                        if (v4 instanceof Data_Maybe.Just && v2.selection instanceof Data_Maybe.Just) {
                            var $135 = Data_Semigroup.append(Data_List_Types.semigroupList)(v2.selection.value0)(Data_Functor.map(Data_List_Types.functorList)(Control_Applicative.pure(Data_Lazy.applicativeLazy))(v4.value0));
                            var $136 = Data_Lens_Fold.has(Data_HeytingAlgebra.heytingAlgebraBoolean)(_ixes_Ann(Dhall_Map.traversableWithIndexIOSM)($135)(Data_Lens_Internal_Forget.wanderForget(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))))(v2.value);
                            if ($136) {
                                var $$new = Data_Lens_Setter.set(_ixes_Ann(Dhall_Map.traversableWithIndexIOSM)($135)(Data_Lens_Internal_Wander.wanderFunction))(v1.value0)(v2.value);
                                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Dhall_Core_AST_Noted.eqExpr(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                    return "collapsed";
                                }))(Data_Monoid_Disj.eqDisj(Data_Eq.eqBoolean))))(Data_Maybe.eqMaybe(Dhall_Core_Imports_Types.eqImport)))($$new)(v2.value))(Halogen_Query_HalogenM.raise(new $$Set($$new)));
                            };
                            return v5(true);
                        };
                        return v5(true);
                    });
                };
                throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 189, column 43 - line 208, column 30): " + [ v1.constructor.name ]);
            }));
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 182, column 12 - line 208, column 30): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: function (v) {
            return {
                parsed: v.parsed,
                value: v.value,
                view: Control_Plus.empty(Data_List_Types.plusList),
                selection: Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Plus.empty(Data_List_Types.plusList))
            };
        },
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $230 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($231) {
                    return $230($$eval($231));
                };
            })(),
            receive: (function () {
                var $232 = Receive.create(Data_Unit.unit);
                return function ($233) {
                    return Data_Maybe.Just.create($232($233));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        }),
        render: function ($234) {
            return render(renderInfo($234));
        }
    });
})();
var editor = (function () {
    var render = function (v) {
        var parsed = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
            var $235 = Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                return "collapsed";
            }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))));
            var $236 = Data_Functor.map(Dhall_Core_AST_Types.functorExpr)(Data_Maybe.Just.create);
            return function ($237) {
                return $235($236($237));
            };
        })())(Dhall_Parser.parse(v.userInput));
        var renderedViews = Data_Functor.mapFlipped(Data_Functor.functorArray)(v.views)(function (viewId) {
            return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                return "view";
            }))(Data_Natural.ordNatural)(Dhall_Core_AST_Types_Basics["_S"])(viewId)(viewer)({
                parsed: parsed,
                value: Control_Comonad.extract(Dhall_Lib_Timeline.comonadTimeline)(v.value)
            })((function () {
                var $238 = EditAction.create(new Data_Maybe.Just(viewId))(Data_Unit.unit);
                return function ($239) {
                    return Data_Maybe.Just.create($238($239));
                };
            })());
        });
        var appendView = new Data_Maybe.Just(new EditAction(Data_Maybe.Nothing.value, Data_Unit.unit, new NewView(Control_Plus.empty(Data_List_Types.plusList))));
        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("expr-editor") ])([ Halogen_HTML_Elements.div_(renderedViews), Halogen_HTML_Elements.div_([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(appendView)("plus-square")("Add a new view"), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Dhall_Lib_Timeline.unhappen(v.value))(new EditAction(Data_Maybe.Nothing.value, Data_Unit.unit, Undo.value)))("corner-up-left")("Undo"), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Dhall_Lib_Timeline.rehappen(v.value))(new EditAction(Data_Maybe.Nothing.value, Data_Unit.unit, Redo.value)))("corner-down-right")("Redo") ]), Halogen_HTML_Elements.textarea([ Halogen_HTML_Events.onValueInput((function () {
            var $240 = UserInput.create(Data_Unit.unit);
            return function ($241) {
                return Data_Maybe.Just.create($240($241));
            };
        })()), Halogen_HTML_Properties.value(v.userInput) ]), Dhall_Interactive_Halogen_Icons.icon((function () {
            var $149 = Data_Maybe.isJust(parsed);
            if ($149) {
                return "check";
            };
            return "x";
        })())([ Dhall_Interactive_Halogen_Icons.class_("feather") ]) ]);
    };
    var $$eval = function (v) {
        if (v instanceof Output) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.value;
            }))((function () {
                var $242 = Control_Comonad.extract(Dhall_Lib_Timeline.comonadTimeline);
                return function ($243) {
                    return Halogen_Query_HalogenM.raise($242($243));
                };
            })()));
        };
        if (v instanceof Check) {
            return Data_Functor.mapFlipped(Halogen_Query_HalogenM.functorHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.value;
            }))((function () {
                var $244 = Control_Comonad.extract(Dhall_Lib_Timeline.comonadTimeline);
                return function ($245) {
                    return v.value0($244($245));
                };
            })());
        };
        if (v instanceof UserInput) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                return "userInput";
            }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(v.value1));
        };
        if (v instanceof EditAction) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)((function () {
                if (v.value2 instanceof $$Set) {
                    return Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "value";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Dhall_Lib_Timeline.happen(v.value2.value0));
                };
                if (v.value2 instanceof Undo) {
                    return Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "value";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Control_Apply.apply(Control_Apply.applyFn)(Data_Maybe.fromMaybe)(Dhall_Lib_Timeline.unhappen));
                };
                if (v.value2 instanceof Redo) {
                    return Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "value";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Control_Apply.apply(Control_Apply.applyFn)(Data_Maybe.fromMaybe)(Dhall_Lib_Timeline.rehappen));
                };
                if (v.value2 instanceof DeleteView) {
                    return Data_Foldable.for_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(v.value0)(function (viewId) {
                        return Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                            return "views";
                        }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Data_Array["delete"](Data_Natural.eqNatural)(viewId));
                    });
                };
                if (v.value2 instanceof NewView) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                        return "nextView";
                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Data_Semiring.add(Data_Natural.semiringNatural)(Data_Semiring.one(Data_Natural.semiringNatural))))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                            return v1.nextView;
                        }))(function (v1) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                                return "views";
                            }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn))(Data_Function.flip(Data_Array.snoc)(v1)))(function () {
                                return Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                                    return "view";
                                }))(Data_Natural.ordNatural)(Dhall_Core_AST_Types_Basics["_S"])(v1)(new ViewInitialize(Data_Unit.unit, v.value2.value0)));
                            });
                        });
                    });
                };
                throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 132, column 40 - line 142, column 75): " + [ v.value2.constructor.name ]);
            })());
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree.Editor (line 128, column 12 - line 142, column 75): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: (function () {
            var $246 = Control_Applicative.pure(Dhall_Lib_Timeline.applicativeTimeline);
            return function ($247) {
                return (function (v) {
                    return {
                        userInput: "Type",
                        nextView: Data_Semiring.one(Data_Natural.semiringNatural),
                        views: [ Data_Semiring.zero(Data_Natural.semiringNatural) ],
                        value: v
                    };
                })($246($247));
            };
        })(),
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $248 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($249) {
                    return $248($$eval($249));
                };
            })(),
            receive: (function () {
                var $250 = EditAction.create(Data_Maybe.Nothing.value)(Data_Unit.unit);
                return function ($251) {
                    return Data_Maybe.Just.create($250($$Set.create($251)));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        }),
        render: render
    });
})();
module.exports = {
    NoGlobalActions: NoGlobalActions,
    "Set": $$Set,
    Undo: Undo,
    Redo: Redo,
    NewView: NewView,
    DeleteView: DeleteView,
    EditAction: EditAction,
    Output: Output,
    Check: Check,
    UserInput: UserInput,
    Select: Select,
    Un_Focus: Un_Focus,
    SetSelection: SetSelection,
    SetView: SetView,
    ViewInitialize: ViewInitialize,
    ViewAction: ViewAction,
    Raise: Raise,
    Receive: Receive,
    hole: hole,
    tpi: tpi,
    unWriterT: unWriterT,
    editor: editor,
    "_ixes_Ann": _ixes_Ann,
    viewer: viewer,
    renderLocation: renderLocation,
    renderLoc: renderLoc,
    renderErrorRef: renderErrorRef,
    renderERVFI: renderERVFI,
    renderReferences: renderReferences,
    renderReference: renderReference,
    tagERVFI: tagERVFI
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Writer.Trans/index.js":58,"../Control.Plus/index.js":65,"../Data.Array.NonEmpty/index.js":86,"../Data.Array/index.js":91,"../Data.Bifoldable/index.js":92,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.Lazy/index.js":156,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Lens.Tuple/index.js":172,"../Data.Lens.Record/index.js":176,"../Data.Lens.Setter/index.js":177,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Variant.Internal/index.js":258,"../Data.Variant/index.js":259,"../Data.Void/index.js":260,"../Dhall.Core.AST.Noted/index.js":263,"../Dhall.Core.AST.Operations.Location/index.js":264,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Core.Imports.Types/index.js":271,"../Dhall.Core.Zippers.Recursive/index.js":273,"../Dhall.Core.Zippers/index.js":274,"../Dhall.Interactive.Halogen.AST.Tree/index.js":276,"../Dhall.Interactive.Halogen.AST/index.js":277,"../Dhall.Interactive.Halogen.Icons/index.js":278,"../Dhall.Interactive.Halogen.Inputs/index.js":279,"../Dhall.Lib.Timeline/index.js":283,"../Dhall.Map/index.js":284,"../Dhall.Parser/index.js":289,"../Dhall.TypeCheck/index.js":290,"../Halogen.Component/index.js":326,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.HTML/index.js":337,"../Halogen.Query.HalogenM/index.js":340,"../Matryoshka.Class.Recursive/index.js":356,"../Type.Equality/index.js":388,"../Validation.These/index.js":394}],276:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_App = require("../Data.Functor.App/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Indexed = require("../Data.Lens.Indexed/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Shop = require("../Data.Lens.Internal.Shop/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Lens_Lens_Product = require("../Data.Lens.Lens.Product/index.js");
var Data_Lens_Lens_Tuple = require("../Data.Lens.Lens.Tuple/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Lens_Traversal = require("../Data.Lens.Traversal/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Noted = require("../Dhall.Core.AST.Noted/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Interactive_Halogen_AST = require("../Dhall.Interactive.Halogen.AST/index.js");
var Dhall_Interactive_Halogen_Inputs = require("../Dhall.Interactive.Halogen.Inputs/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_Fold = require("../Matryoshka.Fold/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var LensedF = (function () {
    function LensedF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LensedF.create = function (value0) {
        return function (value1) {
            return new LensedF(value0, value1);
        };
    };
    return LensedF;
})();
var Customize = function (x) {
    return x;
};
var unrenderingWith = function (g) {
    return function (f) {
        var $259 = Data_Newtype.un(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML);
        var $260 = Data_Functor.map(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_Functor.map(Data_These.functorThese)(g));
        var $261 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
        var $262 = Data_Newtype.un(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(f);
        return function ($263) {
            return $259($260($261($262($263))));
        };
    };
};
var unrendering = function (f) {
    var $264 = Data_Newtype.un(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML);
    var $265 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
    var $266 = Data_Newtype.un(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(f);
    return function ($267) {
        return $264($265($266($267)));
    };
};
var unindex = Matryoshka_Fold.transCata(Dhall_Core_AST_Noted.recursiveExpr)(Dhall_Core_AST_Noted.corecursiveExpr)(Control_Comonad_Env_Trans.withEnvT(function (v) {
    return v.value0;
}));
var semigroupCustomize = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (i) {
            var c1i = v(i);
            var c2i = v1(i);
            return {
                actions: Data_Semigroup.append(Data_Semigroup.semigroupArray)(c1i.actions)(c2i.actions),
                wrap: function (h) {
                    return c1i.wrap(function (v2) {
                        return c2i.wrap(h);
                    });
                }
            };
        };
    };
});
var renderingR = function (f) {
    return Data_Profunctor_Star.Star((function () {
        var $268 = Data_Functor.map(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.That.create);
        return function ($269) {
            return Data_Functor_Compose.Compose($268(Dhall_Interactive_Halogen_AST.SlottedHTML(f($269))));
        };
    })());
};
var rendering = function (f) {
    return Data_Profunctor_Star.Star(function ($270) {
        return Data_Functor_Compose.Compose(Dhall_Interactive_Halogen_AST.SlottedHTML(f($270)));
    });
};
var renderVFNone = Data_Functor_Variant.case_;
var renderString = function (v) {
    if (v.editable) {
        return renderingR(function (v1) {
            return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.value(v1), Halogen_HTML_Events.onValueInput(Control_Applicative.pure(Data_Maybe.applicativeMaybe)) ]);
        });
    };
    if (!v.editable) {
        return rendering(Halogen_HTML_Core.text);
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 194, column 1 - line 194, column 69): " + [ v.constructor.name ]);
};
var renderNumber = function (v) {
    if (v.editable) {
        return renderingR(function (v1) {
            return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputNumber.value), Halogen_HTML_Properties.step(new DOM_HTML_Indexed_StepValue.Step(0.5)), Halogen_HTML_Properties.value(Data_Show.show(Data_Show.showNumber)(Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v1))), Halogen_HTML_Events.onValueInput(Data_Number.fromString) ]);
        });
    };
    if (!v.editable) {
        return rendering((function () {
            var $271 = Data_Show.show(Data_Show.showNumber);
            return function ($272) {
                return Halogen_HTML_Core.text($271($272));
            };
        })());
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 229, column 1 - line 229, column 69): " + [ v.constructor.name ]);
};
var renderNode = function (name) {
    return function (children) {
        return Data_Functor_Compose.Compose(Dhall_Interactive_Halogen_AST.SlottedHTML(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("node " + name) ])(Data_Array.cons(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("node-name") ])((function () {
            var $85 = Data_Array["null"](children);
            if ($85) {
                return [ Halogen_HTML_Core.text(name) ];
            };
            return [ Halogen_HTML_Core.text(name), Halogen_HTML_Core.text(":") ];
        })()))(Data_Functor.mapFlipped(Data_Functor.functorArray)(children)(function (v) {
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("node-child") ])([ Halogen_HTML_Elements.span_([ Halogen_HTML_Core.text(v.value0), Halogen_HTML_Core.text(": ") ]), v.value1 ]);
        })))));
    };
};
var renderVFLensed = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFunctor) {
            return function (sym) {
                return function (renderFA) {
                    return function (renderRest) {
                        var renderCase = function (fa) {
                            return renderNode(Data_Symbol.reflectSymbol(dictIsSymbol)(sym))(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Exists.runExists(function (v) {
                                return Data_Functor.mapFlipped(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(v.value1)(Data_Lens_Getter.view(Data_Lens_Lens.cloneLens(v.value0)(Data_Lens_Internal_Forget.strongForget))(fa)))((function () {
                                    var $273 = Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(sym);
                                    var $274 = Data_Function.flip(Data_Lens_Setter.set(Data_Lens_Lens.cloneLens(v.value0)(Data_Profunctor_Strong.strongFn)))(fa);
                                    return function ($275) {
                                        return $273($274($275));
                                    };
                                })());
                            })))(renderFA));
                        };
                        return Data_Profunctor_Star.Star(Data_Functor_Variant.on(dictCons)(dictIsSymbol)(sym)(renderCase)((function () {
                            var $276 = Data_Functor.map(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Unsafe_Coerce.unsafeCoerce);
                            var $277 = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(renderRest);
                            return function ($278) {
                                return $276($277($278));
                            };
                        })()));
                    };
                };
            };
        };
    };
};
var renderNatural = function (v) {
    if (v.editable) {
        return renderingR(function (v1) {
            return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputNumber.value), Halogen_HTML_Properties.min(0), Halogen_HTML_Properties.step(new DOM_HTML_Indexed_StepValue.Step(1)), Halogen_HTML_Properties.value(Data_Show.show(Data_Natural.showNatural)(v1)), Halogen_HTML_Events.onValueInput((function () {
                var $279 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Natural.intToNat);
                return function ($280) {
                    return $279(Data_Int.fromString($280));
                };
            })()) ]);
        });
    };
    if (!v.editable) {
        return rendering((function () {
            var $281 = Data_Show.show(Data_Show.showInt);
            return function ($282) {
                return Halogen_HTML_Core.text($281(Data_Natural.natToInt($282)));
            };
        })());
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 204, column 1 - line 204, column 71): " + [ v.constructor.name ]);
};
var renderMaybe = function (opts) {
    return function (v) {
        return rendering(function (as) {
            return Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_("maybe") ])(Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                if (as instanceof Data_Maybe.Nothing) {
                    var $98 = !opts.editable;
                    if ($98) {
                        return Halogen_HTML_Core.text("(Nothing)");
                    };
                    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("just button") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new Data_These.That(new Data_Maybe.Just(v.df))))("plus-square")("Add node here") ]);
                };
                if (as instanceof Data_Maybe.Just) {
                    return Halogen_HTML_Elements.li_(Control_Bind.join(Control_Bind.bindArray)([ Data_Monoid.guard(Data_Monoid.monoidArray)(opts.editable)(Control_Applicative.pure(Control_Applicative.applicativeArray)(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("pre button") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new Data_These.That(Data_Maybe.Nothing.value)))("minus-square")("Remove this node") ]))), Control_Applicative.pure(Control_Applicative.applicativeArray)(Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Functor.map(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Data_Maybe.Just.create)(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(v.rndr)(as.value0))))) ]));
                };
                throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 135, column 5 - line 143, column 10): " + [ as.constructor.name ]);
            })()));
        });
    };
};
var renderIxTraversal = function (dictEq) {
    return function (foci) {
        return function (v) {
            return function (s) {
                return Data_Lens_Fold.ifoldMapOf(foci(Data_Lens_Internal_Forget.wanderForget(Data_Monoid.monoidArray)))(function (i) {
                    return function (a) {
                        return [ Data_Functor.mapFlipped(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(v.rndr(i))(a))(Data_Function.flip(Data_Lens_Setter.set(Data_Lens_Indexed.unIndex(Data_Profunctor.profunctorFn)(Data_Lens_Traversal.elementsOf(Data_Lens_Internal_Wander.wanderFunction)(function (dictWander) {
                            return foci(dictWander);
                        })(Data_Eq.eq(dictEq)(i)))))(s)) ];
                    };
                })(s);
            };
        };
    };
};
var renderInt = function (v) {
    if (v.editable) {
        return rendering(function (v1) {
            return Halogen_HTML_Elements.span_([ Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_These.That(-v1 | 0)))) ])([ Halogen_HTML_Core.text((function () {
                var $108 = v1 < 0;
                if ($108) {
                    return "-";
                };
                return "+";
            })()) ]), Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Functor.mapFlipped(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(renderNatural(v))(Data_Natural.intToNat(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(v1))))((function () {
                var $283 = Data_Semiring.mul(Data_Semiring.semiringInt)(Data_Ord.signum(Data_Ord.ordInt)(Data_Ring.ringInt)(v1));
                return function ($284) {
                    return $283(Data_Natural.natToInt($284));
                };
            })()))) ]);
        });
    };
    if (!v.editable) {
        return rendering((function () {
            var $285 = Data_Show.show(Data_Show.showInt);
            return function ($286) {
                return Halogen_HTML_Core.text($285($286));
            };
        })());
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 221, column 1 - line 221, column 63): " + [ v.constructor.name ]);
};
var renderIOSM = function (opts) {
    return function (v) {
        return rendering(function (as) {
            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("strmap-parent") ])([ Halogen_HTML_Elements.dl([ Halogen_HTML_Properties.class_("strmap") ])(Data_Lens_Fold.ifoldMapOf(Data_Lens_Indexed.itraversed(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Lens_Internal_Forget.wanderForget(Data_Monoid.monoidArray)))(function (i) {
                return function (v1) {
                    var without = Control_Apply.apply(Control_Apply.applyFn)(Data_Maybe.fromMaybe)(Dhall_Map["delete"](Dhall_Map.strMapIshIOSM(Data_Ord.ordString))(v1.value0))(as);
                    var here = function (v2) {
                        return Dhall_Map.mkIOSM(Data_Lens_Setter.set(Data_Lens_Indexed.unIndex(Data_Profunctor.profunctorFn)(Data_Lens_Traversal.elementsOf(Data_Lens_Internal_Wander.wanderFunction)(function (dictWander) {
                            return Data_Lens_Indexed.itraversed(Data_TraversableWithIndex.traversableWithIndexArray)(dictWander);
                        })(Data_Eq.eq(Data_Eq.eqInt)(i))))(v2)(Dhall_Map.unIOSM(as)));
                    };
                    return [ Halogen_HTML_Elements.dt_([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new Data_These.That(without)))("minus-square")("Remove this field"), Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.value(v1.value0), Halogen_HTML_Events.onValueInput(function (s$prime) {
                        return new Data_Maybe.Just(new Data_These.That(here(new Data_Tuple.Tuple(s$prime, v1.value1))));
                    }) ]) ]), Halogen_HTML_Elements.dd_([ Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Functor.mapFlipped(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(v.rndr)(v1.value1))((function () {
                        var $287 = Data_Tuple.Tuple.create(v1.value0);
                        return function ($288) {
                            return here($287($288));
                        };
                    })()))) ]) ];
                };
            })(Dhall_Map.unIOSM(as))), Halogen_HTML_Elements.div_((function () {
                var $$new = Dhall_Map.mkIOSM((function (v1) {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)([ new Data_Tuple.Tuple("", v.df) ]);
                })(Dhall_Map.unIOSM(as)));
                return [ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(new Data_These.That($$new)))("plus-square")("Add another field") ];
            })()) ]);
        });
    };
};
var renderBuiltinFuncs = function (v) {
    var named = [  ];
    var $289 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $290 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $291 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $292 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $293 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $294 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $295 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $296 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $297 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $298 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $299 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $300 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $301 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $302 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $303 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $304 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $305 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $306 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $307 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $308 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $309 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $310 = Control_Category.identity(Control_Category.categoryFn);
    return function ($311) {
        return $289($290($291($292($293($294($295($296($297($298($299($300($301($302($303($304($305($306($307($308($309($310($311))))))))))))))))))))));
    };
};
var renderBoolean = function (v) {
    if (v.editable) {
        return renderingR(function (v1) {
            return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(!v1))) ])([ Halogen_HTML_Core.text((function () {
                if (v1) {
                    return "True";
                };
                return "False";
            })()) ]);
        });
    };
    if (!v.editable) {
        return rendering(function ($312) {
            return Halogen_HTML_Core.text((function (v1) {
                if (v1) {
                    return "True";
                };
                return "False";
            })($312));
        });
    };
    throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 214, column 1 - line 214, column 71): " + [ v.constructor.name ]);
};
var renderBindingBody = function (opts) {
    return function (renderA) {
        var _name = Data_Lens_Lens["lens'"](function (v) {
            return new Data_Tuple.Tuple(v.value0, function (name$prime) {
                return new Dhall_Core_AST_Types_Basics.BindingBody(name$prime, v.value1, v.value2);
            });
        });
        var _a1 = Data_Lens_Lens["lens'"](function (v) {
            return new Data_Tuple.Tuple(v.value2, function (a1$prime) {
                return new Dhall_Core_AST_Types_Basics.BindingBody(v.value0, v.value1, a1$prime);
            });
        });
        var _a0 = Data_Lens_Lens["lens'"](function (v) {
            return new Data_Tuple.Tuple(v.value1, function (a0$prime) {
                return new Dhall_Core_AST_Types_Basics.BindingBody(v.value0, a0$prime, v.value2);
            });
        });
        return [ Data_Tuple.Tuple.create("identifier")(Data_Exists.mkExists(new LensedF(_name(Data_Lens_Internal_Shop.strongShop), renderString(opts)))), Data_Tuple.Tuple.create("type")(Data_Exists.mkExists(new LensedF(_a0(Data_Lens_Internal_Shop.strongShop), renderA))), Data_Tuple.Tuple.create("body")(Data_Exists.mkExists(new LensedF(_a1(Data_Lens_Internal_Shop.strongShop), renderA))) ];
    };
};
var renderArray = function (opts) {
    return function (v) {
        return rendering(function (as) {
            return Halogen_HTML_Elements.ol([ Halogen_HTML_Properties.class_("array") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
                var $313 = Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML);
                var $314 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
                return function ($315) {
                    return $313($314($315));
                };
            })())(renderIxTraversal(Data_Eq.eqInt)(function (dictWander) {
                return Data_Lens_Indexed.itraversed(Data_TraversableWithIndex.traversableWithIndexArray)(dictWander);
            })({
                df: v.df,
                rndr: function (v1) {
                    return rendering(function (a) {
                        return Halogen_HTML_Elements.li_([ Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(v.rndr)(a))) ]);
                    });
                }
            })(as)));
        });
    };
};
var newtypeCustomize = new Data_Newtype.Newtype(function (n) {
    return n;
}, Customize);
var monoidCustomize = new Data_Monoid.Monoid(function () {
    return semigroupCustomize;
}, function (v) {
    return {
        actions: Data_Monoid.mempty(Data_Monoid.monoidArray),
        wrap: Data_Function.applyFlipped(Data_Unit.unit)
    };
});
var mkLensed = function (name) {
    return function (focus) {
        return function (renderer) {
            return Data_Tuple.Tuple.create(name)(Data_Exists.mkExists(new LensedF(focus, renderer)));
        };
    };
};
var renderBuiltinBinOps = function (v) {
    return function (v1) {
        var _r = Data_Lens_Lens["lens'"](function (v2) {
            return new Data_Tuple.Tuple(v2.value1, function (r$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(v2.value0, r$prime);
            });
        });
        var _l = Data_Lens_Lens["lens'"](function (v2) {
            return new Data_Tuple.Tuple(v2.value0, function (l$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(l$prime, v2.value1);
            });
        });
        var renderBinOp = [ mkLensed("L")(_l(Data_Lens_Internal_Shop.strongShop))(v1.rndr), mkLensed("R")(_r(Data_Lens_Internal_Shop.strongShop))(v1.rndr) ];
        var $316 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $317 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $318 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $319 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $320 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $321 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $322 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $323 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $324 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $325 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $326 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $327 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $328 = Control_Category.identity(Control_Category.categoryFn);
        return function ($329) {
            return $316($317($318($319($320($321($322($323($324($325($326($327($328($329)))))))))))));
        };
    };
};
var renderBuiltinOps = function (opts) {
    return function (v) {
        var renderToMap = [ mkLensed("expression")((function () {
            var $330 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(Data_Lens_Internal_Shop.profunctorShop);
            var $331 = Data_Lens_Lens_Tuple["_1"](Data_Lens_Internal_Shop.strongShop);
            var $332 = Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Lens_Internal_Shop.profunctorShop);
            return function ($333) {
                return $330($331($332($333)));
            };
        })())(v.rndr), mkLensed("type")((function () {
            var $334 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(Data_Lens_Internal_Shop.profunctorShop);
            var $335 = Data_Lens_Lens_Tuple["_2"](Data_Lens_Internal_Shop.strongShop);
            return function ($336) {
                return $334($335($336));
            };
        })())(renderMaybe(opts)({
            df: v.df,
            rndr: v.rndr
        })) ];
        var renderProject = [ mkLensed("expression")((function () {
            var $337 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(Data_Lens_Internal_Shop.profunctorShop);
            var $338 = Data_Lens_Lens_Tuple["_1"](Data_Lens_Internal_Shop.strongShop);
            var $339 = Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Lens_Internal_Shop.profunctorShop);
            return function ($340) {
                return $337($338($339($340)));
            };
        })())(v.rndr), mkLensed("fields")((function () {
            var $341 = Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Product.newtypeProduct)(Data_Functor_Product.newtypeProduct)(Data_Lens_Internal_Shop.profunctorShop);
            var $342 = Data_Lens_Lens_Tuple["_2"](Data_Lens_Internal_Shop.strongShop);
            return function ($343) {
                return $341($342($343));
            };
        })())(rendering(function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return unrenderingWith(function ($344) {
                    return Data_Either.Left.create(Data_Functor_App.App($344));
                })(renderIOSM(opts)({
                    df: Data_Unit.unit,
                    rndr: rendering(Data_Function["const"](Halogen_HTML_Core.text("")))
                }))(v1.value0);
            };
            if (v1 instanceof Data_Either.Right) {
                return unrenderingWith(Data_Either.Right.create)(v.rndr)(v1.value0);
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST.Tree (line 386, column 63 - line 391, column 53): " + [ v1.constructor.name ]);
        })) ];
        var renderField = [ mkLensed("expression")(Data_Lens_Lens_Tuple["_2"](Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("field")(Data_Lens_Lens_Tuple["_1"](Data_Lens_Internal_Shop.strongShop))(renderString(opts)) ];
        var renderAssert = [ mkLensed("assertion")(Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Lens_Internal_Shop.profunctorShop))(v.rndr) ];
        var m_2 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value2, function (a2$prime) {
                return new Dhall_Core_AST_Types_Basics.MergeF(v1.value0, v1.value1, a2$prime);
            });
        });
        var m_1 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value1, function (a1$prime) {
                return new Dhall_Core_AST_Types_Basics.MergeF(v1.value0, a1$prime, v1.value2);
            });
        });
        var m_0 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value0, function (a0$prime) {
                return new Dhall_Core_AST_Types_Basics.MergeF(a0$prime, v1.value1, v1.value2);
            });
        });
        var renderMerge = [ mkLensed("handlers")(m_0(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("argument")(m_1(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("type")(m_2(Data_Lens_Internal_Shop.strongShop))(renderMaybe(opts)({
            df: v.df,
            rndr: v.rndr
        })) ];
        var _2 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value2, function (a2$prime) {
                return new Dhall_Core_AST_Types_Basics.Triplet(v1.value0, v1.value1, a2$prime);
            });
        });
        var _1 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value1, function (a1$prime) {
                return new Dhall_Core_AST_Types_Basics.Triplet(v1.value0, a1$prime, v1.value2);
            });
        });
        var _0 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value0, function (a0$prime) {
                return new Dhall_Core_AST_Types_Basics.Triplet(a0$prime, v1.value1, v1.value2);
            });
        });
        var renderBoolIf = [ mkLensed("if")(_0(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("then")(_1(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("else")(_2(Data_Lens_Internal_Shop.strongShop))(v.rndr) ];
        var $345 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))()(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))(Dhall_Core_AST_Types_Basics["_S"])(renderProject);
        var $346 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))()(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"])(renderAssert);
        var $347 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))()(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"])(renderToMap);
        var $348 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))()(Dhall_Core_AST_Types_Basics.functorMergeF)(Dhall_Core_AST_Types_Basics["_S"])(renderMerge);
        var $349 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))()(Dhall_Core_AST_Types_Basics.functorTriplet)(Dhall_Core_AST_Types_Basics["_S"])(renderBoolIf);
        var $350 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))()(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(renderField);
        var $351 = renderBuiltinBinOps(opts)({
            df: v.df,
            rndr: v.rndr
        });
        return function ($352) {
            return $345($346($347($348($349($350($351($352)))))));
        };
    };
};
var renderBuiltinTypes = function (v) {
    var renderConst = Control_Applicative.pure(Control_Applicative.applicativeArray)(mkLensed("constant")(Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Shop.profunctorShop))(renderingR(function (v1) {
        var vals = (function () {
            if (v.editable) {
                return [ Dhall_Core_AST_Types.Type.value, Dhall_Core_AST_Types.Kind.value, Dhall_Core_AST_Types.Sort.value ];
            };
            return [ v1 ];
        })();
        return Halogen_HTML_Elements.select([ Halogen_HTML_Events.onSelectedIndexChange(Data_Array.index(vals)) ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(vals)(function (vi) {
            return Halogen_HTML_Elements.option([ Halogen_HTML_Properties.selected(Data_Eq.eq(Dhall_Core_AST_Types.eqConst)(v1)(vi)) ])([ Halogen_HTML_Core.text(Data_Show.show(Dhall_Core_AST_Types.showConst)(vi)) ]);
        }));
    })));
    var named = [  ];
    var $353 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(renderConst);
    var $354 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $355 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $356 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $357 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $358 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $359 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $360 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(named);
    var $361 = Control_Category.identity(Control_Category.categoryFn);
    return function ($362) {
        return $353($354($355($356($357($358($359($360($361($362)))))))));
    };
};
var renderBuiltinTypes2 = function (opts) {
    return function (v) {
        var $363 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))()(Data_Functor_Compose.functorCompose(Dhall_Map.functorIOSM)(Data_Maybe.functorMaybe))(Dhall_Core_AST_Types_Basics["_S"])([ mkLensed("types")(Data_Lens_Iso_Newtype["_Newtype"](Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Lens_Internal_Shop.profunctorShop))(renderIOSM(opts)({
            df: new Data_Maybe.Just(v.df),
            rndr: renderMaybe(opts)({
                df: v.df,
                rndr: v.rndr
            })
        })) ]);
        var $364 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))()(Dhall_Map.functorIOSM)(Dhall_Core_AST_Types_Basics["_S"])([ mkLensed("types")(Control_Category.identity(Control_Category.categoryFn))(renderIOSM(opts)({
            df: v.df,
            rndr: v.rndr
        })) ]);
        var $365 = Control_Category.identity(Control_Category.categoryFn);
        return function ($366) {
            return $363($364($365($366)));
        };
    };
};
var renderImportSyntax = function (opts) {
    return function (v) {
        var renderHashed = [ mkLensed("expression")(Data_Lens_Lens_Tuple["_2"](Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("sha256")(Data_Lens_Lens_Tuple["_1"](Data_Lens_Internal_Shop.strongShop))(renderString(opts)) ];
        var _r = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value1, function (r$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(v1.value0, r$prime);
            });
        });
        var _l = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value0, function (l$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(l$prime, v1.value1);
            });
        });
        var renderBinOp = [ mkLensed("L")(_l(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("R")(_r(Data_Lens_Internal_Shop.strongShop))(v.rndr) ];
        var $367 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))()(Data_Tuple.functorTuple)(Dhall_Core_AST_Types_Basics["_S"])(renderHashed);
        var $368 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $369 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderBinOp);
        var $370 = Control_Category.identity(Control_Category.categoryFn);
        return function ($371) {
            return $367($368($369($370($371))));
        };
    };
};
var renderLiterals2 = function (opts) {
    return function (v) {
        var renderListLit = [ mkLensed("type")(Data_Lens_Lens_Product["_1"](Data_Lens_Internal_Shop.strongShop))(renderMaybe(opts)({
            df: v.df,
            rndr: v.rndr
        })), mkLensed("values")(Data_Lens_Lens_Product["_2"](Data_Lens_Internal_Shop.strongShop))(renderArray(opts)({
            df: v.df,
            rndr: v.rndr
        })) ];
        var $372 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))()(Dhall_Core_AST_Types_Basics.functorTextLitF)(Dhall_Core_AST_Types_Basics["_S"])([  ]);
        var $373 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))()(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))(Dhall_Core_AST_Types_Basics["_S"])(renderListLit);
        var $374 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))()(Dhall_Map.functorIOSM)(Dhall_Core_AST_Types_Basics["_S"])([ mkLensed("values")(Control_Category.identity(Control_Category.categoryFn))(renderIOSM(opts)({
            df: v.df,
            rndr: v.rndr
        })) ]);
        var $375 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))()(Data_Identity.functorIdentity)(Dhall_Core_AST_Types_Basics["_S"])([ mkLensed("value")(Data_Lens_Iso_Newtype["_Newtype"](Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Lens_Internal_Shop.profunctorShop))(v.rndr) ]);
        var $376 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])([  ]);
        var $377 = Control_Category.identity(Control_Category.categoryFn);
        return function ($378) {
            return $372($373($374($375($376($377($378))))));
        };
    };
};
var renderSyntax = function (opts) {
    return function (v) {
        var _r = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value1, function (r$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(v1.value0, r$prime);
            });
        });
        var _l = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value0, function (l$prime) {
                return new Dhall_Core_AST_Types_Basics.Pair(l$prime, v1.value1);
            });
        });
        var renderAnnot = [ mkLensed("value")(_l(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("type")(_r(Data_Lens_Internal_Shop.strongShop))(v.rndr) ];
        var renderApp = [ mkLensed("function")(_l(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("argument")(_r(Data_Lens_Internal_Shop.strongShop))(v.rndr) ];
        var $379 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderAnnot);
        var $380 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))()(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(renderApp);
        var $381 = Control_Category.identity(Control_Category.categoryFn);
        return function ($382) {
            return $379($380($381($382)));
        };
    };
};
var renderVariable = function (opts) {
    return function (v) {
        var renderVar = (function () {
            var _ix = Data_Lens_Lens["lens'"](function (v1) {
                return new Data_Tuple.Tuple(v1.value1, function (ix$prime) {
                    return new Dhall_Core_AST_Types.V(v1.value0, ix$prime);
                });
            });
            var _identifier = Data_Lens_Lens["lens'"](function (v1) {
                return new Data_Tuple.Tuple(v1.value0, function (identifier$prime) {
                    return new Dhall_Core_AST_Types.V(identifier$prime, v1.value1);
                });
            });
            return [ mkLensed("identifier")((function () {
                var $383 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Shop.profunctorShop);
                var $384 = _identifier(Data_Lens_Internal_Shop.strongShop);
                return function ($385) {
                    return $383($384($385));
                };
            })())(renderString(opts)), mkLensed("index")((function () {
                var $386 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Shop.profunctorShop);
                var $387 = _ix(Data_Lens_Internal_Shop.strongShop);
                return function ($388) {
                    return $386($387($388));
                };
            })())(renderInt(opts)) ];
        })();
        var _name = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value0, function (name$prime) {
                return new Dhall_Core_AST_Types_Basics.LetF(name$prime, v1.value1, v1.value2, v1.value3);
            });
        });
        var _a2 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value3, function (a2$prime) {
                return new Dhall_Core_AST_Types_Basics.LetF(v1.value0, v1.value1, v1.value2, a2$prime);
            });
        });
        var _a1 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value2, function (a1$prime) {
                return new Dhall_Core_AST_Types_Basics.LetF(v1.value0, v1.value1, a1$prime, v1.value3);
            });
        });
        var _a0 = Data_Lens_Lens["lens'"](function (v1) {
            return new Data_Tuple.Tuple(v1.value1, function (a0$prime) {
                return new Dhall_Core_AST_Types_Basics.LetF(v1.value0, a0$prime, v1.value2, v1.value3);
            });
        });
        var renderLet = [ mkLensed("identifier")(_name(Data_Lens_Internal_Shop.strongShop))(renderString(opts)), mkLensed("type")(_a0(Data_Lens_Internal_Shop.strongShop))(renderMaybe(opts)({
            df: v.df,
            rndr: v.rndr
        })), mkLensed("value")(_a1(Data_Lens_Internal_Shop.strongShop))(v.rndr), mkLensed("body")(_a2(Data_Lens_Internal_Shop.strongShop))(v.rndr) ];
        var $389 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))()(Dhall_Core_AST_Types_Basics.functorLetF)(Dhall_Core_AST_Types_Basics["_S"])(renderLet);
        var $390 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))()(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(renderBindingBody(opts)(v.rndr));
        var $391 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))()(Dhall_Core_AST_Types_Basics.functorBindingBody)(Dhall_Core_AST_Types_Basics["_S"])(renderBindingBody(opts)(v.rndr));
        var $392 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(renderVar);
        var $393 = Control_Category.identity(Control_Category.categoryFn);
        return function ($394) {
            return $389($390($391($392($393($394)))));
        };
    };
};
var mkActions = function (actions) {
    return function (i) {
        return {
            wrap: Data_Function.applyFlipped(Data_Unit.unit),
            actions: actions(i)
        };
    };
};
var mkInteractions = function (opts) {
    if (opts.interactive) {
        return mkActions;
    };
    return Data_Monoid.mempty(Data_Monoid.monoidFn(monoidCustomize));
};
var lensedConst = function (name) {
    return function (renderer) {
        return Control_Applicative.pure(Control_Applicative.applicativeArray)(Data_Tuple.Tuple.create(name)(Data_Exists.mkExists(new LensedF(Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Shop.profunctorShop), renderer))));
    };
};
var renderLiterals = function (opts) {
    var $395 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(lensedConst("value")(renderNumber(opts)));
    var $396 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(lensedConst("value")(renderInt(opts)));
    var $397 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(lensedConst("value")(renderNatural(opts)));
    var $398 = renderVFLensed(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(lensedConst("value")(renderBoolean(opts)));
    var $399 = Control_Category.identity(Control_Category.categoryFn);
    return function ($400) {
        return $395($396($397($398($399($400)))));
    };
};
var renderAllTheThings = function (opts) {
    return function (renderA) {
        var $401 = renderImportSyntax(opts)(renderA);
        var $402 = renderSyntax(opts)(renderA);
        var $403 = renderBuiltinTypes2(opts)(renderA);
        var $404 = renderLiterals2(opts)(renderA);
        var $405 = renderBuiltinOps(opts)(renderA);
        var $406 = renderVariable(opts)(renderA);
        var $407 = renderBuiltinFuncs(opts);
        var $408 = renderBuiltinTypes(opts);
        var $409 = renderLiterals(opts);
        var $410 = Control_Category.identity(Control_Category.categoryFn);
        return function ($411) {
            return $401($402($403($404($405($406($407($408($409($410($411))))))))));
        };
    };
};
var indexFrom = function (loc) {
    var $412 = Dhall_Core_AST_Noted.notateIndexFrom(Dhall_Map.functorWithIndexIOSM)(loc);
    var $413 = Data_Bifunctor.lmap(Dhall_Core_AST_Noted.bifunctorExpr(Dhall_Map.functorIOSM))(Data_Tuple.Tuple.create);
    return function ($414) {
        return $412($413($414));
    };
};
var renderExprWith = function (dictShow) {
    return function (opts) {
        return function (customize) {
            var cons = function (ann) {
                return function (e) {
                    return Matryoshka_Class_Corecursive.embed(Dhall_Core_AST_Noted.corecursiveExpr)(new Data_Tuple.Tuple(ann, Data_Functor.map(Data_Functor_Variant.functorVariantF)(unindex)(e)));
                };
            };
            var go = function (enn) {
                return (function (v) {
                    return Dhall_Interactive_Halogen_AST.SlottedHTML((function () {
                        var df = Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Tuple.monoidTuple(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
                            return "collapsed";
                        }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil)))(Data_List_Types.monoidList)))(Dhall_Core_AST_Constructors.mkEmbed(Data_Maybe.Nothing.value));
                        return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("expression") ])((function () {
                            var custom = Data_Newtype.unwrap(newtypeCustomize)(customize)(enn);
                            return [ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("actions") ])(Data_Functor.mapFlipped(Data_Functor.functorArray)(custom.actions)(function (v1) {
                                return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("pre button") ])([ Data_Newtype.under(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(Dhall_Interactive_Halogen_AST.SlottedHTML)(Data_Functor.map(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_Function.applyFlipped(Data_Unit.unit)))(Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(v1.action)(v1.icon)(v1.tooltip)) ]);
                            })), Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(custom.wrap(function (v1) {
                                return Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose)(Data_Functor.map(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(cons(v.value0.value0))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(renderAllTheThings(opts)({
                                    df: df,
                                    rndr: (function () {
                                        var $415 = Data_Functor.map(Data_Functor_Compose.functorCompose(Dhall_Interactive_Halogen_AST.functorSlottedHTML)(Data_These.functorThese))(indexFrom(v.value0.value1));
                                        return function ($416) {
                                            return $415(Data_Functor_Compose.Compose(go($416)));
                                        };
                                    })()
                                })(renderVFLensed(new Data_Symbol.IsSymbol(function () {
                                    return "Embed";
                                }))()(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])([ mkLensed("value")(Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Shop.profunctorShop))(rendering((function () {
                                    var $417 = Data_Maybe.maybe("_")(Data_Show.show(dictShow));
                                    return function ($418) {
                                        return Halogen_HTML_Core.text($417($418));
                                    };
                                })())) ])(renderVFNone)))(Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF)(v.value1))));
                            })) ];
                        })());
                    })());
                })(Matryoshka_Class_Recursive.project(Dhall_Core_AST_Noted.recursiveExpr)(enn));
            };
            var $419 = indexFrom(Data_List_Types.Nil.value);
            return function ($420) {
                return go($419($420));
            };
        };
    };
};
var _topAnn = function (dictStrong) {
    var $421 = Data_Lens_Iso_Newtype["_Newtype"](Dhall_Core_AST_Noted.newtypeExpr)(Dhall_Core_AST_Noted.newtypeExpr)(dictStrong.Profunctor0());
    var $422 = Data_Lens_Lens.lens(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF)))(function (old) {
        return function (ann) {
            return Control_Comonad_Cofree.mkCofree(ann)(Control_Comonad_Cofree.tail(old));
        };
    })(dictStrong);
    return function ($423) {
        return $421($422($423));
    };
};
var _idx = function (dictStrong) {
    return Data_Lens_Lens_Tuple["_2"](dictStrong);
};
var _collapsed = function (dictStrong) {
    var $424 = Data_Lens_Lens_Tuple["_1"](dictStrong);
    var $425 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "collapsed";
    }))()()(Dhall_Core_AST_Types_Basics["_S"])(dictStrong);
    var $426 = Data_Lens_Iso_Newtype["_Newtype"](Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(dictStrong.Profunctor0());
    return function ($427) {
        return $424($425($426($427)));
    };
};
var collapsible = function (opts) {
    var $250 = !opts.interactive;
    if ($250) {
        return Data_Monoid.mempty(monoidCustomize);
    };
    return function (e) {
        var collapsed = Data_Lens_Getter.viewOn(e)((function () {
            var $428 = _topAnn(Data_Lens_Internal_Forget.strongForget);
            var $429 = _collapsed(Data_Lens_Internal_Forget.strongForget);
            return function ($430) {
                return $428($429($430));
            };
        })());
        return {
            actions: Control_Applicative.pure(Control_Applicative.applicativeArray)({
                icon: (function () {
                    if (collapsed) {
                        return "eye";
                    };
                    return "eye-off";
                })(),
                action: Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v) {
                    return Data_These.That.create(unindex(_topAnn(Data_Profunctor_Strong.strongFn)(_collapsed(Data_Profunctor_Strong.strongFn)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean)))(e)));
                }),
                tooltip: (function () {
                    if (collapsed) {
                        return "Show";
                    };
                    return "Hide";
                })()
            }),
            wrap: (function () {
                var $253 = !collapsed;
                if ($253) {
                    return Data_Function.applyFlipped(Data_Unit.unit);
                };
                return function (v) {
                    return Dhall_Interactive_Halogen_AST.SlottedHTML(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("collapsed") ])([  ]));
                };
            })()
        };
    };
};
var selectable = function (dictShow) {
    return function (opts) {
        return function (selectedIx) {
            return function (injIx) {
                var $254 = !opts.interactive;
                if ($254) {
                    return Data_Monoid.mempty(monoidCustomize);
                };
                return function (e) {
                    var hereIx = Data_Lens_Getter.viewOn(e)((function () {
                        var $431 = _topAnn(Data_Lens_Internal_Forget.strongForget);
                        var $432 = _idx(Data_Lens_Internal_Forget.strongForget);
                        return function ($433) {
                            return $431($432($433));
                        };
                    })());
                    var selected = Data_Eq.eq(Data_Maybe.eqMaybe(Data_List_Types.eqList(Data_Lazy.eqLazy(Dhall_Core_AST_Types.eqERVFI))))(new Data_Maybe.Just(hereIx))(selectedIx);
                    return {
                        actions: Control_Applicative.pure(Control_Applicative.applicativeArray)({
                            icon: (function () {
                                if (selected) {
                                    return "crosshair";
                                };
                                return "disc";
                            })(),
                            action: (function () {
                                if (selected) {
                                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v) {
                                        return new Data_These.This(injIx(Data_Maybe.Nothing.value));
                                    });
                                };
                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v) {
                                    return Data_These.Both.create(injIx(new Data_Maybe.Just(hereIx)))(unindex(Data_Lens_Setter.set((function () {
                                        var $434 = _topAnn(Data_Profunctor_Strong.strongFn);
                                        var $435 = _collapsed(Data_Profunctor_Strong.strongFn);
                                        return function ($436) {
                                            return $434($435($436));
                                        };
                                    })())(false)(e)));
                                });
                            })(),
                            tooltip: (function () {
                                if (selected) {
                                    return "Deselect";
                                };
                                return "Select this node";
                            })()
                        }),
                        wrap: (function () {
                            var $258 = !selected;
                            if ($258) {
                                return Data_Function.applyFlipped(Data_Unit.unit);
                            };
                            return function (inner) {
                                return Dhall_Interactive_Halogen_AST.SlottedHTML(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("selected") ])([ Data_Newtype.unwrap(Dhall_Interactive_Halogen_AST.newtypeSlottedHTML)(inner(Data_Unit.unit)) ]));
                            };
                        })()
                    };
                };
            };
        };
    };
};
var renderExprSelectable = function (dictShow) {
    return function (opts) {
        return function (selectedIx) {
            return renderExprWith(dictShow)(opts)(Data_Semigroup.append(semigroupCustomize)(selectable(Data_Maybe.showMaybe(dictShow))(opts)(selectedIx)(Control_Category.identity(Control_Category.categoryFn)))(collapsible(opts)));
        };
    };
};
module.exports = {
    rendering: rendering,
    unrendering: unrendering,
    unrenderingWith: unrenderingWith,
    renderingR: renderingR,
    renderNode: renderNode,
    LensedF: LensedF,
    mkLensed: mkLensed,
    renderVFNone: renderVFNone,
    renderVFLensed: renderVFLensed,
    lensedConst: lensedConst,
    renderMaybe: renderMaybe,
    renderIxTraversal: renderIxTraversal,
    renderArray: renderArray,
    renderIOSM: renderIOSM,
    renderString: renderString,
    renderNatural: renderNatural,
    renderBoolean: renderBoolean,
    renderInt: renderInt,
    renderNumber: renderNumber,
    renderBindingBody: renderBindingBody,
    renderLiterals: renderLiterals,
    renderBuiltinTypes: renderBuiltinTypes,
    renderBuiltinFuncs: renderBuiltinFuncs,
    renderBuiltinBinOps: renderBuiltinBinOps,
    renderImportSyntax: renderImportSyntax,
    renderBuiltinOps: renderBuiltinOps,
    renderBuiltinTypes2: renderBuiltinTypes2,
    renderLiterals2: renderLiterals2,
    renderVariable: renderVariable,
    renderSyntax: renderSyntax,
    renderAllTheThings: renderAllTheThings,
    Customize: Customize,
    mkActions: mkActions,
    mkInteractions: mkInteractions,
    indexFrom: indexFrom,
    unindex: unindex,
    renderExprWith: renderExprWith,
    renderExprSelectable: renderExprSelectable,
    "_topAnn": _topAnn,
    "_collapsed": _collapsed,
    "_idx": _idx,
    collapsible: collapsible,
    selectable: selectable,
    newtypeCustomize: newtypeCustomize,
    semigroupCustomize: semigroupCustomize,
    monoidCustomize: monoidCustomize
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../DOM.HTML.Indexed.InputType/index.js":74,"../DOM.HTML.Indexed.StepValue/index.js":82,"../Data.Array/index.js":91,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Exists/index.js":126,"../Data.Function/index.js":132,"../Data.Functor.App/index.js":133,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.Int/index.js":152,"../Data.Lazy/index.js":156,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Getter/index.js":158,"../Data.Lens.Indexed/index.js":159,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Shop/index.js":166,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Lens.Product/index.js":171,"../Data.Lens.Lens.Tuple/index.js":172,"../Data.Lens.Lens/index.js":173,"../Data.Lens.Record/index.js":176,"../Data.Lens.Setter/index.js":177,"../Data.Lens.Traversal/index.js":178,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Number/index.js":201,"../Data.Ord/index.js":205,"../Data.Profunctor.Star/index.js":211,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Ring/index.js":215,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Noted/index.js":263,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Interactive.Halogen.AST/index.js":277,"../Dhall.Interactive.Halogen.Inputs/index.js":279,"../Dhall.Map/index.js":284,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.Fold/index.js":358,"../Unsafe.Coerce/index.js":391}],277:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Interactive_Halogen_Inputs = require("../Dhall.Interactive.Halogen.Inputs/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Component_Profunctor = require("../Halogen.Component.Profunctor/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Elements_Keyed = require("../Halogen.HTML.Elements.Keyed/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Halogen_Zuruzuru = require("../Halogen.Zuruzuru/index.js");
var SlottedHTML = function (x) {
    return x;
};
var F = function (x) {
    return x;
};
var zz_map_o = function (adapt) {
    return function (v) {
        return function (datums) {
            return function (v1) {
                return Data_Functor.flap(Data_Functor.functorFn)(v)({
                    add: v1.add,
                    output: function ($112) {
                        return v1.output(adapt($112));
                    }
                })(Data_Functor.mapFlipped(Data_Functor.functorArray)(datums)(function (v2) {
                    return {
                        helpers: {
                            output: function ($113) {
                                return v2.helpers.output(adapt($113));
                            },
                            modify: v2.helpers.modify,
                            next: v2.helpers.next,
                            prev: v2.helpers.prev,
                            remove: v2.helpers.remove,
                            set: v2.helpers.set
                        },
                        handle: v2.handle,
                        info: v2.info
                    };
                }));
            };
        };
    };
};
var overEnvT = function (dictFunctor) {
    return function (f) {
        return function (i) {
            return function (v) {
                return Data_Functor.mapFlipped(dictFunctor)(Data_Newtype.un(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(f(i))(v.value1))(function (g$primea) {
                    return new Data_Tuple.Tuple(v.value0, g$primea);
                });
            };
        };
    };
};
var newtypeSlottedHTML = new Data_Newtype.Newtype(function (n) {
    return n;
}, SlottedHTML);
var listicle = (function () {
    var toState = function (v) {
        return {
            "default": v["value0"]["default"],
            renderer: v.value0.renderer,
            values: v.value1
        };
    };
    var lifting = function (v) {
        if (v instanceof Data_Either.Left) {
            return new Data_Maybe.Just(new Data_Either.Right(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Maybe.Just(new Data_Either.Left(v.value0));
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST (line 109, column 5 - line 109, column 38): " + [ v.constructor.name ]);
    };
    var com = function (st) {
        return {
            values: st.values,
            direction: Halogen_Zuruzuru.Vertical.value,
            "default": Control_Applicative.pure(Effect_Aff.applicativeAff)(st["default"]),
            renderer: st.renderer
        };
    };
    var render = function (st) {
        return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "zuruzuru";
        }))(Data_Ord.ordUnit)(Halogen_Zuruzuru["_zuruzuru"])(Data_Unit.unit)(Halogen_Zuruzuru["zuruzuru'"](Effect_Aff_Class.monadAffAff))(com(st))(lifting);
    };
    return Halogen_Component.mkComponent({
        initialState: toState,
        render: render,
        "eval": function (v) {
            if (v instanceof Halogen_Query_HalogenQ.Initialize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            };
            if (v instanceof Halogen_Query_HalogenQ.Finalize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            };
            if (v instanceof Halogen_Query_HalogenQ.Receive) {
                return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(toState(v.value0)));
            };
            if (v instanceof Halogen_Query_HalogenQ.Query) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1(Data_Unit.unit));
            };
            if (v instanceof Halogen_Query_HalogenQ.Action && v.value0 instanceof Data_Either.Left) {
                return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Halogen_Query_HalogenM.raise(new Data_Either.Left(v.value0.value0)));
            };
            if (v instanceof Halogen_Query_HalogenQ.Action && v.value0 instanceof Data_Either.Right) {
                if (v.value0.value0 instanceof Halogen_Zuruzuru.NewState) {
                    return Control_Apply.applyFirst(Halogen_Query_HalogenM.applyHalogenM)(Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                        var $62 = {};
                        for (var $63 in v2) {
                            if ({}.hasOwnProperty.call(v2, $63)) {
                                $62[$63] = v2[$63];
                            };
                        };
                        $62.values = v.value0.value0.value0;
                        return $62;
                    })))(Halogen_Query_HalogenM.raise(new Data_Either.Right(v.value0.value0.value0)));
                };
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST (line 78, column 11 - line 93, column 20): " + [ v.constructor.name ]);
        }
    });
})();
var listicleIOSM = Data_Newtype.un(Halogen_Component_Profunctor.newtypeProComponent)(Halogen_Component_Profunctor.ProComponent)(Data_Profunctor.dimap(Halogen_Component_Profunctor.profunctorProComponent(Data_Const.functorConst))(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(function (i) {
    return {
        "default": new Data_Tuple.Tuple(Data_Monoid.mempty(Data_Monoid.monoidString), i["default"]),
        renderer: i.renderer
    };
})(Dhall_Map.unIOSM))(Data_Functor.map(Data_Either.functorEither)(Dhall_Map.mkIOSM))(listicle));
var functorSlottedHTML = new Data_Functor.Functor(function (f) {
    return function (v) {
        var mapSlot = function (v1) {
            if (v1 instanceof Halogen_Component.ComponentSlot) {
                return Halogen_Component.ComponentSlot.create(Data_Functor.map(Halogen_Component.functorComponentSlotBox)(f)(v1.value0));
            };
            if (v1 instanceof Halogen_Component.ThunkSlot) {
                return Halogen_Component.ThunkSlot.create(Halogen_VDom_Thunk.hoist(Data_Bifunctor.lmap(Halogen_HTML_Core.bifunctorHTML)(mapSlot))(Data_Functor.map(Halogen_VDom_Thunk.functorThunk(Halogen_HTML_Core.functorHTML))(f)(v1.value0)));
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST (line 44, column 5 - line 44, column 62): " + [ v1.constructor.name ]);
        };
        return SlottedHTML(Data_Bifunctor.bimap(Halogen_HTML_Core.bifunctorHTML)(mapSlot)(f)(v));
    };
});
var renderArrayItems = function (syntax) {
    return function (each) {
        return function (output) {
            return function (v) {
                var moving = Halogen_HTML_Properties.attr("style")("transform: translateY(" + (Data_Show.show(Data_Show.showNumber)(v.info.offset) + "px)"));
                return Data_Tuple.Tuple.create("item-" + v.info.key)(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(output(Data_Unit.unit)))((function () {
                    var $78 = v.info.index === 0;
                    if ($78) {
                        return "minimize";
                    };
                    return "more-vertical";
                })())("Collapse"), Halogen_HTML_Elements.div_([ Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.map(functorSlottedHTML)(Data_Void.absurd)(syntax(v.info.index))) ]), Dhall_Interactive_Halogen_Inputs.icon_button_props([ moving, Halogen_HTML_Properties.ref(v.handle.label), Halogen_HTML_Events.onMouseDown(v.handle.onMouseDown), Halogen_HTML_Properties.class_("move"), Halogen_HTML_Properties.tabIndex(-1 | 0), Halogen_HTML_Properties.attr("data-tooltip")("Reorder (drag/drop)") ])("menu")("feather inline active move vertical"), Dhall_Interactive_Halogen_Inputs.inline_feather_button_props([ moving, Halogen_HTML_Events.onClick(function (v1) {
                    return new Data_Maybe.Just(v.helpers.remove);
                }), Halogen_HTML_Properties.attr("data-tooltip")("Remove item") ])("minus-square"), Halogen_HTML_Elements.div([ moving ])([ Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.mapFlipped(functorSlottedHTML)(each(v.info.key)(v.info.value))(v.helpers.set)) ]) ]));
            };
        };
    };
};
var mkArrayRenderer = function (extras) {
    return function (syntax) {
        return function (each) {
            return function (datums) {
                return function (v) {
                    return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("ast") ])(Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                        var postpend = v.add(Data_Array.length(datums));
                        var $83 = Data_Array["null"](datums);
                        if ($83) {
                            return Halogen_HTML_Elements.span_([ Halogen_HTML_Core.text(syntax(-1 | 0)), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(postpend))("plus-square")("Add item"), Halogen_HTML_Core.text(syntax(-2 | 0)) ]);
                        };
                        return Halogen_HTML_Elements_Keyed.div([ Halogen_HTML_Properties.class_("grid-container") ])((function () {
                            var items = Data_Functor.mapFlipped(Data_Functor.functorArray)(datums)(function (r) {
                                return renderArrayItems(function ($114) {
                                    return SlottedHTML(Halogen_HTML_Core.text(syntax($114)));
                                })(each)(function ($115) {
                                    return v.output(Data_Either.Left.create($115));
                                })({
                                    helpers: {
                                        prev: r.helpers.prev,
                                        next: r.helpers.next,
                                        modify: r.helpers.modify,
                                        remove: r.helpers.remove,
                                        set: r.helpers.set,
                                        output: function ($116) {
                                            return r.helpers.output(Data_Either.Left.create($116));
                                        }
                                    },
                                    handle: r.handle,
                                    info: r.info
                                });
                            });
                            var before = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                                return function (e) {
                                    return Data_Tuple.Tuple.create("before-" + Data_Show.show(Data_Show.showInt)(i))(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
                                        var $117 = Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML);
                                        var $118 = Data_Functor.map(functorSlottedHTML)(v.output);
                                        return function ($119) {
                                            return $117($118($119));
                                        };
                                    })())(e)));
                                };
                            })(extras.before);
                            var after = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                                return function (e) {
                                    return Data_Tuple.Tuple.create("after-" + Data_Show.show(Data_Show.showInt)(i))(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
                                        var $120 = Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML);
                                        var $121 = Data_Functor.map(functorSlottedHTML)(Data_Either.either(Control_Applicative.pure(Control_Applicative.applicativeFn)(postpend))(v.output));
                                        return function ($122) {
                                            return $120($121($122));
                                        };
                                    })())(e)));
                                };
                            })(extras.after);
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(before)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(items)(after));
                        })());
                    })()));
                };
            };
        };
    };
};
var renderIOSMItems = function (syntax) {
    return function (sep) {
        return function (each) {
            return function (output) {
                return function (v) {
                    var moving = Halogen_HTML_Properties.attr("style")("transform: translateY(" + (Data_Show.show(Data_Show.showNumber)(v.info.offset) + "px)"));
                    return Data_Tuple.Tuple.create("item-" + v.info.key)(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(output(Data_Unit.unit)))((function () {
                        var $91 = v.info.index === 0;
                        if ($91) {
                            return "minimize";
                        };
                        return "more-vertical";
                    })())("Collapse"), Halogen_HTML_Elements.div_([ Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.map(functorSlottedHTML)(Data_Void.absurd)(syntax(v.info.index))) ]), Dhall_Interactive_Halogen_Inputs.icon_button_props([ moving, Halogen_HTML_Properties.ref(v.handle.label), Halogen_HTML_Events.onMouseDown(v.handle.onMouseDown), Halogen_HTML_Properties.class_("move"), Halogen_HTML_Properties.tabIndex(-1 | 0), Halogen_HTML_Properties.attr("data-tooltip")("Reorder (drag/drop)") ])("menu")("feather inline active move vertical"), Dhall_Interactive_Halogen_Inputs.inline_feather_button_props([ moving, Halogen_HTML_Events.onClick(function (v1) {
                        return new Data_Maybe.Just(v.helpers.remove);
                    }), Halogen_HTML_Properties.attr("data-tooltip")("Remove field") ])("minus-square"), Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("input-parent"), moving ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "expanding";
                    }))(Data_Ord.ordArray(Data_Ord.ordString))(Data_Symbol.SProxy.value)([ v.info.key ])(Dhall_Interactive_Halogen_Inputs.expanding(DOM_HTML_Indexed_InputType.InputText.value))(Data_Tuple.fst(v.info.value))((function () {
                        var $123 = Data_Functor.flap(Data_Functor.functorFn)(Data_Tuple.Tuple.create)(Control_Comonad.extract(Data_Tuple.comonadTuple)(v.info.value));
                        return function ($124) {
                            return Data_Maybe.Just.create(v.helpers.set($123($124)));
                        };
                    })()), Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.map(functorSlottedHTML)(Data_Void.absurd)(sep)), Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.mapFlipped(functorSlottedHTML)(each(v.info.key)(Control_Comonad.extract(Data_Tuple.comonadTuple)(v.info.value)))((function () {
                        var $125 = Data_Tuple.Tuple.create(Data_Tuple.fst(v.info.value));
                        return function ($126) {
                            return v.helpers.set($125($126));
                        };
                    })())) ]) ]));
                };
            };
        };
    };
};
var mkIOSMRenderer = function (prior) {
    return function (syntax) {
        return function (sep) {
            return function (close) {
                return function (each) {
                    return function (datums) {
                        return function (v) {
                            return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("ast") ])(Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                                var postpend = v.add(Data_Array.length(datums));
                                var $96 = Data_Array["null"](datums);
                                if ($96) {
                                    return Halogen_HTML_Elements.span_([ Halogen_HTML_Core.text(syntax(-1 | 0)), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(postpend))("plus-square")("Add field"), Halogen_HTML_Core.text(close) ]);
                                };
                                return Halogen_HTML_Elements_Keyed.div([ Halogen_HTML_Properties.class_("grid-container") ])((function () {
                                    var items = Data_Functor.mapFlipped(Data_Functor.functorArray)(datums)(function (r) {
                                        return renderIOSMItems(function ($127) {
                                            return SlottedHTML(Halogen_HTML_Core.text(syntax($127)));
                                        })(SlottedHTML(Halogen_HTML_Core.text(sep)))(each)(function ($128) {
                                            return v.output(Data_Either.Left.create($128));
                                        })({
                                            helpers: {
                                                prev: r.helpers.prev,
                                                next: r.helpers.next,
                                                modify: r.helpers.modify,
                                                remove: r.helpers.remove,
                                                set: r.helpers.set,
                                                output: function ($129) {
                                                    return r.helpers.output(Data_Either.Left.create($129));
                                                }
                                            },
                                            handle: r.handle,
                                            info: r.info
                                        });
                                    });
                                    var before = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                                        return function (e) {
                                            return Data_Tuple.Tuple.create("before-" + Data_Show.show(Data_Show.showInt)(i))(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])(Data_Functor.map(Data_Functor.functorArray)((function () {
                                                var $130 = Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML);
                                                var $131 = Data_Functor.map(functorSlottedHTML)(function ($133) {
                                                    return v.output(Data_Either.Right.create($133));
                                                });
                                                return function ($132) {
                                                    return $130($131($132));
                                                };
                                            })())(e)));
                                        };
                                    })(prior);
                                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(before)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(items)([ Data_Tuple.Tuple.create("last")(Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("row") ])([ Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(v.output(new Data_Either.Left(Data_Unit.unit))))("minimize")("Collapse"), Halogen_HTML_Core.text(close), Dhall_Interactive_Halogen_Inputs.inline_feather_button_action(new Data_Maybe.Just(postpend))("plus-square")("Add field") ])) ]));
                                })());
                            })()));
                        };
                    };
                };
            };
        };
    };
};
var functorF = Data_Functor_Variant.functorVariantF;
var expanding = function (slot) {
    return function (value) {
        return function (inj) {
            return SlottedHTML(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                return "expanding";
            }))(Data_Ord.ordArray(Data_Ord.ordString))(Data_Symbol.SProxy.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(slot)([ "label" ]))(Dhall_Interactive_Halogen_Inputs.expanding(DOM_HTML_Indexed_InputType.InputText.value))(value)(function ($134) {
                return Data_Maybe.Just.create(inj($134));
            }));
        };
    };
};
var collapsible = function (collapsed) {
    return function (renderer) {
        return function (annot) {
            var collapse = function (v) {
                return function (r) {
                    var $99 = {};
                    for (var $100 in r) {
                        if ({}.hasOwnProperty.call(r, $100)) {
                            $99[$100] = r[$100];
                        };
                    };
                    $99.collapsed = !r.collapsed;
                    return $99;
                };
            };
            return zz_map_o(collapse)((function () {
                var $102 = !annot.collapsed;
                if ($102) {
                    return renderer;
                };
                return function (v) {
                    return function (v1) {
                        return Data_Newtype.un(newtypeSlottedHTML)(SlottedHTML)(Data_Functor.map(functorSlottedHTML)(v1.output)(collapsed));
                    };
                };
            })());
        };
    };
};
var annotated = function (f) {
    return function (v) {
        var v1 = f(v.value0);
        return Data_Functor.mapFlipped(functorSlottedHTML)(v1(v.value1))(function (v2) {
            if (v2 instanceof Data_Either.Left) {
                return new Data_Tuple.Tuple(v2.value0(v.value0), v.value1);
            };
            if (v2 instanceof Data_Either.Right) {
                return new Data_Tuple.Tuple(v.value0, v2.value0);
            };
            throw new Error("Failed pattern match at Dhall.Interactive.Halogen.AST (line 286, column 24 - line 288, column 31): " + [ v2.constructor.name ]);
        });
    };
};
var annotatedF = (function () {
    var $135 = Data_Lens_Iso_Newtype["_Newtype"](Control_Comonad_Env_Trans.newtypeEnvT)(Control_Comonad_Env_Trans.newtypeEnvT)(Data_Profunctor_Star.profunctorStar(functorSlottedHTML));
    return function ($136) {
        return $135(annotated($136));
    };
})();
var listicleSlot = function ($$default) {
    return function (renderer) {
        return function (slot) {
            return annotatedF(function (o) {
                return function (i) {
                    return SlottedHTML(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                        return "listicle";
                    }))(Data_Ord.ordArray(Data_Ord.ordString))(Data_Symbol.SProxy.value)(slot)(listicleIOSM)(new Data_Tuple.Tuple({
                        "default": $$default,
                        renderer: renderer(o)
                    }, i))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)));
                };
            });
        };
    };
};
module.exports = {
    SlottedHTML: SlottedHTML,
    expanding: expanding,
    overEnvT: overEnvT,
    listicle: listicle,
    listicleIOSM: listicleIOSM,
    mkIOSMRenderer: mkIOSMRenderer,
    renderIOSMItems: renderIOSMItems,
    mkArrayRenderer: mkArrayRenderer,
    renderArrayItems: renderArrayItems,
    annotated: annotated,
    annotatedF: annotatedF,
    listicleSlot: listicleSlot,
    zz_map_o: zz_map_o,
    collapsible: collapsible,
    F: F,
    functorSlottedHTML: functorSlottedHTML,
    newtypeSlottedHTML: newtypeSlottedHTML,
    functorF: functorF
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Monad.State.Class/index.js":53,"../DOM.HTML.Indexed.InputType/index.js":74,"../Data.Array/index.js":91,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Profunctor.Star/index.js":211,"../Data.Profunctor/index.js":213,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Void/index.js":260,"../Dhall.Interactive.Halogen.Inputs/index.js":279,"../Dhall.Map/index.js":284,"../Effect.Aff.Class/index.js":295,"../Effect.Aff/index.js":297,"../Halogen.Component.Profunctor/index.js":324,"../Halogen.Component/index.js":326,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements.Keyed/index.js":333,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.HTML/index.js":337,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query.HalogenQ/index.js":341,"../Halogen.VDom.Thunk/index.js":348,"../Halogen.Zuruzuru/index.js":352}],278:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var xlinkNS = "http://www.w3.org/1999/xlink";
var svgNS = "http://www.w3.org/2000/svg";
var use = Data_Functor.flap(Data_Functor.functorFn)(Halogen_HTML_Elements.elementNS(svgNS)("use"))([  ]);
var svg = Halogen_HTML_Elements.elementNS(svgNS)("svg");
var href = Halogen_HTML_Properties.attr("href");
var icon = function (i) {
    return Data_Functor.flap(Data_Functor.functorFn)(svg)([ use([ href("feather-sprite.svg#" + i) ]) ]);
};
var class_ = Halogen_HTML_Properties.attr("class");
module.exports = {
    svgNS: svgNS,
    xlinkNS: xlinkNS,
    svg: svg,
    use: use,
    class_: class_,
    href: href,
    icon: icon
};

},{"../Data.Functor/index.js":143,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Properties/index.js":336}],279:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Dhall_Interactive_Halogen_Icons = require("../Dhall.Interactive.Halogen.Icons/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Expanding = require("../Halogen.Expanding/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Down = (function () {
    function Down(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Down.create = function (value0) {
        return function (value1) {
            return new Down(value0, value1);
        };
    };
    return Down;
})();
var Up = (function () {
    function Up(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Up.create = function (value0) {
        return function (value1) {
            return new Up(value0, value1);
        };
    };
    return Up;
})();
var PassOn = (function () {
    function PassOn(value0) {
        this.value0 = value0;
    };
    PassOn.create = function (value0) {
        return new PassOn(value0);
    };
    return PassOn;
})();
var settings = function (t) {
    return {
        classes: [  ],
        type_: t,
        padding: {
            focused: Data_Exists.mkExists(CSS_Size.em(2.0)),
            blurred: Data_Exists.mkExists(CSS_Size.em(1.0))
        },
        style: Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.minWidth(CSS_Size.em(5.0)))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.maxWidth(CSS_Size.em(20.0)))(function () {
                return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("text-overflow"))("ellipsis");
            });
        })
    };
};
var icon_button_props = function (p) {
    return function (t) {
        return function (c) {
            return Halogen_HTML_Elements.button(p)([ Dhall_Interactive_Halogen_Icons.icon(t)([ Dhall_Interactive_Halogen_Icons.class_(c) ]) ]);
        };
    };
};
var inline_feather_button_props = function (p) {
    return function (t) {
        return icon_button_props(p)(t)("feather inline active");
    };
};
var icon_button_action = function (q) {
    return function (t) {
        return function (c) {
            return function (tip) {
                return icon_button_props([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(q)), Halogen_HTML_Properties.disabled(Data_Maybe.isNothing(q)), Halogen_HTML_Properties.attr("data-tooltip")(tip) ])(t)(c);
            };
        };
    };
};
var inline_feather_button_action = function (q) {
    return function (t) {
        return icon_button_action(q)(t)("feather inline active");
    };
};
var expanding = function (t) {
    var $$eval = function (v) {
        if (v instanceof Down) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0 !== Halogen_Expanding.toString(v1))(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(new Halogen_Expanding.Blurred(v.value0)));
            }));
        };
        if (v instanceof Up) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Halogen_Expanding.eqBlurry)(v.value0)(v1))(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value0))(function () {
                    return Halogen_Query_HalogenM.raise(Halogen_Expanding.toString(v.value0));
                }));
            }));
        };
        if (v instanceof PassOn) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                return "";
            }))(Data_Ord.ordUnit)(Data_Symbol.SProxy.value)(Data_Unit.unit)(Control_Apply.apply(Control_Monad_Free.freeApply)(Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Tuple.Tuple.create)(v.value0))(Halogen_Expanding.get)))(function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Monad_Error_Class.throwError(Halogen_Query_HalogenM.monadThrowHalogenM(Effect_Aff.monadThrowAff))(Effect_Exception.error("expanding component should have child"));
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v1.value0.value0)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v2) {
                        return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Halogen_Expanding.eqBlurry)(v1.value0.value1)(v2))(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v1.value0.value1));
                    }));
                };
                throw new Error("Failed pattern match at Dhall.Interactive.Halogen.Inputs (line 63, column 85 - line 68, column 22): " + [ v1.constructor.name ]);
            });
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.Inputs (line 51, column 12 - line 68, column 22): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: Halogen_Expanding.Blurred.create,
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $19 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($20) {
                    return $19($$eval($20));
                };
            })(),
            receive: (function () {
                var $21 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
                var $22 = Data_Function.applyFlipped(Data_Unit.unit);
                return function ($23) {
                    return $21($22(Down.create($23)));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        }),
        render: function (b) {
            return Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                return "";
            }))(Data_Ord.ordUnit)(Data_Symbol.SProxy.value)(Data_Unit.unit)(Halogen_Expanding.expandingComponent(Effect_Aff.monadEffectAff))(new Data_Tuple.Tuple(settings(t), b))((function () {
                var $24 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
                var $25 = Data_Function.applyFlipped(Data_Unit.unit);
                return function ($26) {
                    return $24($25(Up.create($26)));
                };
            })());
        }
    });
};
module.exports = {
    Down: Down,
    Up: Up,
    PassOn: PassOn,
    settings: settings,
    expanding: expanding,
    icon_button_action: icon_button_action,
    icon_button_props: icon_button_props,
    inline_feather_button_action: inline_feather_button_action,
    inline_feather_button_props: inline_feather_button_props
};

},{"../CSS.Geometry/index.js":6,"../CSS.Property/index.js":7,"../CSS.Size/index.js":10,"../CSS.String/index.js":11,"../CSS.Stylesheet/index.js":12,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Free/index.js":42,"../Control.Monad.State.Class/index.js":53,"../Data.Eq/index.js":123,"../Data.Exists/index.js":126,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Dhall.Interactive.Halogen.Icons/index.js":278,"../Effect.Aff/index.js":297,"../Effect.Exception/index.js":303,"../Halogen.Component/index.js":326,"../Halogen.Expanding/index.js":330,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.HTML/index.js":337,"../Halogen.Query.HalogenM/index.js":340}],280:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var In = (function () {
    function In(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    In.create = function (value0) {
        return function (value1) {
            return new In(value0, value1);
        };
    };
    return In;
})();
var Out = (function () {
    function Out(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Out.create = function (value0) {
        return function (value1) {
            return new Out(value0, value1);
        };
    };
    return Out;
})();
var stringH = function (v) {
    return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputText.value), Halogen_HTML_Properties.value(v), Halogen_HTML_Events.onValueInput(Control_Applicative.pure(Data_Maybe.applicativeMaybe)) ]);
};
var simpleC = function (renderer) {
    var $$eval = function (v) {
        if (v instanceof In) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value1));
        };
        if (v instanceof Out) {
            return Control_Apply.applyFirst(Halogen_Query_HalogenM.applyHalogenM)(Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value1)))(Halogen_Query_HalogenM.raise(v.value1));
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.Types (line 208, column 12 - line 210, column 43): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: Control_Category.identity(Control_Category.categoryFn),
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $85 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($86) {
                    return $85($$eval($86));
                };
            })(),
            receive: (function () {
                var $87 = In.create(Data_Unit.unit);
                return function ($88) {
                    return Data_Maybe.Just.create($87($88));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        }),
        render: (function () {
            var $89 = Data_Bifunctor.bimap(Halogen_HTML_Core.bifunctorHTML)(Data_Void.absurd)(Out.create(Data_Unit.unit));
            var $90 = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(renderer);
            return function ($91) {
                return $89($90($91));
            };
        })()
    });
};
var renderProd = function (dictFunctor) {
    return function (a) {
        return function (b) {
            return function (t) {
                return new Data_Tuple.Tuple(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Strong.first(Data_Profunctor_Star.strongStar(dictFunctor))(a))(t), Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Strong.second(Data_Profunctor_Star.strongStar(dictFunctor))(b))(t));
            };
        };
    };
};
var renderProdC = function (dictApplicative) {
    return function (dictFunctor) {
        return function (a) {
            return function (b) {
                return function (t) {
                    return Data_Tuple.uncurry(Data_Function.on(Control_Apply.lift2(dictApplicative.Apply0())(Data_Tuple.Tuple.create))(Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)))(renderProd(Data_Functor_Compose.functorCompose((dictApplicative.Apply0()).Functor0())(dictFunctor))(a)(b)(t));
                };
            };
        };
    };
};
var renderPairC = function (dictApplicative) {
    return function (dictFunctor) {
        return function (a) {
            return function (v) {
                return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(renderProdC(dictApplicative)(dictFunctor)(a)(a)(new Data_Tuple.Tuple(v.value0, v.value1)))(function (v1) {
                    return Data_Functor.mapFlipped(Dhall_Core_AST_Types_Basics.functorPair)(new Dhall_Core_AST_Types_Basics.Pair(v1.value0, v1.value1))(Data_Functor.map(dictFunctor)(function (v2) {
                        return new Dhall_Core_AST_Types_Basics.Pair(v2.value0, v2.value1);
                    }));
                });
            };
        };
    };
};
var renderPair = function (dictFunctor) {
    return function (a) {
        return function (v) {
            var v1 = renderProd(dictFunctor)(a)(a)(new Data_Tuple.Tuple(v.value0, v.value1));
            return Data_Functor.mapFlipped(Dhall_Core_AST_Types_Basics.functorPair)(new Dhall_Core_AST_Types_Basics.Pair(v1.value0, v1.value1))(Data_Functor.map(dictFunctor)(function (v2) {
                return new Dhall_Core_AST_Types_Basics.Pair(v2.value0, v2.value1);
            }));
        };
    };
};
var renderOverAnnot = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictFunctor1) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (s) {
                        return function (h) {
                            return function (r) {
                                return function (a) {
                                    return function (v) {
                                        return (function () {
                                            var addEnv = function (i) {
                                                return new Data_Tuple.Tuple(v.value0, i);
                                            };
                                            return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))((function () {
                                                var $92 = Data_Functor_Variant.inj(dictCons1)(dictIsSymbol)(dictFunctor1)(s);
                                                return function ($93) {
                                                    return addEnv($92($93));
                                                };
                                            })())(h(a))))((function () {
                                                var $94 = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))(Control_Comonad_Env_Trans.mapEnvT(Unsafe_Coerce.unsafeCoerce))(r(a)));
                                                return function ($95) {
                                                    return $94(addEnv($95));
                                                };
                                            })());
                                        })()(v.value1);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var renderOnAnnot = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictFunctor1) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (s) {
                        return function (h) {
                            return function (r) {
                                return function (a) {
                                    return function (v) {
                                        return (function () {
                                            var addEnv = function (i) {
                                                return new Data_Tuple.Tuple(v.value0, i);
                                            };
                                            return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)((function () {
                                                var $96 = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))(Control_Comonad_Env_Trans.mapEnvT(Data_Functor_Variant.inj(dictCons1)(dictIsSymbol)(dictFunctor1)(s)))(h(a)));
                                                return function ($97) {
                                                    return $96(addEnv($97));
                                                };
                                            })())((function () {
                                                var $98 = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))(Control_Comonad_Env_Trans.mapEnvT(Unsafe_Coerce.unsafeCoerce))(r(a)));
                                                return function ($99) {
                                                    return $98(addEnv($99));
                                                };
                                            })());
                                        })()(v.value1);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var renderOn = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictFunctor1) {
            return function (dictCons) {
                return function (dictCons1) {
                    return function (s) {
                        return function (h) {
                            return function (r) {
                                return function (a) {
                                    return Data_Profunctor_Star.Star(Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))(Data_Functor_Variant.inj(dictCons1)(dictIsSymbol)(dictFunctor1)(s))(h(a))))(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(Data_Functor.map(Data_Profunctor_Star.functorStar(dictFunctor))(Unsafe_Coerce.unsafeCoerce)(r(a)))));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var renderOnConst = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictCons) {
            return function (dictCons1) {
                return function (s) {
                    return function (h) {
                        return renderOn(dictIsSymbol)(dictFunctor)(Data_Const.functorConst)(dictCons)(dictCons1)(s)(Data_Function["const"](Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Profunctor_Star.profunctorStar(dictFunctor))(h)));
                    };
                };
            };
        };
    };
};
var renderName = function (dictIsSymbol) {
    return function (dictFunctor) {
        return function (dictCons) {
            return function (dictCons1) {
                return function (s) {
                    return function (h) {
                        return renderOnConst(dictIsSymbol)(dictFunctor)(dictCons)(dictCons1)(s)(function (v) {
                            return h(Data_Symbol.reflectSymbol(dictIsSymbol)(s));
                        });
                    };
                };
            };
        };
    };
};
var renderCase = function (v) {
    return Data_Functor_Variant.case_;
};
var naturalH = function (v) {
    return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputNumber.value), Halogen_HTML_Properties.min(0), Halogen_HTML_Properties.step(new DOM_HTML_Indexed_StepValue.Step(1)), Halogen_HTML_Properties.value(Data_Show.show(Data_Natural.showNatural)(v)), Halogen_HTML_Events.onValueInput((function () {
        var $100 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Natural.intToNat);
        return function ($101) {
            return $100(Data_Int.fromString($101));
        };
    })()) ]);
};
var intH = function (v) {
    return Halogen_HTML_Elements.span_([ Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(-v | 0))) ])([ Halogen_HTML_Core.text((function () {
        var $78 = v < 0;
        if ($78) {
            return "-";
        };
        return "+";
    })()) ]), Data_Functor.mapFlipped(Halogen_HTML_Core.functorHTML)(Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(naturalH)(Data_Natural.intToNat(v)))((function () {
        var $102 = Data_Semiring.mul(Data_Semiring.semiringInt)(Data_Ord.signum(Data_Ord.ordInt)(Data_Ring.ringInt)(v));
        return function ($103) {
            return $102(Data_Natural.natToInt($103));
        };
    })()) ]);
};
var functorInOut = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof In) {
            return new In(f(m.value0), m.value1);
        };
        if (m instanceof Out) {
            return new Out(f(m.value0), m.value1);
        };
        throw new Error("Failed pattern match at Dhall.Interactive.Halogen.Types (line 193, column 1 - line 193, column 50): " + [ m.constructor.name ]);
    };
});
var doubleH = function (v) {
    return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputNumber.value), Halogen_HTML_Properties.step(new DOM_HTML_Indexed_StepValue.Step(0.5)), Halogen_HTML_Properties.value(Data_Show.show(Data_Show.showNumber)(Data_Ord.abs(Data_Ord.ordNumber)(Data_Ring.ringNumber)(v))), Halogen_HTML_Events.onValueInput(Data_Number.fromString) ]);
};
var boolH = function (v) {
    return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(!v))) ])([ Halogen_HTML_Core.text((function () {
        if (v) {
            return "True";
        };
        return "False";
    })()) ]);
};
module.exports = {
    renderCase: renderCase,
    renderOn: renderOn,
    renderOnAnnot: renderOnAnnot,
    renderOverAnnot: renderOverAnnot,
    renderOnConst: renderOnConst,
    renderName: renderName,
    renderProd: renderProd,
    renderProdC: renderProdC,
    renderPair: renderPair,
    renderPairC: renderPairC,
    naturalH: naturalH,
    boolH: boolH,
    intH: intH,
    stringH: stringH,
    doubleH: doubleH,
    In: In,
    Out: Out,
    simpleC: simpleC,
    functorInOut: functorInOut
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Monad.State.Class/index.js":53,"../DOM.HTML.Indexed.InputType/index.js":74,"../DOM.HTML.Indexed.StepValue/index.js":82,"../Data.Bifunctor/index.js":98,"../Data.Const/index.js":108,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Maybe/index.js":187,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Number/index.js":201,"../Data.Ord/index.js":205,"../Data.Profunctor.Star/index.js":211,"../Data.Profunctor.Strong/index.js":212,"../Data.Ring/index.js":215,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Void/index.js":260,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Halogen.Component/index.js":326,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.Query.HalogenM/index.js":340,"../Unsafe.Coerce/index.js":391}],281:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Dhall_Core_AST_Noted = require("../Dhall.Core.AST.Noted/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Interactive_Halogen_AST_Tree_Editor = require("../Dhall.Interactive.Halogen.AST.Tree.Editor/index.js");
var Dhall_Interactive_Halogen_Types = require("../Dhall.Interactive.Halogen.Types/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");
var parserC = (function () {
    var render = Data_Functor.flap(Data_Functor.functorFn)(Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
        return "editor";
    }))(Data_Ord.ordUnit)(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Dhall_Interactive_Halogen_AST_Tree_Editor.editor))((function () {
        var $11 = Dhall_Interactive_Halogen_Types.Out.create(Data_Unit.unit);
        return function ($12) {
            return Data_Maybe.Just.create($11($12));
        };
    })());
    var $$eval = function (v) {
        if (v instanceof Dhall_Interactive_Halogen_Types.In) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value1));
        };
        if (v instanceof Dhall_Interactive_Halogen_Types.Out) {
            return Control_Apply.applyFirst(Halogen_Query_HalogenM.applyHalogenM)(Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value1)))(Halogen_Query_HalogenM.raise(v.value1));
        };
        throw new Error("Failed pattern match at Dhall.Interactive (line 26, column 12 - line 28, column 43): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: Control_Category.identity(Control_Category.categoryFn),
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $13 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($14) {
                    return $13($$eval($14));
                };
            })(),
            receive: (function () {
                var $15 = Dhall_Interactive_Halogen_Types.In.create(Data_Unit.unit);
                return function ($16) {
                    return Data_Maybe.Just.create($15($16));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        }),
        render: render
    });
})();
var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (v) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Halogen_VDom_Driver.runUI(parserC)(Dhall_Core_AST_Noted.innote(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
        return "collapsed";
    }))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))()(Data_Monoid.monoidRecordNil))))(Control_Applicative.pure(Dhall_Core_AST_Types.applicativeExpr)(Data_Maybe.Nothing.value)))(v))(function (v1) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
    });
}));
module.exports = {
    parserC: parserC,
    main: main
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.State.Class/index.js":53,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Symbol/index.js":240,"../Data.Unit/index.js":257,"../Dhall.Core.AST.Noted/index.js":263,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Interactive.Halogen.AST.Tree.Editor/index.js":275,"../Dhall.Interactive.Halogen.Types/index.js":280,"../Effect.Aff/index.js":297,"../Halogen.Aff.Util/index.js":323,"../Halogen.Component/index.js":326,"../Halogen.HTML/index.js":337,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.VDom.Driver/index.js":346}],282:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var DualAp = function (x) {
    return x;
};
var newtypeDualAp = new Data_Newtype.Newtype(function (n) {
    return n;
}, DualAp);
var functorDualAp = function (dictFunctor) {
    return dictFunctor;
};
var applyDualAp = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorDualAp(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return DualAp(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function.applyFlipped)(v1))(v));
        };
    });
};
var applicativeDualAp = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyDualAp(dictApplicative.Apply0());
    }, (function () {
        var $10 = Control_Applicative.pure(dictApplicative);
        return function ($11) {
            return DualAp($10($11));
        };
    })());
};
module.exports = {
    DualAp: DualAp,
    newtypeDualAp: newtypeDualAp,
    functorDualAp: functorDualAp,
    applyDualAp: applyDualAp,
    applicativeDualAp: applicativeDualAp
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197}],283:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Dhall_Lib_DualAp = require("../Dhall.Lib.DualAp/index.js");
var Timeline = (function () {
    function Timeline(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Timeline.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Timeline(value0, value1, value2);
            };
        };
    };
    return Timeline;
})();
var unhappen = function (v) {
    if (v.value0 instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v.value0 instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Timeline(v.value0.value1, v.value0.value0, new Data_List_Types.Cons(v.value1, v.value2)));
    };
    throw new Error("Failed pattern match at Dhall.Lib.Timeline (line 108, column 1 - line 108, column 55): " + [ v.constructor.name ]);
};
var rehappen = function (v) {
    if (v.value2 instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (v.value2 instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Timeline(new Data_List_Types.Cons(v.value1, v.value0), v.value2.value0, v.value2.value1));
    };
    throw new Error("Failed pattern match at Dhall.Lib.Timeline (line 112, column 1 - line 112, column 55): " + [ v.constructor.name ]);
};
var neahistorical = function (v) {
    var v1 = Data_List.reverse(v.value0);
    if (v1 instanceof Data_List_Types.Nil) {
        return new Data_NonEmpty.NonEmpty(v.value1, v.value2);
    };
    if (v1 instanceof Data_List_Types.Cons) {
        return new Data_NonEmpty.NonEmpty(v1.value0, Control_Alt.alt(Data_List_Types.altList)(Control_Alt.alt(Data_List_Types.altList)(v1.value1)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1)))(v.value2));
    };
    throw new Error("Failed pattern match at Dhall.Lib.Timeline (line 101, column 47 - line 103, column 37): " + [ v1.constructor.name ]);
};
var happen = function (a$prime) {
    return function (v) {
        return new Timeline(new Data_List_Types.Cons(v.value1, v.value0), a$prime, Control_Plus.empty(Data_List_Types.plusList));
    };
};
var functorTimeline = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new Timeline(Data_Functor.map(Data_List_Types.functorList)(f)(m.value0), f(m.value1), Data_Functor.map(Data_List_Types.functorList)(f)(m.value2));
    };
});
var functorWithIndexTimeline = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorTimeline;
}, function (f) {
    return function (v) {
        return new Timeline(Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList)((function () {
            var $210 = Data_Ring.negate(Data_Ring.ringInt);
            var $211 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
            return function ($212) {
                return f($210($211($212)));
            };
        })())(v.value0), f(0)(v.value1), Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList)((function () {
            var $213 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
            return function ($214) {
                return f($213($214));
            };
        })())(v.value2));
    };
});
var foldableTimeline = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.un(Data_Newtype.newtypeDual)(Data_Monoid_Dual.Dual)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid_Dual.monoidDual(dictMonoid))(function ($215) {
                return Data_Monoid_Dual.Dual(f($215));
            })(v.value0)))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value1))(Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(v.value2)));
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(f(Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.flip(f))(z)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(f))(f(v.value1)(Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(v.value2)))(v.value0);
        };
    };
});
var foldableWithIndexTimeline = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableTimeline;
}, function (dictMonoid) {
    return function (f) {
        return function (v) {
            return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.un(Data_Newtype.newtypeDual)(Data_Monoid_Dual.Dual)(Data_FoldableWithIndex.foldMapWithIndex(Data_List_Types.foldableWithIndexList)(Data_Monoid_Dual.monoidDual(dictMonoid))((function () {
                var $216 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Monoid_Dual.Dual);
                var $217 = Data_Ring.negate(Data_Ring.ringInt);
                var $218 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($219) {
                    return $216(f($217($218($219))));
                };
            })())(v.value0)))(Data_Semigroup.append(dictMonoid.Semigroup0())(f(0)(v.value1))(Data_FoldableWithIndex.foldMapWithIndex(Data_List_Types.foldableWithIndexList)(dictMonoid)((function () {
                var $220 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($221) {
                    return f($220($221));
                };
            })())(v.value2)));
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_List_Types.foldableWithIndexList)((function () {
                var $222 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($223) {
                    return f($222($223));
                };
            })())(f(0)(Data_FoldableWithIndex.foldrWithIndex(Data_List_Types.foldableWithIndexList)((function () {
                var $224 = Data_Ring.negate(Data_Ring.ringInt);
                var $225 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($226) {
                    return Data_Function.flip(f($224($225($226))));
                };
            })())(z)(v.value0))(v.value1))(v.value2);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_List_Types.foldableWithIndexList)((function () {
                var $227 = Data_Ring.negate(Data_Ring.ringInt);
                var $228 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($229) {
                    return Data_Function.flip(f($227($228($229))));
                };
            })())(f(0)(v.value1)(Data_FoldableWithIndex.foldrWithIndex(Data_List_Types.foldableWithIndexList)((function () {
                var $230 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($231) {
                    return f($230($231));
                };
            })())(z)(v.value2)))(v.value0);
        };
    };
});
var traversableTimeline = new Data_Traversable.Traversable(function () {
    return foldableTimeline;
}, function () {
    return functorTimeline;
}, function (dictApplicative) {
    return function (v) {
        return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Timeline.create)(Data_Newtype.un(Dhall_Lib_DualAp.newtypeDualAp)(Dhall_Lib_DualAp.DualAp)(Data_Traversable.traverse(Data_List_Types.traversableList)(Dhall_Lib_DualAp.applicativeDualAp(dictApplicative))(Dhall_Lib_DualAp.DualAp)(v.value0))))(v.value1))(Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(v.value2));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Timeline.create)(Data_Newtype.un(Dhall_Lib_DualAp.newtypeDualAp)(Dhall_Lib_DualAp.DualAp)(Data_Traversable.traverse(Data_List_Types.traversableList)(Dhall_Lib_DualAp.applicativeDualAp(dictApplicative))(function ($232) {
                return Dhall_Lib_DualAp.DualAp(f($232));
            })(v.value0))))(f(v.value1)))(Data_Traversable.traverse(Data_List_Types.traversableList)(dictApplicative)(f)(v.value2));
        };
    };
});
var traversableWithIndexTimeline = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexTimeline;
}, function () {
    return functorWithIndexTimeline;
}, function () {
    return traversableTimeline;
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Timeline.create)(Data_Newtype.un(Dhall_Lib_DualAp.newtypeDualAp)(Dhall_Lib_DualAp.DualAp)(Data_TraversableWithIndex.traverseWithIndex(Data_List_Types.traversableWithIndexList)(Dhall_Lib_DualAp.applicativeDualAp(dictApplicative))((function () {
                var $233 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Dhall_Lib_DualAp.DualAp);
                var $234 = Data_Ring.negate(Data_Ring.ringInt);
                var $235 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($236) {
                    return $233(f($234($235($236))));
                };
            })())(v.value0))))(f(0)(v.value1)))(Data_TraversableWithIndex.traverseWithIndex(Data_List_Types.traversableWithIndexList)(dictApplicative)((function () {
                var $237 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
                return function ($238) {
                    return f($237($238));
                };
            })())(v.value2));
        };
    };
});
var foldable1Timeline = new Data_Semigroup_Foldable.Foldable1(function () {
    return foldableTimeline;
}, function (dictSemigroup) {
    return function (v) {
        return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Semigroup.append(dictSemigroup))(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(Data_Semigroup.append(dictSemigroup)))(v.value1)(v.value0))(v.value2);
    };
}, function (dictSemigroup) {
    return function (f) {
        return function (v) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(function (r) {
                return function (e) {
                    return Data_Semigroup.append(dictSemigroup)(r)(f(e));
                };
            })(Data_Foldable.foldl(Data_List_Types.foldableList)(function (r) {
                return function (e) {
                    return Data_Semigroup.append(dictSemigroup)(f(e))(r);
                };
            })(f(v.value1))(v.value0))(v.value2);
        };
    };
});
var extendTimeline = new Control_Extend.Extend(function () {
    return functorTimeline;
}, function (f) {
    return function (v) {
        var gather = function (passed) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return Data_List_Types.Nil.value;
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return new Data_List_Types.Cons(new Timeline(passed, v1.value0, v1.value1), gather(new Data_List_Types.Cons(v1.value0, passed))(v1.value1));
                };
                throw new Error("Failed pattern match at Dhall.Lib.Timeline (line 78, column 7 - line 78, column 64): " + [ passed.constructor.name, v1.constructor.name ]);
            };
        };
        return new Timeline(Data_Functor.mapFlipped(Data_List_Types.functorList)(gather(new Data_List_Types.Cons(v.value1, v.value2))(v.value0))(function (v1) {
            return f(new Timeline(v1.value2, v1.value1, v1.value0));
        }), f(v), Data_Functor.mapFlipped(Data_List_Types.functorList)(gather(new Data_List_Types.Cons(v.value1, v.value0))(v.value2))(function (v1) {
            return f(new Timeline(v1.value0, v1.value1, v1.value2));
        }));
    };
});
var eqTimeline = function (dictEq) {
    return new Data_Eq.Eq(function (x) {
        return function (y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1) && Data_Eq.eq(Data_List_Types.eqList(dictEq))(x.value2)(y.value2);
        };
    });
};
var ordTimeline = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqTimeline(dictOrd.Eq0());
    }, function (x) {
        return function (y) {
            var v = Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            var v1 = Data_Ord.compare(dictOrd)(x.value1)(y.value1);
            if (v1 instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v1 instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x.value2)(y.value2);
        };
    });
};
var eq1Timeline = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqTimeline(dictEq));
});
var ord1Timeline = new Data_Ord.Ord1(function () {
    return eq1Timeline;
}, function (dictOrd) {
    return Data_Ord.compare(ordTimeline(dictOrd));
});
var comonadTimeline = new Control_Comonad.Comonad(function () {
    return extendTimeline;
}, function (v) {
    return v.value1;
});
var ahistorical = function (v) {
    return Control_Alt.alt(Data_List_Types.altList)(Control_Alt.alt(Data_List_Types.altList)(Data_List.reverse(v.value0))(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1)))(v.value2);
};
var monadTimeline = new Control_Monad.Monad(function () {
    return applicativeTimeline;
}, function () {
    return bindTimeline;
});
var bindTimeline = new Control_Bind.Bind(function () {
    return applyTimeline;
}, function (v) {
    return function (f) {
        var v1 = f(v.value1);
        return new Timeline(Control_Alt.alt(Data_List_Types.altList)(Control_Bind.bind(Data_List_Types.bindList)(v.value0)(function ($239) {
            return Data_List.reverse(ahistorical(f($239)));
        }))(v1.value0), v1.value1, Control_Alt.alt(Data_List_Types.altList)(v1.value2)(Control_Bind.bind(Data_List_Types.bindList)(v.value2)(function ($240) {
            return ahistorical(f($240));
        })));
    };
});
var applyTimeline = new Control_Apply.Apply(function () {
    return functorTimeline;
}, Control_Monad.ap(monadTimeline));
var applicativeTimeline = new Control_Applicative.Applicative(function () {
    return applyTimeline;
}, function (a) {
    return new Timeline(Control_Plus.empty(Data_List_Types.plusList), a, Control_Plus.empty(Data_List_Types.plusList));
});
module.exports = {
    Timeline: Timeline,
    ahistorical: ahistorical,
    neahistorical: neahistorical,
    happen: happen,
    unhappen: unhappen,
    rehappen: rehappen,
    eqTimeline: eqTimeline,
    ordTimeline: ordTimeline,
    eq1Timeline: eq1Timeline,
    ord1Timeline: ord1Timeline,
    functorTimeline: functorTimeline,
    functorWithIndexTimeline: functorWithIndexTimeline,
    foldableTimeline: foldableTimeline,
    foldableWithIndexTimeline: foldableWithIndexTimeline,
    traversableTimeline: traversableTimeline,
    traversableWithIndexTimeline: traversableWithIndexTimeline,
    foldable1Timeline: foldable1Timeline,
    extendTimeline: extendTimeline,
    comonadTimeline: comonadTimeline,
    applyTimeline: applyTimeline,
    applicativeTimeline: applicativeTimeline,
    bindTimeline: bindTimeline,
    monadTimeline: monadTimeline
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad/index.js":60,"../Control.Plus/index.js":65,"../Control.Semigroupoid/index.js":68,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Maybe/index.js":187,"../Data.Monoid.Dual/index.js":192,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Ring/index.js":215,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Dhall.Lib.DualAp/index.js":282}],284:[function(require,module,exports){
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var InsOrdMap = function (x) {
    return x;
};

// This abstracts the functor used for record and union cases in the AST
// (the major difference being that sometimes we want sorting vs ordering)
var MapLike = function (Ord0, Ord11, TraversableWithIndex2, alter, $$delete, empty, fromFoldable, get, isEmpty, modify, size, toUnfoldable, unionWith) {
    this.Ord0 = Ord0;
    this.Ord11 = Ord11;
    this.TraversableWithIndex2 = TraversableWithIndex2;
    this.alter = alter;
    this["delete"] = $$delete;
    this.empty = empty;
    this.fromFoldable = fromFoldable;
    this.get = get;
    this.isEmpty = isEmpty;
    this.modify = modify;
    this.size = size;
    this.toUnfoldable = toUnfoldable;
    this.unionWith = unionWith;
};

// | This is how I think a union of two maps is most properly defined ...
var unionWithMapThese = function (dictOrd) {
    return function (f) {
        return function (ma) {
            return function (mb) {
                var combine = function (v) {
                    return function (v1) {
                        if (v instanceof Data_These.This && v1 instanceof Data_These.That) {
                            return new Data_These.Both(v.value0, v1.value0);
                        };
                        if (v instanceof Data_These.That && v1 instanceof Data_These.This) {
                            return new Data_These.Both(v1.value0, v.value0);
                        };
                        if (v instanceof Data_These.Both) {
                            return new Data_These.Both(v.value0, v.value1);
                        };
                        if (v instanceof Data_These.This && v1 instanceof Data_These.Both) {
                            return new Data_These.Both(v.value0, v1.value1);
                        };
                        if (v instanceof Data_These.That && v1 instanceof Data_These.Both) {
                            return new Data_These.Both(v1.value0, v.value0);
                        };
                        if (v instanceof Data_These.That && v1 instanceof Data_These.That) {
                            return new Data_These.That(v.value0);
                        };
                        if (v instanceof Data_These.This && v1 instanceof Data_These.This) {
                            return new Data_These.This(v.value0);
                        };
                        throw new Error("Failed pattern match at Dhall.Map (line 57, column 15 - line 64, column 31): " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
                return Data_Map_Internal.mapMaybeWithKey(dictOrd)(f)(Data_Map_Internal.unionWith(dictOrd)(combine)(Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.This.create)(ma))(Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.That.create)(mb)));
            };
        };
    };
};
var unionWith = function (dict) {
    return dict.unionWith;
};
var unIOSM = function (v) {
    return v;
};
var traversableIOSM = Data_Functor_Compose.traversableCompose(Data_Traversable.traversableArray)(Data_Tuple.traversableTuple);
var toUnfoldable = function (dict) {
    return dict.toUnfoldable;
};
var symmetricDiff = function (dictMapLike) {
    return unionWith(dictMapLike)(function (v) {
        return function (v1) {
            if (v1 instanceof Data_These.Both) {
                return Data_Maybe.Nothing.value;
            };
            if (v1 instanceof Data_These.This) {
                return new Data_Maybe.Just(new Data_Either.Left(v1.value0));
            };
            if (v1 instanceof Data_These.That) {
                return new Data_Maybe.Just(new Data_Either.Right(v1.value0));
            };
            throw new Error("Failed pattern match at Dhall.Map (line 46, column 33 - line 49, column 27): " + [ v1.constructor.name ]);
        };
    });
};
var strMapMapString = function (dictOrd) {
    return new MapLike(function () {
        return dictOrd;
    }, function () {
        return Data_Map_Internal.ord1Map(dictOrd);
    }, function () {
        return Data_Map_Internal.traversableWithIndexMap;
    }, Data_Function.flip(Data_Map_Internal.alter(dictOrd)), function (k) {
        return function (m) {
            return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Data_Map_Internal.lookup(dictOrd)(k)(m))(Data_Map_Internal["delete"](dictOrd)(k)(m));
        };
    }, Data_Map_Internal.empty, function (dictFoldable) {
        return Data_Map_Internal.fromFoldable(dictOrd)(dictFoldable);
    }, Data_Map_Internal.lookup(dictOrd), Data_Map_Internal.isEmpty, function (k) {
        return function (f) {
            return function (m) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictOrd)(k)(m))(function (v) {
                    var v2 = f(v);
                    var m$prime = (function () {
                        var $83 = Data_Eq.eq(dictOrd.Eq0())(k)(v2.value0);
                        if ($83) {
                            return m;
                        };
                        return Data_Map_Internal["delete"](dictOrd)(k)(m);
                    })();
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Map_Internal.insert(dictOrd)(v2.value0)(v2.value1)(m$prime));
                });
            };
        };
    }, Data_Map_Internal.size, function (dictUnfoldable) {
        return Data_Map_Internal.toUnfoldable(dictUnfoldable);
    }, unionWithMapThese(dictOrd));
};
var size = function (dict) {
    return dict.size;
};
var plusIOSM = Data_Functor_Compose.plusCompose(Control_Plus.plusArray)(Data_Tuple.functorTuple);
var ordIOSM = function (dictOrd) {
    return function (dictOrd1) {
        return Data_Functor_Compose.ordCompose(Data_Ord.ord1Array)(Data_Tuple.ord1Tuple(dictOrd))(dictOrd1);
    };
};
var ord1IOSM = function (dictOrd) {
    return Data_Functor_Compose.ord1Compose(Data_Ord.ord1Array)(Data_Tuple.ord1Tuple(dictOrd));
};
var newtypeIOSM = new Data_Newtype.Newtype(function (n) {
    return n;
}, InsOrdMap);
var modify = function (dict) {
    return dict.modify;
};

// FIXME: I don't think this is what I want for this name?
var set = function (dictMapLike) {
    return function (k) {
        return function (v) {
            return modify(dictMapLike)(k)(Control_Applicative.pure(Control_Applicative.applicativeFn)(new Data_Tuple.Tuple(k, v)));
        };
    };
};
var mkIOSM = function ($135) {
    return InsOrdMap(Data_Functor_Compose.Compose($135));
};
var isEmpty = function (dict) {
    return dict.isEmpty;
};
var get = function (dict) {
    return dict.get;
};
var functorIOSM = Data_Functor_Compose.functorCompose(Data_Functor.functorArray)(Data_Tuple.functorTuple);
var functorWithIndexIOSM = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorIOSM;
}, function (f) {
    return Data_Newtype.over(newtypeIOSM)(newtypeIOSM)(InsOrdMap)(Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)(Data_Functor.map(Data_Functor.functorArray)(Control_Extend.extend(Data_Tuple.extendTuple)(Data_Tuple.uncurry(f)))));
});
var fromFoldable = function (dict) {
    return dict.fromFoldable;
};
var foldableIOSM = Data_Functor_Compose.foldableCompose(Data_Foldable.foldableArray)(Data_Tuple.foldableTuple);
var foldableWithIndexIOSM = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableIOSM;
}, function (dictMonoid) {
    return function (f) {
        var $136 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(Data_Tuple.uncurry(f));
        var $137 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $138 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($139) {
            return $136($137($138($139)));
        };
    };
}, function (f) {
    return function (b0) {
        var $140 = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(Data_Tuple.uncurry(function ($144) {
            return Data_Function.flip(f($144));
        })))(b0);
        var $141 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $142 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($143) {
            return $140($141($142($143)));
        };
    };
}, function (f) {
    return function (b0) {
        var $145 = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(b0);
        var $146 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $147 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($148) {
            return $145($146($147($148)));
        };
    };
});
var traversableWithIndexIOSM = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexIOSM;
}, function () {
    return functorWithIndexIOSM;
}, function () {
    return traversableIOSM;
}, function (dictApplicative) {
    return function (f) {
        var $149 = Data_Functor.map((dictApplicative.Apply0()).Functor0())((function () {
            var $154 = Data_Newtype.wrap(newtypeIOSM);
            var $155 = Data_Newtype.wrap(Data_Functor_Compose.newtypeCompose);
            return function ($156) {
                return $154($155($156));
            };
        })());
        var $150 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (v) {
            return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(f(v.value0)(v.value1))(Data_Tuple.Tuple.create(v.value0));
        });
        var $151 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $152 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($153) {
            return $149($150($151($152($153))));
        };
    };
});
var strMapIshIOSM = function (dictOrd) {
    return new MapLike(function () {
        return dictOrd;
    }, function () {
        return ord1IOSM(dictOrd);
    }, function () {
        return traversableWithIndexIOSM;
    }, function (k) {
        return function (f) {
            return function (v) {
                return Data_Newtype.wrap(newtypeIOSM)(Data_Newtype.wrap(Data_Functor_Compose.newtypeCompose)((function () {
                    var v1 = Data_Array.findIndex((function () {
                        var $157 = Data_Eq.eq(dictOrd.Eq0())(k);
                        return function ($158) {
                            return $157(Data_Tuple.fst($158));
                        };
                    })())(v);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        var v2 = f(Data_Maybe.Nothing.value);
                        if (v2 instanceof Data_Maybe.Nothing) {
                            return v;
                        };
                        if (v2 instanceof Data_Maybe.Just) {
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ new Data_Tuple.Tuple(k, v2.value0) ])(v);
                        };
                        throw new Error("Failed pattern match at Dhall.Map (line 117, column 18 - line 119, column 36): " + [ v2.constructor.name ]);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Control_Apply.apply(Control_Apply.applyFn)(Data_Maybe.fromMaybe)(Data_Array.alterAt(v1.value0)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(Data_Maybe.applicativeMaybe)(function ($159) {
                            return f(Data_Maybe.Just.create($159));
                        })))(v);
                    };
                    throw new Error("Failed pattern match at Dhall.Map (line 116, column 5 - line 120, column 75): " + [ v1.constructor.name ]);
                })()));
            };
        };
    }, function (k) {
        return function (v) {
            return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                var $160 = Data_Newtype.wrap(newtypeIOSM);
                var $161 = Data_Newtype.wrap(Data_Functor_Compose.newtypeCompose);
                return function ($162) {
                    return $160($161($162));
                };
            })())(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex((function () {
                var $163 = Data_Eq.eq(dictOrd.Eq0())(k);
                return function ($164) {
                    return $163(Data_Tuple.fst($164));
                };
            })())(v))(function (v1) {
                return Data_Array.deleteAt(v1)(v);
            }));
        };
    }, Data_Newtype.wrap(newtypeIOSM)(Data_Newtype.wrap(Data_Functor_Compose.newtypeCompose)([  ])), function (dictFoldable) {
        var $165 = Data_Array.nubBy(Data_Function.on(Data_Ord.compare(dictOrd))(Data_Tuple.fst));
        var $166 = Data_Array.fromFoldable(dictFoldable);
        return function ($167) {
            return mkIOSM($165($166($167)));
        };
    }, function (k) {
        var $168 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd);
        var $169 = Data_Foldable.find(Data_Foldable.foldableArray)((function () {
            var $173 = Data_Eq.eq(dictOrd.Eq0())(k);
            return function ($174) {
                return $173(Data_Tuple.fst($174));
            };
        })());
        var $170 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $171 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($172) {
            return $168($169($170($171($172))));
        };
    }, (function () {
        var $175 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
        var $176 = Data_Newtype.unwrap(newtypeIOSM);
        return function ($177) {
            return Data_Array["null"]($175($176($177)));
        };
    })(), function (k) {
        return function (f) {
            return function (v) {
                return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                    var $178 = Data_Newtype.wrap(newtypeIOSM);
                    var $179 = Data_Newtype.wrap(Data_Functor_Compose.newtypeCompose);
                    return function ($180) {
                        return $178($179($180));
                    };
                })())(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex((function () {
                    var $181 = Data_Eq.eq(dictOrd.Eq0())(k);
                    return function ($182) {
                        return $181(Data_Tuple.fst($182));
                    };
                })())(v))(function (v1) {
                    return Data_Array.modifyAt(v1)((function () {
                        var $183 = Control_Comonad.extract(Data_Tuple.comonadTuple);
                        return function ($184) {
                            return f($183($184));
                        };
                    })())(v);
                }));
            };
        };
    }, function ($185) {
        return Data_Array.length(unIOSM($185));
    }, function (dictUnfoldable) {
        var $186 = Data_Array.toUnfoldable(dictUnfoldable);
        return function ($187) {
            return $186(unIOSM($187));
        };
    }, function (f) {
        return function (v) {
            return function (v1) {
                var r = Data_Array.nubBy(Data_Function.on(Data_Ord.compare(dictOrd))(Data_Tuple.fst))(v1);
                var l = Data_Array.nubBy(Data_Function.on(Data_Ord.compare(dictOrd))(Data_Tuple.fst))(v);
                var finalize = Data_Array.mapMaybe(function (v2) {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(v2.value0))(f(v2.value0)(v2.value1));
                });
                var combine = function (v2) {
                    return function (v3) {
                        if (v2 instanceof Data_These.This && v3 instanceof Data_These.That) {
                            return new Data_These.Both(v2.value0, v3.value0);
                        };
                        if (v2 instanceof Data_These.That && v3 instanceof Data_These.This) {
                            return new Data_These.Both(v3.value0, v2.value0);
                        };
                        if (v2 instanceof Data_These.Both) {
                            return new Data_These.Both(v2.value0, v2.value1);
                        };
                        if (v2 instanceof Data_These.This && v3 instanceof Data_These.Both) {
                            return new Data_These.Both(v2.value0, v3.value1);
                        };
                        if (v2 instanceof Data_These.That && v3 instanceof Data_These.Both) {
                            return new Data_These.Both(v3.value0, v2.value0);
                        };
                        if (v2 instanceof Data_These.That && v3 instanceof Data_These.That) {
                            return new Data_These.That(v2.value0);
                        };
                        if (v2 instanceof Data_These.This && v3 instanceof Data_These.This) {
                            return new Data_These.This(v2.value0);
                        };
                        throw new Error("Failed pattern match at Dhall.Map (line 126, column 17 - line 133, column 33): " + [ v2.constructor.name, v3.constructor.name ]);
                    };
                };
                var inserting = function (as) {
                    return function (v2) {
                        return Data_Maybe["fromMaybe'"](function (v4) {
                            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(as)([ new Data_Tuple.Tuple(v2.value0, v2.value1) ]);
                        })(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex((function () {
                            var $188 = Data_Eq.eq(dictOrd.Eq0())(v2.value0);
                            return function ($189) {
                                return $188(Data_Tuple.fst($189));
                            };
                        })())(as))(function (v4) {
                            return Data_Array.modifyAt(v4)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Functor.flap(Data_Functor.functorFn)(combine)(v2.value1)))(as);
                        }));
                    };
                };
                return mkIOSM(finalize(Data_Foldable.foldl(Data_Foldable.foldableArray)(inserting)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.This.create))(l))(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.That.create))(r))));
            };
        };
    });
};
var eqIOSM = function (dictEq) {
    return function (dictEq1) {
        return Data_Functor_Compose.eqCompose(Data_Eq.eq1Array)(Data_Tuple.eq1Tuple(dictEq))(dictEq1);
    };
};
var eq1IOSM = function (dictEq) {
    return Data_Functor_Compose.eq1Compose(Data_Eq.eq1Array)(Data_Tuple.eq1Tuple(dictEq));
};
var empty = function (dict) {
    return dict.empty;
};
var $$delete = function (dict) {
    return dict["delete"];
};
var conv = function (dictMapLike) {
    return function (dictMapLike1) {
        var $190 = fromFoldable(dictMapLike1)(Data_List_Types.foldableList);
        var $191 = Control_Category.identity(Control_Category.categoryFn);
        var $192 = toUnfoldable(dictMapLike)(Data_List_Types.unfoldableList);
        return function ($193) {
            return $190($191($192($193)));
        };
    };
};
var convTo = function (dictMapLike) {
    return function (dictMapLike1) {
        return function (v) {
            return conv(dictMapLike)(dictMapLike1);
        };
    };
};
var unordered = function (dictMapLike) {
    return conv(dictMapLike)(strMapMapString(dictMapLike.Ord0()));
};
var toUnfoldableSorted = function (dictMapLike) {
    return function (dictUnfoldable) {
        var $194 = toUnfoldable(strMapMapString(dictMapLike.Ord0()))(dictUnfoldable);
        var $195 = unordered(dictMapLike);
        return function ($196) {
            return $194($195($196));
        };
    };
};
var alter = function (dict) {
    return dict.alter;
};
var insert = function (dictMapLike) {
    return function (k) {
        return function (v) {
            return alter(dictMapLike)(k)(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v)));
        };
    };
};
var singleton = function (dictMapLike) {
    return function (k) {
        return function (v) {
            return insert(dictMapLike)(k)(v)(empty(dictMapLike));
        };
    };
};
var altIOSM = Data_Functor_Compose.altCompose(Control_Alt.altArray)(Data_Tuple.functorTuple);
var _Empty = function (dictMapLike) {
    return function (dictChoice) {
        return Data_Lens_Prism["prism'"](Data_Function["const"](empty(dictMapLike)))(function (m) {
            var $134 = isEmpty(dictMapLike)(m);
            if ($134) {
                return new Data_Maybe.Just(Data_Unit.unit);
            };
            return Data_Maybe.Nothing.value;
        })(dictChoice);
    };
};
module.exports = {
    alter: alter,
    "delete": $$delete,
    empty: empty,
    fromFoldable: fromFoldable,
    get: get,
    isEmpty: isEmpty,
    modify: modify,
    size: size,
    toUnfoldable: toUnfoldable,
    unionWith: unionWith,
    MapLike: MapLike,
    symmetricDiff: symmetricDiff,
    unionWithMapThese: unionWithMapThese,
    InsOrdMap: InsOrdMap,
    mkIOSM: mkIOSM,
    unIOSM: unIOSM,
    set: set,
    insert: insert,
    singleton: singleton,
    "_Empty": _Empty,
    conv: conv,
    unordered: unordered,
    convTo: convTo,
    toUnfoldableSorted: toUnfoldableSorted,
    strMapMapString: strMapMapString,
    newtypeIOSM: newtypeIOSM,
    eqIOSM: eqIOSM,
    ordIOSM: ordIOSM,
    eq1IOSM: eq1IOSM,
    ord1IOSM: ord1IOSM,
    functorIOSM: functorIOSM,
    foldableIOSM: foldableIOSM,
    traversableIOSM: traversableIOSM,
    altIOSM: altIOSM,
    plusIOSM: plusIOSM,
    functorWithIndexIOSM: functorWithIndexIOSM,
    foldableWithIndexIOSM: foldableWithIndexIOSM,
    traversableWithIndexIOSM: traversableWithIndexIOSM,
    strMapIshIOSM: strMapIshIOSM
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Plus/index.js":65,"../Data.Array/index.js":91,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Lens.Prism/index.js":175,"../Data.List.Types/index.js":182,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.These/index.js":242,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257}],285:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Market = require("../Data.Lens.Internal.Market/index.js");
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var App = (function () {
    function App(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    App.create = function (value0) {
        return function (value1) {
            return new App(value0, value1);
        };
    };
    return App;
})();
var NoApp = (function () {
    function NoApp(value0) {
        this.value0 = value0;
    };
    NoApp.create = function (value0) {
        return new NoApp(value0);
    };
    return NoApp;
})();
var functorApps = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof App) {
            return new App(Data_Functor.map(functorApps)(f)(m.value0), Data_Functor.map(functorApps)(f)(m.value1));
        };
        if (m instanceof NoApp) {
            return new NoApp(f(m.value0));
        };
        throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 20, column 1 - line 20, column 45): " + [ m.constructor.name ]);
    };
});
var appsG = function (ops) {
    return function (dictProfunctor) {
        var toExpr = function (v) {
            if (v instanceof App) {
                return ops.layer(Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                    return "App";
                }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(toExpr(v.value0), toExpr(v.value1))));
            };
            if (v instanceof NoApp) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 117, column 12 - line 119, column 17): " + [ v.constructor.name ]);
        };
        var fromExpr = function (e) {
            var v = Data_Functor_Variant.prj()(Data_Maybe.alternativeMaybe)(new Data_Symbol.IsSymbol(function () {
                return "App";
            }))(Dhall_Core_AST_Types_Basics["_S"])(ops.unlayer(e));
            if (v instanceof Data_Maybe.Nothing) {
                return new NoApp(e);
            };
            if (v instanceof Data_Maybe.Just) {
                return new App(fromExpr(v.value0.value0), fromExpr(v.value0.value1));
            };
            throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 121, column 5 - line 123, column 65): " + [ v.constructor.name ]);
        };
        return Data_Lens_Iso.iso(fromExpr)(toExpr)(dictProfunctor);
    };
};
var apps = function (dictProfunctor) {
    var toExpr = function (v) {
        if (v instanceof App) {
            return Dhall_Core_AST_Constructors.mkApp(toExpr(v.value0))(toExpr(v.value1));
        };
        if (v instanceof NoApp) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 65, column 12 - line 67, column 17): " + [ v.constructor.name ]);
    };
    var fromExpr = function (e) {
        var v = Data_Lens_Fold.preview(Dhall_Core_AST_Constructors["_E"](Dhall_Core_AST_Types_Basics.functorPair)(function (dictChoice) {
            return Dhall_Core_AST_Constructors["_ExprFPrism"]()(new Data_Symbol.IsSymbol(function () {
                return "App";
            }))(Dhall_Core_AST_Types_Basics.functorPair)(Dhall_Core_AST_Types_Basics["_S"])(dictChoice);
        })(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(e);
        if (v instanceof Data_Maybe.Nothing) {
            return new NoApp(e);
        };
        if (v instanceof Data_Maybe.Just) {
            return new App(fromExpr(v.value0.value0), fromExpr(v.value0.value1));
        };
        throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 69, column 5 - line 71, column 65): " + [ v.constructor.name ]);
    };
    return Data_Lens_Iso.iso(fromExpr)(toExpr)(dictProfunctor);
};
var monadApps = new Control_Monad.Monad(function () {
    return applicativeApps;
}, function () {
    return bindApps;
});
var bindApps = new Control_Bind.Bind(function () {
    return applyApps;
}, function (fa) {
    return function (f) {
        var go = function (v) {
            if (v instanceof NoApp) {
                return f(v.value0);
            };
            if (v instanceof App) {
                return new App(go(v.value0), go(v.value1));
            };
            throw new Error("Failed pattern match at Dhall.Normalize.Apps (line 27, column 10 - line 29, column 27): " + [ v.constructor.name ]);
        };
        return go(fa);
    };
});
var applyApps = new Control_Apply.Apply(function () {
    return functorApps;
}, Control_Monad.ap(monadApps));
var applicativeApps = new Control_Applicative.Applicative(function () {
    return applyApps;
}, NoApp.create);
var _NoApp = function (dictChoice) {
    return Data_Lens_Prism["prism'"](NoApp.create)(function (v) {
        if (v instanceof NoApp) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var noapp = function (dictFunctor) {
    return function (p) {
        return Data_Lens_Prism.is(Data_HeytingAlgebra.heytingAlgebraBoolean)((function () {
            var $52 = _NoApp(Data_Lens_Internal_Market.choiceMarket);
            var $53 = Dhall_Core_AST_Constructors["_E"](dictFunctor)(function (dictChoice) {
                return p(dictChoice);
            })(Data_Lens_Internal_Market.choiceMarket);
            return function ($54) {
                return $52($53($54));
            };
        })());
    };
};
var noapplit = function (p) {
    return Data_Lens_Fold.preview((function () {
        var $55 = _NoApp(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
        var $56 = Dhall_Core_AST_Constructors["_E"](Data_Const.functorConst)(function (dictChoice) {
            return p(dictChoice);
        })(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
        var $57 = Data_Lens_Iso_Newtype["_Newtype"](Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Lens_Internal_Forget.profunctorForget);
        return function ($58) {
            return $55($56($57($58)));
        };
    })());
};
var noapplit$prime = function (dictFunctor) {
    return function (p) {
        return Data_Lens_Fold.preview((function () {
            var $59 = _NoApp(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
            var $60 = Dhall_Core_AST_Constructors["_E"](dictFunctor)(function (dictChoice) {
                return p(dictChoice);
            })(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
            return function ($61) {
                return $59($60($61));
            };
        })());
    };
};
var noapplitG$prime = function (dictIsSymbol) {
    return function (dictCons) {
        return function (ops) {
            return function (sym) {
                return Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Lens_Fold.preview(_NoApp(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst))))((function () {
                    var $62 = Data_Functor_Variant.prj(dictCons)(Data_Maybe.alternativeMaybe)(dictIsSymbol)(sym);
                    return function ($63) {
                        return $62(ops.unlayer($63));
                    };
                })());
            };
        };
    };
};
var noappG = function (dictIsSymbol) {
    return function (dictCons) {
        return function (ops) {
            return function (sym) {
                var $64 = noapplitG$prime(dictIsSymbol)(dictCons)(ops)(sym);
                return function ($65) {
                    return Data_Maybe.isJust($64($65));
                };
            };
        };
    };
};
var noapplitG = function (dictIsSymbol) {
    return function (dictCons) {
        return function (ops) {
            return function (sym) {
                var $66 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap(Data_Const.newtypeConst));
                var $67 = noapplitG$prime(dictIsSymbol)(dictCons)(ops)(sym);
                return function ($68) {
                    return $66($67($68));
                };
            };
        };
    };
};
module.exports = {
    App: App,
    NoApp: NoApp,
    noapplit: noapplit,
    "noapplit'": noapplit$prime,
    noapp: noapp,
    "_NoApp": _NoApp,
    apps: apps,
    noapplitG: noapplitG,
    "noapplitG'": noapplitG$prime,
    noappG: noappG,
    appsG: appsG,
    functorApps: functorApps,
    applyApps: applyApps,
    applicativeApps: applicativeApps,
    bindApps: bindApps,
    monadApps: monadApps
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Const/index.js":108,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Market/index.js":164,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Iso/index.js":170,"../Data.Lens.Prism/index.js":175,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Symbol/index.js":240,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Types.Basics/index.js":267}],286:[function(require,module,exports){
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Tagged = require("../Data.Lens.Internal.Tagged/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Operations = require("../Dhall.Core.AST.Operations/index.js");
var Dhall_Core_AST_Operations_Transformations = require("../Dhall.Core.AST.Operations.Transformations/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Dhall_Normalize_Apps = require("../Dhall.Normalize.Apps/index.js");
var Dhall_Variables = require("../Dhall.Variables/index.js");
var W = function (x) {
    return x;
};
var GNormalizer = function (x) {
    return x;
};
var unlayersG = function (dictUnion) {
    return function (node) {
        return function (e) {
            return Dhall_Core_AST_Types.embedW(Data_Functor_Variant.expand(dictUnion)(Data_Functor.mapFlipped(Data_Functor_Variant.functorVariantF)(node.unlayer(e))(unlayersG(dictUnion)(node))));
        };
    };
};
var textShow = function (s) {
    var nonprintable = Data_Array.mapMaybe(function (c) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Enum.toEnum(Data_String_CodePoints.boundedEnumCodePoint)(c))(function (lit) {
            return new Data_Tuple.Tuple(Data_String_CodePoints.fromCodePointArray([ lit ]), "\\u00" + ((function () {
                var $247 = c < 16;
                if ($247) {
                    return "0";
                };
                return "";
            })() + Data_Int.toStringAs(Data_Int.hexadecimal)(c)));
        });
    })(Data_Array.range(0)(31));
    var replacements = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ new Data_Tuple.Tuple("\\", "\\\\"), new Data_Tuple.Tuple("\"", "\\\""), new Data_Tuple.Tuple("\x08", "\\b"), new Data_Tuple.Tuple("\x0c", "\\f"), new Data_Tuple.Tuple("\x0a", "\\n"), new Data_Tuple.Tuple("\x0d", "\\r"), new Data_Tuple.Tuple("\x09", "\\t"), new Data_Tuple.Tuple("$", "\\u0024") ])(nonprintable);
    var replaced = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(Data_Tuple.uncurry(Data_String_Common.replaceAll)))(s)(replacements);
    return "\"" + (replaced + "\"");
};

// not Alt, because it is not a covariant functor
var semigroupNormalizer = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (ops) {
            return function (as) {
                var v2 = v(ops)(as);
                if (v2 instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just(v2.value0);
                };
                if (v2 instanceof Data_Maybe.Nothing) {
                    return v1(ops)(as);
                };
                throw new Error("Failed pattern match at Dhall.Normalize (line 80, column 5 - line 82, column 26): " + [ v2.constructor.name ]);
            };
        };
    };
});
var newtypeW = new Data_Newtype.Newtype(function (n) {
    return n;
}, W);
var newtypeNormalizer = new Data_Newtype.Newtype(function (n) {
    return n;
}, GNormalizer);
var monoidNormalizer = new Data_Monoid.Monoid(function () {
    return semigroupNormalizer;
}, function (v) {
    return function (v1) {
        return Data_Maybe.Nothing.value;
    };
});
var mk = function (dictFunctor) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (node) {
                return function (sym) {
                    return function (children) {
                        return node.layer(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(sym)(children));
                    };
                };
            };
        };
    };
};
var mkAppsF = function (dictFunctor) {
    return function (dictCons) {
        return function (dictIsSymbol) {
            return function (node) {
                return function (sym) {
                    return function (children) {
                        return Dhall_Normalize_Apps.NoApp.create(mk(dictFunctor)(dictCons)(dictIsSymbol)(node)(sym)(children));
                    };
                };
            };
        };
    };
};
var optionalfnsG = function (again) {
    return function (node) {
        return function (v) {
            if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                return "OptionalBuild";
            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0))) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v1) {
                    var optional = new Dhall_Normalize_Apps.App(mkAppsF(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                        return "Optional";
                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), v.value0.value1);
                    var nothing = new Dhall_Normalize_Apps.App(mkAppsF(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), v.value0.value1);
                    var just = mkAppsF(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.BindingBody.create("a")(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1))(mk(Data_Identity.functorIdentity)()(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Identity.Identity(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(new Dhall_Core_AST_Types.V("a", 0)))))));
                    return again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(v.value1, optional), just), nothing)));
                });
            };
            var v1 = function (v2) {
                var v3 = function (v4) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0.value0 instanceof Dhall_Normalize_Apps.App && v.value0.value0.value0.value0 instanceof Dhall_Normalize_Apps.App)))) {
                    var $260 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "OptionalFold";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value0.value0);
                    if ($260) {
                        var $261 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                            return "Some";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value1);
                        if ($261 instanceof Data_Maybe.Just) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v4) {
                                return again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(new Dhall_Normalize_Apps.App(v.value0.value1, new Dhall_Normalize_Apps.NoApp($261.value0))));
                            });
                        };
                        return v3(true);
                    };
                    return v3(true);
                };
                return v3(true);
            };
            if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0.value0.value0 instanceof Dhall_Normalize_Apps.App && v.value0.value0.value0.value1 instanceof Dhall_Normalize_Apps.App))))) {
                var $274 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "OptionalFold";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value0.value0);
                if ($274) {
                    var $275 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "None";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value1.value0);
                    if ($275) {
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v2) {
                            return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                        });
                    };
                    return v1(true);
                };
                return v1(true);
            };
            return v1(true);
        };
    };
};
var fusionsG = function (again) {
    return function (node) {
        return function (v) {
            var v1 = function (v2) {
                var v3 = function (v4) {
                    var v5 = function (v6) {
                        return Control_Plus.empty(Data_Maybe.plusMaybe);
                    };
                    if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value1 instanceof Dhall_Normalize_Apps.App && v.value1.value0 instanceof Dhall_Normalize_Apps.App))) {
                        var $289 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                            return "OptionalBuild";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                        if ($289) {
                            var $290 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                return "OptionalFold";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1.value0.value0);
                            if ($290) {
                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v6) {
                                    return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1.value1);
                                });
                            };
                            return v5(true);
                        };
                        return v5(true);
                    };
                    return v5(true);
                };
                if (v instanceof Dhall_Normalize_Apps.App && v.value1 instanceof Dhall_Normalize_Apps.App) {
                    var $300 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "NaturalBuild";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                    if ($300) {
                        var $301 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                            return "NaturalFold";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1.value0);
                        if ($301) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v4) {
                                return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1.value1);
                            });
                        };
                        return v3(true);
                    };
                    return v3(true);
                };
                return v3(true);
            };
            if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value1 instanceof Dhall_Normalize_Apps.App && v.value1.value0 instanceof Dhall_Normalize_Apps.App))) {
                var $307 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "ListBuild";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                if ($307) {
                    var $308 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1.value0.value0);
                    if ($308) {
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v2) {
                            return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1.value1);
                        });
                    };
                    return v1(true);
                };
                return v1(true);
            };
            return v1(true);
        };
    };
};
var functorW = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Data_Tuple.functorTuple)(Data_Functor.map(Data_Lazy.functorLazy)(f))(m);
    };
});
var extendW = new Control_Extend.Extend(function () {
    return functorW;
}, function (f) {
    return function (v) {
        return W(Data_Tuple.Tuple.create(v.value0)(Control_Extend.extend(Data_Lazy.extendLazy)((function () {
            var $736 = Control_Comonad.extract(Data_Lazy.comonadLazy);
            return function ($737) {
                return f($736($737));
            };
        })())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v))));
    };
});
var conversionsG = function (again) {
    return function (node) {
        return function (v) {
            var v1 = function (v2) {
                var v3 = function (v4) {
                    var v5 = function (v6) {
                        var v7 = function (v8) {
                            var v9 = function (v10) {
                                var v11 = function (v12) {
                                    return Data_Maybe.Nothing.value;
                                };
                                if (v instanceof Dhall_Normalize_Apps.App) {
                                    var $323 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                        return "TextShow";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                                    if ($323) {
                                        var $324 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                            return "TextLit";
                                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                        if ($324 instanceof Data_Maybe.Just && $324.value0 instanceof Dhall_Core_AST_Types_Basics.TextLit) {
                                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v12) {
                                                return mk(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                                    return "TextLit";
                                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.TextLit.create(textShow($324.value0.value0)));
                                            });
                                        };
                                        return v11(true);
                                    };
                                    return v11(true);
                                };
                                return v11(true);
                            };
                            if (v instanceof Dhall_Normalize_Apps.App) {
                                var $330 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                    return "DoubleShow";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                                if ($330) {
                                    var $331 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                        return "DoubleLit";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                    if ($331 instanceof Data_Maybe.Just) {
                                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v10) {
                                            return mk(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                                return "TextLit";
                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.TextLit.create(Data_Show.show(Data_Show.showNumber)($331.value0)));
                                        });
                                    };
                                    return v9(true);
                                };
                                return v9(true);
                            };
                            return v9(true);
                        };
                        if (v instanceof Dhall_Normalize_Apps.App) {
                            var $336 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                return "IntegerToDouble";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                            if ($336) {
                                var $337 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                    return "IntegerLit";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                if ($337 instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v8) {
                                        return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                            return "DoubleLit";
                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Int.toNumber($337.value0)));
                                    });
                                };
                                return v7(true);
                            };
                            return v7(true);
                        };
                        return v7(true);
                    };
                    if (v instanceof Dhall_Normalize_Apps.App) {
                        var $342 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                            return "IntegerShow";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                        if ($342) {
                            var $343 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                return "IntegerLit";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                            if ($343 instanceof Data_Maybe.Just) {
                                var s = (function () {
                                    var $344 = $343.value0 >= 0;
                                    if ($344) {
                                        return "+";
                                    };
                                    return "";
                                })();
                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v6) {
                                    return mk(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                        return "TextLit";
                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.TextLit.create(s + Data_Show.show(Data_Show.showInt)($343.value0)));
                                });
                            };
                            return v5(true);
                        };
                        return v5(true);
                    };
                    return v5(true);
                };
                if (v instanceof Dhall_Normalize_Apps.App) {
                    var $349 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "NaturalShow";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                    if ($349) {
                        var $350 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                        if ($350 instanceof Data_Maybe.Just) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v4) {
                                return mk(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                    return "TextLit";
                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.TextLit.create(Data_Show.show(Data_Natural.showNatural)($350.value0)));
                            });
                        };
                        return v3(true);
                    };
                    return v3(true);
                };
                return v3(true);
            };
            if (v instanceof Dhall_Normalize_Apps.App) {
                var $355 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "NaturalToInteger";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                if ($355) {
                    var $356 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                    if ($356 instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v2) {
                            return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                return "IntegerLit";
                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Natural.natToInt($356.value0)));
                        });
                    };
                    return v1(true);
                };
                return v1(true);
            };
            return v1(true);
        };
    };
};
var comonadW = new Control_Comonad.Comonad(function () {
    return extendW;
}, function (v) {
    return Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
});

// | This function is used to determine whether folds like `Natural/fold` or
// | `List/fold` should be lazy or strict in their accumulator based on the type
// | of the accumulator
// |
// | If this function returns `True`, then they will be strict in their
// | accumulator since we can guarantee an upper bound on the amount of work to
// | normalize the accumulator on each step of the loop.  If this function
// | returns `False` then they will be lazy in their accumulator and only
// | normalize the final result at the end of the fold
var boundedTypeG = function (v) {
    return function (v1) {
        return false;
    };
};
var listfnsG = function (dictMapLike) {
    return function (again) {
        return function (node) {
            return function (v) {
                if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "ListBuild";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0))) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v1) {
                        var ty = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1);
                        var ty$prime = Control_Comonad.extract(Data_Identity.comonadIdentity)(node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "shift";
                        }))(Dhall_Core_AST_Types_Basics["_S"])({
                            variable: new Dhall_Core_AST_Types.V("a", 0),
                            delta: 1
                        }))(ty));
                        var nil = Dhall_Normalize_Apps.NoApp.create(mk(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.product(new Data_Maybe.Just(ty))(Control_Plus.empty(Control_Plus.plusArray))));
                        var list = new Dhall_Normalize_Apps.App(mkAppsF(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), new Dhall_Normalize_Apps.NoApp(ty$prime));
                        var g$prime = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                        var cons = Dhall_Normalize_Apps.NoApp.create(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.BindingBody.create("a")(ty)(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.BindingBody.create("as")(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), ty$prime)))(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.product(Data_Maybe.Nothing.value)(Control_Applicative.pure(Control_Applicative.applicativeArray)(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(new Dhall_Core_AST_Types.V("a", 0)))))), mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(new Dhall_Core_AST_Types.V("as", 0))))))))));
                        return again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(v.value1, list), cons), nil)));
                    });
                };
                var v1 = function (v2) {
                    var v3 = function (v4) {
                        var v5 = function (v6) {
                            var v7 = function (v8) {
                                var v9 = function (v10) {
                                    var v11 = function (v12) {
                                        return Data_Maybe.Nothing.value;
                                    };
                                    if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                                        var $369 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                            return "ListReverse";
                                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                                        if ($369) {
                                            var $370 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                                return "ListLit";
                                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                            if ($370 instanceof Data_Maybe.Just) {
                                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v12) {
                                                    return again(mk(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                                        return "ListLit";
                                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.product($370.value0.value0)(Data_Array.reverse($370.value0.value1))));
                                                });
                                            };
                                            return v11(true);
                                        };
                                        return v11(true);
                                    };
                                    return v11(true);
                                };
                                if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                                    var $379 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                        return "ListIndexed";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                                    if ($379) {
                                        var $380 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                            return "ListLit";
                                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                        if ($380 instanceof Data_Maybe.Just) {
                                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v10) {
                                                return again((function () {
                                                    var mty$prime = (function () {
                                                        var $381 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])($380.value0.value1);
                                                        if ($381) {
                                                            return Data_Maybe.Nothing.value;
                                                        };
                                                        return Data_Maybe.Just.create(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                            return "App";
                                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Pair.create(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                            return "List";
                                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))))(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                            return "Record";
                                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("index")(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                            return "Natural";
                                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit)))), new Data_Tuple.Tuple("value", Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1)) ])))));
                                                    })();
                                                    var adapt = function (i) {
                                                        return function (x) {
                                                            return mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                                return "RecordLit";
                                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("index")(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                                return "NaturalLit";
                                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Natural.intToNat(i)))), new Data_Tuple.Tuple("value", x) ]));
                                                        };
                                                    };
                                                    return mk(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                                        return "ListLit";
                                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.product(mty$prime)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(adapt)($380.value0.value1)));
                                                })());
                                            });
                                        };
                                        return v9(true);
                                    };
                                    return v9(true);
                                };
                                return v9(true);
                            };
                            if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                                var $390 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                    return "ListLast";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                                if ($390) {
                                    var $391 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                        return "ListLit";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                    if ($391 instanceof Data_Maybe.Just) {
                                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v8) {
                                            return again((function () {
                                                var v9 = Data_Array.last($391.value0.value1);
                                                if (v9 instanceof Data_Maybe.Just) {
                                                    return mk(Data_Identity.functorIdentity)()(new Data_Symbol.IsSymbol(function () {
                                                        return "Some";
                                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(v9.value0);
                                                };
                                                if (v9 instanceof Data_Maybe.Nothing) {
                                                    return mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                        return "App";
                                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                        return "None";
                                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1)));
                                                };
                                                throw new Error("Failed pattern match at Dhall.Normalize (line 939, column 7 - line 941, column 115): " + [ v9.constructor.name ]);
                                            })());
                                        });
                                    };
                                    return v7(true);
                                };
                                return v7(true);
                            };
                            return v7(true);
                        };
                        if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                            var $402 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                return "ListHead";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                            if ($402) {
                                var $403 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                    return "ListLit";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                if ($403 instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v6) {
                                        return again((function () {
                                            var v7 = Data_Array.head($403.value0.value1);
                                            if (v7 instanceof Data_Maybe.Just) {
                                                return mk(Data_Identity.functorIdentity)()(new Data_Symbol.IsSymbol(function () {
                                                    return "Some";
                                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(v7.value0);
                                            };
                                            if (v7 instanceof Data_Maybe.Nothing) {
                                                return mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                    return "App";
                                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                    return "None";
                                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))), Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1)));
                                            };
                                            throw new Error("Failed pattern match at Dhall.Normalize (line 932, column 7 - line 934, column 115): " + [ v7.constructor.name ]);
                                        })());
                                    });
                                };
                                return v5(true);
                            };
                            return v5(true);
                        };
                        return v5(true);
                    };
                    if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                        var $414 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                            return "ListLength";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                        if ($414) {
                            var $415 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                                return "ListLit";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                            if ($415 instanceof Data_Maybe.Just) {
                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v4) {
                                    return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                        return "NaturalLit";
                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Natural.intToNat(Data_Array.length($415.value0.value1))));
                                });
                            };
                            return v3(true);
                        };
                        return v3(true);
                    };
                    return v3(true);
                };
                if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0.value0 instanceof Dhall_Normalize_Apps.App && v.value0.value0.value0.value0 instanceof Dhall_Normalize_Apps.App)))) {
                    var $424 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "ListFold";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value0.value0);
                    if ($424) {
                        var $425 = Dhall_Normalize_Apps["noapplitG'"](new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value1);
                        if ($425 instanceof Data_Maybe.Just) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v2) {
                                var t$prime = again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value0.value1));
                                var nilE = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                                var consE = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1);
                                var $426 = boundedTypeG(node)(t$prime);
                                if ($426) {
                                    var strictNil = again(nilE);
                                    var strictCons = function (y) {
                                        return function (ys) {
                                            return again(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                return "App";
                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                return "App";
                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(consE, y)), ys)));
                                        };
                                    };
                                    return Data_Foldable.foldr(Data_Foldable.foldableArray)(strictCons)(strictNil)($425.value0.value1);
                                };
                                var lazyCons = function (y) {
                                    return function (ys) {
                                        return mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                            return "App";
                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                            return "App";
                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(consE, y)), ys));
                                    };
                                };
                                return again(Data_Foldable.foldr(Data_Foldable.foldableArray)(lazyCons)(nilE)($425.value0.value1));
                            });
                        };
                        return v1(true);
                    };
                    return v1(true);
                };
                return v1(true);
            };
        };
    };
};
var naturalfnsG = function (again) {
    return function (node) {
        return function (v) {
            var v1 = function (v2) {
                if (v instanceof Dhall_Normalize_Apps.App && Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "NaturalBuild";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0)) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v3) {
                        var zero_ = Dhall_Normalize_Apps.NoApp.create(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Semiring.zero(Data_Const.semiringConst(Data_Natural.semiringNatural))));
                        var succ_ = Dhall_Normalize_Apps.NoApp.create(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.BindingBody.create("x")(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit))))(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                            return "NaturalPlus";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(new Dhall_Core_AST_Types.V("x", 0))), mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Semiring.one(Data_Const.semiringConst(Data_Natural.semiringNatural))))))));
                        return again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(new Dhall_Normalize_Apps.App(v.value1, mkAppsF(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Const.monoidConst(Data_Monoid.monoidUnit)))), succ_), zero_)));
                    });
                };
                var v3 = function (v4) {
                    var v5 = function (v6) {
                        var v7 = function (v8) {
                            var v9 = function (v10) {
                                return Data_Maybe.Nothing.value;
                            };
                            if (v instanceof Dhall_Normalize_Apps.App && v.value0 instanceof Dhall_Normalize_Apps.App) {
                                var $444 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                    return "NaturalSubtract";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0);
                                if ($444) {
                                    var $445 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                        return "NaturalLit";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value1);
                                    var $446 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                        return "NaturalLit";
                                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                    if ($445 instanceof Data_Maybe.Just && $446 instanceof Data_Maybe.Just) {
                                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v10) {
                                            return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                                return "NaturalLit";
                                            }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Natural.minus($446.value0)($445.value0)));
                                        });
                                    };
                                    if ($445 instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)($445.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v10) {
                                            return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                                        });
                                    };
                                    if ($446 instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)($446.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v10) {
                                            return Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                                        });
                                    };
                                    return Data_Maybe.Nothing.value;
                                };
                                return v9(true);
                            };
                            return v9(true);
                        };
                        if (v instanceof Dhall_Normalize_Apps.App) {
                            var $458 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                                return "NaturalOdd";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                            if ($458) {
                                var $459 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                    return "NaturalLit";
                                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                                if ($459 instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v8) {
                                        return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                            return "BoolLit";
                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Int.even)(Data_Natural.natToInt($459.value0))));
                                    });
                                };
                                return v7(true);
                            };
                            return v7(true);
                        };
                        return v7(true);
                    };
                    if (v instanceof Dhall_Normalize_Apps.App) {
                        var $464 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                            return "NaturalEven";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                        if ($464) {
                            var $465 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                                return "NaturalLit";
                            }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                            if ($465 instanceof Data_Maybe.Just) {
                                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v6) {
                                    return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                        return "BoolLit";
                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Int.even(Data_Natural.natToInt($465.value0))));
                                });
                            };
                            return v5(true);
                        };
                        return v5(true);
                    };
                    return v5(true);
                };
                if (v instanceof Dhall_Normalize_Apps.App) {
                    var $470 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                        return "NaturalIsZero";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0);
                    if ($470) {
                        var $471 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value1);
                        if ($471 instanceof Data_Maybe.Just) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v4) {
                                return mk(Data_Const.functorConst)()(new Data_Symbol.IsSymbol(function () {
                                    return "BoolLit";
                                }))(node)(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Eq.eq(Data_Natural.eqNatural)($471.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))));
                            });
                        };
                        return v3(true);
                    };
                    return v3(true);
                };
                return v3(true);
            };
            if (v instanceof Dhall_Normalize_Apps.App && (v.value0 instanceof Dhall_Normalize_Apps.App && (v.value0.value0 instanceof Dhall_Normalize_Apps.App && v.value0.value0.value0 instanceof Dhall_Normalize_Apps.App))) {
                var $476 = Dhall_Normalize_Apps.noappG(new Data_Symbol.IsSymbol(function () {
                    return "NaturalFold";
                }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value0);
                if ($476) {
                    var $477 = Dhall_Normalize_Apps.noapplitG(new Data_Symbol.IsSymbol(function () {
                        return "NaturalLit";
                    }))()(node)(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.value0.value1);
                    if ($477 instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function (v2) {
                            var zeroE = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value1);
                            var t$prime = again(Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value0.value1));
                            var succE = Data_Lens_Prism.review(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Tagged.taggedProfunctor))(v.value0.value1);
                            var $478 = boundedTypeG(node)(t$prime);
                            if ($478) {
                                var strictLoop = function (n) {
                                    var $479 = Data_Ord.greaterThan(Data_Natural.ordNatural)(n)(Data_Semiring.zero(Data_Natural.semiringNatural));
                                    if ($479) {
                                        return again(mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                            return "App";
                                        }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(succE, strictLoop(Data_Natural.minus(n)(Data_Semiring.one(Data_Natural.semiringNatural))))));
                                    };
                                    return again(zeroE);
                                };
                                return strictLoop($477.value0);
                            };
                            var lazyLoop = function (n) {
                                var $480 = Data_Ord.greaterThan(Data_Natural.ordNatural)(n)(Data_Semiring.zero(Data_Natural.semiringNatural));
                                if ($480) {
                                    return mk(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))(node)(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(succE, lazyLoop(Data_Natural.minus(n)(Data_Semiring.one(Data_Natural.semiringNatural)))));
                                };
                                return zeroE;
                            };
                            return again(lazyLoop($477.value0));
                        });
                    };
                    return v1(true);
                };
                return v1(true);
            };
            return v1(true);
        };
    };
};
var builtinsG = function (dictMapLike) {
    return function (ctx) {
        return Data_Semigroup.append(semigroupNormalizer)(fusionsG(ctx))(Data_Semigroup.append(semigroupNormalizer)(conversionsG(ctx))(Data_Semigroup.append(semigroupNormalizer)(naturalfnsG(ctx))(Data_Semigroup.append(semigroupNormalizer)(optionalfnsG(ctx))(listfnsG(dictMapLike)(ctx)))));
    };
};
var applyW = new Control_Apply.Apply(function () {
    return functorW;
}, function (v) {
    return function (v1) {
        return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Monoid_Conj.semigroupConj(Data_HeytingAlgebra.heytingAlgebraBoolean))(v.value0)(v1.value0), Control_Apply.apply(Data_Lazy.applyLazy)(v.value1)(v1.value1));
    };
});
var bindW = new Control_Bind.Bind(function () {
    return applyW;
}, function (v) {
    return function (f) {
        if (!v.value0) {
            return new Data_Tuple.Tuple(false, Control_Bind.bind(Data_Lazy.bindLazy)(v.value1)((function () {
                var $738 = Control_Comonad.extract(Data_Tuple.comonadTuple);
                var $739 = Data_Newtype.unwrap(newtypeW);
                return function ($740) {
                    return $738($739(f($740)));
                };
            })()));
        };
        if (v.value0) {
            return f(Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1));
        };
        throw new Error("Failed pattern match at Dhall.Normalize (line 113, column 1 - line 116, column 51): " + [ v.constructor.name, f.constructor.name ]);
    };
});
var applicativeW = new Control_Applicative.Applicative(function () {
    return applyW;
}, (function () {
    var $741 = Control_Applicative.pure(Data_Tuple.applicativeTuple(Data_Monoid_Conj.monoidConj(Data_HeytingAlgebra.heytingAlgebraBoolean)));
    var $742 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
    return function ($743) {
        return W($741($742($743)));
    };
})());
var lowerOps = function (node) {
    return {
        layer: node.layer,
        unlayer: node.unlayer,
        overlayer: function (f) {
            var $744 = (function () {
                var $746 = Control_Comonad.extract(comonadW);
                var $747 = node.overlayer((function () {
                    var $749 = Control_Applicative.pure(applicativeW);
                    var $750 = Control_Comonad.extract(Data_Identity.comonadIdentity);
                    return function ($751) {
                        return $749($750(f($751)));
                    };
                })());
                return function ($748) {
                    return $746($747($748));
                };
            })();
            return function ($745) {
                return Data_Identity.Identity($744($745));
            };
        },
        recurse: function (i) {
            var $752 = Control_Comonad.extract(comonadW);
            var $753 = node.recurse(i);
            return function ($754) {
                return Data_Identity.Identity($752($753($754)));
            };
        }
    };
};
var normalizeWithAlgGW = function (dictMapLike) {
    return function (dictEq) {
        return function (normApp) {
            return function ($$finally) {
                return function (i) {
                    return function (node) {
                        var unlayers = function (e) {
                            return Dhall_Core_AST_Types.embedW(Data_Functor.mapFlipped(Data_Functor_Variant.functorVariantF)(node.unlayer(e))(unlayers));
                        };
                        var unchanged = function (v) {
                            return v.value0;
                        };
                        var simpler = function (v) {
                            return W(new Data_Tuple.Tuple(false, v.value1));
                        };
                        var rest = Data_Functor.flap(Data_Functor.functorFn)(Dhall_Variables.shiftSubstAlgGM(applicativeW)(bindW)(Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Annot";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Assert";
                        }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Bool";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolAnd";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolEQ";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolIf";
                        }))(Dhall_Core_AST_Types_Basics.traversableTriplet)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolNE";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolOr";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Combine";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "CombineTypes";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Const";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Double";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "DoubleLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "DoubleShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Embed";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Equivalent";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Field";
                        }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Hashed";
                        }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ImportAlt";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Integer";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerToDouble";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListHead";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListIndexed";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLast";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLength";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListReverse";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Merge";
                        }))(Dhall_Core_AST_Types_Basics.traversableMergeF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalEven";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalIsZero";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalOdd";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalPlus";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalSubtract";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalTimes";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalToInteger";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "None";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Optional";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "OptionalBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "OptionalFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Prefer";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Project";
                        }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Record";
                        }))((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Some";
                        }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Text";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextAppend";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextLit";
                        }))(Dhall_Core_AST_Types_Basics.traversableTextLitF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ToMap";
                        }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))(Data_Functor_Compose.traversableCompose((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))($$finally))(node);
                        var relayers = function (e) {
                            return node.layer(Data_Functor.map(Data_Functor_Variant.functorVariantF)(relayers)(Dhall_Core_AST_Types.projectW(e)));
                        };
                        var reconstruct = function (dictTraversable) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        var $755 = Data_Functor.map(functorW)(function (children) {
                                            return node.layer(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictTraversable.Functor0())(sym)(children));
                                        });
                                        var $756 = Data_Traversable.sequence(dictTraversable)(applicativeW);
                                        return function ($757) {
                                            return $755($756($757));
                                        };
                                    };
                                };
                            };
                        };
                        
                        // Recurse as necessary
var go = node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "normalize";
                        }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordNil))));
                        var freeIn = function ($$var) {
                            var $758 = Dhall_Variables.freeIn(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())($$var);
                            return function ($759) {
                                return $758(unlayers($759));
                            };
                        };
                        var extractW = Control_Comonad.extract(comonadW);
                        
                        // The companion to judgmentallyEqual for terms that are already
                        // normalized recursively from this
var judgEq = Data_Function.on(Data_Eq.eq(Dhall_Core_AST_Types.eqExpr(Data_Map_Internal.eq1Map(Data_Eq.eqString))(dictEq)))((function () {
                            var $760 = Dhall_Core_AST_Operations.unordered(dictMapLike);
                            return function ($761) {
                                return Dhall_Variables.alphaNormalize($760(unlayers(extractW($761))));
                            };
                        })());
                        var shiftSubstShift0 = function ($$var) {
                            return function (substitution) {
                                var variable = new Dhall_Core_AST_Types.V($$var, 0);
                                var $762 = node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                    return "shift";
                                }))(Dhall_Core_AST_Types_Basics["_S"])({
                                    variable: variable,
                                    delta: -1 | 0
                                }));
                                var $763 = node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                    return "subst";
                                }))(Dhall_Core_AST_Types_Basics["_S"])({
                                    variable: variable,
                                    substitution: extractW(node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "shift";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])({
                                        variable: variable,
                                        delta: 1
                                    }))(substitution))
                                }));
                                return function ($764) {
                                    return extractW($762(extractW($763($764))));
                                };
                            };
                        };
                        var exposeW = function (dictFunctor) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        return function (here) {
                                            return function (other) {
                                                return function (e) {
                                                    return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(sym)((function () {
                                                        var $765 = Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeW));
                                                        return function ($766) {
                                                            return here($765($766));
                                                        };
                                                    })())(function (v) {
                                                        return other(e);
                                                    })(node.unlayer(extractW(e)));
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        var expose = function (dictFunctor) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        return function (here) {
                                            return function (other) {
                                                return function (e) {
                                                    return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(sym)((function () {
                                                        var $767 = Data_Functor.map(dictFunctor)(go);
                                                        return function ($768) {
                                                            return here($767($768));
                                                        };
                                                    })())(function (v) {
                                                        return other(e);
                                                    })(node.unlayer(e));
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        var previewF = function (dictFunctor) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        return expose(dictFunctor)(dictCons)(dictIsSymbol)(sym)(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                                    };
                                };
                            };
                        };
                        var previewLit = function (dictCons) {
                            return function (dictIsSymbol) {
                                return function (sym) {
                                    var $769 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap(Data_Const.newtypeConst));
                                    var $770 = previewF(Data_Const.functorConst)(dictCons)(dictIsSymbol)(sym);
                                    return function ($771) {
                                        return $769($770($771));
                                    };
                                };
                            };
                        };
                        var deferred = function (x) {
                            return W(Control_Applicative.pure(Data_Tuple.applicativeTuple(Data_Monoid_Conj.monoidConj(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_Lazy.defer(x)));
                        };
                        var instead = function (x) {
                            return simpler(deferred(x));
                        };
                        var insteadExpr = function (x) {
                            return instead(function (v) {
                                return relayers(x(Data_Unit.unit));
                            });
                        };
                        
                        // Default behavior is to traverse the children, gather the new results
                        // and detect if any of them changed
var catchall = node.overlayer(Data_Traversable.traverse(Data_Functor_Variant.traversableVariantF()(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Annot";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Assert";
                        }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Bool";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolAnd";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolEQ";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolIf";
                        }))(Dhall_Core_AST_Types_Basics.traversableTriplet)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolNE";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "BoolOr";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Combine";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "CombineTypes";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Const";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Double";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "DoubleLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "DoubleShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Embed";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Equivalent";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Field";
                        }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Hashed";
                        }))(Data_Tuple.traversableTuple)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ImportAlt";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Integer";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "IntegerToDouble";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Let";
                        }))(Dhall_Core_AST_Types_Basics.traversableLetF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "List";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListHead";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListIndexed";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLast";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLength";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ListReverse";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Merge";
                        }))(Dhall_Core_AST_Types_Basics.traversableMergeF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Natural";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalEven";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalIsZero";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalLit";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalOdd";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalPlus";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalSubtract";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalTimes";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "NaturalToInteger";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "None";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Optional";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "OptionalBuild";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "OptionalFold";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Pi";
                        }))(Dhall_Core_AST_Types_Basics.traversableBindingBody)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Prefer";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Project";
                        }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Record";
                        }))((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Some";
                        }))(Data_Identity.traversableIdentity)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Text";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextAppend";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextLit";
                        }))(Dhall_Core_AST_Types_Basics.traversableTextLitF)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "TextShow";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "ToMap";
                        }))(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))(Data_Functor_Compose.traversableCompose((dictMapLike.TraversableWithIndex2()).Traversable2())(Data_Traversable.traversableMaybe))(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "UsingHeaders";
                        }))(Dhall_Core_AST_Types_Basics.traversablePair)(Data_Functor_Variant.traversableCons(new Data_Symbol.IsSymbol(function () {
                            return "Var";
                        }))(Data_Const.traversableConst)(Data_Functor_Variant.traversableNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(applicativeW)(go));
                        var binOpWith = function (praevise) {
                            return function (here) {
                                return function (v) {
                                    return here(v.value0)(v.value1)(praevise(extractW(v.value0)))(praevise(extractW(v.value1)));
                                };
                            };
                        };
                        var anewAnd = function (dictFunctor) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        return function (children) {
                                            return instead(function (v) {
                                                return extractW(go(node.layer(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(sym)(Data_Functor.mapFlipped(dictFunctor)(children)(extractW)))));
                                            });
                                        };
                                    };
                                };
                            };
                        };
                        var anew = function (dictFunctor) {
                            return function (dictCons) {
                                return function (dictIsSymbol) {
                                    return function (sym) {
                                        return function (children) {
                                            return instead(function (v) {
                                                return node.layer(Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(sym)(Data_Functor.mapFlipped(dictFunctor)(children)(extractW)));
                                            });
                                        };
                                    };
                                };
                            };
                        };
                        var rules = (function () {
                            var $772 = Control_Category.identity(Control_Category.categoryFn);
                            var $773 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "App";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                return exposeW(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                                    return "Lam";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                                    return instead(function (v2) {
                                        return extractW(go(shiftSubstShift0(v1.value0)(extractW(v.value1))(extractW(v1.value2))));
                                    });
                                })(function (v1) {
                                    
                                    // TODO: add builtins
var again = function ($797) {
                                        return extractW(go($797));
                                    };
                                    var appNormed = Data_Newtype.unwrap(newtypeNormalizer)(Data_Semigroup.append(semigroupNormalizer)(builtinsG(dictMapLike)(again))(normApp))(lowerOps(node))(Data_Function.on(Dhall_Normalize_Apps.App.create)((function () {
                                        var $798 = Data_Lens_Getter.view(Dhall_Normalize_Apps.appsG(node)(Data_Lens_Internal_Forget.profunctorForget));
                                        return function ($799) {
                                            return $798(extractW($799));
                                        };
                                    })())(v.value0)(v.value1));
                                    if (appNormed instanceof Data_Maybe.Just) {
                                        return instead(appNormed.value0);
                                    };
                                    return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(v.value0, v.value1));
                                })(v.value0);
                            });
                            var $774 = expose(Dhall_Core_AST_Types_Basics.functorBindingBody)()(new Data_Symbol.IsSymbol(function () {
                                return "Lam";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                return (function () {
                                    var $$default = function (v1) {
                                        return reconstruct(Dhall_Core_AST_Types_Basics.traversableBindingBody)()(new Data_Symbol.IsSymbol(function () {
                                            return "Lam";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.BindingBody(v.value0, v.value1, v.value2));
                                    };
                                    return exposeW(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                                        var var0 = new Dhall_Core_AST_Types.V(v.value0, 0);
                                        var $712 = Data_Eq.eq(Dhall_Core_AST_Types.eqExpr((dictMapLike.Ord11()).Eq10())(dictEq))(unlayers(extractW(v1.value1)))(Dhall_Core_AST_Constructors.mkVar(var0)) && !Data_Newtype.un(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(freeIn(var0)(extractW(v1.value0)));
                                        if ($712) {
                                            return instead(function (v2) {
                                                return extractW(node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                                    return "shift";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])({
                                                    variable: var0,
                                                    delta: -1 | 0
                                                }))(extractW(v1.value0)));
                                            });
                                        };
                                        return $$default(Data_Unit.unit);
                                    })(function (v1) {
                                        return $$default(Data_Unit.unit);
                                    });
                                })()(v.value2);
                            });
                            var $775 = expose(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))()(new Data_Symbol.IsSymbol(function () {
                                return "Project";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var mks = (function () {
                                    if (v.value1 instanceof Data_Either.Left) {
                                        return new Data_Maybe.Just(v.value1.value0);
                                    };
                                    if (v.value1 instanceof Data_Either.Right) {
                                        return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                            return "Record";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function ($800) {
                                            return Data_Maybe.Just.create((function (v1) {
                                                return Data_Functor.voidRight(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Data_Unit.unit)(v1);
                                            })($800));
                                        })(function (v1) {
                                            return Data_Maybe.Nothing.value;
                                        })(v.value1.value0);
                                    };
                                    throw new Error("Failed pattern match at Dhall.Normalize (line 548, column 17 - line 550, column 90): " + [ v.value1.constructor.name ]);
                                })();
                                var $$default = function (v1) {
                                    return reconstruct(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Either.traversableEither))()(new Data_Symbol.IsSymbol(function () {
                                        return "Project";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v.value1));
                                };
                                if (mks instanceof Data_Maybe.Nothing) {
                                    return $$default(Data_Unit.unit);
                                };
                                if (mks instanceof Data_Maybe.Just) {
                                    if (Dhall_Map.isEmpty(dictMapLike)(mks.value0)) {
                                        return anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                            return "RecordLit";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.empty(dictMapLike));
                                    };
                                    if (Data_Boolean.otherwise) {
                                        return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                            return "RecordLit";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                            var adapt = function (v1) {
                                                if (v1 instanceof Data_These.Both) {
                                                    return new Data_Maybe.Just(v1.value1);
                                                };
                                                return Data_Maybe.Nothing.value;
                                            };
                                            return anewAnd(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                return "RecordLit";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)(adapt))(mks.value0)(kvs));
                                        })(function (v1) {
                                            if (v.value1 instanceof Data_Either.Left) {
                                                return $$default(Data_Unit.unit);
                                            };
                                            if (v.value1 instanceof Data_Either.Right) {
                                                return anew(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))()(new Data_Symbol.IsSymbol(function () {
                                                    return "Project";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, new Data_Either.Left(mks.value0)));
                                            };
                                            throw new Error("Failed pattern match at Dhall.Normalize (line 566, column 21 - line 569, column 76): " + [ v.value1.constructor.name ]);
                                        })(v.value0);
                                    };
                                };
                                throw new Error("Failed pattern match at Dhall.Normalize (line 551, column 12 - line 569, column 76): " + [ mks.constructor.name ]);
                            });
                            var $776 = expose(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                return "Field";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var $$default = function (v1) {
                                    return reconstruct(Data_Tuple.traversableTuple)()(new Data_Symbol.IsSymbol(function () {
                                        return "Field";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v.value1));
                                };
                                return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "RecordLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                    var v1 = Dhall_Map.get(dictMapLike)(v.value0)(kvs);
                                    if (v1 instanceof Data_Maybe.Just) {
                                        return simpler(v1.value0);
                                    };
                                    return $$default(Data_Unit.unit);
                                })(function (v1) {
                                    return exposeW(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Either.functorEither))()(new Data_Symbol.IsSymbol(function () {
                                        return "Project";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v2) {
                                        return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                            return "Field";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v2.value0));
                                    })(function (v2) {
                                        return exposeW(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                            return "Prefer";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (v3) {
                                            return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                return "RecordLit";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                                var v4 = Dhall_Map.get(dictMapLike)(v.value0)(kvs);
                                                if (v4 instanceof Data_Maybe.Just && Dhall_Map.size(dictMapLike)(kvs) === 1) {
                                                    return $$default(Data_Unit.unit);
                                                };
                                                if (v4 instanceof Data_Maybe.Just) {
                                                    var single = Dhall_Map.singleton(dictMapLike)(v.value0)(v4.value0);
                                                    return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                        return "Field";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Tuple.Tuple.create(v.value0)(anewAnd(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                        return "Prefer";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                        return "RecordLit";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(single), v3.value1))));
                                                };
                                                if (v4 instanceof Data_Maybe.Nothing) {
                                                    return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                        return "Field";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v3.value1));
                                                };
                                                throw new Error("Failed pattern match at Dhall.Normalize (line 494, column 29 - line 504, column 70): " + [ v4.constructor.name ]);
                                            })(function (v4) {
                                                return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                    return "RecordLit";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                                    var v5 = Dhall_Map.get(dictMapLike)(v.value0)(kvs);
                                                    if (v5 instanceof Data_Maybe.Just) {
                                                        return simpler(v5.value0);
                                                    };
                                                    if (v5 instanceof Data_Maybe.Nothing) {
                                                        return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                            return "Field";
                                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v3.value0));
                                                    };
                                                    throw new Error("Failed pattern match at Dhall.Normalize (line 507, column 33 - line 511, column 74): " + [ v5.constructor.name ]);
                                                })(function (v5) {
                                                    return $$default(Data_Unit.unit);
                                                })(v3.value1);
                                            })(v3.value0);
                                        })(function (v3) {
                                            return exposeW(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                return "Combine";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v4) {
                                                return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                    return "RecordLit";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                                    var v5 = Dhall_Map.get(dictMapLike)(v.value0)(kvs);
                                                    if (v5 instanceof Data_Maybe.Just && Dhall_Map.size(dictMapLike)(kvs) === 1) {
                                                        return $$default(Data_Unit.unit);
                                                    };
                                                    if (v5 instanceof Data_Maybe.Just) {
                                                        var single = Dhall_Map.singleton(dictMapLike)(v.value0)(v5.value0);
                                                        return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                            return "Field";
                                                        }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Tuple.Tuple.create(v.value0)(anewAnd(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                            return "Combine";
                                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                            return "RecordLit";
                                                        }))(Dhall_Core_AST_Types_Basics["_S"])(single), v4.value1))));
                                                    };
                                                    if (v5 instanceof Data_Maybe.Nothing) {
                                                        return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                            return "Field";
                                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v4.value1));
                                                    };
                                                    throw new Error("Failed pattern match at Dhall.Normalize (line 517, column 33 - line 527, column 74): " + [ v5.constructor.name ]);
                                                })(function (v5) {
                                                    return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                        return "RecordLit";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                                        var v6 = Dhall_Map.get(dictMapLike)(v.value0)(kvs);
                                                        if (v6 instanceof Data_Maybe.Just && Dhall_Map.size(dictMapLike)(kvs) === 1) {
                                                            return $$default(Data_Unit.unit);
                                                        };
                                                        if (v6 instanceof Data_Maybe.Just) {
                                                            var single = Dhall_Map.singleton(dictMapLike)(v.value0)(v6.value0);
                                                            return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                                return "Field";
                                                            }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Tuple.Tuple.create(v.value0)(anewAnd(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                                return "Combine";
                                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(v4.value0, anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                                return "RecordLit";
                                                            }))(Dhall_Core_AST_Types_Basics["_S"])(single)))));
                                                        };
                                                        if (v6 instanceof Data_Maybe.Nothing) {
                                                            return anewAnd(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                                                return "Field";
                                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v4.value0));
                                                        };
                                                        throw new Error("Failed pattern match at Dhall.Normalize (line 530, column 37 - line 540, column 78): " + [ v6.constructor.name ]);
                                                    })(function (v6) {
                                                        return $$default(Data_Unit.unit);
                                                    })(v4.value1);
                                                })(v4.value0);
                                            })(function (v4) {
                                                return $$default(Data_Unit.unit);
                                            })(v.value1);
                                        })(v.value1);
                                    })(v.value1);
                                })(v.value1);
                            });
                            var $777 = expose(Data_Functor_Product.functorProduct(Data_Identity.functorIdentity)(Data_Maybe.functorMaybe))()(new Data_Symbol.IsSymbol(function () {
                                return "ToMap";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var $$default = function (v1) {
                                    return reconstruct(Data_Functor_Product.traversableProduct(Data_Identity.traversableIdentity)(Data_Traversable.traversableMaybe))()(new Data_Symbol.IsSymbol(function () {
                                        return "ToMap";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v.value1));
                                };
                                return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "RecordLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvs) {
                                    return anew(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                        return "ListLit";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor_Product.Product(Data_Tuple.Tuple.create((function () {
                                        var $665 = Dhall_Map.isEmpty(dictMapLike)(kvs);
                                        if ($665) {
                                            return v.value1;
                                        };
                                        return Data_Maybe.Nothing.value;
                                    })())(Data_Functor.mapFlipped(Data_Functor.functorArray)(Dhall_Map.toUnfoldableSorted(dictMapLike)(Data_Unfoldable.unfoldableArray)(kvs))(function (v1) {
                                        return anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                            return "RecordLit";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("mapKey", anew(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                            return "TextLit";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.TextLit(v1.value0))), new Data_Tuple.Tuple("mapValue", v1.value1) ]));
                                    }))));
                                })(function (v1) {
                                    return $$default(Data_Unit.unit);
                                })(v.value0);
                            });
                            var $778 = expose(Dhall_Core_AST_Types_Basics.functorMergeF)()(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var $$default = function (v1) {
                                    return reconstruct(Dhall_Core_AST_Types_Basics.traversableMergeF)()(new Data_Symbol.IsSymbol(function () {
                                        return "Merge";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.MergeF(v.value0, v.value1, v.value2));
                                };
                                return exposeW(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "RecordLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (kvsX) {
                                    return exposeW(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                                        return exposeW(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                            return "Field";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (v2) {
                                            var v3 = Dhall_Map.get(dictMapLike)(v2.value0)(kvsX);
                                            if (v3 instanceof Data_Maybe.Just) {
                                                return anewAnd(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                                    return "App";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(v3.value0, v1.value1));
                                            };
                                            return $$default(Data_Unit.unit);
                                        })(function (v2) {
                                            return $$default(Data_Unit.unit);
                                        })(v1.value0);
                                    })(function (v1) {
                                        return exposeW(Data_Tuple.functorTuple)()(new Data_Symbol.IsSymbol(function () {
                                            return "Field";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (v2) {
                                            var v3 = Dhall_Map.get(dictMapLike)(v2.value0)(kvsX);
                                            if (v3 instanceof Data_Maybe.Just) {
                                                return simpler(v3.value0);
                                            };
                                            return $$default(Data_Unit.unit);
                                        })(function (v2) {
                                            return $$default(Data_Unit.unit);
                                        })(v.value1);
                                    })(v.value1);
                                })(function (v1) {
                                    return $$default(Data_Unit.unit);
                                })(v.value0);
                            });
                            var $779 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "Prefer";
                            }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                var preference = function (v) {
                                    if (v instanceof Data_These.This) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.That) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.Both) {
                                        return v.value1;
                                    };
                                    throw new Error("Failed pattern match at Dhall.Normalize (line 426, column 22 - line 429, column 24): " + [ v.constructor.name ]);
                                };
                                var decide = binOpWith(previewF(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "RecordLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                    return function (r) {
                                        return function (v) {
                                            return function (v1) {
                                                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                    return anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                        return "RecordLit";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)((function () {
                                                        var $801 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
                                                        return function ($802) {
                                                            return $801(preference($802));
                                                        };
                                                    })()))(v.value0)(v1.value0));
                                                };
                                                if (v instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v.value0)) {
                                                    return simpler(r);
                                                };
                                                if (v1 instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v1.value0)) {
                                                    return simpler(l);
                                                };
                                                if (judgEq(l)(r)) {
                                                    return simpler(r);
                                                };
                                                return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                    return "Prefer";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                            };
                                        };
                                    };
                                });
                                return decide;
                            })());
                            var $780 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "CombineTypes";
                            }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                var decideThese = function (v) {
                                    if (v instanceof Data_These.This) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.That) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.Both) {
                                        return decide(new Dhall_Core_AST_Types_Basics.Pair(v.value0, v.value1));
                                    };
                                    throw new Error("Failed pattern match at Dhall.Normalize (line 412, column 23 - line 415, column 44): " + [ v.constructor.name ]);
                                };
                                var decide = binOpWith(previewF(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "Record";
                                }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                    return function (r) {
                                        return function (v) {
                                            return function (v1) {
                                                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                    return anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                        return "Record";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)((function () {
                                                        var $803 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
                                                        return function ($804) {
                                                            return $803(decideThese($804));
                                                        };
                                                    })()))(v.value0)(v1.value0));
                                                };
                                                if (v instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v.value0)) {
                                                    return simpler(r);
                                                };
                                                if (v1 instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v1.value0)) {
                                                    return simpler(l);
                                                };
                                                if (judgEq(l)(r)) {
                                                    return simpler(r);
                                                };
                                                return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                    return "CombineTypes";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                            };
                                        };
                                    };
                                });
                                return decide;
                            })());
                            var $781 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "Combine";
                            }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                var decideThese = function (v) {
                                    if (v instanceof Data_These.This) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.That) {
                                        return v.value0;
                                    };
                                    if (v instanceof Data_These.Both) {
                                        return decide(new Dhall_Core_AST_Types_Basics.Pair(v.value0, v.value1));
                                    };
                                    throw new Error("Failed pattern match at Dhall.Normalize (line 398, column 23 - line 401, column 44): " + [ v.constructor.name ]);
                                };
                                var decide = binOpWith(previewF(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                    return "RecordLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                    return function (r) {
                                        return function (v) {
                                            return function (v1) {
                                                if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                    return anew(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())()(new Data_Symbol.IsSymbol(function () {
                                                        return "RecordLit";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)((function () {
                                                        var $805 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
                                                        return function ($806) {
                                                            return $805(decideThese($806));
                                                        };
                                                    })()))(v.value0)(v1.value0));
                                                };
                                                if (v instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v.value0)) {
                                                    return simpler(r);
                                                };
                                                if (v1 instanceof Data_Maybe.Just && Dhall_Map.isEmpty(dictMapLike)(v1.value0)) {
                                                    return simpler(l);
                                                };
                                                if (judgEq(l)(r)) {
                                                    return simpler(r);
                                                };
                                                return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                    return "Combine";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                            };
                                        };
                                    };
                                });
                                return decide;
                            })());
                            var $782 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "ListAppend";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewF(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                return "ListLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                var rs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0.value1)(v1.value0.value1);
                                                var mty$prime = (function () {
                                                    var $601 = Data_Array["null"](rs);
                                                    if ($601) {
                                                        return v.value0.value0;
                                                    };
                                                    return Data_Maybe.Nothing.value;
                                                })();
                                                return anew(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                                    return "ListLit";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(mty$prime, rs));
                                            };
                                            if (v instanceof Data_Maybe.Just && v.value0.value1.length === 0) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && v1.value0.value1.length === 0) {
                                                return simpler(l);
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "ListAppend";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $783 = expose(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                return "ListLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var $596 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])(v.value1) && Data_Maybe.isJust(v.value0);
                                if ($596) {
                                    return anew(Data_Functor_Product.functorProduct(Data_Maybe.functorMaybe)(Data_Functor.functorArray))()(new Data_Symbol.IsSymbol(function () {
                                        return "ListLit";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, v.value1));
                                };
                                return reconstruct(Data_Functor_Product.traversableProduct(Data_Traversable.traversableMaybe)(Data_Traversable.traversableArray))()(new Data_Symbol.IsSymbol(function () {
                                    return "ListLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(v.value0, v.value1));
                            });
                            var $784 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "TextAppend";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewF(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                return "TextLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                return anew(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                                    return "TextLit";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Semigroup.append(Dhall_Core_AST_Types_Basics.semigroupTextLitF)(v.value0)(v1.value0));
                                            };
                                            if (v instanceof Data_Maybe.Just && (v.value0 instanceof Dhall_Core_AST_Types_Basics.TextLit && v.value0.value0 === "")) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof Dhall_Core_AST_Types_Basics.TextLit && v1.value0.value0 === "")) {
                                                return simpler(l);
                                            };
                                            return anewAnd(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                                return "TextLit";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.TextInterp("", l, new Dhall_Core_AST_Types_Basics.TextInterp("", r, new Dhall_Core_AST_Types_Basics.TextLit(""))));
                                        };
                                    };
                                };
                            }));
                            var $785 = expose(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                return "TextLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                var trav = function (v) {
                                    if (v instanceof Dhall_Core_AST_Types_Basics.TextLit) {
                                        return Control_Applicative.pure(applicativeW)(new Dhall_Core_AST_Types_Basics.TextLit(v.value0));
                                    };
                                    if (v instanceof Dhall_Core_AST_Types_Basics.TextInterp) {
                                        return exposeW(Dhall_Core_AST_Types_Basics.functorTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                            return "TextLit";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (tl2) {
                                            return instead(function (v2) {
                                                return Data_Semigroup.append(Dhall_Core_AST_Types_Basics.semigroupTextLitF)(Data_Semigroup.append(Dhall_Core_AST_Types_Basics.semigroupTextLitF)(new Dhall_Core_AST_Types_Basics.TextLit(v.value0))(tl2))(extractW(trav(v.value2)));
                                            });
                                        })(function (v2) {
                                            return Control_Apply.lift2(applyW)(Dhall_Core_AST_Types_Basics.TextInterp.create(v.value0))(Data_Functor.voidRight(functorW)(v.value1)(v.value1))(trav(v.value2));
                                        })(v.value1);
                                    };
                                    throw new Error("Failed pattern match at Dhall.Normalize (line 357, column 11 - line 357, column 69): " + [ v.constructor.name ]);
                                };
                                var finalize = function (tl) {
                                    var tl$prime = trav(tl);
                                    var v = extractW(tl$prime);
                                    if (v instanceof Dhall_Core_AST_Types_Basics.TextInterp && (v.value0 === "" && (v.value2 instanceof Dhall_Core_AST_Types_Basics.TextLit && v.value2.value0 === ""))) {
                                        return simpler(v.value1);
                                    };
                                    return Control_Bind.bindFlipped(bindW)(reconstruct(Dhall_Core_AST_Types_Basics.traversableTextLitF)()(new Data_Symbol.IsSymbol(function () {
                                        return "TextLit";
                                    }))(Dhall_Core_AST_Types_Basics["_S"]))(tl$prime);
                                };
                                return finalize;
                            })());
                            var $786 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "NaturalTimes";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "NaturalLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkNaturalLit(Data_Semiring.mul(Data_Natural.semiringNatural)(v.value0)(v1.value0));
                                                });
                                            };
                                            if (v instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                                return simpler(l);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v1.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                                return simpler(r);
                                            };
                                            if (v instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v.value0)(Data_Semiring.one(Data_Natural.semiringNatural))) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v1.value0)(Data_Semiring.one(Data_Natural.semiringNatural))) {
                                                return simpler(l);
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "NaturalTimes";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $787 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "NaturalPlus";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "NaturalLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkNaturalLit(Data_Semiring.add(Data_Natural.semiringNatural)(v.value0)(v1.value0));
                                                });
                                            };
                                            if (v instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && Data_Eq.eq(Data_Natural.eqNatural)(v1.value0)(Data_Semiring.zero(Data_Natural.semiringNatural))) {
                                                return simpler(l);
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "NaturalPlus";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $788 = expose(Dhall_Core_AST_Types_Basics.functorTriplet)()(new Data_Symbol.IsSymbol(function () {
                                return "BoolIf";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                var v1 = previewLit()(new Data_Symbol.IsSymbol(function () {
                                    return "BoolLit";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(extractW(v.value0));
                                if (v1 instanceof Data_Maybe.Just && v1.value0) {
                                    return simpler(v.value1);
                                };
                                if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                                    return simpler(v.value2);
                                };
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    var v2 = previewLit()(new Data_Symbol.IsSymbol(function () {
                                        return "BoolLit";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(extractW(v.value2));
                                    var v3 = previewLit()(new Data_Symbol.IsSymbol(function () {
                                        return "BoolLit";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(extractW(v.value1));
                                    if (v3 instanceof Data_Maybe.Just && (v3.value0 && (v2 instanceof Data_Maybe.Just && !v2.value0))) {
                                        return simpler(v.value0);
                                    };
                                    var $559 = judgEq(v.value1)(v.value2);
                                    if ($559) {
                                        return simpler(v.value1);
                                    };
                                    return reconstruct(Dhall_Core_AST_Types_Basics.traversableTriplet)()(new Data_Symbol.IsSymbol(function () {
                                        return "BoolIf";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Triplet(v.value0, v.value1, v.value2));
                                };
                                throw new Error("Failed pattern match at Dhall.Normalize (line 327, column 9 - line 336, column 73): " + [ v1.constructor.name ]);
                            });
                            var $789 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "BoolNE";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkBoolLit(v.value0 !== v1.value0);
                                                });
                                            };
                                            if (v instanceof Data_Maybe.Just && !v.value0) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                                                return simpler(l);
                                            };
                                            var $550 = judgEq(l)(r);
                                            if ($550) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkBoolLit(false);
                                                });
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "BoolNE";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $790 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "BoolEQ";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkBoolLit(v.value0 === v1.value0);
                                                });
                                            };
                                            if (v instanceof Data_Maybe.Just && v.value0) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && v1.value0) {
                                                return simpler(l);
                                            };
                                            var $543 = judgEq(l)(r);
                                            if ($543) {
                                                return insteadExpr(function (v2) {
                                                    return Dhall_Core_AST_Constructors.mkBoolLit(true);
                                                });
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "BoolEQ";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $791 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "BoolOr";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v.value0) {
                                                return simpler(l);
                                            };
                                            if (v instanceof Data_Maybe.Just && !v.value0) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                                                return simpler(l);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && v1.value0) {
                                                return simpler(r);
                                            };
                                            var $536 = judgEq(l)(r);
                                            if ($536) {
                                                return simpler(l);
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "BoolOr";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $792 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "BoolAnd";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(binOpWith(previewLit()(new Data_Symbol.IsSymbol(function () {
                                return "BoolLit";
                            }))(Dhall_Core_AST_Types_Basics["_S"]))(function (l) {
                                return function (r) {
                                    return function (v) {
                                        return function (v1) {
                                            if (v instanceof Data_Maybe.Just && v.value0) {
                                                return simpler(r);
                                            };
                                            if (v instanceof Data_Maybe.Just && !v.value0) {
                                                return simpler(l);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                                                return simpler(r);
                                            };
                                            if (v1 instanceof Data_Maybe.Just && v1.value0) {
                                                return simpler(l);
                                            };
                                            var $529 = judgEq(l)(r);
                                            if ($529) {
                                                return simpler(l);
                                            };
                                            return reconstruct(Dhall_Core_AST_Types_Basics.traversablePair)()(new Data_Symbol.IsSymbol(function () {
                                                return "BoolAnd";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(l, r));
                                        };
                                    };
                                };
                            }));
                            var $793 = expose(Dhall_Core_AST_Types_Basics.functorLetF)()(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                return instead(function (v1) {
                                    return extractW(go(shiftSubstShift0(v.value0)(extractW(v.value2))(extractW(v.value3))));
                                });
                            });
                            var $794 = expose(Dhall_Core_AST_Types_Basics.functorPair)()(new Data_Symbol.IsSymbol(function () {
                                return "Annot";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                                return simpler(v.value0);
                            });
                            var $795 = Control_Category.identity(Control_Category.categoryFn);
                            return function ($796) {
                                return $772($773($774($775($776($777($778($779($780($781($782($783($784($785($786($787($788($789($790($791($792($793($794($795($796))))))))))))))))))))))));
                            };
                        })();
                        var handleLayer = function (v) {
                            return function (orig) {
                                var v1 = rules(catchall)(orig);
                                if (v1.value0) {
                                    return Control_Applicative.pure(applicativeW)(orig);
                                };
                                return v1;
                            };
                        };
                        return Data_Function.flip(Data_Variant.on()(new Data_Symbol.IsSymbol(function () {
                            return "normalize";
                        }))(Dhall_Core_AST_Types_Basics["_S"]))(rest)(handleLayer)(i);
                    };
                };
            };
        };
    };
};
var normalizeWithW = function (dictMapLike) {
    return function (dictEq) {
        return function (v) {
            return Dhall_Core_AST_Operations_Transformations.runAlgebraExprM(functorW)(normalizeWithAlgGW(dictMapLike)(dictEq)(function (v1) {
                return v(Data_Unit.unit);
            })(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "normalize";
            }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordNil))));
        };
    };
};

// | Quickly check if an expression is in normal form
var isNormalizedWith = function (dictMapLike) {
    return function (dictEq) {
        return function (ctx) {
            return function (e0) {
                var v = normalizeWithW(dictMapLike)(dictEq)(ctx)(e0);
                return v.value0;
            };
        };
    };
};

// | Check if an expression is in a normal form given a context of evaluation.
var isNormalized = function (dictMapLike) {
    return function (dictEq) {
        return isNormalizedWith(dictMapLike)(dictEq)(Data_Monoid.mempty(monoidNormalizer));
    };
};

/**
 * | Reduce an expression to its normal form, performing beta reduction and applying
 *     any custom definitions.
 *     `normalizeWith` is designed to be used with function `typeWith`. The `typeWith`
 *     function allows typing of Dhall functions in a custom typing context whereas
 *     `normalizeWith` allows evaluating Dhall expressions in a custom context.
 *     To be more precise `normalizeWith` applies the given normalizer when it finds an
 *     application term that it cannot reduce by other means.
 *     Note that the context used in normalization will determine the properties of normalization.
 *     That is, if the functions in custom context are not total then the Dhall language, evaluated
 *     with those functions is not total either.
 */
var normalizeWith = function (dictMapLike) {
    return function (dictEq) {
        return function (ctx) {
            var $807 = Control_Comonad.extract(Data_Lazy.comonadLazy);
            var $808 = Control_Comonad.extract(Data_Tuple.comonadTuple);
            var $809 = Data_Newtype.unwrap(newtypeW);
            var $810 = normalizeWithW(dictMapLike)(dictEq)(ctx);
            return function ($811) {
                return $807($808($809($810($811))));
            };
        };
    };
};

// | Reduce an expression to its normal form, performing beta reduction
// | `normalize` does not type-check the expression.  You may want to type-check
// | expressions before normalizing them since normalization can convert an
// | ill-typed expression into a well-typed expression.
// | However, `normalize` will not fail if the expression is ill-typed and will
// | leave ill-typed sub-expressions unevaluated.
var normalize = function (dictMapLike) {
    return function (dictEq) {
        return normalizeWith(dictMapLike)(dictEq)(Data_Monoid.mempty(monoidNormalizer));
    };
};

// | Returns `true` if two expressions are α-equivalent and β-equivalent and
// | `false` otherwise
var judgmentallyEqual$prime = function (dictMapLike) {
    return function (dictEq) {
        return function (eL0) {
            return function (eR0) {
                var alphaBetaNormalize = (function () {
                    var $812 = normalize(dictMapLike)(dictEq);
                    return function ($813) {
                        return Dhall_Variables.alphaNormalize($812($813));
                    };
                })();
                return Data_Eq.eq(Dhall_Core_AST_Types.eqExpr((dictMapLike.Ord11()).Eq10())(dictEq))(alphaBetaNormalize(eL0))(alphaBetaNormalize(eR0));
            };
        };
    };
};

// | Additionally normalizes the order of fields
var judgmentallyEqual = function (dictMapLike) {
    return function (dictEq) {
        return Data_Function.on(judgmentallyEqual$prime(Dhall_Map.strMapMapString(Data_Ord.ordString))(dictEq))(Dhall_Core_AST_Operations.unordered(dictMapLike));
    };
};
module.exports = {
    normalize: normalize,
    boundedTypeG: boundedTypeG,
    GNormalizer: GNormalizer,
    normalizeWith: normalizeWith,
    W: W,
    lowerOps: lowerOps,
    normalizeWithAlgGW: normalizeWithAlgGW,
    normalizeWithW: normalizeWithW,
    builtinsG: builtinsG,
    mk: mk,
    mkAppsF: mkAppsF,
    fusionsG: fusionsG,
    conversionsG: conversionsG,
    textShow: textShow,
    unlayersG: unlayersG,
    naturalfnsG: naturalfnsG,
    optionalfnsG: optionalfnsG,
    listfnsG: listfnsG,
    "judgmentallyEqual'": judgmentallyEqual$prime,
    judgmentallyEqual: judgmentallyEqual,
    isNormalized: isNormalized,
    isNormalizedWith: isNormalizedWith,
    newtypeNormalizer: newtypeNormalizer,
    semigroupNormalizer: semigroupNormalizer,
    monoidNormalizer: monoidNormalizer,
    newtypeW: newtypeW,
    functorW: functorW,
    applyW: applyW,
    applicativeW: applicativeW,
    bindW: bindW,
    extendW: extendW,
    comonadW: comonadW
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Plus/index.js":65,"../Data.Array/index.js":91,"../Data.Boolean/index.js":100,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.Int/index.js":152,"../Data.Lazy/index.js":156,"../Data.Lens.Getter/index.js":158,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Tagged/index.js":167,"../Data.Lens.Prism/index.js":175,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Monoid.Conj/index.js":190,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Natural/index.js":196,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.String.CodePoints/index.js":228,"../Data.String.Common/index.js":232,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Data.Unit/index.js":257,"../Data.Variant/index.js":259,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Operations.Transformations/index.js":265,"../Dhall.Core.AST.Operations/index.js":266,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Map/index.js":284,"../Dhall.Normalize.Apps/index.js":285,"../Dhall.Variables/index.js":291}],287:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Dhall_Core_Zippers_Merge = require("../Dhall.Core.Zippers.Merge/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var PLT = (function () {
    function PLT() {

    };
    PLT.value = new PLT();
    return PLT;
})();
var PEQ = (function () {
    function PEQ() {

    };
    PEQ.value = new PEQ();
    return PEQ;
})();
var PGT = (function () {
    function PGT() {

    };
    PGT.value = new PGT();
    return PGT;
})();
var UNC = (function () {
    function UNC() {

    };
    UNC.value = new UNC();
    return UNC;
})();
var showPOrdering = new Data_Show.Show(function (v) {
    if (v instanceof PLT) {
        return "PLT";
    };
    if (v instanceof PEQ) {
        return "PEQ";
    };
    if (v instanceof PGT) {
        return "PGT";
    };
    if (v instanceof UNC) {
        return "UNC";
    };
    throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 17, column 1 - line 21, column 19): " + [ v.constructor.name ]);
});
var semigroupPOrdering = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof UNC) {
            return UNC.value;
        };
        if (v1 instanceof UNC) {
            return UNC.value;
        };
        if (v instanceof PEQ) {
            return v1;
        };
        if (v1 instanceof PEQ) {
            return v;
        };
        if (v instanceof PLT && v1 instanceof PLT) {
            return PLT.value;
        };
        if (v instanceof PLT && v1 instanceof PGT) {
            return UNC.value;
        };
        if (v instanceof PGT && v1 instanceof PLT) {
            return UNC.value;
        };
        if (v instanceof PGT && v1 instanceof PGT) {
            return PGT.value;
        };
        throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 23, column 1 - line 31, column 23): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var roundrobin = function (comparator) {
    var go = function ($copy_acc) {
        return function ($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                };
                if (v instanceof Data_List_Types.Cons) {
                    var scanning = function ($copy_v1) {
                        return function ($copy_rem) {
                            var $tco_var_v1 = $copy_v1;
                            var $tco_done = false;
                            var $tco_result;
                            function $tco_loop(v1, rem) {
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, acc), rem);
                                };
                                if (v1 instanceof Data_List_Types.Cons) {
                                    var v2 = comparator(v.value0)(v1.value0);
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $tco_done = true;
                                        return new Data_Tuple.Tuple(acc, Data_Semigroup.append(Data_List_Types.semigroupList)(rem)(new Data_List_Types.Cons(v1.value0, v1.value1)));
                                    };
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_var_v1 = v1.value1;
                                        $copy_rem = new Data_List_Types.Cons(v1.value0, rem);
                                        return;
                                    };
                                    if (v2 instanceof Data_Ordering.GT) {
                                        $tco_var_v1 = v1.value1;
                                        $copy_rem = rem;
                                        return;
                                    };
                                    throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 147, column 9 - line 158, column 33): " + [ v2.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 145, column 7 - line 145, column 49): " + [ v1.constructor.name, rem.constructor.name ]);
                            };
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v1, $copy_rem);
                            };
                            return $tco_result;
                        };
                    };
                    var v1 = scanning(v.value1)(Data_List_Types.Nil.value);
                    $tco_var_acc = v1.value0;
                    $copy_v = v1.value1;
                    return;
                };
                throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 139, column 3 - line 139, column 19): " + [ acc.constructor.name, v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Data_List_Types.Nil.value);
};
var monoidPOrdering = new Data_Monoid.Monoid(function () {
    return semigroupPOrdering;
}, PEQ.value);
var prioritize = function (dictRecursive) {
    return function (dictMerge) {
        return function (dictFoldable) {
            return function (comparator) {
                var go = function (t1) {
                    return function (t2) {
                        var v = comparator(t1)(t2);
                        if (v instanceof Data_Maybe.Just) {
                            return v.value0;
                        };
                        if (v instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.maybe(UNC.value)(Data_Foldable.fold(dictFoldable)(monoidPOrdering))(Dhall_Core_Zippers_Merge.mergeWith(dictMerge)(go)(Matryoshka_Class_Recursive.project(dictRecursive)(t1))(Matryoshka_Class_Recursive.project(dictRecursive)(t2)));
                        };
                        throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 123, column 5 - line 129, column 64): " + [ v.constructor.name ]);
                    };
                };
                return go;
            };
        };
    };
};
var prioritized = function (dictRecursive) {
    return function (dictMerge) {
        return function (dictFoldable) {
            return function (comparator) {
                return roundrobin((function () {
                    var $70 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(function (v) {
                        if (v instanceof PLT) {
                            return Data_Ordering.LT.value;
                        };
                        if (v instanceof PGT) {
                            return Data_Ordering.GT.value;
                        };
                        return Data_Monoid.mempty(Data_Monoid.monoidOrdering);
                    });
                    var $71 = prioritize(dictRecursive)(dictMerge)(dictFoldable)(comparator);
                    return function ($72) {
                        return $70($71($72));
                    };
                })());
            };
        };
    };
};
var isPrioritized = function (dictRecursive) {
    return function (dictMerge) {
        return function (dictFoldable) {
            return function (comparator) {
                var $73 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(function (v) {
                    if (v instanceof PGT) {
                        return true;
                    };
                    if (v instanceof PEQ) {
                        return true;
                    };
                    return false;
                });
                var $74 = prioritize(dictRecursive)(dictMerge)(dictFoldable)(comparator);
                return function ($75) {
                    return $73($74($75));
                };
            };
        };
    };
};
var inverse = function (v) {
    if (v instanceof PLT) {
        return PGT.value;
    };
    if (v instanceof PGT) {
        return PLT.value;
    };
    if (v instanceof PEQ) {
        return PEQ.value;
    };
    if (v instanceof UNC) {
        return UNC.value;
    };
    throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 35, column 1 - line 35, column 34): " + [ v.constructor.name ]);
};
var symmetricize = function (f) {
    return function (a) {
        return function (b) {
            var v = f(b)(a);
            var v1 = f(a)(b);
            if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(v1.value0);
            };
            if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(inverse(v.value0));
            };
            if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof PLT && (v instanceof Data_Maybe.Just && v.value0 instanceof PGT))) {
                return new Data_Maybe.Just(PLT.value);
            };
            if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof PGT && (v instanceof Data_Maybe.Just && v.value0 instanceof PLT))) {
                return new Data_Maybe.Just(PGT.value);
            };
            if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof PEQ && (v instanceof Data_Maybe.Just && v.value0 instanceof PEQ))) {
                return new Data_Maybe.Just(PEQ.value);
            };
            if (v1 instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && v.value0 instanceof UNC)) {
                return new Data_Maybe.Just(v1.value0);
            };
            if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof UNC && v instanceof Data_Maybe.Just)) {
                return new Data_Maybe.Just(inverse(v.value0));
            };
            return new Data_Maybe.Just(UNC.value);
        };
    };
};
var fromRelation = function (f) {
    return symmetricize(function (a) {
        return function (b) {
            var v = f(a)(b);
            if (v) {
                return new Data_Maybe.Just(PGT.value);
            };
            if (!v) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 67, column 3 - line 69, column 26): " + [ v.constructor.name ]);
        };
    });
};
var fromPredicate = function (p) {
    return function (a) {
        return function (b) {
            var v = p(b);
            var v1 = p(a);
            if (v1 && v) {
                return Data_Maybe.Nothing.value;
            };
            if (v1 && !v) {
                return new Data_Maybe.Just(PGT.value);
            };
            if (!v1 && v) {
                return new Data_Maybe.Just(PLT.value);
            };
            if (!v1 && !v) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 90, column 23 - line 98, column 26): " + [ v1.constructor.name, v.constructor.name ]);
        };
    };
};
var fromLRPredicates = function (p) {
    return function (q) {
        return fromRelation(function (a) {
            return function (b) {
                return Data_Monoid_Disj.Disj(p(a) && q(b));
            };
        });
    };
};
var fromGERelation = function (f) {
    return function (a) {
        return function (b) {
            var v = f(b)(a);
            var v1 = f(a)(b);
            if (v1 && v) {
                return PEQ.value;
            };
            if (v1 && !v) {
                return PGT.value;
            };
            if (!v1 && v) {
                return PLT.value;
            };
            if (!v1 && !v) {
                return UNC.value;
            };
            throw new Error("Failed pattern match at Dhall.Parser.Prioritize (line 75, column 3 - line 79, column 24): " + [ v1.constructor.name, v.constructor.name ]);
        };
    };
};
var eqPOrdering = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof PLT && y instanceof PLT) {
            return true;
        };
        if (x instanceof PEQ && y instanceof PEQ) {
            return true;
        };
        if (x instanceof PGT && y instanceof PGT) {
            return true;
        };
        if (x instanceof UNC && y instanceof UNC) {
            return true;
        };
        return false;
    };
});
module.exports = {
    PLT: PLT,
    PEQ: PEQ,
    PGT: PGT,
    UNC: UNC,
    inverse: inverse,
    symmetricize: symmetricize,
    fromRelation: fromRelation,
    fromGERelation: fromGERelation,
    fromLRPredicates: fromLRPredicates,
    fromPredicate: fromPredicate,
    prioritize: prioritize,
    roundrobin: roundrobin,
    isPrioritized: isPrioritized,
    prioritized: prioritized,
    eqPOrdering: eqPOrdering,
    showPOrdering: showPOrdering,
    semigroupPOrdering: semigroupPOrdering,
    monoidPOrdering: monoidPOrdering
};

},{"../Control.Semigroupoid/index.js":68,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.List.Types/index.js":182,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Ordering/index.js":206,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Tuple/index.js":251,"../Dhall.Core.Zippers.Merge/index.js":272,"../Matryoshka.Class.Recursive/index.js":356}],288:[function(require,module,exports){
const nearley = require("nearley");
const grammar = require("../../grammar.js");

exports.parseImpl = function(s) {
  const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
  try {
    parser.feed(s);
    return parser.results;
  } catch (err) {
    return null;
  }
}

},{"../../grammar.js":1,"nearley":2}],289:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Core_Imports_Types = require("../Dhall.Core.Imports.Types/index.js");
var Dhall_Core_Zippers_Merge = require("../Dhall.Core.Zippers.Merge/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Dhall_Parser_Prioritize = require("../Dhall.Parser.Prioritize/index.js");
var Foreign = require("../Foreign/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var FAST = function (x) {
    return x;
};
var reveal = function (cons) {
    var $184 = Data_Lens_Fold.preview(cons);
    return function ($185) {
        return $184(Dhall_Core_AST_Types.projectW($185));
    };
};
var prioritizeVF = function (dictIsSymbol) {
    return function (dictCons) {
        return function (s) {
            return Dhall_Parser_Prioritize.fromPredicate(Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)(Data_HeytingAlgebra.tt(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_HeytingAlgebra.ff(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))));
        };
    };
};
var pc = function (dictIsSymbol) {
    return function (dictCons) {
        return function (s) {
            return Data_Function.on(prioritizeVF(dictIsSymbol)(dictCons)(s))(Dhall_Core_AST_Types.projectW);
        };
    };
};
var fromForeign = Unsafe_Coerce.unsafeCoerce;
var fits = function (cons) {
    return function (pred) {
        var $186 = Data_Foldable.any(Data_Foldable.foldableMaybe)(Data_HeytingAlgebra.heytingAlgebraBoolean)(pred);
        var $187 = reveal(cons);
        return function ($188) {
            return $186($187($188));
        };
    };
};
var prioritize_env = Dhall_Parser_Prioritize.fromLRPredicates((function () {
    var isEnv = function (v) {
        if (v.importType instanceof Dhall_Core_Imports_Types.Env) {
            return true;
        };
        return false;
    };
    return fits(Dhall_Core_AST_Constructors["_Embed"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))((function () {
        var $189 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        return function ($190) {
            return isEnv($189($190));
        };
    })());
})())(fits(Dhall_Core_AST_Constructors["_Annot"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(Data_Function.flip(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(function (v) {
    return v.value;
})(fits(Dhall_Core_AST_Constructors["_Var"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))((function () {
    var $191 = Data_Eq.eq(Dhall_Core_AST_Types.eqVar)(new Dhall_Core_AST_Types.V("env", 0));
    var $192 = Data_Newtype.unwrap(Data_Const.newtypeConst);
    return function ($193) {
        return $191($192($193));
    };
})()))));
var firstVar = function (e) {
    return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
        var $194 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
        var $195 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        return function ($196) {
            return $194($195($196));
        };
    })())(Data_Foldable.oneOfMap(Data_Functor_Variant.foldableVariantF()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Annot";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "App";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Assert";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Bool";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolAnd";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolEQ";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolIf";
    }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolNE";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "BoolOr";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Combine";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "CombineTypes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Const";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Double";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "DoubleShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Embed";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Equivalent";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Field";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Hashed";
    }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ImportAlt";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Integer";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "IntegerToDouble";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Let";
    }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "List";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListHead";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListIndexed";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLast";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLength";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListLit";
    }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ListReverse";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Merge";
    }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Natural";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalEven";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalIsZero";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalLit";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalOdd";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalPlus";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalSubtract";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalTimes";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "NaturalToInteger";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "None";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Optional";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalBuild";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "OptionalFold";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Prefer";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Project";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Record";
    }))(Dhall_Map.foldableIOSM)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "RecordLit";
    }))(Dhall_Map.foldableIOSM)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Some";
    }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Text";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextAppend";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextLit";
    }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "TextShow";
    }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "ToMap";
    }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "Union";
    }))(Data_Functor_Compose.foldableCompose(Dhall_Map.foldableIOSM)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())()))(Data_Maybe.plusMaybe)(firstVar))(Dhall_Core_AST_Types.projectW(e));
};
var keyword = function (dictIsSymbol) {
    return function (dictCons) {
        return function (s) {
            return function ($$var) {
                return Dhall_Parser_Prioritize.fromLRPredicates((function () {
                    var $197 = Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)(Data_HeytingAlgebra.tt(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_HeytingAlgebra.ff(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)));
                    return function ($198) {
                        return $197(Dhall_Core_AST_Types.projectW($198));
                    };
                })())(function (b) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(Dhall_Core_AST_Types.eqVar))(firstVar(b))(new Data_Maybe.Just(new Dhall_Core_AST_Types.V($$var, 0)));
                });
            };
        };
    };
};
var prioritize_forall = Dhall_Parser_Prioritize.fromRelation(function (better) {
    return function (worse) {
        return Data_Monoid_Disj.Disj(Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Pi"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(better))(function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Pi"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(worse))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(v1["var"] === "_"))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isPrioritized(v.body)(v1.body)))(function () {
                        return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_App"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(v1.ty))(function (v2) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Eq.eq(Dhall_Core_AST_Types.eqExpr(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Dhall_Core_Imports_Types.eqImport))(v2.fn)(Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("forall", 0)))))(function () {
                                return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Annot"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(v2.arg))(function (v3) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Eq.eq(Dhall_Core_AST_Types.eqExpr(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Dhall_Core_Imports_Types.eqImport))(v3.value)(Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V(v["var"], 0)))))(function () {
                                        return Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isPrioritized(v.ty)(v3.ty));
                                    });
                                });
                            });
                        });
                    });
                });
            });
        })));
    };
});
var prioritize_annot = Dhall_Parser_Prioritize.fromRelation(function (better) {
    return function (worse) {
        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))(function ($199) {
            return Data_Monoid_Disj.Disj(Data_Maybe.isJust($199));
        })([ Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Merge"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(better))(function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(v.value2)(function (v1) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Annot"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(worse))(function (v2) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Merge"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(v2.value))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Maybe.isNothing(v3.value2)))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isPrioritized(v.value0)(v3.value0)))(function () {
                                return Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isPrioritized(v.value1)(v3.value1));
                            });
                        });
                    });
                });
            });
        }), Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_ToMap"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(better))(function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(v.value1)(function (v1) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_Annot"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(worse))(function (v2) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(reveal(Dhall_Core_AST_Constructors["_ToMap"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)))(v2.value))(function (v3) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Maybe.isNothing(v3.value1)))(function () {
                            return Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(isPrioritized(v.value0)(v3.value0));
                        });
                    });
                });
            });
        }) ]);
    };
});
var priorities = function (e1) {
    return function (e2) {
        return (function (f) {
            return f(e1)(e2);
        })(Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Maybe.semigroupMaybe(Dhall_Parser_Prioritize.semigroupPOrdering))))(Data_Monoid.mempty(Data_Monoid.monoidFn(Data_Monoid.monoidFn(Data_Maybe.monoidMaybe(Dhall_Parser_Prioritize.semigroupPOrdering)))))(Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Maybe.semigroupMaybe(Dhall_Parser_Prioritize.semigroupPOrdering))))(keyword(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))()(Dhall_Core_AST_Types_Basics["_S"])("if"))(Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Maybe.semigroupMaybe(Dhall_Parser_Prioritize.semigroupPOrdering))))(prioritize_forall)(Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Maybe.semigroupMaybe(Dhall_Parser_Prioritize.semigroupPOrdering))))(prioritize_env)(prioritize_annot)))));
    };
};
var isPrioritized = function (e1) {
    return function (e2) {
        return Dhall_Parser_Prioritize.isPrioritized(Dhall_Core_AST_Types.recursiveExpr)(Dhall_Core_AST_Types.mergeERVF(Dhall_Core_Imports_Types.eqImport)(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Dhall_Map.traversableIOSM)(Dhall_Core_Zippers_Merge.mergeInsOrdMap(Data_Ord.ordString)))(Dhall_Core_AST_Types.foldableERVF(Dhall_Map.foldableIOSM))(priorities)(e1)(e2);
    };
};
var disambiguate = function (v) {
    if (v.length === 0) {
        return [  ];
    };
    if (v.length === 1) {
        return [ v[0] ];
    };
    return Data_Array.fromFoldable(Data_List_Types.foldableList)(Dhall_Parser_Prioritize.prioritized(Dhall_Core_AST_Types.recursiveExpr)(Dhall_Core_AST_Types.mergeERVF(Dhall_Core_Imports_Types.eqImport)(Dhall_Map.eq1IOSM(Data_Eq.eqString))(Dhall_Map.traversableIOSM)(Dhall_Core_Zippers_Merge.mergeInsOrdMap(Data_Ord.ordString)))(Dhall_Core_AST_Types.foldableERVF(Dhall_Map.foldableIOSM))(priorities)(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(v)));
};
var decodeS = Unsafe_Coerce.unsafeCoerce;
var decodeN = function (decoder) {
    var $200 = Data_Functor.map(Data_Maybe.functorMaybe)(decoder);
    return function ($201) {
        return $200(Data_Nullable.toMaybe($201));
    };
};
var decodeLabelled = function (dec) {
    return function (fs) {
        return Dhall_Map.mkIOSM(Data_Functor.mapFlipped(Data_Functor.functorArray)(fs)(function ($202) {
            if ($202.length === 2) {
                return new Data_Tuple.Tuple(decodeS($202[0]), dec($202[1]));
            };
            return Partial_Unsafe.unsafeCrashWith("Unrecognized labelled tuple");
        }));
    };
};
var decodeHash = decodeS;
var decodeDirectory = (function () {
    var $203 = Data_Array.toUnfoldable(Data_List_Types.unfoldableList);
    return function ($204) {
        return $203(Data_Array.reverse($204));
    };
})();
var decodeURL = function (v) {
    if (v.length === 6) {
        return Data_Tuple.Tuple.create(decodeN(fromForeign)(v[5]))({
            scheme: (function () {
                var v1 = decodeS(v[0]);
                if (v1 === "http") {
                    return Dhall_Core_Imports_Types.HTTP.value;
                };
                if (v1 === "https") {
                    return Dhall_Core_Imports_Types.HTTPS.value;
                };
                return Partial_Unsafe.unsafeCrashWith("Unrecognized Scheme");
            })(),
            authority: decodeS(v[1]),
            path: Dhall_Core_Imports_Types.File({
                directory: decodeDirectory(v[2]),
                file: v[3]
            }),
            query: decodeN(decodeS)(v[4]),
            headers: Data_Maybe.Nothing.value
        });
    };
    return Partial_Unsafe.unsafeCrashWith("Unrecognized URL" + v);
};
var decodeImportType = function (v) {
    if (v.type === "Missing") {
        return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Dhall_Core_Imports_Types.Missing.value);
    };
    if (v.type === "Local" && v.value.length === 3) {
        var prefix = (function () {
            var v1 = decodeS(v["value"][0]);
            if (v1 === "Absolute") {
                return Dhall_Core_Imports_Types.Absolute.value;
            };
            if (v1 === "Here") {
                return Dhall_Core_Imports_Types.Here.value;
            };
            if (v1 === "Parent") {
                return Dhall_Core_Imports_Types.Parent.value;
            };
            if (v1 === "Home") {
                return Dhall_Core_Imports_Types.Home.value;
            };
            return Partial_Unsafe.unsafeCrashWith("Unrecognized FilePrefix");
        })();
        return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(Dhall_Core_Imports_Types.Local.create(prefix)(Dhall_Core_Imports_Types.File({
            directory: decodeDirectory(v["value"][1]),
            file: v["value"][2]
        })));
    };
    if (v.type === "Remote") {
        return Data_Functor.map(Data_Tuple.functorTuple)(Dhall_Core_Imports_Types.Remote.create)(decodeURL(v.value));
    };
    if (v.type === "Env" && v.value.length === 1) {
        return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)(new Dhall_Core_Imports_Types.Env(decodeS(v["value"][0])));
    };
    return Partial_Unsafe.unsafeCrashWith("Unrecognized ImportType");
};
var decodeA = function (decoder) {
    var $205 = Data_Functor.map(Data_Functor.functorArray)(decoder);
    return function ($206) {
        return $205($206);
    };
};
var decodeTextLit = (function () {
    var f = function (next) {
        return function (result) {
            var v = Control_Monad_Except.runExcept(Foreign.readString(next));
            if (v instanceof Data_Either.Left) {
                return new Dhall_Core_AST_Types_Basics.TextInterp("", decodeFAST(fromForeign(next)), result);
            };
            if (v instanceof Data_Either.Right) {
                if (result instanceof Dhall_Core_AST_Types_Basics.TextLit) {
                    return new Dhall_Core_AST_Types_Basics.TextLit(v.value0 + result.value0);
                };
                if (result instanceof Dhall_Core_AST_Types_Basics.TextInterp) {
                    return new Dhall_Core_AST_Types_Basics.TextInterp(v.value0 + result.value0, result.value1, result.value2);
                };
                throw new Error("Failed pattern match at Dhall.Parser (line 164, column 7 - line 166, column 53): " + [ result.constructor.name ]);
            };
            throw new Error("Failed pattern match at Dhall.Parser (line 161, column 19 - line 166, column 53): " + [ v.constructor.name ]);
        };
    };
    return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(new Dhall_Core_AST_Types_Basics.TextLit(""));
})();
var decodeFAST = function (v) {
    if (v.type === "Type") {
        return Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Type.value);
    };
    if (v.type === "Kind") {
        return Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Kind.value);
    };
    if (v.type === "Sort") {
        return Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Sort.value);
    };
    if (v.type === "True") {
        return Dhall_Core_AST_Constructors.mkBoolLit(true);
    };
    if (v.type === "False") {
        return Dhall_Core_AST_Constructors.mkBoolLit(false);
    };
    if (v.type === "Bool") {
        return Dhall_Core_AST_Constructors.mkBool;
    };
    if (v.type === "Natural") {
        return Dhall_Core_AST_Constructors.mkNatural;
    };
    if (v.type === "Integer") {
        return Dhall_Core_AST_Constructors.mkInteger;
    };
    if (v.type === "Double") {
        return Dhall_Core_AST_Constructors.mkDouble;
    };
    if (v.type === "Text") {
        return Dhall_Core_AST_Constructors.mkText;
    };
    if (v.type === "List") {
        return Dhall_Core_AST_Constructors.mkList;
    };
    if (v.type === "Optional") {
        return Dhall_Core_AST_Constructors.mkOptional;
    };
    if (v.type === "Natural/fold") {
        return Dhall_Core_AST_Constructors.mkNaturalFold;
    };
    if (v.type === "Natural/build") {
        return Dhall_Core_AST_Constructors.mkNaturalBuild;
    };
    if (v.type === "Natural/isZero") {
        return Dhall_Core_AST_Constructors.mkNaturalIsZero;
    };
    if (v.type === "Natural/even") {
        return Dhall_Core_AST_Constructors.mkNaturalEven;
    };
    if (v.type === "Natural/odd") {
        return Dhall_Core_AST_Constructors.mkNaturalOdd;
    };
    if (v.type === "Natural/toInteger") {
        return Dhall_Core_AST_Constructors.mkNaturalToInteger;
    };
    if (v.type === "Natural/show") {
        return Dhall_Core_AST_Constructors.mkNaturalShow;
    };
    if (v.type === "Integer/show") {
        return Dhall_Core_AST_Constructors.mkIntegerShow;
    };
    if (v.type === "Integer/toDouble") {
        return Dhall_Core_AST_Constructors.mkIntegerToDouble;
    };
    if (v.type === "Double/show") {
        return Dhall_Core_AST_Constructors.mkDoubleShow;
    };
    if (v.type === "List/build") {
        return Dhall_Core_AST_Constructors.mkListBuild;
    };
    if (v.type === "List/fold") {
        return Dhall_Core_AST_Constructors.mkListFold;
    };
    if (v.type === "List/length") {
        return Dhall_Core_AST_Constructors.mkListLength;
    };
    if (v.type === "List/head") {
        return Dhall_Core_AST_Constructors.mkListHead;
    };
    if (v.type === "List/last") {
        return Dhall_Core_AST_Constructors.mkListLast;
    };
    if (v.type === "List/indexed") {
        return Dhall_Core_AST_Constructors.mkListIndexed;
    };
    if (v.type === "List/reverse") {
        return Dhall_Core_AST_Constructors.mkListReverse;
    };
    if (v.type === "Optional/fold") {
        return Dhall_Core_AST_Constructors.mkOptionalFold;
    };
    if (v.type === "Optional/build") {
        return Dhall_Core_AST_Constructors.mkOptionalBuild;
    };
    if (v.type === "Text/show") {
        return Dhall_Core_AST_Constructors.mkTextShow;
    };
    if (v.type === "Natural/subtract") {
        return Dhall_Core_AST_Constructors.mkNaturalSubtract;
    };
    if (v.type === "BoolAnd" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkBoolAnd(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "BoolOr" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkBoolOr(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "BoolEQ" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkBoolEQ(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "BoolNE" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkBoolNE(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "NaturalPlus" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkNaturalPlus(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "NaturalTimes" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkNaturalTimes(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "TextAppend" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkTextAppend(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "ListAppend" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkListAppend(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "Combine" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkCombine(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "CombineTypes" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkCombineTypes(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "Prefer" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkPrefer(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "ImportAlt" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkImportAlt(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "App" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkApp(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "BoolIf" && v.value.length === 3) {
        return Dhall_Core_AST_Constructors.mkBoolIf(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]))(decodeFAST(v["value"][2]));
    };
    if (v.type === "Field" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkField(decodeFAST(v["value"][0]))(decodeS(v["value"][1]));
    };
    if (v.type === "Project" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkProject(decodeFAST(v["value"][0]))(new Data_Either.Left(Dhall_Map.fromFoldable(Dhall_Map.strMapIshIOSM(Data_Ord.ordString))(Data_Foldable.foldableArray)(Data_Functor.flap(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.Tuple.create)(decodeA(decodeS)(v["value"][1])))(Data_Unit.unit))));
    };
    if (v.type === "ProjectType" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkProject(decodeFAST(v["value"][0]))(new Data_Either.Right(decodeFAST(v["value"][1])));
    };
    if (v.type === "Merge" && v.value.length === 3) {
        return Dhall_Core_AST_Constructors.mkMerge(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]))(decodeN(decodeFAST)(v["value"][2]));
    };
    if (v.type === "ToMap" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkToMap(decodeFAST(v["value"][0]))(decodeN(decodeFAST)(v["value"][1]));
    };
    if (v.type === "Lam" && v.value.length === 3) {
        return Dhall_Core_AST_Constructors.mkLam(decodeS(v["value"][0]))(decodeFAST(v["value"][1]))(decodeFAST(v["value"][2]));
    };
    if (v.type === "Pi" && v.value.length === 3) {
        return Dhall_Core_AST_Constructors.mkPi(decodeS(v["value"][0]))(decodeFAST(v["value"][1]))(decodeFAST(v["value"][2]));
    };
    if (v.type === "Let" && v.value.length === 4) {
        return Dhall_Core_AST_Constructors.mkLet(decodeS(v["value"][0]))(decodeN(decodeFAST)(v["value"][1]))(decodeFAST(v["value"][2]))(decodeFAST(v["value"][3]));
    };
    if (v.type === "Annot" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkAnnot(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "Var" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V(decodeS(v["value"][0]), v["value"][1]));
    };
    if (v.type === "NaturalLit" && v.value.length === 1) {
        return Dhall_Core_AST_Constructors.mkNaturalLit(v["value"][0]);
    };
    if (v.type === "IntegerLit" && v.value.length === 1) {
        return Dhall_Core_AST_Constructors.mkIntegerLit(v["value"][0]);
    };
    if (v.type === "DoubleLit" && v.value.length === 1) {
        return Dhall_Core_AST_Constructors.mkDoubleLit(v["value"][0]);
    };
    if (v.type === "TextLit") {
        return Dhall_Core_AST_Constructors.mkTextLit(decodeTextLit(v.value));
    };
    if (v.type === "Some" && v.value.length === 1) {
        return Dhall_Core_AST_Constructors.mkSome(decodeFAST(v["value"][0]));
    };
    if (v.type === "None") {
        return Dhall_Core_AST_Constructors.mkNone;
    };
    if (v.type === "ListLit" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkListLit(decodeN(decodeFAST)(v["value"][1]))(decodeA(decodeFAST)(v["value"][0]));
    };
    if (v.type === "Record") {
        return Dhall_Core_AST_Constructors.mkRecord(Dhall_Map.functorIOSM)(decodeLabelled(decodeFAST)(v.value));
    };
    if (v.type === "RecordLit") {
        return Dhall_Core_AST_Constructors.mkRecordLit(Dhall_Map.functorIOSM)(decodeLabelled(decodeFAST)(v.value));
    };
    if (v.type === "Union") {
        return Dhall_Core_AST_Constructors.mkUnion(Dhall_Map.functorIOSM)(decodeLabelled(decodeN(decodeFAST))(v.value));
    };
    if (v.type === "Assert" && v.value.length === 1) {
        return Dhall_Core_AST_Constructors.mkAssert(decodeFAST(v["value"][0]));
    };
    if (v.type === "Equivalent" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkEquivalent(decodeFAST(v["value"][0]))(decodeFAST(v["value"][1]));
    };
    if (v.type === "Hashed" && v.value.length === 2) {
        return Dhall_Core_AST_Constructors.mkHashed(decodeFAST(v["value"][0]))(decodeHash(v["value"][1]));
    };
    if (v.type === "Import" && v.value.length === 2) {
        var v1 = decodeImportType(fromForeign(v["value"][0]));
        return Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))((function () {
            var $207 = Data_Function.flip(Dhall_Core_AST_Constructors.mkUsingHeaders);
            return function ($208) {
                return $207(decodeFAST($208));
            };
        })())(v1.value0)(Control_Applicative.pure(Dhall_Core_AST_Types.applicativeExpr)({
            importType: v1.value1,
            importMode: (function () {
                var v2 = Control_Monad_Except.runExcept(Foreign.readString(v["value"][1]));
                if (v2 instanceof Data_Either.Right && v2.value0 === "Text") {
                    return Dhall_Core_Imports_Types.RawText.value;
                };
                if (v2 instanceof Data_Either.Right && v2.value0 === "Location") {
                    return Dhall_Core_Imports_Types.Location.value;
                };
                return Dhall_Core_Imports_Types.Code.value;
            })()
        }));
    };
    return Partial_Unsafe.unsafeCrashWith("Unrecognized Expr: " + (v.type + (" " + v)));
};
var parseAll = function (s) {
    return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Nullable.toMaybe($foreign.parseImpl(s)))(Data_Functor.map(Data_Functor.functorArray)(decodeFAST));
};
var parse = function (s) {
    var v = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(parseAll(s))(disambiguate);
    if (v instanceof Data_Maybe.Just && v.value0.length === 1) {
        return new Data_Maybe.Just(v["value0"][0]);
    };
    return Data_Maybe.Nothing.value;
};
module.exports = {
    parse: parse,
    parseAll: parseAll,
    FAST: FAST,
    fromForeign: fromForeign,
    decodeS: decodeS,
    decodeN: decodeN,
    decodeA: decodeA,
    decodeFAST: decodeFAST,
    decodeTextLit: decodeTextLit,
    decodeLabelled: decodeLabelled,
    decodeHash: decodeHash,
    decodeImportType: decodeImportType,
    decodeDirectory: decodeDirectory,
    decodeURL: decodeURL,
    disambiguate: disambiguate,
    prioritizeVF: prioritizeVF,
    firstVar: firstVar,
    pc: pc,
    keyword: keyword,
    priorities: priorities,
    isPrioritized: isPrioritized,
    reveal: reveal,
    fits: fits,
    prioritize_forall: prioritize_forall,
    prioritize_env: prioritize_env,
    prioritize_annot: prioritize_annot,
    parseImpl: $foreign.parseImpl
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Except/index.js":39,"../Control.MonadZero/index.js":62,"../Control.Semigroupoid/index.js":68,"../Data.Array/index.js":91,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Internal.Forget/index.js":162,"../Data.List.Types/index.js":182,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Nullable/index.js":200,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Core.Imports.Types/index.js":271,"../Dhall.Core.Zippers.Merge/index.js":272,"../Dhall.Map/index.js":284,"../Dhall.Parser.Prioritize/index.js":287,"../Foreign/index.js":317,"../Partial.Unsafe/index.js":378,"../Unsafe.Coerce/index.js":391,"./foreign.js":288}],290:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifoldable = require("../Data.Bifoldable/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Mu = require("../Data.Functor.Mu/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Indexed = require("../Data.Lens.Indexed/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Data_Void = require("../Data.Void/index.js");
var Dhall_Context = require("../Dhall.Context/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Operations = require("../Dhall.Core.AST.Operations/index.js");
var Dhall_Core_AST_Operations_Location = require("../Dhall.Core.AST.Operations.Location/index.js");
var Dhall_Core_AST_Operations_Transformations = require("../Dhall.Core.AST.Operations.Transformations/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Dhall_Core_Imports_Retrieve = require("../Dhall.Core.Imports.Retrieve/index.js");
var Dhall_Core_Zippers = require("../Dhall.Core.Zippers/index.js");
var Dhall_Map = require("../Dhall.Map/index.js");
var Dhall_Normalize = require("../Dhall.Normalize/index.js");
var Dhall_Variables = require("../Dhall.Variables/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_Fold = require("../Matryoshka.Fold/index.js");
var Matryoshka_Unfold = require("../Matryoshka.Unfold/index.js");
var Matryoshka_Util = require("../Matryoshka.Util/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Validation_These = require("../Validation.These/index.js");
var WithHint = (function () {
    function WithHint(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WithHint.create = function (value0) {
        return function (value1) {
            return new WithHint(value0, value1);
        };
    };
    return WithHint;
})();
var TypeCheckError = function (x) {
    return x;
};
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();
var Br = (function () {
    function Br() {

    };
    Br.value = new Br();
    return Br;
})();
var Reference = (function () {
    function Reference(value0) {
        this.value0 = value0;
    };
    Reference.create = function (value0) {
        return new Reference(value0);
    };
    return Reference;
})();
var List = (function () {
    function List(value0) {
        this.value0 = value0;
    };
    List.create = function (value0) {
        return new List(value0);
    };
    return List;
})();
var Compare = (function () {
    function Compare(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Compare.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Compare(value0, value1, value2, value3);
                };
            };
        };
    };
    return Compare;
})();
var Href = (function () {
    function Href(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Href.create = function (value0) {
        return function (value1) {
            return new Href(value0, value1);
        };
    };
    return Href;
})();
var NoStrMap = function (x) {
    return x;
};
var Inconsistency = function (x) {
    return x;
};
var WithBiCtx = (function () {
    function WithBiCtx(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WithBiCtx.create = function (value0) {
        return function (value1) {
            return new WithBiCtx(value0, value1);
        };
    };
    return WithBiCtx;
})();
var unEnvT = function (v) {
    return v.value1;
};
var typecheckOp = function (v) {
    return Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value1);
};
var traversableNoStrMap = Data_Const.traversableConst;
var traversableInconsistency = Data_NonEmpty.traversableNonEmpty(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList));
var tabulateGroupings = function (egal) {
    var insertGrouping = function (v0) {
        return function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(Data_List_Types.applicativeList)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(v0));
            };
            if (v instanceof Data_List_Types.Cons) {
                if (egal((Control_Comonad.extract(Data_List_Types.comonadNonEmptyList)(v.value0)).value)(v0.value)) {
                    return new Data_List_Types.Cons(Data_List_NonEmpty.cons(v0)(v.value0), v.value1);
                };
                if (Data_Boolean.otherwise) {
                    return new Data_List_Types.Cons(v.value0, insertGrouping(v0)(v.value1));
                };
            };
            throw new Error("Failed pattern match at Dhall.TypeCheck (line 708, column 23 - line 713, column 60): " + [ v.constructor.name ]);
        };
    };
    var go = function ($copy_accum) {
        return function ($copy_v) {
            var $tco_var_accum = $copy_accum;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(accum, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return Control_Plus.empty(Data_List_Types.plusList);
                };
                if (v instanceof Data_List_Types.Cons) {
                    $tco_var_accum = insertGrouping(v.value0)(accum);
                    $copy_v = v.value1;
                    return;
                };
                throw new Error("Failed pattern match at Dhall.TypeCheck (line 705, column 14 - line 707, column 59): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_accum, $copy_v);
            };
            return $tco_result;
        };
    };
    return go(Control_Plus.empty(Data_List_Types.plusList));
};
var substcontextualizeWithin10 = function (shiftIn_node$prime) {
    return function (go) {
        return function (ctx) {
            return Dhall_Variables.trackIntro(function (v) {
                if (v instanceof Dhall_Variables.DoNothing) {
                    return go(ctx);
                };
                if (v instanceof Dhall_Variables.Clear) {
                    return go(Dhall_Context.empty);
                };
                if (v instanceof Dhall_Variables.Intro) {
                    return go(Dhall_Context.insert(v.value0.value0)(Control_Plus.empty(Data_Maybe.plusMaybe))(Data_Functor.map(Dhall_Context.functorContext)(Data_Functor.map(Data_Maybe.functorMaybe)(shiftIn_node$prime(v.value0.value0)))(ctx)));
                };
                throw new Error("Failed pattern match at Dhall.TypeCheck (line 375, column 62 - line 380, column 39): " + [ v.constructor.name ]);
            });
        };
    };
};
var substcontextualizeWithin1 = function (shiftIn_node$prime) {
    return function (go) {
        return function (ctx) {
            return Dhall_Variables.trackIntro(function (v) {
                if (v instanceof Dhall_Variables.DoNothing) {
                    return go(ctx);
                };
                if (v instanceof Dhall_Variables.Clear) {
                    return go(Dhall_Context.empty);
                };
                if (v instanceof Dhall_Variables.Intro) {
                    return go(Dhall_Context.insert(v.value0.value0)(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                        var $1000 = shiftIn_node$prime(v.value0.value0);
                        var $1001 = go(ctx);
                        return function ($1002) {
                            return $1000($1001($1002));
                        };
                    })())(Data_These.theseLeft(v.value0.value1)))(Data_Functor.map(Dhall_Context.functorContext)(Data_Functor.map(Data_Maybe.functorMaybe)(shiftIn_node$prime(v.value0.value0)))(ctx)));
                };
                throw new Error("Failed pattern match at Dhall.TypeCheck (line 361, column 61 - line 366, column 39): " + [ v.constructor.name ]);
            });
        };
    };
};
var subst1 = function (ctx) {
    var lookup = function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Dhall_Context.lookup(v.value0)(v.value1)(ctx))(Control_Category.identity(Control_Category.categoryFn));
    };
    var obtain = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "Var";
    }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
        var $1003 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        return function ($1004) {
            return lookup($1003($1004));
        };
    })())(Control_Applicative.pure(Control_Applicative.applicativeFn)(Data_Maybe.Nothing.value));
    return Control_Bind.bind(Control_Bind.bindFn)(obtain)(function (v) {
        if (v instanceof Data_Maybe.Just) {
            return function (v1) {
                return new Data_Either.Left(v.value0);
            };
        };
        return function (e) {
            return new Data_Either.Right(e);
        };
    });
};
var substContext1 = function (shiftIn_node$prime) {
    return function (go) {
        return function (ctx) {
            var $1005 = subst1(ctx);
            var $1006 = substcontextualizeWithin1(shiftIn_node$prime)(go)(ctx);
            return function ($1007) {
                return $1005($1006($1007));
            };
        };
    };
};
var substContextExpr = Data_Function.flip(Matryoshka_Fold.cata(Dhall_Core_AST_Types.recursiveExpr)(function (v) {
    return function (ctx) {
        var v1 = substContext1(function (name) {
            return Dhall_Variables.shift(1)(new Dhall_Core_AST_Types.V(name, 0));
        })(Data_Function.applyFlipped)(ctx)(v);
        if (v1 instanceof Data_Either.Left) {
            return v1.value0;
        };
        if (v1 instanceof Data_Either.Right) {
            return Matryoshka_Class_Corecursive.embed(Dhall_Core_AST_Types.corecursiveExpr)(v1.value0);
        };
        throw new Error("Failed pattern match at Dhall.TypeCheck (line 452, column 3 - line 454, column 40): " + [ v1.constructor.name ]);
    };
}));
var substContext10 = function (shiftIn_node$prime) {
    return function (go) {
        return function (ctx) {
            var $1008 = subst1(ctx);
            var $1009 = substcontextualizeWithin10(shiftIn_node$prime)(go)(ctx);
            return function ($1010) {
                return $1008($1009($1010));
            };
        };
    };
};
var substContextExpr0 = Data_Function.flip(Matryoshka_Fold.cata(Dhall_Core_AST_Types.recursiveExpr)(function (v) {
    return function (ctx) {
        var v1 = substContext10(function (name) {
            return Dhall_Variables.shift(1)(new Dhall_Core_AST_Types.V(name, 0));
        })(Data_Function.applyFlipped)(ctx)(v);
        if (v1 instanceof Data_Either.Left) {
            return v1.value0;
        };
        if (v1 instanceof Data_Either.Right) {
            return Matryoshka_Class_Corecursive.embed(Dhall_Core_AST_Types.corecursiveExpr)(v1.value0);
        };
        throw new Error("Failed pattern match at Dhall.TypeCheck (line 460, column 3 - line 462, column 40): " + [ v1.constructor.name ]);
    };
}));
var step2D = function (dictFunctor) {
    return function (dictRecursive) {
        return function (dictCorecursive) {
            var $1011 = Data_Functor.map(dictFunctor)((function () {
                var $1015 = Matryoshka_Class_Corecursive.embed(dictCorecursive);
                return function ($1016) {
                    return $1015(Data_Functor_Compose.Compose($1016));
                };
            })());
            var $1012 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
            var $1013 = Matryoshka_Class_Recursive.project(dictRecursive);
            return function ($1014) {
                return $1011(Control_Comonad_Cofree.tail($1012($1013($1014))));
            };
        };
    };
};
var showTypeCheckError = function (dictShow) {
    return function (dictShow1) {
        return Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "location";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "tag";
        }))(Data_Show.showRecordFieldsNil)(dictShow1))(dictShow));
    };
};
var showInconsistency = function (dictShow) {
    return Data_NonEmpty.showNonEmpty(dictShow)(Data_NonEmpty.showNonEmpty(dictShow)(Data_List_Types.showList(dictShow)));
};
var rule = function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Dhall_Core_AST_Types.Type) {
                return Control_Applicative.pure(dictApplicative)(Dhall_Core_AST_Types.Type.value);
            };
            return Control_Applicative.pure(dictApplicative)(Data_Ord.max(Dhall_Core_AST_Types.ordConst)(v)(v1));
        };
    };
};
var recursor2D = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictFunctor) {
            return function (dictFunctor1) {
                return function (f) {
                    var go = Matryoshka_Unfold.ana(dictCorecursive)((function () {
                        var $1017 = Control_Comonad_Cofree.buildCofree(dictFunctor1)((function () {
                            var $1019 = Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(Control_Category.identity(Control_Category.categoryFn))(function (ft) {
                                return f(Data_Functor.mapFlipped(dictFunctor)(ft)(go));
                            });
                            var $1020 = Matryoshka_Class_Recursive.project(dictRecursive);
                            return function ($1021) {
                                return $1019($1020($1021));
                            };
                        })());
                        return function ($1018) {
                            return Data_Functor_Compose.Compose($1017($1018));
                        };
                    })());
                    return go;
                };
            };
        };
    };
};
var reconstituteCtxFrom = function (dictBind) {
    return function (dictApplicative) {
        return function (ctx0) {
            return function (f) {
                var f$prime = function (v) {
                    return function (mctx) {
                        return Control_Bind.bind(dictBind)(mctx)(function (v1) {
                            return Control_Bind.bind(dictBind)(f(v1)(v.value1))(function (v2) {
                                return Control_Applicative.pure(dictApplicative)(Dhall_Context.insert(v.value0)(v2)(v1));
                            });
                        });
                    };
                };
                var $1022 = Data_Foldable.foldr(Data_List_Types.foldableList)(f$prime)(Control_Applicative.pure(dictApplicative)(ctx0));
                var $1023 = Data_Newtype.un(Dhall_Context.newtypeContext)(Dhall_Context.Context);
                var $1024 = Control_Category.identity(Control_Category.categoryFn);
                return function ($1025) {
                    return $1022($1023($1024($1025)));
                };
            };
        };
    };
};
var reconstituteCtx = function (dictBind) {
    return function (dictApplicative) {
        return reconstituteCtxFrom(dictBind)(dictApplicative)(Dhall_Context.empty);
    };
};
var overBiCtx = function (fg) {
    return function (v) {
        return new WithBiCtx(v.value0, fg(v.value1));
    };
};
var originateFrom = function (dictFunctorWithIndex) {
    var go = function (loc) {
        return function (e) {
            return Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(loc)(Data_FunctorWithIndex.mapWithIndex(Dhall_Core_AST_Types.functorWithIndexERVF(dictFunctorWithIndex))(function (i$prime) {
                return Data_Function.applyFlipped(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                    return "within";
                }))()(Dhall_Core_AST_Types_Basics["_S"])(i$prime))(loc));
            })(e))));
        };
    };
    return Data_Function.flip(Matryoshka_Fold.cata(Dhall_Core_AST_Types.recursiveExpr)(Data_Function.flip(go)));
};
var normalizeOp = function (v) {
    return Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0.value1.value1);
};
var newtypeNoStrMap = new Data_Newtype.Newtype(function (n) {
    return n;
}, NoStrMap);
var rehydrate = function (dictFunctor) {
    var $1026 = Data_Functor.map(Dhall_Core_AST_Types.functorExpr)(Data_Void.absurd);
    var $1027 = Dhall_Core_AST_Operations.hoistExpr(dictFunctor)((function () {
        var $1029 = Data_Newtype.unwrap(Data_Const.newtypeConst);
        var $1030 = Data_Newtype.unwrap(newtypeNoStrMap);
        return function ($1031) {
            return Data_Void.absurd($1029($1030($1031)));
        };
    })());
    return function ($1028) {
        return $1026($1027($1028));
    };
};
var newtypeInconsistency = new Data_Newtype.Newtype(function (n) {
    return n;
}, Inconsistency);
var newborn = function (dictFunctorWithIndex) {
    return function (e0) {
        return originateFrom(dictFunctorWithIndex)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), new Data_Maybe.Just(e0))))(e0);
    };
};
var mapEnv = function (f) {
    return function (v) {
        return new Data_Tuple.Tuple(f(v.value0), v.value1);
    };
};
var headAndSpine = function (dictCorecursive) {
    return Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(Control_Comonad_Cofree.head)(Matryoshka_Fold.transCata(Matryoshka_Class_Recursive.recursiveCofree(dictCorecursive.Functor0()))(dictCorecursive)((function () {
        var $1032 = Control_Comonad.extract(Data_Tuple.comonadTuple);
        return function ($1033) {
            return $1032(Control_Comonad_Env_Trans.runEnvT($1033));
        };
    })()));
};
var head2D = function (dictComonad) {
    return function (dictRecursive) {
        return function (dictCorecursive) {
            return Matryoshka_Fold.transCata(dictRecursive)(dictCorecursive)((function () {
                var $1034 = Control_Comonad.extract(dictComonad);
                var $1035 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
                return function ($1036) {
                    return $1034($1035($1036));
                };
            })());
        };
    };
};
var getBiCtx = function (v) {
    return v.value0;
};
var functorWithHint = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (m) {
            return new WithHint(Data_Functor.map(Data_Maybe.functorMaybe)(f)(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
        };
    });
};
var functorWithIndexWithHint = function (dictFunctorWithIndex) {
    return new Data_FunctorWithIndex.FunctorWithIndex(function () {
        return functorWithHint(dictFunctorWithIndex.Functor0());
    }, function (f) {
        return function (v) {
            return new WithHint(Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Maybe.Nothing.value))(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function ($1037) {
                return f(Data_Maybe.Just.create($1037));
            })(v.value1));
        };
    });
};
var functorWithBiCtx = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new WithBiCtx(Data_Functor.map(Dhall_Context.functorContext)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))(f))(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
        };
    });
};
var normalizeStep = (function () {
    var $1038 = step2D(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1039) {
        return normalizeOp($1038($1039));
    };
})();
var overlayerO = (function () {
    var $1040 = Matryoshka_Util.mapR(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    var $1041 = Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
    var $1042 = Data_Functor.map(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))));
    var $1043 = Data_Newtype.over(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.ERVF);
    return function ($1044) {
        return $1040($1041($1042(Control_Comonad_Env_Trans.mapEnvT($1043($1044)))));
    };
})();
var typecheckStep = (function () {
    var $1045 = step2D(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1046) {
        return typecheckOp($1045($1046));
    };
})();
var unlayerO = (function () {
    var $1047 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
    var $1048 = Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))));
    var $1049 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
    var $1050 = Matryoshka_Class_Recursive.project(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1051) {
        return $1047(unEnvT($1048($1049($1050($1051)))));
    };
})();
var runOxprAlg = function (alg) {
    var go = function (i) {
        return function (e) {
            return Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(alg(i)({
                unlayer: unlayerO,
                overlayer: (function () {
                    var $1052 = Data_Functor.map(Data_Functor.functorFn)(Control_Applicative.pure(Data_Identity.applicativeIdentity));
                    var $1053 = Data_Functor.map(Data_Functor.functorFn)(Control_Comonad.extract(Data_Identity.comonadIdentity));
                    return function ($1054) {
                        return $1052(overlayerO($1053($1054)));
                    };
                })(),
                recurse: (function () {
                    var $1055 = Data_Functor.map(Data_Functor.functorFn)(Data_Identity.Identity);
                    return function ($1056) {
                        return $1055(go($1056));
                    };
                })()
            })(e));
        };
    };
    return go;
};
var shiftOxpr = function (delta) {
    return function (variable) {
        return runOxprAlg(Dhall_Variables.shiftAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
            return "shift";
        }))(Dhall_Core_AST_Types_Basics["_S"])({
            delta: delta,
            variable: variable
        }));
    };
};
var shiftInOxpr = shiftOxpr(1);
var shiftInOxpr0 = function (v) {
    return shiftInOxpr(new Dhall_Core_AST_Types.V(v, 0));
};
var shiftOutOxpr = shiftOxpr(-1 | 0);
var functorTypeCheckError = new Data_Functor.Functor(function (f) {
    return function (m) {
        return {
            location: f(m.location),
            tag: m.tag
        };
    };
});
var functorReference = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Text) {
            return new Text(m.value0);
        };
        if (m instanceof Br) {
            return Br.value;
        };
        if (m instanceof Reference) {
            return new Reference(f(m.value0));
        };
        if (m instanceof List) {
            return new List(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(functorReference)(f))(m.value0));
        };
        if (m instanceof Compare) {
            return new Compare(m.value0, f(m.value1), m.value2, f(m.value3));
        };
        if (m instanceof Href) {
            return new Href(m.value0, m.value1);
        };
        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1502, column 1 - line 1502, column 54): " + [ m.constructor.name ]);
    };
});
var functorNoStrMap = Data_Const.functorConst;
var functorWithIndexNoStrMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorNoStrMap;
}, function (v) {
    return function (v1) {
        return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(v1));
    };
});
var functorInconsistency = Data_NonEmpty.functorNonEmpty(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList));
var freeInOxpr = function (dictFoldable) {
    return Data_Function.flip(Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))((function () {
        var $1057 = Dhall_Variables.freeInAlg()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Data_Functor_Compose.foldableCompose(dictFoldable)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())());
        var $1058 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
        var $1059 = Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))));
        var $1060 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
        return function ($1061) {
            return $1057($1058(unEnvT($1059($1060($1061)))));
        };
    })()));
};
var tryShiftOutOxpr = function (dictFoldable) {
    return function (v) {
        return function (e) {
            if (Data_Newtype.un(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(freeInOxpr(dictFoldable)(v)(e))) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just(shiftOutOxpr(v)(e));
        };
    };
};
var tryShiftOut0Oxpr = function (dictFoldable) {
    return function (v) {
        return tryShiftOutOxpr(dictFoldable)(new Dhall_Core_AST_Types.V(v, 0));
    };
};
var freeInLxpr = function (dictFoldable) {
    return Data_Function.flip(Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))((function () {
        var $1062 = Dhall_Variables.freeInAlg()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Data_Functor_Compose.foldableCompose(dictFoldable)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())());
        var $1063 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
        return function ($1064) {
            return $1062($1063(unEnvT($1064)));
        };
    })()));
};
var foldableWithHint = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return Data_Foldable.foldlDefault(foldableWithHint(dictFoldable))(f);
    }, function (f) {
        return Data_Foldable.foldrDefault(foldableWithHint(dictFoldable))(f);
    });
};
var foldableWithBiCtx = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            return function (v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Dhall_Context.foldableContext)(dictMonoid)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifoldable.bifoldMap(Data_These.bifoldableThese)(dictMonoid))(f))(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
        };
    }, function (f) {
        return function (c) {
            return function (v) {
                return Data_Foldable.foldl(dictFoldable)(f)(Data_Foldable.foldl(Dhall_Context.foldableContext)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifoldable.bifoldl(Data_These.bifoldableThese))(f))(c)(v.value0))(v.value1);
            };
        };
    }, function (f) {
        return function (c) {
            return function (v) {
                return Data_Foldable.foldr(Dhall_Context.foldableContext)(Data_Function.flip(Control_Bind.join(Control_Bind.bindFn)(Data_Bifoldable.bifoldr(Data_These.bifoldableThese))(f)))(Data_Foldable.foldr(dictFoldable)(f)(c)(v.value1))(v.value0);
            };
        };
    });
};
var traversableWithBiCtx = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableWithBiCtx(dictTraversable.Foldable1());
    }, function () {
        return functorWithBiCtx(dictTraversable.Functor0());
    }, function (dictApplicative) {
        return function (v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(WithBiCtx.create)(Data_Traversable.traverse(Dhall_Context.traversableContext)(dictApplicative)(Data_Bitraversable.bisequence(Data_These.bitraversableThese)(dictApplicative))(v.value0)))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
        };
    }, function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(WithBiCtx.create)(Data_Traversable.traverse(Dhall_Context.traversableContext)(dictApplicative)(Control_Bind.join(Control_Bind.bindFn)(Data_Bitraversable.bitraverse(Data_These.bitraversableThese)(dictApplicative))(f))(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
        };
    });
};
var foldableNoStrMap = Data_Const.foldableConst;
var foldableableWithIndexNoStrMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableNoStrMap;
}, function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(v1));
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(v2));
        };
    };
}, function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(v2));
        };
    };
});
var traversableWithIndexNoStrMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableableWithIndexNoStrMap;
}, function () {
    return functorWithIndexNoStrMap;
}, function () {
    return traversableNoStrMap;
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return Data_Void.absurd(Data_Newtype.unwrap(Data_Const.newtypeConst)(v1));
        };
    };
});
var foldableInconsistency = Data_NonEmpty.foldableNonEmpty(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList));
var foldable1Inconsistency = Data_NonEmpty.foldable1NonEmpty(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList));
var findDupes = function (dictOrd) {
    return function (dictFoldableWithIndex) {
        var $1065 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_List_Types.semigroupNonEmptyList))((function () {
            var $1071 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
            var $1072 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
            return function ($1073) {
                return $1071($1072($1073));
            };
        })());
        var $1066 = Data_Array.mapMaybe(function (a) {
            var $539 = Data_Array_NonEmpty.length(a) > 1;
            if ($539) {
                return new Data_Maybe.Just(Data_Array_NonEmpty.head(a));
            };
            return Data_Maybe.Nothing.value;
        });
        var $1067 = Data_Array.group(dictOrd.Eq0());
        var $1068 = Data_Array.sort(dictOrd);
        var $1069 = Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid.monoidArray)(function (i) {
            return function (v) {
                return [ i ];
            };
        });
        return function ($1070) {
            return $1065($1066($1067($1068($1069($1070)))));
        };
    };
};
var explain = function (dictMapLike) {
    return function (ctx) {
        return function (nodeType) {
            var within$prime = function (ervfi) {
                return Data_Monoid_Endo.Endo(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                    return "within";
                }))()(Dhall_Core_AST_Types_Basics["_S"])(ervfi));
            };
            var within = function (dictIsSymbol) {
                return function (dictCons) {
                    return function (sym) {
                        return function (v) {
                            return within$prime(Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(v));
                        };
                    };
                };
            };
            var typechecked = Data_Monoid_Endo.Endo(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                return "typecheck";
            }))()(Dhall_Core_AST_Types_Basics["_S"]));
            var normalized = Data_Monoid_Endo.Endo(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                return "normalize";
            }))()(Dhall_Core_AST_Types_Basics["_S"]));
            var expr = function (e) {
                return Data_Tuple.Tuple.create(Control_Plus.empty(Data_List_Types.plusList))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Functor.map(Dhall_Core_AST_Types.functorExpr)(Data_Void.absurd)(e)));
            };
            var referenceExpr = function (e) {
                return new Reference(expr(e));
            };
            var referenceConst = function ($1074) {
                return referenceExpr(Dhall_Core_AST_Constructors.mkConst($1074));
            };
            var errorUnknownError = [ new Text("Unexplained error") ];
            var dereference = function (v) {
                return v(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), Data_Maybe.Nothing.value));
            };
            var reference = function ($1075) {
                return Reference.create(dereference($1075));
            };
            var here = reference(Data_Monoid.mempty(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)));
            var notAType = function (desc) {
                return function (loc) {
                    return [ Text.create("The " + ((function () {
                        var $541 = Data_String_Common["null"](desc);
                        if ($541) {
                            return "";
                        };
                        return desc + " ";
                    })() + " type ")), reference(loc), new Text(" is required to be a type in some universe, e.g. "), referenceExpr(Dhall_Core_AST_Constructors.mkType), new Text(" but instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(loc)) ];
                };
            };
            var compare = function (s1) {
                return function (l1) {
                    return function (s2) {
                        return function (l2) {
                            return new Compare(s1, dereference(l1), s2, dereference(l2));
                        };
                    };
                };
            };
            return Data_Variant.onMatch()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()({
                "`Sort` has no type": function (v) {
                    return [ new Text("Sort is the top universe of types and therefore it has no type itself") ];
                },
                "Not a function": function (v) {
                    return [ Text.create("The left side of a function application node must be a function "), Text.create("(i.e. a term whose type is a Pi type)"), Text.create(" but instead it had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(false))) ];
                },
                "Type mismatch": function (v) {
                    return [ compare("The function takes values in type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(false))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(false)))))(" but was instead given a value of type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "App";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(true)))) ];
                },
                "Invalid predicate": function (v) {
                    return [ Text.create("If-then-else expressions take predicates whose type is "), referenceExpr(Dhall_Core_AST_Constructors.mkBool), Text.create(" but the predicate had this type instead "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value))) ];
                },
                "If branch mismatch": function (v) {
                    return [ Text.create("If expressions must have the same type in the `then` branch as the `else` branch, "), compare(" but the former was ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three2.value)))(" and the latter was ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three3.value))) ];
                },
                "If branch must be term": function (v) {
                    var focus = within(new Data_Symbol.IsSymbol(function () {
                        return "BoolIf";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])((function () {
                        if (v.value0) {
                            return Dhall_Core_AST_Types_Basics.Three3.value;
                        };
                        return Dhall_Core_AST_Types_Basics.Three2.value;
                    })());
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Text.create("If-then-else expressions must return a term "), Text.create("(since dependent types are forbidden)"), Text.create(" but the expression had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ])((function () {
                        if (v.value1 instanceof Data_Maybe.Nothing) {
                            return [ Text.create(" which is not in a type universe, but instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus))) ];
                        };
                        if (v.value1 instanceof Data_Maybe.Just) {
                            return [ new Compare(" which was in universe ", expr(Dhall_Core_AST_Constructors.mkConst(v.value1.value0)), " instead of ", expr(Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Type.value))) ];
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1640, column 12 - line 1651, column 12): " + [ v.value1.constructor.name ]);
                    })());
                },
                "Invalid list type": function (v) {
                    var annot = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit));
                    var focus = (function () {
                        var $549 = Data_Lens_Fold.has(Data_HeytingAlgebra.heytingAlgebraBoolean)(Dhall_Core_Zippers["_ix"](Dhall_Core_AST_Types.traversableWithIndexERVF(dictMapLike.TraversableWithIndex2()))(Dhall_Core_AST_Types.eqERVFI)(annot)(Data_Lens_Internal_Forget.wanderForget(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))))(nodeType);
                        if ($549) {
                            return within$prime(annot);
                        };
                        return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                            return "ListLit";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(0)));
                    })();
                    return [ Text.create("A list should contain elements in the universe "), referenceExpr(Dhall_Core_AST_Constructors.mkType), Text.create(" but this is not "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ];
                },
                "Missing list type": function (v) {
                    return [ new Text("Empty list literals must be annotated with the type of their elements") ];
                },
                "Invalid list element": function (i) {
                    return [ Text.create("The list was annotated to have type "), reference(within(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit))), Text.create(" but the element at index "), Text.create(Data_Show.show(Data_Show.showInt)(i)), Text.create(" had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(i)))) ];
                },
                "Mismatched list elements": function (i) {
                    return [ Text.create("The list was assumed to have type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(0)))), Text.create(" but the element at index "), Text.create(Data_Show.show(Data_Show.showInt)(i)), Text.create(" had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(i)))) ];
                },
                "Cannot append non-list": function (v) {
                    var focus = within(new Data_Symbol.IsSymbol(function () {
                        return "ListAppend";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v);
                    return [ Text.create("Appending lists requires the operands to be lists"), Text.create(" but the " + ((function () {
                        if (v) {
                            return "right";
                        };
                        return "left";
                    })() + " side instead had type ")), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus))) ];
                },
                "Cannot interpolate": function (v) {
                    var focus = within(new Data_Symbol.IsSymbol(function () {
                        return "TextLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v);
                    return [ Text.create("Expressions interpolated into a text literal must have type "), referenceExpr(Dhall_Core_AST_Constructors.mkText), Text.create(" but this instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ];
                },
                "List append mismatch": function (v) {
                    var elType = function (side) {
                        return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                            return "App";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(true))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                            return "ListAppend";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(side))));
                    };
                    return [ Text.create("Appending lists requires the operands to be lists of equal types"), Text.create(" but the left side has elements of type "), reference(elType(false)), Text.create(" while the right has elements of type "), reference(elType(true)) ];
                },
                "List annotation must be list type": function (v) {
                    return [ Text.create("Lists must be annotated with a type that starts with `List`, but this one was annotated with "), reference(within(new Data_Symbol.IsSymbol(function () {
                        return "ListLit";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit))) ];
                },
                "Invalid `Some`": function (v) {
                    var focus = within(new Data_Symbol.IsSymbol(function () {
                        return "Some";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Text.create("A optional literal must contain a term but Some was given an expression "), reference(focus), Text.create(" of type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ])((function () {
                        if (v instanceof Data_Maybe.Nothing) {
                            return [ Text.create(" which is not in a type universe, but instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus))) ];
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return [ new Compare(" which was in universe ", expr(Dhall_Core_AST_Constructors.mkConst(v.value0)), " instead of ", expr(Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Type.value))) ];
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1719, column 12 - line 1730, column 12): " + [ v.constructor.name ]);
                    })());
                },
                "Duplicate record fields": function (v) {
                    return [ Text.create("The following names of fields occurred more than once in a Record (type): "), List.create(Data_Functor.map(Data_Functor.functorArray)(Text.create)(Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList)(v))) ];
                },
                "Invalid field type": function (name) {
                    var focus = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "RecordLit";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                        return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(name));
                    })(function (v) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Record";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(name);
                    })(nodeType);
                    return [ Text.create("Record field types must live in a universe, but "), Text.create("`" + (name + "` ")), reference(focus), Text.create(" instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ];
                },
                "Inconsistent field types": function (keys) {
                    var focus = function (name) {
                        return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                            return "RecordLit";
                        }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                            return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                                return "RecordLit";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(name));
                        })(function (v) {
                            return within(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(name);
                        })(nodeType);
                    };
                    return [ Text.create("Record field types must all live in the same universe, but these did not "), List.create(Data_Functor.map(Data_Functor.functorArray)((function () {
                        var $1076 = Data_Show.show(Data_List_Types.showNonEmptyList(Data_Show.showString));
                        return function ($1077) {
                            return Text.create($1076($1077));
                        };
                    })())(Data_Array.fromFoldable(foldableInconsistency)(keys))) ];
                },
                "Duplicate union alternatives": function (v) {
                    return [ Text.create("The following names of alternatives occurred more than once in a Union (type): "), List.create(Data_Functor.map(Data_Functor.functorArray)(Text.create)(Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList)(v))) ];
                },
                "Invalid alternative type": function (name) {
                    var focus = within(new Data_Symbol.IsSymbol(function () {
                        return "Union";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(name, Data_Unit.unit));
                    return [ Text.create("Union alternative types must live in a universe, but "), Text.create("`" + (name + "` ")), reference(focus), Text.create(" instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)) ];
                },
                "Must combine a record": function (v) {
                    var focus = function (name) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(name, Data_Unit.unit));
                    };
                    return [  ];
                },
                "Record kind mismatch": function (path) {
                    var focus = function (name) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Union";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(name, Data_Unit.unit));
                    };
                    return [  ];
                },
                "Must merge a record": function (v) {
                    return [ Text.create("Using the `merge` operator requires a record as the first argument, but this had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)))) ];
                },
                "Must merge a union": function (v) {
                    return [ Text.create("Using the `merge` operator requires a union as the second argument, but this had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)))) ];
                },
                "Missing handler": function (names) {
                    return [ Text.create("Handlers for the `merge` operator "), Text.create("`" + (Data_Show.show(Data_Set.showSet(Data_Unit.showUnit))(names) + "` ")) ];
                },
                "Unused handlers": function (names) {
                    return [ Text.create("Handlers for the `merge` operator "), Text.create("`" + (Data_Show.show(Data_Set.showSet(Data_Unit.showUnit))(names) + "` ")) ];
                },
                "Handler not a function": function (name) {
                    return [ Text.create("Handlers for the `merge` operator "), Text.create("`" + (name + "` ")) ];
                },
                "Dependent handler function": function (name) {
                    return [ Text.create("Handlers for the `merge` operator "), Text.create("`" + (name + "` ")) ];
                },
                "Handler input type mismatch": function (name) {
                    return [ Text.create("Handlers for the `merge` operator "), Text.create("`" + (name + "` ")) ];
                },
                "Handler output type mismatch": function (v) {
                    var assumed = (function () {
                        if (v.value0 instanceof Data_Maybe.Nothing) {
                            return within(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three3.value);
                        };
                        if (v.value0 instanceof Data_Maybe.Just) {
                            return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))((function () {
                                if (v.value0.value0.fn) {
                                    return within(new Data_Symbol.IsSymbol(function () {
                                        return "Pi";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(true);
                                };
                                return Data_Monoid.mempty(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn));
                            })())(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.key))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)))));
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1817, column 19 - line 1822, column 76): " + [ v.value0.constructor.name ]);
                    })();
                    return [ Text.create("The handler for the `merge` operator "), Text.create("`" + (v.value1 + "` ")), compare(" was expected to have type ")(assumed)(" but instead had type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(true))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v.value1))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)))))) ];
                },
                "Handler type mismatch": function (v) {
                    var assumed = (function () {
                        if (v.value0 instanceof Data_Maybe.Nothing) {
                            return within(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three3.value);
                        };
                        if (v.value0 instanceof Data_Maybe.Just) {
                            return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))((function () {
                                if (v.value0.value0.fn) {
                                    return within(new Data_Symbol.IsSymbol(function () {
                                        return "Pi";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(true);
                                };
                                return Data_Monoid.mempty(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn));
                            })())(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v.value0.value0.key))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                                return "Merge";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)))));
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1835, column 19 - line 1840, column 76): " + [ v.value0.constructor.name ]);
                    })();
                    return [ Text.create("The handler for the `merge` operator case "), Text.create("`" + (v.value1 + "` ")), compare(" was expected to have type ")(assumed)(" but instead had type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v.value1))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Merge";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value))))) ];
                },
                "Cannot project": function (v) {
                    return [ Text.create("The projection operation can only be used on records, but the expression had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit)))) ];
                },
                "Cannot project by expression": function (v) {
                    return [ Text.create("The project-by-expression operation can only take a record type, but this was not a record type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(within(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(Data_Unit.unit)))) ];
                },
                "Projection type mismatch": function (key) {
                    return [ Text.create("The field "), Text.create("`" + (key + "`")), compare(" should match its type in the  ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(key))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(within(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(Data_Unit.unit)))))(" but instead had type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(key))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Project";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit)))))) ];
                },
                "Missing field": function (key) {
                    var focus = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Field";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
                    })(function (v) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Project";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit));
                    })(nodeType);
                    return [ Text.create("The field "), Text.create("`" + (key + "`")), Text.create(" was missing from "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(within(new Data_Symbol.IsSymbol(function () {
                        return "Record";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(key))(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(focus)))) ];
                },
                "Cannot access": function (v) {
                    return [ Text.create("The field accessor only works on records and union types, but this instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "Field";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)))) ];
                },
                "toMap takes a record": function (v) {
                    return [ Text.create("The `toMap` operation can only take a record, but this instead had type "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Left(Data_Unit.unit))))) ];
                },
                "Invalid toMap type annotation": function (v) {
                    return [ Text.create("The `toMap` operation should have a type annotation that looks like "), referenceExpr(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(Dhall_Core_AST_Constructors.mkRecord(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("mapKey", Dhall_Core_AST_Constructors.mkText), new Data_Tuple.Tuple("mapValue", Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("_", 0))) ])))), Text.create(" but instead it was "), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(normalized)(within(new Data_Symbol.IsSymbol(function () {
                        return "ToMap";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Either.Right(Data_Unit.unit)))) ];
                },
                "Invalid toMap type": function (mc) {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Text.create("The `toMap` operation should contain elements in the universe "), referenceExpr(Dhall_Core_AST_Constructors.mkType), Text.create(" but instead the inferred type ") ])((function () {
                        if (mc instanceof Data_Maybe.Nothing) {
                            return [ Text.create(" was not in a type universe") ];
                        };
                        if (mc instanceof Data_Maybe.Just) {
                            return [ new Compare(" which was in universe ", expr(Dhall_Core_AST_Constructors.mkConst(mc.value0)), " instead of ", expr(Dhall_Core_AST_Constructors.mkConst(Dhall_Core_AST_Types.Type.value))) ];
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1901, column 12 - line 1913, column 12): " + [ mc.constructor.name ]);
                    })());
                },
                "Missing toMap type": function (v) {
                    return [ Text.create("The `toMap` operation, when its record is empty, must be annotated with a result type that looks like "), referenceExpr(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(Dhall_Core_AST_Constructors.mkRecord(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("mapKey", Dhall_Core_AST_Constructors.mkText), new Data_Tuple.Tuple("mapValue", Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("_", 0))) ])))) ];
                },
                "Inconsistent toMap types": function (keys) {
                    return [ Text.create("The `toMap` operation must have fields all of one type "), List.create(Data_Functor.map(Data_Functor.functorArray)((function () {
                        var $1078 = Data_Show.show(Data_List_Types.showNonEmptyList(Data_Maybe.showMaybe(Data_Show.showString)));
                        return function ($1079) {
                            return Text.create($1078($1079));
                        };
                    })())(Data_Array.fromFoldable(foldableInconsistency)(keys))) ];
                },
                "Invalid input type": function (v) {
                    var ty = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(false);
                    })(function (v1) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Pi";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(false);
                    })(nodeType);
                    return notAType("input")(ty);
                },
                "Invalid output type": function (v) {
                    var ty_body = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v1) {
                        return Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                            return "Lam";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(true));
                    })(function (v1) {
                        return within(new Data_Symbol.IsSymbol(function () {
                            return "Pi";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(true);
                    })(nodeType);
                    return notAType("output")(ty_body);
                },
                "Unbound variable": function (v) {
                    var scope = (function () {
                        var $580 = Data_Foldable["null"](Dhall_Context.foldableContext)(ctx);
                        if ($580) {
                            return [ new Text("The context was empty.") ];
                        };
                        return [ Text.create("The variables in scope, from most local to most global, are: "), List.create(Data_FoldableWithIndex.foldMapWithIndex(Dhall_Context.foldableWithIndexContext)(Data_Monoid.monoidArray)(function (v$prime) {
                            return function (v1) {
                                return Control_Applicative.pure(Control_Applicative.applicativeArray)(referenceExpr(Dhall_Core_AST_Constructors.mkVar(v$prime)));
                            };
                        })(ctx)) ];
                    })();
                    return (function (v1) {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)(scope);
                    })((function () {
                        var $584 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_FoldableWithIndex.anyWithIndex(Dhall_Context.foldableWithIndexContext)(Data_HeytingAlgebra.heytingAlgebraBoolean))(function (v1) {
                            return function (v2) {
                                return v.value0 === v1.value0;
                            };
                        })(ctx);
                        if ($584) {
                            return [ Text.create("There were no variables with name "), Text.create(Data_Show.show(Data_Show.showString)(v.value0)), Text.create(" bound in scope. ") ];
                        };
                        return [ Text.create("The scope does not contain the variable "), Text.create(Data_Show.show(Data_Show.showString)(v.value0)), Text.create(" at index "), Text.create(Data_Show.show(Data_Show.showInt)(v.value1)), Text.create(". ") ];
                    })());
                },
                "Annotation mismatch": function (v) {
                    var v1 = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v2) {
                        return {
                            value: within(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three2.value),
                            ty: within(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Core_AST_Types_Basics.Three1.value)
                        };
                    })(function (v2) {
                        return {
                            value: within(new Data_Symbol.IsSymbol(function () {
                                return "Annot";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(false),
                            ty: within(new Data_Symbol.IsSymbol(function () {
                                return "Annot";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(true)
                        };
                    })(nodeType);
                    return [ Text.create("The value "), reference(v1.value), compare(" was annotated to have type ")(v1.ty)(" but instead had type ")(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(v1.value)) ];
                },
                "Unexpected type": function (v) {
                    return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(function (focus) {
                        return [ Text.create("The binary operator was expected to have operands of type "), referenceExpr(rehydrate(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(v.value1)), Text.create(" but instead its " + ((function () {
                            if (v.value0) {
                                return "right";
                            };
                            return "left";
                        })() + " operand had type ")), reference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within$prime(focus))) ];
                    })((function () {
                        if (v.value0) {
                            return Data_Lens_Fold.lastOf(Data_Lens_Indexed.asIndex(Data_Lens_Internal_Forget.profunctorForget)(Data_Lens_Indexed.itraversed(Dhall_Core_AST_Types.traversableWithIndexERVF(dictMapLike.TraversableWithIndex2()))(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast))))(nodeType);
                        };
                        return Data_Lens_Fold.firstOf(Data_Lens_Indexed.asIndex(Data_Lens_Internal_Forget.profunctorForget)(Data_Lens_Indexed.itraversed(Dhall_Core_AST_Types.traversableWithIndexERVF(dictMapLike.TraversableWithIndex2()))(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst))))(nodeType);
                    })());
                },
                "Wrong header type": function (v) {
                    return [ new Compare("Headers are expected to have type ", expr(Dhall_Core_Imports_Retrieve.headerType(dictMapLike)), " but this instead had type ", dereference(Data_Semigroup.append(Data_Monoid_Endo.semigroupEndo(Control_Semigroupoid.semigroupoidFn))(typechecked)(within(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    }))()(Dhall_Core_AST_Types_Basics["_S"])(true)))) ];
                }
            })(Data_Variant["default"](errorUnknownError));
        };
    };
};
var env = function (v) {
    return v.value0;
};
var topLoc = (function () {
    var $1080 = Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))));
    var $1081 = Data_Newtype.un(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
    var $1082 = Matryoshka_Class_Recursive.project(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1083) {
        return env($1080($1081($1082($1083))));
    };
})();
var ensureNodupes = function (dictApplicative) {
    return function (dictFoldableWithIndex) {
        return function (dictOrd) {
            return function (error) {
                var $1084 = Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(error);
                var $1085 = findDupes(dictOrd)(dictFoldableWithIndex);
                return function ($1086) {
                    return $1084($1085($1086));
                };
            };
        };
    };
};
var dubstep2D = function (dictBind) {
    return function (dictRecursive) {
        return function (dictCorecursive) {
            return Control_Bind.composeKleisliFlipped(dictBind)(step2D((dictBind.Apply0()).Functor0())(dictRecursive)(dictCorecursive))(step2D((dictBind.Apply0()).Functor0())(dictRecursive)(dictCorecursive));
        };
    };
};
var dropBiCtx = function (v) {
    return v.value1;
};
var denote = Matryoshka_Fold.transCata(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))(Dhall_Core_AST_Types.corecursiveExpr)(unEnvT);
var plain = function (dictComonad) {
    return function (dictRecursive) {
        var $1087 = head2D(dictComonad)(dictRecursive)(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF));
        return function ($1088) {
            return denote($1087($1088));
        };
    };
};
var contextOp = function (v) {
    return v.value0.value1.value0;
};
var contextStep = (function () {
    var $1089 = step2D(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1090) {
        return contextOp($1089($1090));
    };
})();
var consistency = function (v) {
    if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Inconsistency(new Data_NonEmpty.NonEmpty(v.value0, new Data_NonEmpty.NonEmpty(v.value1.value0, v.value1.value1))));
    };
    return Control_Plus.empty(Data_Maybe.plusMaybe);
};
var ensureConsistency = function (dictApplicative) {
    return function (dictMapLike) {
        return function (egal) {
            return function (error) {
                var $1091 = Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(error);
                var $1092 = tabulateGroupings(egal);
                var $1093 = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(function (v) {
                    return function (v1) {
                        return {
                            key: v,
                            value: v1
                        };
                    };
                }));
                var $1094 = Dhall_Map.toUnfoldable(dictMapLike)(Data_List_Types.unfoldableList);
                return function ($1095) {
                    return $1091(consistency($1092($1093($1094($1095)))));
                };
            };
        };
    };
};
var confirm = function (a) {
    var $1096 = Data_Newtype.wrap(Control_Monad_Writer_Trans.newtypeWriterT);
    var $1097 = Data_Newtype.unwrap(Control_Monad_Writer_Trans.newtypeWriterT);
    return function ($1098) {
        return $1096((function (v) {
            if (v instanceof Validation_These.Success) {
                return new Validation_These.Success(new Data_Tuple.Tuple(a, v.value0.value1));
            };
            if (v instanceof Validation_These["Error"]) {
                return Validation_These["Error"].create(v.value0)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Tuple.Tuple.create(a)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Control_Comonad.extract(Data_Tuple.comonadTuple))(v.value1))));
            };
            throw new Error("Failed pattern match at Dhall.TypeCheck (line 96, column 37 - line 100, column 58): " + [ v.constructor.name ]);
        })($1097($1098)));
    };
};
var mconfirm = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Control_Category.identity(Control_Category.categoryFn);
    };
    if (v instanceof Data_Maybe.Just) {
        return confirm(v.value0);
    };
    throw new Error("Failed pattern match at Dhall.TypeCheck (line 103, column 12 - line 105, column 22): " + [ v.constructor.name ]);
};
var bitransProduct = function (natF) {
    return function (natG) {
        return function (v) {
            return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(natF)(natG)(v);
        };
    };
};
var bicontextualizeWithin1 = function (shiftIn_node$prime) {
    return function (go) {
        return function (ctx) {
            return Dhall_Variables.trackIntro(function (v) {
                if (v instanceof Dhall_Variables.DoNothing) {
                    return go(ctx);
                };
                if (v instanceof Dhall_Variables.Clear) {
                    return go(Dhall_Context.empty);
                };
                if (v instanceof Dhall_Variables.Intro) {
                    return go(Dhall_Context.insert(v.value0.value0)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))((function () {
                        var $1099 = shiftIn_node$prime(v.value0.value0);
                        var $1100 = go(ctx);
                        return function ($1101) {
                            return $1099($1100($1101));
                        };
                    })())(v.value0.value1))(Data_Functor.map(Dhall_Context.functorContext)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))(shiftIn_node$prime(v.value0.value0)))(ctx)));
                };
                throw new Error("Failed pattern match at Dhall.TypeCheck (line 345, column 58 - line 353, column 46): " + [ v.constructor.name ]);
            });
        };
    };
};
var bicontextualizeWithin = function (dictFunctorWithIndex) {
    return Data_Function.flip(Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Data_Function.flip(function (ctx) {
        var $1102 = Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)((function () {
            var $1104 = Data_Functor.map(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.mapEnvT(Data_Lens_Iso_Newtype["_Newtype"](Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.newtypeERVF)(Data_Profunctor.profunctorFn)(bicontextualizeWithin1(shiftInOxpr0)(Data_Function.applyFlipped)(ctx))));
            var $1105 = Control_Comonad_Cofree.hoistCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Data_Functor.flap(Data_Functor.functorFn)(Control_Monad_Reader_Trans.runReaderT)(ctx));
            return function ($1106) {
                return $1104($1105($1106));
            };
        })());
        return function ($1103) {
            return Data_Functor_Mu.In($1102($1103));
        };
    })));
};
var typecheckStepCtx = function (dictFunctorWithIndex) {
    return function (ctx) {
        var $1107 = step2D(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
        var $1108 = bicontextualizeWithin(dictFunctorWithIndex)(ctx);
        return function ($1109) {
            return typecheckOp($1107($1108($1109)));
        };
    };
};
var axiom = function (dictAlternative) {
    return function (v) {
        if (v instanceof Dhall_Core_AST_Types.Type) {
            return Control_Applicative.pure(dictAlternative.Applicative0())(Dhall_Core_AST_Types.Kind.value);
        };
        if (v instanceof Dhall_Core_AST_Types.Kind) {
            return Control_Applicative.pure(dictAlternative.Applicative0())(Dhall_Core_AST_Types.Sort.value);
        };
        if (v instanceof Dhall_Core_AST_Types.Sort) {
            return Control_Plus.empty(dictAlternative.Plus1());
        };
        throw new Error("Failed pattern match at Dhall.TypeCheck (line 81, column 1 - line 81, column 53): " + [ v.constructor.name ]);
    };
};
var areEq = function (dictEq) {
    return function (dictMapLike) {
        return function (ty0) {
            return function (ty1) {
                var v = Data_Functor.mapFlipped(Dhall_Core_AST_Types_Basics.functorPair)(new Dhall_Core_AST_Types_Basics.Pair(ty0, ty1))((function () {
                    var $1110 = Dhall_Core_AST_Operations.unordered(dictMapLike);
                    var $1111 = plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
                    return function ($1112) {
                        return Dhall_Variables.alphaNormalize($1110($1111(normalizeStep($1112))));
                    };
                })());
                return Data_Eq.eq(Dhall_Core_AST_Types.eqExpr(Data_Map_Internal.eq1Map(Data_Eq.eqString))(dictEq))(v.value0)(v.value1);
            };
        };
    };
};
var alsoOriginateFromO = function (dictFunctorWithIndex) {
    var go = function (loc) {
        return function (e) {
            return Control_Comonad_Cofree.deferCofree(function (v) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)((function () {
                    var $1113 = Control_Comonad_Env_Trans.mapEnvT(Data_FunctorWithIndex.mapWithIndex(Dhall_Core_AST_Types.functorWithIndexERVF(dictFunctorWithIndex))(function (i$prime) {
                        return Matryoshka_Util.mapR(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)(go(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                            return "within";
                        }))()(Dhall_Core_AST_Types_Basics["_S"])(i$prime))(loc))));
                    }));
                    var $1114 = mapEnv(function (v1) {
                        return Data_Semigroup.append(Data_List_Types.semigroupNonEmptyList)(loc)(v1);
                    });
                    return function ($1115) {
                        return $1113($1114($1115));
                    };
                })())(bitransProduct(Data_Functor.map(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(go(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                    return "normalize";
                }))()(Dhall_Core_AST_Types_Basics["_S"]))(loc))))(Data_Functor.map(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))(go(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                    return "typecheck";
                }))()(Dhall_Core_AST_Types_Basics["_S"]))(loc)))))(new Data_Tuple.Tuple(Control_Comonad_Cofree.head(e), Control_Comonad_Cofree.tail(e)));
            });
        };
    };
    var $1116 = Matryoshka_Util.mapR(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    var $1117 = Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
    return function ($1118) {
        return $1116($1117(go($1118)));
    };
};
var ensureConsistentOxpr = function (dictApplicative) {
    return function (dictMapLike) {
        return function (dictFunctorWithIndex) {
            return function (dictFoldable) {
                return function (dictEq) {
                    return function (missing) {
                        return function (error) {
                            var finalize = function (v) {
                                if (v instanceof Data_List_Types.Nil) {
                                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Void.absurd)(missing(Data_Unit.unit));
                                };
                                if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil)) {
                                    return Control_Applicative.pure(dictApplicative)(v.value0.value0.value);
                                };
                                if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil)) {
                                    var ixs = Data_Semigroup_Foldable.foldMap1(Data_List_Types.foldable1NonEmptyList)(Data_List_Types.semigroupNonEmptyList)(function ($1119) {
                                        return topLoc((function (v1) {
                                            return v1.value;
                                        })($1119));
                                    })(new Data_NonEmpty.NonEmpty(v.value0.value1.value0, v.value0.value1.value1));
                                    return Control_Applicative.pure(dictApplicative)(alsoOriginateFromO((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(ixs)(v.value0.value0.value));
                                };
                                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Void.absurd)(error(Data_Functor.map(functorInconsistency)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
                                        return "value";
                                    }))()()(Dhall_Core_AST_Types_Basics["_S"])(Data_Profunctor_Strong.strongFn)(topLoc)))(Inconsistency(new Data_NonEmpty.NonEmpty(v.value0, new Data_NonEmpty.NonEmpty(v.value1.value0, v.value1.value1))))));
                                };
                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 750, column 5 - line 750, column 92): " + [ v.constructor.name ]);
                            };
                            var $1120 = tabulateGroupings(areEq(dictEq)(dictMapLike));
                            var $1121 = Data_List.fromFoldable(dictFoldable);
                            var $1122 = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function (v) {
                                return function (v1) {
                                    return {
                                        key: v,
                                        value: v1
                                    };
                                };
                            });
                            return function ($1123) {
                                return finalize($1120($1121($1122($1123))));
                            };
                        };
                    };
                };
            };
        };
    };
};
var substContextOxpr = function (dictFunctorWithIndex) {
    return function (ctx) {
        return function (e) {
            var go1 = function (ctx$prime) {
                return function (v) {
                    var v1 = substContext1(shiftInOxpr0)((function () {
                        var $1124 = Matryoshka_Util.mapR(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
                        var $1125 = Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose);
                        return function ($1126) {
                            return $1124($1125(go($1126)));
                        };
                    })())(ctx$prime)(v.value1);
                    if (v1 instanceof Data_Either.Left) {
                        return Data_Either.Left.create(v1.value0);
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return Data_Either.Right.create(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(v.value0)(v1.value0)));
                    };
                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 442, column 7 - line 444, column 63): " + [ v1.constructor.name ]);
                };
            };
            var go = function (ctx$prime) {
                return function (e$prime) {
                    return Control_Comonad_Cofree.deferCofree(function (v) {
                        var v1 = go1(ctx$prime)(Control_Comonad_Cofree.head(e$prime));
                        if (v1 instanceof Data_Either.Left) {
                            return Control_Apply.apply(Control_Apply.applyFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Tuple.Tuple.create)(Control_Comonad_Cofree.head))(Control_Comonad_Cofree.tail)(v1.value0);
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return Data_Tuple.Tuple.create(v1.value0)(bitransProduct(Data_Functor.map(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(go(ctx)))(Data_Functor.map(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))(go(ctx)))(Control_Comonad_Cofree.tail(e$prime)));
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 437, column 7 - line 440, column 72): " + [ v1.constructor.name ]);
                    });
                };
            };
            return alsoOriginateFromO(dictFunctorWithIndex)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                return "substitute";
            }))()(Dhall_Core_AST_Types_Basics["_S"]))(topLoc(e)))(Matryoshka_Util.mapR(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Data_Newtype.over(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.newtypeCompose)(Data_Functor_Compose.Compose)(go(ctx)))(e));
        };
    };
};
var alsoOriginateFrom = function (dictFunctorWithIndex) {
    var go = function (loc) {
        return function (v) {
            return Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(Data_Semigroup.append(Data_List_Types.semigroupNonEmptyList)(loc)(v.value0))(Data_FunctorWithIndex.mapWithIndex(Dhall_Core_AST_Types.functorWithIndexERVF(dictFunctorWithIndex))(function (i$prime) {
                return Data_Function.applyFlipped(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                    return "within";
                }))()(Dhall_Core_AST_Types_Basics["_S"])(i$prime))(loc));
            })(v.value1))));
        };
    };
    return Data_Function.flip(Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))(Data_Function.flip(go)));
};
var newmother = function (dictFunctorWithIndex) {
    return function (e0) {
        var e_ = Dhall_Core_AST_Types.embedW(Data_Functor.mapFlipped(Data_Functor_Variant.functorVariantF)(e0)(denote));
        return Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), new Data_Maybe.Just(e_))))(Data_FunctorWithIndex.mapWithIndex(Dhall_Core_AST_Types.functorWithIndexERVF(dictFunctorWithIndex))(function (i) {
            return alsoOriginateFrom(dictFunctorWithIndex)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                return "within";
            }))()(Dhall_Core_AST_Types_Basics["_S"])(i)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), new Data_Maybe.Just(e_)))));
        })(Data_Newtype.wrap(Dhall_Core_AST_Types.newtypeERVF)(e0)))));
    };
};
var runLxprAlgM = function (dictFunctorWithIndex) {
    return function (dictFunctor) {
        return function (alg) {
            var travEnvT = function (f) {
                return function (v) {
                    return Data_Functor.map(dictFunctor)((function () {
                        var $1127 = Data_Tuple.Tuple.create(v.value0);
                        return function ($1128) {
                            return Control_Comonad_Env_Trans.EnvT($1127($1128));
                        };
                    })())(f(v.value1));
                };
            };
            var go = function (i) {
                return function (e) {
                    return alg(i)({
                        unlayer: (function () {
                            var $1129 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
                            var $1130 = Matryoshka_Class_Recursive.project(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF));
                            return function ($1131) {
                                return $1129(unEnvT($1130($1131)));
                            };
                        })(),
                        overlayer: Dhall_Core_AST_Operations_Transformations.OverCasesM((function () {
                            var $1132 = Matryoshka_Util.traverseR(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(dictFunctor);
                            var $1133 = Data_Newtype.traverse(dictFunctor)(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.ERVF);
                            return function ($1134) {
                                return $1132(travEnvT($1133($1134)));
                            };
                        })()),
                        recurse: go,
                        layer: newmother(dictFunctorWithIndex)
                    })(e);
                };
            };
            return go;
        };
    };
};
var runLxprAlg = function (dictFunctorWithIndex) {
    return function (alg) {
        return function (i) {
            return function (e) {
                return Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(runLxprAlgM(dictFunctorWithIndex)(Data_Identity.functorIdentity)(alg)(i)(e));
            };
        };
    };
};
var normalizeLxpr = function (dictMapLike) {
    return function (dictEq) {
        return function (e) {
            return alsoOriginateFrom((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                return "normalize";
            }))()(Dhall_Core_AST_Types_Basics["_S"]))(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF))(e)))(Control_Comonad.extract(Data_Lazy.comonadLazy)(Control_Comonad.extract(Data_Tuple.comonadTuple)(Data_Newtype.unwrap(Dhall_Normalize.newtypeW)(runLxprAlgM((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Normalize.functorW)(Dhall_Normalize.normalizeWithAlgGW(dictMapLike)(dictEq)(Data_Monoid.mempty(Dhall_Normalize.monoidNormalizer))(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "normalize";
            }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordNil))))(e)))));
        };
    };
};
var shiftLxpr = function (dictFunctorWithIndex) {
    return function (delta) {
        return function (variable) {
            return function (e) {
                return alsoOriginateFrom(dictFunctorWithIndex)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
                    return "shift";
                }))()(Dhall_Core_AST_Types_Basics["_S"])({
                    delta: delta,
                    variable: variable
                }))(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF))(e)))(runLxprAlg(dictFunctorWithIndex)(Dhall_Variables.shiftAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                    return "shift";
                }))(Dhall_Core_AST_Types_Basics["_S"])({
                    delta: delta,
                    variable: variable
                }))(e));
            };
        };
    };
};
var shiftInLxpr = function (dictFunctorWithIndex) {
    return shiftLxpr(dictFunctorWithIndex)(1);
};
var shiftInLxpr0 = function (dictFunctorWithIndex) {
    return function (v) {
        return shiftInLxpr(dictFunctorWithIndex)(new Dhall_Core_AST_Types.V(v, 0));
    };
};
var shiftOutLxpr = function (dictFunctorWithIndex) {
    return shiftLxpr(dictFunctorWithIndex)(-1 | 0);
};
var tryShiftOutLxpr = function (dictTraversableWithIndex) {
    return function (v) {
        return function (e) {
            if (Data_Newtype.un(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(freeInLxpr((dictTraversableWithIndex.Traversable2()).Foldable1())(v)(e))) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just(shiftOutLxpr(dictTraversableWithIndex.FunctorWithIndex0())(v)(e));
        };
    };
};
var tryShiftOut0Lxpr = function (dictTraversableWithIndex) {
    return function (v) {
        return tryShiftOutLxpr(dictTraversableWithIndex)(new Dhall_Core_AST_Types.V(v, 0));
    };
};
var typecheckAlgebra = function (dictEq) {
    return function (dictMapLike) {
        return function (tpa) {
            return function (v) {
                return Data_Functor_Variant.match()(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()((function () {
                    var optionalEnc = function (a) {
                        return Dhall_Core_AST_Constructors.mkForall("optional")((function () {
                            var optional = Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("optional", 0));
                            return Dhall_Core_AST_Constructors.mkPi("some")(Dhall_Core_AST_Constructors.mkArrow(a)(optional))(Dhall_Core_AST_Constructors.mkPi("none")(optional)(optional));
                        })());
                    };
                    var onConst = function (f) {
                        return function (v1) {
                            return Data_Functor.mapFlipped(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(f(v1))(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0()));
                        };
                    };
                    var noteHere = function (dictIsSymbol) {
                        return function (dictCons) {
                            return function (sym) {
                                return function (v1) {
                                    var $1135 = Validation_These.liftW(Validation_These.functorErroring)(Data_Monoid.monoidArray);
                                    var $1136 = Validation_These.note({
                                        location: v.value1.value0,
                                        tag: Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(v1)
                                    });
                                    return function ($1137) {
                                        return $1135($1136($1137));
                                    };
                                };
                            };
                        };
                    };
                    var naturalEnc = Dhall_Core_AST_Constructors.mkForall("natural")((function () {
                        var natural = Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("natural", 0));
                        return Dhall_Core_AST_Constructors.mkPi("succ")(Dhall_Core_AST_Constructors.mkArrow(natural)(natural))(Dhall_Core_AST_Constructors.mkPi("zero")(natural)(natural));
                    })());
                    var mk = function (dictFunctor) {
                        return function (dictIsSymbol) {
                            return function (dictCons) {
                                return function (sym) {
                                    var $1138 = newmother((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0());
                                    var $1139 = Data_Functor_Variant.inj(dictCons)(dictIsSymbol)(dictFunctor)(sym);
                                    return function ($1140) {
                                        return $1138($1139($1140));
                                    };
                                };
                            };
                        };
                    };
                    var mkFunctor = function (f) {
                        return function (a) {
                            return mk(Dhall_Core_AST_Types_Basics.functorPair)(new Data_Symbol.IsSymbol(function () {
                                return "App";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(f), a));
                        };
                    };
                    var listEnc = function (a) {
                        return Dhall_Core_AST_Constructors.mkForall("list")((function () {
                            var list = Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("list", 0));
                            return Dhall_Core_AST_Constructors.mkPi("cons")(Dhall_Core_AST_Constructors.mkArrow(a)(Dhall_Core_AST_Constructors.mkArrow(list)(list)))(Dhall_Core_AST_Constructors.mkPi("nil")(list)(list));
                        })());
                    };
                    var errorHere = function (dictIsSymbol) {
                        return function (dictCons) {
                            return function (sym) {
                                return function (v1) {
                                    return Validation_These.liftW(Validation_These.functorErroring)(Data_Monoid.monoidArray)(Validation_These.erroring({
                                        location: v.value1.value0,
                                        tag: Data_Variant.inj(dictCons)(dictIsSymbol)(sym)(v1)
                                    }));
                                };
                            };
                        };
                    };
                    var ensure$prime = function (dictIsSymbol) {
                        return function (dictCons) {
                            return function (s) {
                                return function (ty) {
                                    return function (error) {
                                        var nf_ty = normalizeStep(ty);
                                        return Data_Functor_Variant.on(dictCons)(dictIsSymbol)(s)(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring)))(function (v1) {
                                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(Data_Unit.unit));
                                        })(unlayerO(nf_ty));
                                    };
                                };
                            };
                        };
                    };
                    var ensureConst = function (expr) {
                        return function (error) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(expr))(function (v1) {
                                return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Newtype.unwrap(Data_Const.newtypeConst))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                    return "Const";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)(error));
                            });
                        };
                    };
                    var ensureType = function (ty) {
                        return function (error) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(ty))(function (v1) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                    return "Const";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)(function (v2) {
                                    return error(Data_Maybe.Nothing.value);
                                }))(function (v2) {
                                    if (v2 instanceof Dhall_Core_AST_Types.Type) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit);
                                    };
                                    return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(new Data_Maybe.Just(v2)));
                                });
                            });
                        };
                    };
                    var ensureTerm = function (expr) {
                        return function (error) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(expr))(function (v1) {
                                return Data_Functor.voidRight(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(v1)(ensureType(v1)(error));
                            });
                        };
                    };
                    var ensure = function (dictIsSymbol) {
                        return function (dictCons) {
                            return function (s) {
                                return function (expr) {
                                    return function (error) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(expr))(function (v1) {
                                            return ensure$prime(dictIsSymbol)(dictCons)(s)(v1)(error);
                                        });
                                    };
                                };
                            };
                        };
                    };
                    var checkEq = function (ty0) {
                        return function (ty1) {
                            return function (error) {
                                return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(areEq(dictEq)(dictMapLike))(ty0)(ty1))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(Data_Unit.unit)));
                            };
                        };
                    };
                    var checkEqL = function (ty0) {
                        return function (ty1) {
                            return function (error) {
                                return confirm(ty0)(checkEq(ty0)(ty1)(error));
                            };
                        };
                    };
                    var checkEqR = function (ty0) {
                        return function (ty1) {
                            return function (error) {
                                return confirm(ty1)(checkEq(ty0)(ty1)(error));
                            };
                        };
                    };
                    var checkBinOp = function (t) {
                        return function (p) {
                            return confirm(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(rehydrate(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(t)))(Data_FoldableWithIndex.forWithIndex_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.foldableWithIndexPair)(p)(function (side) {
                                return function (operand) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(operand))(function ($1141) {
                                        return (function (v1) {
                                            if (Data_Eq.eq(Dhall_Core_AST_Types.eqExpr((dictMapLike.Ord11()).Eq10())(dictEq))(rehydrate(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(t))(plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(v1))) {
                                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit);
                                            };
                                            if (Data_Boolean.otherwise) {
                                                return errorHere(new Data_Symbol.IsSymbol(function () {
                                                    return "Unexpected type";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(new Data_Tuple.Tuple(side, t));
                                            };
                                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1003, column 68 - line 1006, column 54): " + [ v1.constructor.name ]);
                                        })(normalizeStep($1141));
                                    });
                                };
                            }));
                        };
                    };
                    var always = function (b) {
                        return function (v1) {
                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(b));
                        };
                    };
                    var aType = always(Dhall_Core_AST_Constructors.mkType);
                    var aFunctor = always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkType)(Dhall_Core_AST_Constructors.mkType));
                    var a0 = Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("a", 0));
                    return {
                        Const: (function () {
                            var $1142 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                            return function ($1143) {
                                return (function (c) {
                                    return noteHere(new Data_Symbol.IsSymbol(function () {
                                        return "`Sort` has no type";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(axiom(Data_Maybe.alternativeMaybe)(c))((function () {
                                        var $1144 = newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0());
                                        return function ($1145) {
                                            return $1144(Dhall_Core_AST_Constructors.mkConst($1145));
                                        };
                                    })()));
                                })($1142($1143));
                            };
                        })(),
                        Var: (function () {
                            var $1146 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                            return function ($1147) {
                                return (function (v1) {
                                    var v3 = Dhall_Context.lookup(v1.value0)(v1.value1)(v.value0);
                                    if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_These.This) {
                                        return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(typecheckStep(v3.value0.value0));
                                    };
                                    if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_These.That) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0.value0));
                                    };
                                    if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_These.Both) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0.value1));
                                    };
                                    if (v3 instanceof Data_Maybe.Nothing) {
                                        return errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Unbound variable";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v1);
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1065, column 7 - line 1072, column 50): " + [ v3.constructor.name ]);
                                })($1146($1147));
                            };
                        })(),
                        Lam: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v1.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Invalid input type";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value2))(function (v3) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v3)(errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Invalid output type";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v4) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)(new Data_Symbol.IsSymbol(function () {
                                            return "Pi";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.BindingBody(v1.value0, head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v1.value1), head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3))));
                                    });
                                });
                            });
                        },
                        Pi: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v1.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Invalid input type";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v1.value2)(errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Invalid output type";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v3) {
                                    return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))((function () {
                                        var $1148 = newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0());
                                        return function ($1149) {
                                            return $1148(Dhall_Core_AST_Constructors.mkConst($1149));
                                        };
                                    })())(rule(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v2)(v3));
                                });
                            });
                        },
                        Let: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value2))(function (v2) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Maybe.fromMaybe(v2))(Data_Traversable["for"](Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Traversable.traversableMaybe)(v1.value1)(function (ty$prime) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(ty$prime))(function (v3) {
                                        return checkEqR(v2)(ty$prime)(errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Annotation mismatch";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]));
                                    });
                                })))(function (v3) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value3))(function (v4) {
                                        var shifted = tryShiftOut0Lxpr(dictMapLike.TraversableWithIndex2())(v1.value0)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v4));
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))((function () {
                                            if (shifted instanceof Data_Maybe.Nothing) {
                                                return mk(Dhall_Core_AST_Types_Basics.functorLetF)(new Data_Symbol.IsSymbol(function () {
                                                    return "Let";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor.map(Dhall_Core_AST_Types_Basics.functorLetF)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(new Dhall_Core_AST_Types_Basics.LetF(v1.value0, v1.value1, v1.value2, v4)));
                                            };
                                            if (shifted instanceof Data_Maybe.Just) {
                                                return shifted.value0;
                                            };
                                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1094, column 12 - line 1096, column 34): " + [ shifted.constructor.name ]);
                                        })());
                                    });
                                });
                            });
                        },
                        App: function (v1) {
                            var checkFn = ensure(new Data_Symbol.IsSymbol(function () {
                                return "Pi";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Not a function";
                            }))()(Dhall_Core_AST_Types_Basics["_S"]));
                            var checkArg = function (v2) {
                                return function (aty1) {
                                    var shifted = tryShiftOut0Lxpr(dictMapLike.TraversableWithIndex2())(v2.value0)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v2.value2));
                                    var $714 = areEq(dictEq)(dictMapLike)(v2.value1)(aty1);
                                    if ($714) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))((function () {
                                            if (shifted instanceof Data_Maybe.Nothing) {
                                                return mk(Dhall_Core_AST_Types_Basics.functorPair)(new Data_Symbol.IsSymbol(function () {
                                                    return "App";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(new Dhall_Core_AST_Types_Basics.Pair(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)(new Data_Symbol.IsSymbol(function () {
                                                    return "Lam";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor.map(Dhall_Core_AST_Types_Basics.functorBindingBody)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(new Dhall_Core_AST_Types_Basics.BindingBody(v2.value0, v2.value1, v2.value2))), head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v1.value1)));
                                            };
                                            if (shifted instanceof Data_Maybe.Just) {
                                                return shifted.value0;
                                            };
                                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1104, column 23 - line 1108, column 32): " + [ shifted.constructor.name ]);
                                        })());
                                    };
                                    return (function () {
                                        if (shifted instanceof Data_Maybe.Nothing) {
                                            return Control_Category.identity(Control_Category.categoryFn);
                                        };
                                        if (shifted instanceof Data_Maybe.Just) {
                                            return confirm(shifted.value0);
                                        };
                                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1115, column 57 - line 1117, column 42): " + [ shifted.constructor.name ]);
                                    })()(errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Type mismatch";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit));
                                };
                            };
                            return Control_Bind.join(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(checkArg)(checkFn))(typecheckStep(v1.value1)));
                        },
                        Annot: function (v1) {
                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(Control_Bind.join(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Apply.applyFirst(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.flap(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Functor.flap(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(checkEqR)(typecheckStep(v1.value0)))(v1.value1))(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Annotation mismatch";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(typecheckStep(v1.value1))));
                        },
                        Equivalent: function (p) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.traverseWithIndex(Dhall_Core_AST_Types_Basics.traversableWithIndexPair)(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(function (i) {
                                return function (t) {
                                    return ensureTerm(t)((function () {
                                        var $1150 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Incomparable expression";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1151 = Data_Function["const"](i);
                                        return function ($1152) {
                                            return $1150($1151($1152));
                                        };
                                    })());
                                };
                            })(p))(function (v1) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(checkEqR(v1.value0)(v1.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Equivalent type mismatch";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Core_AST_Constructors.mkType));
                                });
                            });
                        },
                        Assert: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                return "Equivalent";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Not an equivalence";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(checkEqR(v2.value0)(v2.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Assertion failed";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v3) {
                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v1));
                                });
                            });
                        },
                        Bool: Control_Category.identity(Control_Category.categoryFn)(aType),
                        BoolLit: always(Dhall_Core_AST_Constructors.mkBool),
                        BoolAnd: checkBinOp(Dhall_Core_AST_Constructors.mkBool),
                        BoolOr: checkBinOp(Dhall_Core_AST_Constructors.mkBool),
                        BoolEQ: checkBinOp(Dhall_Core_AST_Constructors.mkBool),
                        BoolNE: checkBinOp(Dhall_Core_AST_Constructors.mkBool),
                        BoolIf: function (v1) {
                            return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(ensure(new Data_Symbol.IsSymbol(function () {
                                return "Bool";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Invalid predicate";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(Control_Bind.join(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor.flap(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(checkEqL)(ensureTerm(v1.value1)((function () {
                                var $1153 = errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "If branch must be term";
                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                var $1154 = Data_Tuple.Tuple.create(false);
                                return function ($1155) {
                                    return $1153($1154($1155));
                                };
                            })())))(ensureTerm(v1.value2)((function () {
                                var $1156 = errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "If branch must be term";
                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                var $1157 = Data_Tuple.Tuple.create(true);
                                return function ($1158) {
                                    return $1156($1157($1158));
                                };
                            })())))(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "If branch mismatch";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))));
                        },
                        Natural: Control_Category.identity(Control_Category.categoryFn)(aType),
                        NaturalLit: always(Dhall_Core_AST_Constructors.mkNatural),
                        NaturalFold: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(naturalEnc)),
                        NaturalBuild: always(Dhall_Core_AST_Constructors.mkArrow(naturalEnc)(Dhall_Core_AST_Constructors.mkNatural)),
                        NaturalIsZero: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkBool)),
                        NaturalEven: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkBool)),
                        NaturalOdd: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkBool)),
                        NaturalToInteger: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkInteger)),
                        NaturalShow: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkText)),
                        NaturalSubtract: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkNatural)(Dhall_Core_AST_Constructors.mkNatural))),
                        NaturalPlus: checkBinOp(Dhall_Core_AST_Constructors.mkNatural),
                        NaturalTimes: checkBinOp(Dhall_Core_AST_Constructors.mkNatural),
                        Integer: Control_Category.identity(Control_Category.categoryFn)(aType),
                        IntegerLit: always(Dhall_Core_AST_Constructors.mkInteger),
                        IntegerShow: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkInteger)(Dhall_Core_AST_Constructors.mkText)),
                        IntegerToDouble: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkInteger)(Dhall_Core_AST_Constructors.mkDouble)),
                        Double: Control_Category.identity(Control_Category.categoryFn)(aType),
                        DoubleLit: always(Dhall_Core_AST_Constructors.mkDouble),
                        DoubleShow: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkDouble)(Dhall_Core_AST_Constructors.mkText)),
                        Text: Control_Category.identity(Control_Category.categoryFn)(aType),
                        TextLit: function (things) {
                            return confirm(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Core_AST_Constructors.mkText))(Data_FoldableWithIndex.forWithIndex_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.foldableWithIndexTextLitF)(things)(function (i) {
                                return function (expr) {
                                    return ensure(new Data_Symbol.IsSymbol(function () {
                                        return "Text";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(expr)((function () {
                                        var $1159 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Cannot interpolate";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1160 = Data_Function["const"](i);
                                        return function ($1161) {
                                            return $1159($1160($1161));
                                        };
                                    })());
                                };
                            }));
                        },
                        TextAppend: checkBinOp(Dhall_Core_AST_Constructors.mkText),
                        TextShow: always(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkText)(Dhall_Core_AST_Constructors.mkText)),
                        List: Control_Category.identity(Control_Category.categoryFn)(aFunctor),
                        ListLit: function (v1) {
                            return mconfirm(Data_Functor.map(Data_Maybe.functorMaybe)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(v1.value0))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                                if (v1.value0 instanceof Data_Maybe.Just) {
                                    var error = errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "List annotation must be list type";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0.value0)(error))(function (v2) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                            return "List";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"](Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit)))(function (v3) {
                                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(Data_Unit.unit));
                                        })(unlayerO(normalizeStep(v2.value0))))(function () {
                                            return confirm(v2.value1)(ensureType(v2.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                                return "Invalid list type";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])));
                                        });
                                    });
                                };
                                if (v1.value0 instanceof Data_Maybe.Nothing) {
                                    var v2 = Data_Array.head(v1.value1);
                                    if (v2 instanceof Data_Maybe.Nothing) {
                                        return errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Missing list type";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
                                    };
                                    if (v2 instanceof Data_Maybe.Just) {
                                        return ensureTerm(v2.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Invalid list type";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]));
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1192, column 20 - line 1196, column 55): " + [ v2.constructor.name ]);
                                };
                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1181, column 32 - line 1196, column 55): " + [ v1.value0.constructor.name ]);
                            })())(function (v2) {
                                return confirm(mkFunctor(Dhall_Core_AST_Constructors.mkList)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v2)))(Data_FoldableWithIndex.forWithIndex_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_FoldableWithIndex.foldableWithIndexArray)(v1.value1)(function (i) {
                                    return function (item) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(item))(function (v3) {
                                            return checkEq(v2)(v3)(function (v4) {
                                                if (v1.value0 instanceof Data_Maybe.Nothing) {
                                                    return errorHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Invalid list element";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(i);
                                                };
                                                if (v1.value0 instanceof Data_Maybe.Just) {
                                                    return errorHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Mismatched list elements";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(i);
                                                };
                                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1200, column 11 - line 1204, column 64): " + [ v1.value0.constructor.name ]);
                                            });
                                        });
                                    };
                                }));
                            }));
                        },
                        ListAppend: function (p) {
                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))((function () {
                                var $1162 = mkFunctor(Dhall_Core_AST_Constructors.mkList);
                                var $1163 = head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF));
                                return function ($1164) {
                                    return $1162($1163($1164));
                                };
                            })())(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.traversableWithIndexPair)(p)(function (side) {
                                return function (expr) {
                                    var error = (function () {
                                        var $1165 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Cannot append non-list";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1166 = Data_Function["const"](side);
                                        return function ($1167) {
                                            return $1165($1166($1167));
                                        };
                                    })();
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(expr))(function (v1) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                            return "App";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)(error))(function (v2) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                                return "List";
                                            }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"](Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit)))(function (v3) {
                                                return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(Data_Unit.unit));
                                            })(unlayerO(normalizeStep(v2.value0))))(function () {
                                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v2.value1);
                                            });
                                        });
                                    });
                                };
                            }))(function (v1) {
                                return checkEqL(v1.value0)(v1.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "List append mismatch";
                                }))()(Dhall_Core_AST_Types_Basics["_S"]));
                            }));
                        },
                        ListBuild: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(listEnc(a0))(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0)))),
                        ListFold: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0))(listEnc(a0)))),
                        ListLength: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0))(Dhall_Core_AST_Constructors.mkNatural))),
                        ListHead: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0))(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkOptional)(a0)))),
                        ListLast: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0))(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkOptional)(a0)))),
                        ListIndexed: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0))(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(Dhall_Core_AST_Constructors.mkRecord(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("index", Dhall_Core_AST_Constructors.mkNatural), new Data_Tuple.Tuple("value", a0) ])))))),
                        ListReverse: always(Dhall_Core_AST_Constructors.mkForall("a")(Control_Bind.join(Control_Bind.bindFn)(Dhall_Core_AST_Constructors.mkArrow)(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkList)(a0)))),
                        Optional: Control_Category.identity(Control_Category.categoryFn)(aFunctor),
                        None: always(Dhall_Core_AST_Constructors.mkPi("A")(Dhall_Core_AST_Constructors.mkType)(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkOptional)(Dhall_Core_AST_Constructors.mkVar(new Dhall_Core_AST_Types.V("A", 0))))),
                        Some: (function () {
                            var $1168 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
                            return function ($1169) {
                                return (function (a) {
                                    return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))((function () {
                                        var $1170 = mkFunctor(Dhall_Core_AST_Constructors.mkOptional);
                                        var $1171 = head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF));
                                        return function ($1172) {
                                            return $1170($1171($1172));
                                        };
                                    })())(ensureTerm(a)(errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Invalid `Some`";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])));
                                })($1168($1169));
                            };
                        })(),
                        OptionalFold: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkOptional)(a0))(optionalEnc(a0)))),
                        OptionalBuild: always(Dhall_Core_AST_Constructors.mkForall("a")(Dhall_Core_AST_Constructors.mkArrow(optionalEnc(a0))(Dhall_Core_AST_Constructors.mkApp(Dhall_Core_AST_Constructors.mkOptional)(a0)))),
                        Record: function (kts) {
                            return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(ensureNodupes(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(Data_Ord.ordString)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Duplicate record fields";
                            }))()(Dhall_Core_AST_Types_Basics["_S"]))(kts))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike.TraversableWithIndex2())(kts)(function (field) {
                                return function (ty) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Newtype.unwrap(Data_Const.newtypeConst))(ensure(new Data_Symbol.IsSymbol(function () {
                                        return "Const";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(ty)((function () {
                                        var $1173 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Invalid field type";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1174 = Data_Function["const"](field);
                                        return function ($1175) {
                                            return $1173($1174($1175));
                                        };
                                    })())))(function (v1) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                                            if (v1 instanceof Dhall_Core_AST_Types.Kind) {
                                                var error = function (v2) {
                                                    return errorHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Invalid field type";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(field);
                                                };
                                                return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                                    return "Const";
                                                }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                                    var $1176 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                                                    return function ($1177) {
                                                        return (function (c$prime) {
                                                            return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Eq.notEq(Dhall_Core_AST_Types.eqConst)(v1)(Dhall_Core_AST_Types.Type.value))(error(Data_Unit.unit));
                                                        })($1176($1177));
                                                    };
                                                })())(function (v2) {
                                                    return error(Data_Unit.unit);
                                                })(unlayerO(ty));
                                            };
                                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit);
                                        })())(function () {
                                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))({
                                                kind: v1
                                            });
                                        });
                                    });
                                };
                            }))(function (v1) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConsistency(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike)(Data_Function.on(Data_Eq.eq(Dhall_Core_AST_Types.eqConst))(function (v2) {
                                    return v2.kind;
                                }))((function () {
                                    var $1178 = errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Inconsistent field types";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                    var $1179 = Data_Functor.map(functorInconsistency)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(function (v2) {
                                        return v2.key;
                                    }));
                                    return function ($1180) {
                                        return $1178($1179($1180));
                                    };
                                })())(v1))(function () {
                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Core_AST_Constructors.mkConst(Data_Maybe.maybe(Dhall_Core_AST_Types.Type.value)(function (v2) {
                                        return v2.kind;
                                    })(Data_Newtype.un(Data_Maybe_First.newtypeFirst)(Data_Maybe_First.First)(Data_Foldable.foldMap(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())(Data_Maybe_First.monoidFirst)(Control_Applicative.pure(Data_Maybe_First.applicativeFirst))(v1))))));
                                });
                            }));
                        },
                        RecordLit: function (kvs) {
                            return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(ensureNodupes(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(Data_Ord.ordString)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Duplicate record fields";
                            }))()(Dhall_Core_AST_Types_Basics["_S"]))(kvs))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Traversable.traverse((dictMapLike.TraversableWithIndex2()).Traversable2())(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(typecheckStep)(kvs))(function (v1) {
                                return confirm(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                    return "Record";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor.map(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(v1)))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike.TraversableWithIndex2())(v1)(function (field) {
                                    return function (ty) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Newtype.unwrap(Data_Const.newtypeConst))(ensure(new Data_Symbol.IsSymbol(function () {
                                            return "Const";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(ty)((function () {
                                            var $1181 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                return "Invalid field type";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                            var $1182 = Data_Function["const"](field);
                                            return function ($1183) {
                                                return $1181($1182($1183));
                                            };
                                        })())))(function (v2) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                                                if (v2 instanceof Dhall_Core_AST_Types.Kind) {
                                                    var error = function (v3) {
                                                        return errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Invalid field type";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(field);
                                                    };
                                                    return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                                        return "Const";
                                                    }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                                        var $1184 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                                                        return function ($1185) {
                                                            return (function (c$prime) {
                                                                return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Eq.notEq(Dhall_Core_AST_Types.eqConst)(v2)(Dhall_Core_AST_Types.Type.value))(error(Data_Unit.unit));
                                                            })($1184($1185));
                                                        };
                                                    })())(function (v3) {
                                                        return error(Data_Unit.unit);
                                                    })(unlayerO(ty));
                                                };
                                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit);
                                            })())(function () {
                                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))({
                                                    kind: v2
                                                });
                                            });
                                        });
                                    };
                                }))(function (v2) {
                                    return ensureConsistency(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike)(Data_Function.on(Data_Eq.eq(Dhall_Core_AST_Types.eqConst))(function (v3) {
                                        return v3.kind;
                                    }))((function () {
                                        var $1186 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Inconsistent field types";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1187 = Data_Functor.map(functorInconsistency)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(function (v3) {
                                            return v3.key;
                                        }));
                                        return function ($1188) {
                                            return $1186($1187($1188));
                                        };
                                    })())(v2);
                                }));
                            }));
                        },
                        Union: function (kts) {
                            return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(ensureNodupes(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Functor_Compose.foldableWithIndexCompose((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(Data_FoldableWithIndex.foldableWithIndexMaybe))(Data_Tuple.ordTuple(Data_Ord.ordString)(Data_Ord.ordUnit))((function () {
                                var $1189 = errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Duplicate union alternatives";
                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                var $1190 = Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst);
                                return function ($1191) {
                                    return $1189($1190($1191));
                                };
                            })())(kts))(confirm(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Core_AST_Constructors.mkType))(Data_FoldableWithIndex.forWithIndex_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Functor_Compose.foldableWithIndexCompose((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(Data_FoldableWithIndex.foldableWithIndexMaybe))(kts)(function (v1) {
                                return function (ty) {
                                    return Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(ensure(new Data_Symbol.IsSymbol(function () {
                                        return "Const";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(ty)((function () {
                                        var $1192 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Invalid alternative type";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1193 = Data_Function["const"](v1.value0);
                                        return function ($1194) {
                                            return $1192($1193($1194));
                                        };
                                    })()));
                                };
                            })));
                        },
                        Combine: (function () {
                            var combineTypes = function (here) {
                                return function (v1) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.traversableWithIndexPair)(v1)(function (side) {
                                        return function (ty) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(ty)((function () {
                                                var $1195 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                    return "Must combine a record";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                var $1196 = Data_Function["const"](new Data_Tuple.Tuple(here, side));
                                                return function ($1197) {
                                                    return $1195($1196($1197));
                                                };
                                            })()))(function (v2) {
                                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(ty))(function (v3) {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v3)((function () {
                                                        var $1198 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Must combine a record";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1199 = Data_Function["const"](new Data_Tuple.Tuple(here, side));
                                                        return function ($1200) {
                                                            return $1198($1199($1200));
                                                        };
                                                    })()))(function (v4) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))({
                                                            kts: v2,
                                                            "const": v4
                                                        });
                                                    });
                                                });
                                            });
                                        };
                                    }))(function (v2) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Eq.notEq(Dhall_Core_AST_Types.eqConst)(v2["value0"]["const"])(v2["value1"]["const"]))(errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Record kind mismatch";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(here)))(function () {
                                            var combined = Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)))(v2.value0.kts)(v2.value1.kts);
                                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"]))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike.TraversableWithIndex2())(combined)(function (k) {
                                                return function (v3) {
                                                    if (v3 instanceof Data_These.Both) {
                                                        return combineTypes(new Data_List_Types.Cons(k, here))(new Dhall_Core_AST_Types_Basics.Pair(v3.value0, v3.value1));
                                                    };
                                                    if (v3 instanceof Data_These.This) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0));
                                                    };
                                                    if (v3 instanceof Data_These.That) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0));
                                                    };
                                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1308, column 13 - line 1312, column 40): " + [ v3.constructor.name ]);
                                                };
                                            }));
                                        });
                                    });
                                };
                            };
                            var $1201 = Control_Bind.bindFlipped(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(combineTypes(Data_List_Types.Nil.value));
                            var $1202 = Data_Traversable.traverse(Dhall_Core_AST_Types_Basics.traversablePair)(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(typecheckStep);
                            return function ($1203) {
                                return $1201($1202($1203));
                            };
                        })(),
                        CombineTypes: (function () {
                            var combineTypes = function (here) {
                                return function (v1) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.traversableWithIndexPair)(v1)(function (side) {
                                        return function (ty) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(ty)((function () {
                                                var $1204 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                    return "Must combine a record";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                var $1205 = Data_Function["const"](new Data_Tuple.Tuple(here, side));
                                                return function ($1206) {
                                                    return $1204($1205($1206));
                                                };
                                            })()))(function (v2) {
                                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(ty))(function (v3) {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConst(v3)((function () {
                                                        var $1207 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Must combine a record";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1208 = Data_Function["const"](new Data_Tuple.Tuple(here, side));
                                                        return function ($1209) {
                                                            return $1207($1208($1209));
                                                        };
                                                    })()))(function (v4) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))({
                                                            kts: v2,
                                                            "const": v4
                                                        });
                                                    });
                                                });
                                            });
                                        };
                                    }))(function (v2) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Eq.notEq(Dhall_Core_AST_Types.eqConst)(v2["value0"]["const"])(v2["value1"]["const"]))(errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Record kind mismatch";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(here)))(function () {
                                            var combined = Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)))(v2.value0.kts)(v2.value1.kts);
                                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"]))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike.TraversableWithIndex2())(combined)(function (k) {
                                                return function (v3) {
                                                    if (v3 instanceof Data_These.Both) {
                                                        return combineTypes(new Data_List_Types.Cons(k, here))(new Dhall_Core_AST_Types_Basics.Pair(v3.value0, v3.value1));
                                                    };
                                                    if (v3 instanceof Data_These.This) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0));
                                                    };
                                                    if (v3 instanceof Data_These.That) {
                                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0));
                                                    };
                                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1328, column 13 - line 1332, column 40): " + [ v3.constructor.name ]);
                                                };
                                            }));
                                        });
                                    });
                                };
                            };
                            return combineTypes(Data_List_Types.Nil.value);
                        })(),
                        Prefer: function (p) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Core_AST_Types_Basics.traversableWithIndexPair)(p)(function (side) {
                                return function (kvs) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(kvs))(function (v1) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                            return "Record";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)((function () {
                                            var $1210 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                return "Must combine a record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                            var $1211 = Data_Function["const"](new Data_Tuple.Tuple(Data_List_Types.Nil.value, side));
                                            return function ($1212) {
                                                return $1210($1211($1212));
                                            };
                                        })()))(function (v2) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1))(function (v3) {
                                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Newtype.unwrap(Data_Const.newtypeConst))(ensure(new Data_Symbol.IsSymbol(function () {
                                                    return "Const";
                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(v1)((function () {
                                                    var $1213 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Must combine a record";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                    var $1214 = Data_Function["const"](new Data_Tuple.Tuple(Data_List_Types.Nil.value, side));
                                                    return function ($1215) {
                                                        return $1213($1214($1215));
                                                    };
                                                })())))(function (v4) {
                                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))({
                                                        kts: v2,
                                                        "const": v4
                                                    });
                                                });
                                            });
                                        });
                                    });
                                };
                            }))(function (v1) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Eq.notEq(Dhall_Core_AST_Types.eqConst)(v1["value0"]["const"])(v1["value1"]["const"]))(errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Record kind mismatch";
                                }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_List_Types.Nil.value)))(function () {
                                    var preference = function ($1216) {
                                        return Data_Maybe.Just.create((function (v2) {
                                            if (v2 instanceof Data_These.This) {
                                                return v2.value0;
                                            };
                                            if (v2 instanceof Data_These.That) {
                                                return v2.value0;
                                            };
                                            if (v2 instanceof Data_These.Both) {
                                                return v2.value0;
                                            };
                                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1346, column 31 - line 1349, column 24): " + [ v2.constructor.name ]);
                                        })($1216));
                                    };
                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                        return "Record";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor.map(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(Dhall_Map.unionWith(dictMapLike)(Control_Applicative.pure(Control_Applicative.applicativeFn)(preference))(v1.value1.kts)(v1.value0.kts))));
                                });
                            });
                        },
                        Merge: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Tuple.Tuple.create)(ensure(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Must merge a record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"]))))(ensure(new Data_Symbol.IsSymbol(function () {
                                return "Union";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value1)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Must merge a union";
                            }))()(Dhall_Core_AST_Types_Basics["_S"]))))(function (v2) {
                                var ksY = Data_Set.fromFoldable(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())(Data_Ord.ordUnit)(Data_Functor.voidLeft(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(v2.value1)(Data_Unit.unit));
                                var ksX = Data_Set.fromFoldable(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())(Data_Ord.ordUnit)(Data_Functor.voidLeft(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(v2.value0)(Data_Unit.unit));
                                var diffY = Data_Set.difference(Data_Ord.ordUnit)(ksY)(ksX);
                                var diffX = Data_Set.difference(Data_Ord.ordUnit)(ksX)(ksY);
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                                    if (v1.value2 instanceof Data_Maybe.Just) {
                                        return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Tuple.Tuple.create(Data_Maybe.Nothing.value))(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v1.value2.value0));
                                    };
                                    if (v1.value2 instanceof Data_Maybe.Nothing) {
                                        var v3 = Data_Newtype.un(Data_Maybe_First.newtypeFirst)(Data_Maybe_First.First)(Data_FoldableWithIndex.foldMapWithIndex((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(Data_Maybe_First.monoidFirst)(Data_Tuple.curry(Control_Applicative.pure(Data_Maybe_First.applicativeFirst)))(v2.value0));
                                        if (v3 instanceof Data_Maybe.Nothing) {
                                            return errorHere(new Data_Symbol.IsSymbol(function () {
                                                return "Missing merge type";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
                                        };
                                        if (v3 instanceof Data_Maybe.Just) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                return "Unused handlers";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(diffX)(Dhall_Map.get(dictMapLike)(v3.value0.value0)(v2.value1)))(function (v4) {
                                                if (v4 instanceof Data_Maybe.Just) {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                        return "Pi";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v3.value0.value1)((function () {
                                                        var $1217 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Handler not a function";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1218 = Data_Function["const"](v3.value0.value0);
                                                        return function ($1219) {
                                                            return $1217($1218($1219));
                                                        };
                                                    })()))(function (v5) {
                                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Dependent handler function";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"](v3.value0.value0)(Data_Unit.unit))(tryShiftOut0Oxpr(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())(v5.value0)(v5.value2)))(function (v6) {
                                                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(new Data_Tuple.Tuple(new Data_Maybe.Just({
                                                                key: v3.value0.value0,
                                                                fn: true
                                                            }), v6));
                                                        });
                                                    });
                                                };
                                                if (v4 instanceof Data_Maybe.Nothing) {
                                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(new Data_Tuple.Tuple(new Data_Maybe.Just({
                                                        key: v3.value0.value0,
                                                        fn: false
                                                    }), v3.value0.value1));
                                                };
                                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1372, column 13 - line 1380, column 63): " + [ v4.constructor.name ]);
                                            });
                                        };
                                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1367, column 20 - line 1380, column 63): " + [ v3.constructor.name ]);
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1363, column 26 - line 1380, column 63): " + [ v1.value2.constructor.name ]);
                                })())(function (v3) {
                                    return confirm(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value1))(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(function (v4) {
                                        return function (v5) {
                                            return Data_Unit.unit;
                                        };
                                    })(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Set.isEmpty)(diffX))(errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Unused handlers";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(diffX))))(Data_FoldableWithIndex.forWithIndex_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))((dictMapLike.TraversableWithIndex2()).FoldableWithIndex1())(v2.value1)(function (k) {
                                        return function (mtY) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                return "Missing handler";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(diffY)(Dhall_Map.get(dictMapLike)(k)(v2.value0)))(function (v4) {
                                                if (mtY instanceof Data_Maybe.Just) {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                        return "Pi";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v4)((function () {
                                                        var $1220 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Handler not a function";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1221 = Data_Function["const"](k);
                                                        return function ($1222) {
                                                            return $1220($1221($1222));
                                                        };
                                                    })()))(function (v5) {
                                                        return Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(function (v6) {
                                                            return function (v7) {
                                                                return Data_Unit.unit;
                                                            };
                                                        })(checkEq(mtY.value0)(v5.value1)((function () {
                                                            var $1223 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                                return "Handler input type mismatch";
                                                            }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                            var $1224 = Data_Function["const"](k);
                                                            return function ($1225) {
                                                                return $1223($1224($1225));
                                                            };
                                                        })())))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Dependent handler function";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"](k)(Data_Unit.unit))(tryShiftOut0Oxpr(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1())(v5.value0)(v5.value2)))(function (v6) {
                                                            return checkEq(v3.value1)(v6)((function () {
                                                                var $1226 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                                    return "Handler output type mismatch";
                                                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                                var $1227 = Data_Function["const"](new Data_Tuple.Tuple(v3.value0, k));
                                                                return function ($1228) {
                                                                    return $1226($1227($1228));
                                                                };
                                                            })());
                                                        }));
                                                    });
                                                };
                                                if (mtY instanceof Data_Maybe.Nothing) {
                                                    return checkEq(v3.value1)(v4)((function () {
                                                        var $1229 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Handler type mismatch";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1230 = Data_Function["const"](new Data_Tuple.Tuple(v3.value0, k));
                                                        return function ($1231) {
                                                            return $1229($1230($1231));
                                                        };
                                                    })());
                                                };
                                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1387, column 11 - line 1402, column 88): " + [ mtY.constructor.name ]);
                                            });
                                        };
                                    })));
                                });
                            });
                        },
                        ToMap: function (v1) {
                            return mconfirm(Data_Functor.map(Data_Maybe.functorMaybe)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(v1.value1))(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "toMap takes a record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                var mapType = function (ty) {
                                    return mkFunctor(Dhall_Core_AST_Constructors.mkList)(mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                        return "Record";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Dhall_Map.fromFoldable(dictMapLike)(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("mapKey")(mk(Data_Const.functorConst)(new Data_Symbol.IsSymbol(function () {
                                        return "Text";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Newtype.wrap(Data_Const.newtypeConst)(Data_Unit.unit))), new Data_Tuple.Tuple("mapValue", ty) ])));
                                };
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(function (listty) {
                                    var error = errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Invalid toMap type annotation";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(listty)(error))(function (v3) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                            return "List";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Function["const"](Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit)))(function (v4) {
                                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Void.absurd)(error(Data_Unit.unit));
                                        })(unlayerO(normalizeStep(v3.value0))))(function () {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v3.value1)(error))(function (v4) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Map.size(dictMapLike)(v4) !== 2)(Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(error(Data_Unit.unit))))(function () {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Invalid toMap type annotation";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Dhall_Map.get(dictMapLike)("mapKey")(v4)))(function (v5) {
                                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                            return "Text";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v5)(error))(function (v6) {
                                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                                return "Invalid toMap type annotation";
                                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Dhall_Map.get(dictMapLike)("mapValue")(v4)))(function (v7) {
                                                                return confirm(v7)(ensureType(v7)(errorHere(new Data_Symbol.IsSymbol(function () {
                                                                    return "Invalid toMap type";
                                                                }))()(Dhall_Core_AST_Types_Basics["_S"])));
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                })(v1.value1))(function (v3) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensureConsistentOxpr(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike)(functorWithIndexWithHint((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0()))(foldableWithHint(((dictMapLike.TraversableWithIndex2()).Traversable2()).Foldable1()))(dictEq)(errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Missing toMap type";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"]))((function () {
                                        var $1232 = errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Inconsistent toMap types";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1233 = Data_Functor.map(functorInconsistency)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(function (v4) {
                                            return v4.key;
                                        }));
                                        return function ($1234) {
                                            return $1232($1233($1234));
                                        };
                                    })())(new WithHint(v3, v2)))(function (v4) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(mapType(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v4)));
                                    });
                                });
                            }));
                        },
                        Field: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value1))(function (v2) {
                                var handleType = function (kts) {
                                    var v3 = Dhall_Map.get(dictMapLike)(v1.value0)(kts);
                                    if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_Maybe.Just) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(mk(Dhall_Core_AST_Types_Basics.functorBindingBody)(new Data_Symbol.IsSymbol(function () {
                                            return "Pi";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Functor.map(Dhall_Core_AST_Types_Basics.functorBindingBody)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(new Dhall_Core_AST_Types_Basics.BindingBody(v1.value0, v3.value0.value0, v1.value1))));
                                    };
                                    if (v3 instanceof Data_Maybe.Just && v3.value0 instanceof Data_Maybe.Nothing) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v1.value1));
                                    };
                                    if (v3 instanceof Data_Maybe.Nothing) {
                                        return errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Missing field";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0);
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1442, column 11 - line 1445, column 66): " + [ v3.constructor.name ]);
                                };
                                var handleRecord = function (kts) {
                                    var v3 = Dhall_Map.get(dictMapLike)(v1.value0)(kts);
                                    if (v3 instanceof Data_Maybe.Just) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(v3.value0));
                                    };
                                    if (v3 instanceof Data_Maybe.Nothing) {
                                        return errorHere(new Data_Symbol.IsSymbol(function () {
                                            return "Missing field";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0);
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1438, column 11 - line 1440, column 66): " + [ v3.constructor.name ]);
                                };
                                var error = function (v3) {
                                    return errorHere(new Data_Symbol.IsSymbol(function () {
                                        return "Cannot access";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit);
                                };
                                var casing = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                    return "Const";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v3) {
                                    if (v3 instanceof Dhall_Core_AST_Types.Type) {
                                        return Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                            return "Union";
                                        }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                                            var $1235 = Data_Newtype.unwrap(Data_Functor_Compose.newtypeCompose);
                                            return function ($1236) {
                                                return handleType($1235($1236));
                                            };
                                        })())(function (v4) {
                                            return error(Data_Unit.unit);
                                        })(unlayerO(normalizeStep(v1.value1)));
                                    };
                                    return error(Data_Unit.unit);
                                })(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                    return "Record";
                                }))(Dhall_Core_AST_Types_Basics["_S"])(handleRecord)(function (v3) {
                                    return error(Data_Unit.unit);
                                }));
                                return casing(unlayerO(normalizeStep(v2)));
                            });
                        },
                        Project: function (v1) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure(new Data_Symbol.IsSymbol(function () {
                                return "Record";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                return "Cannot project";
                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v2) {
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                                    if (v1.value1 instanceof Data_Either.Left) {
                                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Functor.mapFlipped(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(v1.value1.value0)(function (v3) {
                                            return Data_Maybe.Nothing.value;
                                        }));
                                    };
                                    if (v1.value1 instanceof Data_Either.Right) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value1.value0))(function (v3) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v1.value1.value0)(errorHere(new Data_Symbol.IsSymbol(function () {
                                                return "Cannot project by expression";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])))(function (v4) {
                                                return Data_Traversable.traverse((dictMapLike.TraversableWithIndex2()).Traversable2())(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(function (ty) {
                                                    return Data_Functor.voidRight(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(new Data_Maybe.Just(ty))(typecheckStep(ty));
                                                })(v4);
                                            });
                                        });
                                    };
                                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 1457, column 13 - line 1463, column 59): " + [ v1.value1.constructor.name ]);
                                })())(function (v3) {
                                    return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))((function () {
                                        var $1237 = mk(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(new Data_Symbol.IsSymbol(function () {
                                            return "Record";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                        var $1238 = Data_Functor.map(((dictMapLike.TraversableWithIndex2()).Traversable2()).Functor0())(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)));
                                        return function ($1239) {
                                            return $1237($1238($1239));
                                        };
                                    })())(Data_TraversableWithIndex.forWithIndex(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(dictMapLike.TraversableWithIndex2())(v3)(function (k) {
                                        return function (mty) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                return "Missing field";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(k)(Dhall_Map.get(dictMapLike)(k)(v2)))(function (v4) {
                                                return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v4))(function (ty1) {
                                                    return checkEqR(v4)(ty1)((function () {
                                                        var $1240 = errorHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Projection type mismatch";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                                        var $1241 = Data_Function["const"](k);
                                                        return function ($1242) {
                                                            return $1240($1241($1242));
                                                        };
                                                    })());
                                                })(mty);
                                            });
                                        };
                                    }));
                                });
                            });
                        },
                        Hashed: function (v1) {
                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(typecheckStep(v1.value1));
                        },
                        UsingHeaders: function (v1) {
                            return Control_Apply.applyFirst(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Validation_These.applyErroring))(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(typecheckStep(v1.value0)))((function () {
                                var error = errorHere(new Data_Symbol.IsSymbol(function () {
                                    return "Wrong header type";
                                }))()(Dhall_Core_AST_Types_Basics["_S"]);
                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(typecheckStep(v1.value1))(function (v2) {
                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                        return "App";
                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(v2)(error))(function (v3) {
                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                            return "List";
                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(v3.value0)(error))(function (v4) {
                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                return "Record";
                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v3.value1)(error))(function (v5) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Dhall_Map.size(dictMapLike)(v5) !== 2)(Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(error(Data_Unit.unit))))(function () {
                                                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                        return "Wrong header type";
                                                    }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Dhall_Map.get(dictMapLike)("mapKey")(v5)))(function (v6) {
                                                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(noteHere(new Data_Symbol.IsSymbol(function () {
                                                            return "Wrong header type";
                                                        }))()(Dhall_Core_AST_Types_Basics["_S"])(Data_Unit.unit)(Dhall_Map.get(dictMapLike)("mapValue")(v5)))(function (v7) {
                                                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                                return "Text";
                                                            }))()(Dhall_Core_AST_Types_Basics["_S"])(v6)(error))(function (v8) {
                                                                return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(ensure$prime(new Data_Symbol.IsSymbol(function () {
                                                                    return "Text";
                                                                }))()(Dhall_Core_AST_Types_Basics["_S"])(v7)(error))(function (v9) {
                                                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Unit.unit);
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            })());
                        },
                        ImportAlt: function (v1) {
                            var v2 = Data_Newtype.unwrap(Control_Monad_Writer_Trans.newtypeWriterT)(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(typecheckStep(v1.value0)));
                            if (v2 instanceof Validation_These.Success) {
                                return Data_Newtype.wrap(Control_Monad_Writer_Trans.newtypeWriterT)(v2);
                            };
                            if (v2 instanceof Validation_These["Error"]) {
                                var v3 = Data_Newtype.unwrap(Control_Monad_Writer_Trans.newtypeWriterT)(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(typecheckStep(v1.value1)));
                                if (v3 instanceof Validation_These.Success) {
                                    return Data_Newtype.wrap(Control_Monad_Writer_Trans.newtypeWriterT)(v3);
                                };
                                if (v3 instanceof Validation_These["Error"]) {
                                    return Data_Newtype.wrap(Control_Monad_Writer_Trans.newtypeWriterT)(new Validation_These["Error"](Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(v2.value0)(v3.value0), Control_Alt.alt(Data_Maybe.altMaybe)(v2.value1)(v3.value1)));
                                };
                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1488, column 11 - line 1490, column 69): " + [ v3.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1485, column 7 - line 1490, column 69): " + [ v2.constructor.name ]);
                        },
                        Embed: (function () {
                            var $1243 = Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(newborn((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0()));
                            var $1244 = Data_Newtype.unwrap(Data_Const.newtypeConst);
                            return function ($1245) {
                                return $1243(tpa($1244($1245)));
                            };
                        })()
                    };
                })())(Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF)(v.value1.value1));
            };
        };
    };
};
var substContextLxpr = function (dictFunctorWithIndex) {
    return function (ctx) {
        return function (e) {
            return alsoOriginateFrom(dictFunctorWithIndex)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                return "substitute";
            }))()(Dhall_Core_AST_Types_Basics["_S"]))(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF))(e)))(Matryoshka_Fold.cata(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))(function (v) {
                return function (ctx$prime) {
                    var v1 = substContext1(shiftInLxpr0(dictFunctorWithIndex))(Data_Function.applyFlipped)(ctx$prime)(v.value1);
                    if (v1 instanceof Data_Either.Left) {
                        return v1.value0;
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(v.value0)(v1.value0)));
                    };
                    throw new Error("Failed pattern match at Dhall.TypeCheck (line 426, column 5 - line 428, column 61): " + [ v1.constructor.name ]);
                };
            })(e)(ctx));
        };
    };
};
var alphaNormalizeOp = function (v) {
    return Control_Comonad.extract(Data_Lazy.comonadLazy)(v.value0.value0);
};
var alphaNormalizeStep = (function () {
    var $1246 = step2D(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))));
    return function ($1247) {
        return alphaNormalizeOp($1246($1247));
    };
})();
var locateO$prime = function (dictEq) {
    return function (dictMapLike) {
        return function (foc0) {
            return Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()({
                substitute: function (v) {
                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(substContextOxpr((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Data_Functor.map(Dhall_Context.functorContext)(Data_These.theseLeft)(contextStep(foc0)))(foc0));
                },
                shift: function (v) {
                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(shiftOxpr(v.delta)(v.variable)(foc0));
                },
                alphaNormalize: function (v) {
                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(alphaNormalizeStep(foc0));
                },
                normalize: function (v) {
                    return Data_Functor.mapFlipped(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(typecheckStep(foc0))(function (v1) {
                        return normalizeStep(foc0);
                    });
                },
                typecheck: function (v) {
                    return typecheckStep(foc0);
                },
                within: function (i) {
                    return Validation_These.liftW(Validation_These.functorErroring)(Data_Monoid.monoidArray)(Validation_These.note({
                        location: topLoc(foc0),
                        tag: Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "Not found";
                        }))(Dhall_Core_AST_Types_Basics["_S"])(i)
                    })(Data_Lens_Fold.preview(Dhall_Core_Zippers["_ix"](Dhall_Core_AST_Types.traversableWithIndexERVF(dictMapLike.TraversableWithIndex2()))(Dhall_Core_AST_Types.eqERVFI)(i)(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)))(Dhall_Core_AST_Types.ERVF(unlayerO(foc0)))));
                }
            });
        };
    };
};
var locateO = function (dictEq) {
    return function (dictMapLike) {
        return function (foc0) {
            return function (deriv) {
                return Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
                    return function (foc) {
                        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(foc)(Data_Function.flip(locateO$prime(dictEq)(dictMapLike))(v));
                    };
                })(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(foc0))(deriv);
            };
        };
    };
};
var alphaNormalizeLxpr = function (dictFunctorWithIndex) {
    return function (e) {
        return alsoOriginateFrom(dictFunctorWithIndex)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.moveF(new Data_Symbol.IsSymbol(function () {
            return "alphaNormalize";
        }))()(Dhall_Core_AST_Types_Basics["_S"])({}))(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(Dhall_Core_AST_Types.functorERVF))(e)))(runLxprAlg(dictFunctorWithIndex)(Dhall_Variables.alphaNormalizeAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
            return "alphaNormalize";
        }))(Dhall_Core_AST_Types_Basics["_S"])({
            ctx: Dhall_Context.empty
        }))(e));
    };
};
var typecheckSketch = function (dictEq) {
    return function (dictMapLike) {
        return function (alg) {
            return recursor2D(Matryoshka_Class_Recursive.recursiveCofree(Dhall_Core_AST_Types.functorERVF))(Matryoshka_Class_Corecursive.corecursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(function (v) {
                return function (ctx) {
                    return Data_Functor_Product.Product(new Data_Tuple.Tuple(Data_Functor_Product.Product(new Data_Tuple.Tuple(Data_Lazy.defer(function (v1) {
                        return alphaNormalizeLxpr((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(v.value0)(Data_Functor.map(Dhall_Core_AST_Types.functorERVF)(head2D(Control_Comonad_Cofree.comonadCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(v.value1)))));
                    }), WithBiCtx.create(Data_Functor.mapFlipped(Dhall_Context.functorContext)(ctx)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))))(Data_Lazy.defer(function (v1) {
                        var ctx$prime = Data_Functor.mapFlipped(Dhall_Context.functorContext)(ctx)((function () {
                            var $1248 = Data_Functor.map(Data_Maybe.functorMaybe)(head2D(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)));
                            return function ($1249) {
                                return $1248(Data_These.theseLeft($1249));
                            };
                        })());
                        return normalizeLxpr(dictMapLike)(dictEq)(substContextLxpr((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(ctx$prime)(Matryoshka_Class_Corecursive.embed(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF))(Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(v.value0)(Data_Functor.map(Dhall_Core_AST_Types.functorERVF)(head2D(Control_Comonad_Cofree.comonadCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Control_Monad_Reader_Trans.functorReaderT(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF))))(Matryoshka_Class_Corecursive.corecursiveCofree(Dhall_Core_AST_Types.functorERVF)))(v.value1))))));
                    })))), Data_Functor_Compose.Compose(Data_Lazy.defer(function (v1) {
                        return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(alsoOriginateFrom((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Dhall_Core_AST_Operations_Location.stepF(new Data_Symbol.IsSymbol(function () {
                            return "typecheck";
                        }))()(Dhall_Core_AST_Types_Basics["_S"]))(v.value0)))(alg(WithBiCtx.create(ctx)(Control_Comonad_Env_Trans.mapEnvT(Data_Lens_Iso_Newtype["_Newtype"](Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.newtypeERVF)(Data_Profunctor.profunctorFn)(bicontextualizeWithin1(shiftInOxpr0)(bicontextualizeWithin((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0()))(ctx)))(v))));
                    }))));
                };
            });
        };
    };
};
var oneStopShop = function (dictMapLike) {
    return function (dictEq) {
        return function (dictShow) {
            return function (tpa) {
                return function (e0) {
                    var oxprFrom = function (loc) {
                        return function (ei) {
                            return bicontextualizeWithin((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Dhall_Context.empty)(typecheckSketch(dictEq)(dictMapLike)(typecheckAlgebra(dictEq)(dictMapLike)(tpa))(originateFrom((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), loc)))(ei)));
                        };
                    };
                    var oxpr = oxprFrom(Data_Maybe.Nothing.value)(e0);
                    var get = function (v) {
                        return Data_Function.flip(locateO(dictEq)(dictMapLike))(v.value0)((function () {
                            if (v.value1 instanceof Data_Maybe.Nothing) {
                                return oxpr;
                            };
                            if (v.value1 instanceof Data_Maybe.Just) {
                                return oxprFrom(new Data_Maybe.Just(v.value1.value0))(v.value1.value0);
                            };
                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1524, column 43 - line 1526, column 37): " + [ v.value1.constructor.name ]);
                        })());
                    };
                    var locate = function (v) {
                        var v1 = get(v.value0);
                        if (v1 instanceof Validation_These.Success) {
                            return v1;
                        };
                        if (v1 instanceof Validation_These["Error"]) {
                            var v2 = Data_Foldable.oneOfMap(Data_List_Types.foldableList)(Data_Maybe.plusMaybe)(function ($1250) {
                                return Validation_These["hushW'"](get($1250));
                            })(v.value1);
                            if (v2 instanceof Data_Maybe.Nothing) {
                                return v1;
                            };
                            if (v2 instanceof Data_Maybe.Just) {
                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v2.value0);
                            };
                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1531, column 9 - line 1533, column 27): " + [ v2.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 1528, column 5 - line 1533, column 27): " + [ v1.constructor.name ]);
                    };
                    var explainNotFound = function (i) {
                        return [ Text.create("Could not find location: " + i) ];
                    };
                    var explainHere = function (v) {
                        return Data_Variant.on()(new Data_Symbol.IsSymbol(function () {
                            return "Not found";
                        }))(Dhall_Core_AST_Types_Basics["_S"])((function () {
                            var $1251 = Data_Show.show(Dhall_Core_AST_Types.showERVFI);
                            return function ($1252) {
                                return explainNotFound($1251($1252));
                            };
                        })())(function (tag) {
                            var located = Validation_These["hushW'"](locate(v.location));
                            var addLocation = function (v1) {
                                if (v1.value1 instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(v1.value0, new Data_Maybe.Just(v1.value1.value0)));
                                };
                                if (v1.value1 instanceof Data_Maybe.Nothing) {
                                    return Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(function (v2) {
                                        return Data_Semigroup.append(Data_List_Types.semigroupList)(v1.value0)(v2);
                                    })(Control_Category.identity(Control_Category.categoryFn)))(v.location);
                                };
                                throw new Error("Failed pattern match at Dhall.TypeCheck (line 1541, column 9 - line 1541, column 60): " + [ v1.constructor.name ]);
                            };
                            if (located instanceof Data_Maybe.Just) {
                                var nodeType = Data_Functor.voidRight(Data_Functor_Variant.functorVariantF)(Data_Unit.unit)(unlayerO(located.value0));
                                var ctx = Data_Functor.map(Dhall_Context.functorContext)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))(Data_Function["const"](Data_Unit.unit)))(contextStep(located.value0));
                                return Data_Functor.mapFlipped(Data_Functor.functorArray)(explain(dictMapLike)(ctx)(nodeType)(tag))(Data_Functor.map(functorReference)(function ($1253) {
                                    return Validation_These["hushW'"](locate(addLocation($1253)));
                                }));
                            };
                            if (located instanceof Data_Maybe.Nothing) {
                                return explainNotFound(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Tuple.showTuple(Data_List_Types.showList(Data_Variant.showVariant()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
                                    return "within";
                                })))(new Data_Symbol.IsSymbol(function () {
                                    return "typecheck";
                                })))(new Data_Symbol.IsSymbol(function () {
                                    return "substitute";
                                })))(new Data_Symbol.IsSymbol(function () {
                                    return "shift";
                                })))(new Data_Symbol.IsSymbol(function () {
                                    return "normalize";
                                })))(new Data_Symbol.IsSymbol(function () {
                                    return "alphaNormalize";
                                })))(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantCons(Data_Variant.showVariantNil)(Dhall_Core_AST_Types.showERVFI))(Data_Show.showRecord()(Data_Show.showRecordFieldsNil)))(Data_Show.showRecord()(Data_Show.showRecordFieldsNil)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                    return "delta";
                                }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                                    return "variable";
                                }))(Data_Show.showRecordFieldsNil)(Dhall_Core_AST_Types.showVar))(Data_Show.showInt))))(Data_Show.showRecord()(Data_Show.showRecordFieldsNil)))(Data_Show.showRecord()(Data_Show.showRecordFieldsNil)))))(Data_Maybe.showMaybe(Dhall_Core_AST_Types.showExpr(dictMapLike.TraversableWithIndex2())(dictShow)))))(v.location));
                            };
                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 1544, column 10 - line 1550, column 51): " + [ located.constructor.name ]);
                        })(v.tag);
                    };
                    return {
                        oxpr: oxpr,
                        locate: locate,
                        explain: explainHere
                    };
                };
            };
        };
    };
};
var typingWithA = function (dictEq) {
    return function (dictMapLike) {
        return function (tpa) {
            return function (ctx0) {
                return function (e0) {
                    var tcingFrom = function (foc) {
                        var $1254 = typecheckSketch(dictEq)(dictMapLike)(typecheckAlgebra(dictEq)(dictMapLike)((function () {
                            var $1257 = Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring));
                            return function ($1258) {
                                return $1257(tpa($1258));
                            };
                        })()));
                        var $1255 = originateFrom((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(foc);
                        return function ($1256) {
                            return $1254($1255($1256));
                        };
                    };
                    var tcingIn = function (ctx) {
                        return function (e) {
                            var e$prime = bicontextualizeWithin((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(ctx)(tcingFrom(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), new Data_Maybe.Just(e))))(e));
                            return Data_Functor.voidRight(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(e$prime)(typecheckStep(e$prime));
                        };
                    };
                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(reconstituteCtx(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(function (ctx) {
                        return function (ty) {
                            return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_These.That.create)(tcingIn(ctx)(ty));
                        };
                    })(ctx0))(function (v) {
                        var eO = tcingFrom(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), Data_Maybe.Nothing.value)))(e0);
                        return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(bicontextualizeWithin((dictMapLike.TraversableWithIndex2()).FunctorWithIndex0())(v)(eO));
                    });
                };
            };
        };
    };
};
var typeWithA = function (dictEq) {
    return function (dictMapLike) {
        return function (tpa) {
            return function (ctx0) {
                return function (e0) {
                    return Control_Bind.bindFlipped(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))((function () {
                        var $1259 = Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(plain(Control_Comonad_Cofree.comonadCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Matryoshka_Class_Recursive.recursiveMu(Data_Functor_Compose.functorCompose(Control_Comonad_Cofree.functorCofree(Data_Functor_Product.functorProduct(Data_Functor_Product.functorProduct(Data_Lazy.functorLazy)(functorWithBiCtx(Data_Lazy.functorLazy)))(Data_Functor_Compose.functorCompose(Data_Lazy.functorLazy)(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring)))))(Control_Comonad_Env_Trans.functorEnvT(Dhall_Core_AST_Types.functorERVF)))));
                        return function ($1260) {
                            return $1259(typecheckStep($1260));
                        };
                    })())(typingWithA(dictEq)(dictMapLike)(tpa)(ctx0)(e0));
                };
            };
        };
    };
};
var locateE$prime = function (dictEq) {
    return function (dictMapLike) {
        return function (tpa) {
            return Data_Variant.match()(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchCons(Data_Variant_Internal.variantMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()(Type_Equality.refl))()((function () {
                var typecheck = function (v) {
                    return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(reconstituteCtx(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(function (ctx$prime) {
                        return function (v1) {
                            if (v1 instanceof Data_These.This) {
                                return typeWithA(dictEq)(dictMapLike)(tpa)(ctx$prime)(v1.value0);
                            };
                            if (v1 instanceof Data_These.That) {
                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v1.value0);
                            };
                            if (v1 instanceof Data_These.Both) {
                                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(v1.value1);
                            };
                            throw new Error("Failed pattern match at Dhall.TypeCheck (line 650, column 46 - line 653, column 29): " + [ v1.constructor.name ]);
                        };
                    })(v.value0))(function (v1) {
                        return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Tuple.Tuple.create(v.value0))(typeWithA(dictEq)(dictMapLike)(tpa)(v1)(v.value1));
                    });
                };
                var substCtx = Control_Extend.extend(Data_Tuple.extendTuple)(function (v) {
                    return substContextExpr0(Data_Functor.map(Dhall_Context.functorContext)(Data_These.theseLeft)(v.value0))(v.value1);
                });
                return {
                    substitute: function (v) {
                        return function (v1) {
                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(new Data_Tuple.Tuple(v1.value0, substContextExpr(Data_Functor.map(Dhall_Context.functorContext)(Data_These.theseLeft)(v1.value0))(v1.value1)));
                        };
                    },
                    alphaNormalize: function (v) {
                        return function (v1) {
                            return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Tuple.Tuple.create(v1.value0)(Dhall_Variables.alphaNormalize(v1.value1)));
                        };
                    },
                    normalize: function (v) {
                        return function ($1261) {
                            return (function (v1) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(typecheck(new Data_Tuple.Tuple(v1.value0, v1.value1))))(function () {
                                    return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(Data_Tuple.Tuple.create(v1.value0)(Dhall_Normalize.normalize(dictMapLike)(dictEq)(v1.value1)));
                                });
                            })(substCtx($1261));
                        };
                    },
                    shift: function (i) {
                        var $1262 = Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring));
                        var $1263 = Data_Functor.map(Data_Tuple.functorTuple)(Dhall_Variables.shift(i.delta)(i.variable));
                        return function ($1264) {
                            return $1262($1263($1264));
                        };
                    },
                    typecheck: function (v) {
                        return function ($1265) {
                            return typecheck(substCtx($1265));
                        };
                    },
                    within: function (i) {
                        return function (v) {
                            return Validation_These.liftW(Validation_These.functorErroring)(Data_Monoid.monoidArray)((function () {
                                var intro = function ($1266) {
                                    return Data_Tuple.Tuple.create((function (v1) {
                                        if (v1 instanceof Dhall_Variables.DoNothing) {
                                            return v.value0;
                                        };
                                        if (v1 instanceof Dhall_Variables.Clear) {
                                            return Dhall_Context.empty;
                                        };
                                        if (v1 instanceof Dhall_Variables.Intro) {
                                            return Data_Functor.map(Dhall_Context.functorContext)(Control_Bind.join(Control_Bind.bindFn)(Data_Bifunctor.bimap(Data_These.bifunctorThese))(Dhall_Variables.shift(1)(new Dhall_Core_AST_Types.V(v1.value0.value0, 0))))(Dhall_Context.insert(v1.value0.value0)(v1.value0.value1)(v.value0));
                                        };
                                        throw new Error("Failed pattern match at Dhall.TypeCheck (line 671, column 27 - line 675, column 42): " + [ v1.constructor.name ]);
                                    })($1266));
                                };
                                return Validation_These.note({
                                    location: Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Data_Tuple.Tuple(Control_Plus.empty(Data_List_Types.plusList), Control_Plus.empty(Data_Maybe.plusMaybe))),
                                    tag: Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                        return "Not found";
                                    }))(Dhall_Core_AST_Types_Basics["_S"])(i)
                                })(Data_Lens_Fold.preview(Dhall_Core_Zippers["_ix"](Dhall_Core_AST_Types.traversableWithIndexERVF(dictMapLike.TraversableWithIndex2()))(Dhall_Core_AST_Types.eqERVFI)(i)(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst)))(Dhall_Core_AST_Types.ERVF(Dhall_Variables.trackIntro(intro)(Data_Newtype.un(Dhall_Core_AST_Types.newtypeERVF)(Dhall_Core_AST_Types.ERVF)(Matryoshka_Class_Recursive.project(Dhall_Core_AST_Types.recursiveExpr)(v.value1))))));
                            })());
                        };
                    }
                };
            })());
        };
    };
};
var locateE = function (dictEq) {
    return function (dictMapLike) {
        return function (tpa) {
            return function (deriv) {
                return function (v) {
                    return Data_Functor.mapFlipped(Control_Monad_Writer_Trans.functorWriterT(Validation_These.functorErroring))(Data_Foldable.foldr(Data_List_Types.foldableList)(function (v1) {
                        return function (c) {
                            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Validation_These.bindErroring))(c)(locateE$prime(dictEq)(dictMapLike)(tpa)(v1));
                        };
                    })(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Validation_These.applicativeErroring))(new Data_Tuple.Tuple(v.ctx, v.expr)))(deriv))(function (v1) {
                        return {
                            expr: v1.value1,
                            ctx: v1.value0
                        };
                    });
                };
            };
        };
    };
};
module.exports = {
    axiom: axiom,
    rule: rule,
    confirm: confirm,
    mconfirm: mconfirm,
    TypeCheckError: TypeCheckError,
    recursor2D: recursor2D,
    head2D: head2D,
    step2D: step2D,
    dubstep2D: dubstep2D,
    headAndSpine: headAndSpine,
    unEnvT: unEnvT,
    env: env,
    mapEnv: mapEnv,
    bitransProduct: bitransProduct,
    WithBiCtx: WithBiCtx,
    getBiCtx: getBiCtx,
    dropBiCtx: dropBiCtx,
    overBiCtx: overBiCtx,
    typecheckSketch: typecheckSketch,
    alphaNormalizeOp: alphaNormalizeOp,
    contextOp: contextOp,
    normalizeOp: normalizeOp,
    typecheckOp: typecheckOp,
    alphaNormalizeStep: alphaNormalizeStep,
    contextStep: contextStep,
    normalizeStep: normalizeStep,
    typecheckStep: typecheckStep,
    unlayerO: unlayerO,
    overlayerO: overlayerO,
    originateFrom: originateFrom,
    alsoOriginateFrom: alsoOriginateFrom,
    topLoc: topLoc,
    alsoOriginateFromO: alsoOriginateFromO,
    typecheckStepCtx: typecheckStepCtx,
    bicontextualizeWithin: bicontextualizeWithin,
    bicontextualizeWithin1: bicontextualizeWithin1,
    substcontextualizeWithin1: substcontextualizeWithin1,
    substcontextualizeWithin10: substcontextualizeWithin10,
    substContext1: substContext1,
    substContext10: substContext10,
    subst1: subst1,
    substContextLxpr: substContextLxpr,
    substContextOxpr: substContextOxpr,
    substContextExpr: substContextExpr,
    substContextExpr0: substContextExpr0,
    newborn: newborn,
    newmother: newmother,
    denote: denote,
    plain: plain,
    runLxprAlg: runLxprAlg,
    runLxprAlgM: runLxprAlgM,
    runOxprAlg: runOxprAlg,
    freeInOxpr: freeInOxpr,
    freeInLxpr: freeInLxpr,
    alphaNormalizeLxpr: alphaNormalizeLxpr,
    shiftLxpr: shiftLxpr,
    shiftInLxpr: shiftInLxpr,
    shiftInLxpr0: shiftInLxpr0,
    shiftOutLxpr: shiftOutLxpr,
    tryShiftOutLxpr: tryShiftOutLxpr,
    tryShiftOut0Lxpr: tryShiftOut0Lxpr,
    shiftOxpr: shiftOxpr,
    shiftInOxpr: shiftInOxpr,
    shiftInOxpr0: shiftInOxpr0,
    shiftOutOxpr: shiftOutOxpr,
    tryShiftOutOxpr: tryShiftOutOxpr,
    tryShiftOut0Oxpr: tryShiftOut0Oxpr,
    normalizeLxpr: normalizeLxpr,
    areEq: areEq,
    "locateO'": locateO$prime,
    locateO: locateO,
    "locateE'": locateE$prime,
    locateE: locateE,
    Inconsistency: Inconsistency,
    tabulateGroupings: tabulateGroupings,
    consistency: consistency,
    ensureConsistency: ensureConsistency,
    WithHint: WithHint,
    ensureConsistentOxpr: ensureConsistentOxpr,
    ensureNodupes: ensureNodupes,
    findDupes: findDupes,
    reconstituteCtx: reconstituteCtx,
    reconstituteCtxFrom: reconstituteCtxFrom,
    typeWithA: typeWithA,
    typingWithA: typingWithA,
    NoStrMap: NoStrMap,
    rehydrate: rehydrate,
    typecheckAlgebra: typecheckAlgebra,
    Text: Text,
    Br: Br,
    Reference: Reference,
    List: List,
    Compare: Compare,
    Href: Href,
    oneStopShop: oneStopShop,
    explain: explain,
    functorTypeCheckError: functorTypeCheckError,
    showTypeCheckError: showTypeCheckError,
    functorWithBiCtx: functorWithBiCtx,
    foldableWithBiCtx: foldableWithBiCtx,
    traversableWithBiCtx: traversableWithBiCtx,
    newtypeInconsistency: newtypeInconsistency,
    showInconsistency: showInconsistency,
    functorInconsistency: functorInconsistency,
    foldableInconsistency: foldableInconsistency,
    foldable1Inconsistency: foldable1Inconsistency,
    traversableInconsistency: traversableInconsistency,
    functorWithHint: functorWithHint,
    functorWithIndexWithHint: functorWithIndexWithHint,
    foldableWithHint: foldableWithHint,
    newtypeNoStrMap: newtypeNoStrMap,
    functorNoStrMap: functorNoStrMap,
    foldableNoStrMap: foldableNoStrMap,
    traversableNoStrMap: traversableNoStrMap,
    functorWithIndexNoStrMap: functorWithIndexNoStrMap,
    foldableableWithIndexNoStrMap: foldableableWithIndexNoStrMap,
    traversableWithIndexNoStrMap: traversableWithIndexNoStrMap,
    functorReference: functorReference
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad.Reader.Trans/index.js":49,"../Control.Monad.Writer.Trans/index.js":58,"../Control.Plus/index.js":65,"../Control.Semigroupoid/index.js":68,"../Data.Array.NonEmpty.Internal/index.js":85,"../Data.Array.NonEmpty/index.js":86,"../Data.Array/index.js":91,"../Data.Bifoldable/index.js":92,"../Data.Bifunctor/index.js":98,"../Data.Bitraversable/index.js":99,"../Data.Boolean/index.js":100,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Mu/index.js":138,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.Lazy/index.js":156,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Indexed/index.js":159,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Record/index.js":176,"../Data.List.NonEmpty/index.js":181,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Map.Internal/index.js":184,"../Data.Maybe.First/index.js":185,"../Data.Maybe.Last/index.js":186,"../Data.Maybe/index.js":187,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid.Endo/index.js":193,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.NonEmpty/index.js":198,"../Data.Ord/index.js":205,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Semigroup.Foldable/index.js":217,"../Data.Semigroup/index.js":221,"../Data.Set/index.js":224,"../Data.Show/index.js":226,"../Data.String.Common/index.js":232,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Variant.Internal/index.js":258,"../Data.Variant/index.js":259,"../Data.Void/index.js":260,"../Dhall.Context/index.js":261,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Operations.Location/index.js":264,"../Dhall.Core.AST.Operations.Transformations/index.js":265,"../Dhall.Core.AST.Operations/index.js":266,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Dhall.Core.Imports.Retrieve/index.js":270,"../Dhall.Core.Zippers/index.js":274,"../Dhall.Map/index.js":284,"../Dhall.Normalize/index.js":286,"../Dhall.Variables/index.js":291,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.Fold/index.js":358,"../Matryoshka.Unfold/index.js":360,"../Matryoshka.Util/index.js":361,"../Type.Equality/index.js":388,"../Validation.These/index.js":394}],291:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Functor_Product = require("../Data.Functor.Product/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Data_Variant_Internal = require("../Data.Variant.Internal/index.js");
var Dhall_Context = require("../Dhall.Context/index.js");
var Dhall_Core_AST_Constructors = require("../Dhall.Core.AST.Constructors/index.js");
var Dhall_Core_AST_Operations_Transformations = require("../Dhall.Core.AST.Operations.Transformations/index.js");
var Dhall_Core_AST_Types = require("../Dhall.Core.AST.Types/index.js");
var Dhall_Core_AST_Types_Basics = require("../Dhall.Core.AST.Types.Basics/index.js");
var Matryoshka_Fold = require("../Matryoshka.Fold/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var DoNothing = (function () {
    function DoNothing() {

    };
    DoNothing.value = new DoNothing();
    return DoNothing;
})();
var Clear = (function () {
    function Clear() {

    };
    Clear.value = new Clear();
    return Clear;
})();
var Intro = (function () {
    function Intro(value0) {
        this.value0 = value0;
    };
    Intro.create = function (value0) {
        return new Intro(value0);
    };
    return Intro;
})();
var trackVar = function (v) {
    return function (v2) {
        if (v2 instanceof Data_Maybe.Just && v.value0 === v2.value0) {
            return new Dhall_Core_AST_Types.V(v.value0, v.value1 + 1 | 0);
        };
        return v;
    };
};
var trackIntroVar = function (v) {
    if (v instanceof Intro) {
        return new Data_Maybe.Just(v.value0.value0);
    };
    return Data_Maybe.Nothing.value;
};
var trackIntroUsingHeaders = function (next) {
    return function (v) {
        return new Dhall_Core_AST_Types_Basics.Pair(next(DoNothing.value)(v.value0), next(Clear.value)(v.value1));
    };
};
var trackIntroLetF = function (next) {
    return function (v) {
        return new Dhall_Core_AST_Types_Basics.LetF(v.value0, Data_Functor.map(Data_Maybe.functorMaybe)(next(DoNothing.value))(v.value1), next(DoNothing.value)(v.value2), (function () {
            var valty = (function () {
                if (v.value1 instanceof Data_Maybe.Nothing) {
                    return new Data_These.This(v.value2);
                };
                if (v.value1 instanceof Data_Maybe.Just) {
                    return new Data_These.Both(v.value2, v.value1.value0);
                };
                throw new Error("Failed pattern match at Dhall.Variables (line 144, column 13 - line 146, column 31): " + [ v.value1.constructor.name ]);
            })();
            return next(new Intro(new Data_Tuple.Tuple(v.value0, valty)))(v.value3);
        })());
    };
};
var trackIntroBindingBody = function (next) {
    return function (v) {
        return new Dhall_Core_AST_Types_Basics.BindingBody(v.value0, next(DoNothing.value)(v.value1), next(new Intro(new Data_Tuple.Tuple(v.value0, new Data_These.That(v.value1))))(v.value2));
    };
};
var trackIntroCases = function (next) {
    return {
        Var: Data_Newtype.over(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(Control_Category.identity(Control_Category.categoryFn)),
        Lam: trackIntroBindingBody(next),
        Pi: trackIntroBindingBody(next),
        Let: trackIntroLetF(next),
        UsingHeaders: trackIntroUsingHeaders(next)
    };
};
var trackIntroCasesM = function (dictApplicative) {
    return function (next) {
        return {
            Var: (function () {
                var $128 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Const.Const);
                var $129 = Control_Applicative.pure(dictApplicative);
                var $130 = Data_Newtype.un(Data_Const.newtypeConst)(Data_Const.Const);
                return function ($131) {
                    return $128($129($130($131)));
                };
            })(),
            Lam: (function () {
                var $132 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableBindingBody)(dictApplicative);
                var $133 = trackIntroBindingBody(next);
                return function ($134) {
                    return $132($133($134));
                };
            })(),
            Pi: (function () {
                var $135 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableBindingBody)(dictApplicative);
                var $136 = trackIntroBindingBody(next);
                return function ($137) {
                    return $135($136($137));
                };
            })(),
            Let: (function () {
                var $138 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableLetF)(dictApplicative);
                var $139 = trackIntroLetF(next);
                return function ($140) {
                    return $138($139($140));
                };
            })(),
            UsingHeaders: (function () {
                var $141 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversablePair)(dictApplicative);
                var $142 = trackIntroUsingHeaders(next);
                return function ($143) {
                    return $141($142($143));
                };
            })()
        };
    };
};
var trackIntro = function (next) {
    return Data_Functor_Variant.expandOverMatch()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
        return "Var";
    })))(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Let";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()()()(trackIntroCases(next))(next(DoNothing.value));
};
var shiftAlgGM = function (dictApplicative) {
    return function (dictTraversable) {
        return Dhall_Core_AST_Operations_Transformations.elim1M(new Data_Symbol.IsSymbol(function () {
            return "shift";
        }))()()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
            return "Var";
        })))(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        })))(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        })))(new Data_Symbol.IsSymbol(function () {
            return "Let";
        })))(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()(dictApplicative)(dictTraversable)(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
            return function (node) {
                var recur = (function () {
                    var $144 = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "shift";
                    }))(Dhall_Core_AST_Types_Basics["_S"]);
                    return function ($145) {
                        return node.recurse($144((function (v2) {
                            return {
                                delta: v.delta,
                                variable: v2
                            };
                        })($145)));
                    };
                })();
                return {
                    Var: function (v2) {
                        var n$prime$prime = (function () {
                            var $66 = v.variable.value0 === v2.value0 && v.variable.value1 <= v2.value1;
                            if ($66) {
                                return v2.value1 + v.delta | 0;
                            };
                            return v2.value1;
                        })();
                        return Control_Applicative.pure(dictApplicative)(new Dhall_Core_AST_Types.V(v2.value0, n$prime$prime));
                    },
                    Lam: (function () {
                        var $146 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableBindingBody)(dictApplicative);
                        var $147 = trackIntroBindingBody((function () {
                            var $149 = trackVar(v.variable);
                            return function ($150) {
                                return recur($149(trackIntroVar($150)));
                            };
                        })());
                        return function ($148) {
                            return $146($147($148));
                        };
                    })(),
                    Pi: (function () {
                        var $151 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableBindingBody)(dictApplicative);
                        var $152 = trackIntroBindingBody((function () {
                            var $154 = trackVar(v.variable);
                            return function ($155) {
                                return recur($154(trackIntroVar($155)));
                            };
                        })());
                        return function ($153) {
                            return $151($152($153));
                        };
                    })(),
                    Let: (function () {
                        var $156 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversableLetF)(dictApplicative);
                        var $157 = trackIntroLetF((function () {
                            var $159 = trackVar(v.variable);
                            return function ($160) {
                                return recur($159(trackIntroVar($160)));
                            };
                        })());
                        return function ($158) {
                            return $156($157($158));
                        };
                    })(),
                    UsingHeaders: (function () {
                        var $161 = Data_Traversable.sequence(Dhall_Core_AST_Types_Basics.traversablePair)(dictApplicative);
                        var $162 = trackIntroUsingHeaders((function () {
                            var $164 = trackVar(v.variable);
                            return function ($165) {
                                return recur($164(trackIntroVar($165)));
                            };
                        })());
                        return function ($163) {
                            return $161($162($163));
                        };
                    })()
                };
            };
        });
    };
};
var shiftSubstAlgGM = function (dictApplicative) {
    return function (dictBind) {
        return function (dictTraversable) {
            return function (rest) {
                return shiftAlgGM(dictApplicative)(dictTraversable)(Data_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "subst";
                }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
                    return function (node) {
                        var subst1 = function (v$prime) {
                            return function (s$prime) {
                                return node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                    return "subst";
                                }))(Dhall_Core_AST_Types_Basics["_S"])({
                                    variable: v$prime,
                                    substitution: s$prime
                                }));
                            };
                        };
                        var shift1 = function (name) {
                            return node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                                return "shift";
                            }))(Dhall_Core_AST_Types_Basics["_S"])({
                                delta: 1,
                                variable: new Dhall_Core_AST_Types.V(name, 0)
                            }));
                        };
                        var isTarget = (function () {
                            var $166 = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                                return "Var";
                            }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Eq.eq(Data_Const.eqConst(Dhall_Core_AST_Types.eqVar))(v.variable))(Data_HeytingAlgebra.ff(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)));
                            return function ($167) {
                                return $166(node.unlayer($167));
                            };
                        })();
                        var substIfTarget = function (c) {
                            return Control_Bind.bind(Control_Bind.bindFn)(isTarget)(function (v1) {
                                if (v1) {
                                    return Control_Applicative.pure(Control_Applicative.applicativeFn)(v.substitution);
                                };
                                return c;
                            });
                        };
                        var addShift1 = Data_Function.flip(function (v1) {
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return Control_Applicative.pure(dictApplicative);
                            };
                            if (v1 instanceof Data_Maybe.Just) {
                                return shift1(v1.value0);
                            };
                            throw new Error("Failed pattern match at Dhall.Variables (line 280, column 22 - line 282, column 31): " + [ v1.constructor.name ]);
                        });
                        var next = Control_Apply.lift2(Control_Apply.applyFn)(Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn))((function () {
                            var $168 = trackVar(v.variable);
                            return function ($169) {
                                return Data_Function.flip(subst1($168($169)));
                            };
                        })())((function () {
                            var $170 = Control_Bind.bind(dictBind);
                            var $171 = addShift1(v.substitution);
                            return function ($172) {
                                return $170($171($172));
                            };
                        })());
                        return Control_Bind.bind(Control_Bind.bindFn)(isTarget)(function (v1) {
                            if (v1) {
                                return Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(dictApplicative)(v.substitution));
                            };
                            return Dhall_Core_AST_Operations_Transformations.runOverCasesM()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravCons()()(Data_Variant_Internal.variantFTravNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
                                return "Var";
                            })))(new Data_Symbol.IsSymbol(function () {
                                return "UsingHeaders";
                            })))(new Data_Symbol.IsSymbol(function () {
                                return "Pi";
                            })))(new Data_Symbol.IsSymbol(function () {
                                return "Let";
                            })))(new Data_Symbol.IsSymbol(function () {
                                return "Lam";
                            })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()(dictApplicative)(dictTraversable)(node.overlayer)(next(Data_Maybe.Nothing.value))(trackIntroCasesM(dictApplicative)(function ($173) {
                                return next(trackIntroVar($173));
                            }));
                        });
                    };
                })(rest));
            };
        };
    };
};
var shiftAlgG = Dhall_Core_AST_Operations_Transformations.elim1(new Data_Symbol.IsSymbol(function () {
    return "shift";
}))()()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
    return "Var";
})))(new Data_Symbol.IsSymbol(function () {
    return "UsingHeaders";
})))(new Data_Symbol.IsSymbol(function () {
    return "Pi";
})))(new Data_Symbol.IsSymbol(function () {
    return "Let";
})))(new Data_Symbol.IsSymbol(function () {
    return "Lam";
})))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
    return function (node) {
        var recur = (function () {
            var $174 = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "shift";
            }))(Dhall_Core_AST_Types_Basics["_S"]);
            return function ($175) {
                return node.recurse($174((function (v2) {
                    return {
                        delta: v.delta,
                        variable: v2
                    };
                })($175)));
            };
        })();
        return {
            Var: Data_Newtype.over(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(function (v2) {
                var n$prime$prime = (function () {
                    var $82 = v.variable.value0 === v2.value0 && v.variable.value1 <= v2.value1;
                    if ($82) {
                        return v2.value1 + v.delta | 0;
                    };
                    return v2.value1;
                })();
                return new Dhall_Core_AST_Types.V(v2.value0, n$prime$prime);
            }),
            Lam: trackIntroBindingBody((function () {
                var $176 = trackVar(v.variable);
                return function ($177) {
                    return recur($176(trackIntroVar($177)));
                };
            })()),
            Pi: trackIntroBindingBody((function () {
                var $178 = trackVar(v.variable);
                return function ($179) {
                    return recur($178(trackIntroVar($179)));
                };
            })()),
            Let: trackIntroLetF((function () {
                var $180 = trackVar(v.variable);
                return function ($181) {
                    return recur($180(trackIntroVar($181)));
                };
            })()),
            UsingHeaders: trackIntroUsingHeaders((function () {
                var $182 = trackVar(v.variable);
                return function ($183) {
                    return recur($182(trackIntroVar($183)));
                };
            })())
        };
    };
});
var shiftSubstAlgG = function (rest) {
    return shiftAlgG(Data_Variant.on()(new Data_Symbol.IsSymbol(function () {
        return "subst";
    }))(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
        return function (node) {
            var $184 = (function () {
                var subst1 = function (v$prime) {
                    return function (s$prime) {
                        var $189 = Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity);
                        var $190 = node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                            return "subst";
                        }))(Dhall_Core_AST_Types_Basics["_S"])({
                            variable: v$prime,
                            substitution: s$prime
                        }));
                        return function ($191) {
                            return $189($190($191));
                        };
                    };
                };
                var shift1 = function (name) {
                    var $192 = Data_Newtype.un(Data_Identity.newtypeIdentity)(Data_Identity.Identity);
                    var $193 = node.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                        return "shift";
                    }))(Dhall_Core_AST_Types_Basics["_S"])({
                        delta: 1,
                        variable: new Dhall_Core_AST_Types.V(name, 0)
                    }));
                    return function ($194) {
                        return $192($193($194));
                    };
                };
                var isTarget = (function () {
                    var $186 = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Eq.eq(Data_Const.eqConst(Dhall_Core_AST_Types.eqVar))(v.variable))(Data_HeytingAlgebra.ff(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)));
                    return function ($187) {
                        return $186(node.unlayer($187));
                    };
                })();
                var substIfTarget = function (c) {
                    return Control_Bind.bind(Control_Bind.bindFn)(isTarget)(function (v1) {
                        if (v1) {
                            return Control_Applicative.pure(Control_Applicative.applicativeFn)(v.substitution);
                        };
                        return c;
                    });
                };
                var addShift1 = Data_Function.flip(function (v1) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Control_Category.identity(Control_Category.categoryFn);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return shift1(v1.value0);
                    };
                    throw new Error("Failed pattern match at Dhall.Variables (line 258, column 22 - line 260, column 31): " + [ v1.constructor.name ]);
                });
                var next = Control_Apply.apply(Control_Apply.applyFn)(Data_Functor.map(Data_Functor.functorFn)(subst1)(trackVar(v.variable)))(addShift1(v.substitution));
                return Control_Bind.bind(Control_Bind.bindFn)(isTarget)(function (v1) {
                    if (v1) {
                        return Control_Applicative.pure(Control_Applicative.applicativeFn)(v.substitution);
                    };
                    return Dhall_Core_AST_Operations_Transformations.runOverCases()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
                        return "Var";
                    })))(new Data_Symbol.IsSymbol(function () {
                        return "UsingHeaders";
                    })))(new Data_Symbol.IsSymbol(function () {
                        return "Pi";
                    })))(new Data_Symbol.IsSymbol(function () {
                        return "Let";
                    })))(new Data_Symbol.IsSymbol(function () {
                        return "Lam";
                    })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()(node.overlayer)(next(Data_Maybe.Nothing.value))(trackIntroCases(function ($188) {
                        return next(trackIntroVar($188));
                    }));
                });
            })();
            return function ($185) {
                return Data_Identity.Identity($184($185));
            };
        };
    })(rest));
};
var subst = function (v) {
    return function (e) {
        return Dhall_Core_AST_Operations_Transformations.runAlgebraExpr(shiftSubstAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
            return "subst";
        }))(Dhall_Core_AST_Types_Basics["_S"])({
            variable: v,
            substitution: e
        }));
    };
};
var shift = function (d) {
    return function (v) {
        return Dhall_Core_AST_Operations_Transformations.runAlgebraExpr(shiftAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
            return "shift";
        }))(Dhall_Core_AST_Types_Basics["_S"])({
            delta: d,
            variable: v
        }));
    };
};
var shiftSubstShift = function (v) {
    return function (a) {
        return function (b) {
            return shift(-1 | 0)(v)(subst(v)(shift(1)(v)(a))(b));
        };
    };
};
var shiftSubstShift0 = function (v) {
    return shiftSubstShift(new Dhall_Core_AST_Types.V(v, 0));
};
var rename = function (v0) {
    return function (v1) {
        if (Data_Eq.eq(Dhall_Core_AST_Types.eqVar)(v0)(v1)) {
            return Control_Category.identity(Control_Category.categoryFn);
        };
        var $195 = shift(-1 | 0)(v0);
        var $196 = subst(v0)(Dhall_Core_AST_Constructors.mkVar(v1));
        var $197 = shift(1)(v1);
        return function ($198) {
            return $195($196($197($198)));
        };
    };
};
var freeInAlg = function (dictRowToList) {
    return function (dictFoldableVFRL) {
        return function (layer) {
            return function (v) {
                if (Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                    return "Var";
                }))(Dhall_Core_AST_Types_Basics["_S"])(Data_Eq.eq(Data_Const.eqConst(Dhall_Core_AST_Types.eqVar))(v))(Data_HeytingAlgebra.ff(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(layer)) {
                    return true;
                };
                return Data_Foldable.fold(Data_Functor_Variant.foldableVariantF(dictRowToList)(dictFoldableVFRL))(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean))(trackIntro((function () {
                    var $199 = trackVar(v);
                    return function ($200) {
                        return Data_Function.applyFlipped($199(trackIntroVar($200)));
                    };
                })())(layer));
            };
        };
    };
};
var freeIn = function (dictFoldable) {
    return Data_Function.flip(Matryoshka_Fold.cata(Dhall_Core_AST_Types.recursiveExpr)((function () {
        var $201 = freeInAlg()(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Annot";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "App";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Assert";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Bool";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolAnd";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolEQ";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolIf";
        }))(Dhall_Core_AST_Types_Basics.foldableTriplet)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolNE";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "BoolOr";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Combine";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "CombineTypes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Const";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Double";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "DoubleShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Embed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Equivalent";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Field";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Hashed";
        }))(Data_Tuple.foldableTuple)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ImportAlt";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Integer";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "IntegerToDouble";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Lam";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Let";
        }))(Dhall_Core_AST_Types_Basics.foldableLetF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "List";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListHead";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListIndexed";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLast";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLength";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListLit";
        }))(Data_Functor_Product.foldableProduct(Data_Foldable.foldableMaybe)(Data_Foldable.foldableArray))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ListReverse";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Merge";
        }))(Dhall_Core_AST_Types_Basics.foldableMergeF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Natural";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalEven";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalIsZero";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalLit";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalOdd";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalPlus";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalSubtract";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalTimes";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "NaturalToInteger";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "None";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Optional";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalBuild";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "OptionalFold";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Pi";
        }))(Dhall_Core_AST_Types_Basics.foldableBindingBody)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Prefer";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Project";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Either.foldableEither))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Record";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "RecordLit";
        }))(dictFoldable)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Some";
        }))(Data_Identity.foldableIdentity)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Text";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextAppend";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextLit";
        }))(Dhall_Core_AST_Types_Basics.foldableTextLitF)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "TextShow";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "ToMap";
        }))(Data_Functor_Product.foldableProduct(Data_Identity.foldableIdentity)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Union";
        }))(Data_Functor_Compose.foldableCompose(dictFoldable)(Data_Foldable.foldableMaybe))(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "UsingHeaders";
        }))(Dhall_Core_AST_Types_Basics.foldablePair)(Data_Functor_Variant.foldableCons(new Data_Symbol.IsSymbol(function () {
            return "Var";
        }))(Data_Const.foldableConst)(Data_Functor_Variant.foldableNil)())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())())());
        var $202 = Data_Newtype.unwrap(Dhall_Core_AST_Types.newtypeERVF);
        return function ($203) {
            return $201($202($203));
        };
    })()));
};
var doRenameAlgG = function (v0) {
    return function (v1) {
        return function (v) {
            if (Data_Eq.eq(Dhall_Core_AST_Types.eqVar)(v0)(v1)) {
                return Control_Category.identity(Control_Category.categoryFn);
            };
            var newV = v.layer(Data_Functor_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "Var";
            }))(Data_Const.functorConst)(Dhall_Core_AST_Types_Basics["_S"])(v1));
            var $204 = v.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "shift";
            }))(Dhall_Core_AST_Types_Basics["_S"])({
                delta: -1 | 0,
                variable: v0
            }));
            var $205 = v.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "subst";
            }))(Dhall_Core_AST_Types_Basics["_S"])({
                variable: v0,
                substitution: newV
            }));
            var $206 = v.recurse(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                return "shift";
            }))(Dhall_Core_AST_Types_Basics["_S"])({
                delta: 1,
                variable: v1
            }));
            var $207 = Control_Category.identity(Control_Category.categoryFn);
            return function ($208) {
                return $204($205($206($207($208))));
            };
        };
    };
};
var alphaNormalizeAlgG = function (rest) {
    return shiftSubstAlgG(Dhall_Core_AST_Operations_Transformations.elim1(new Data_Symbol.IsSymbol(function () {
        return "alphaNormalize";
    }))()()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapCons()()(Data_Variant_Internal.variantFMapNil)(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))(Type_Equality.refl))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
        return "Var";
    })))(new Data_Symbol.IsSymbol(function () {
        return "UsingHeaders";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Pi";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Let";
    })))(new Data_Symbol.IsSymbol(function () {
        return "Lam";
    })))(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFCons(Data_Functor_Variant.mapVariantFNil)(Type_Equality.refl)(Data_Const.functorConst))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorPair))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorLetF))(Type_Equality.refl)(Dhall_Core_AST_Types_Basics.functorBindingBody))()(Dhall_Core_AST_Types_Basics["_S"])(function (v) {
        return function (node) {
            var renamLetF = function (v1) {
                return new Dhall_Core_AST_Types_Basics.LetF("_", v1.value1, v1.value2, v1.value3);
            };
            var renamBindingBody = function (v1) {
                return new Dhall_Core_AST_Types_Basics.BindingBody("_", v1.value1, v1.value2);
            };
            var norm = (function () {
                var $209 = Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
                    return "alphaNormalize";
                }))(Dhall_Core_AST_Types_Basics["_S"]);
                return function ($210) {
                    return node.recurse($209($210));
                };
            })();
            var renam = function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return norm({
                        ctx: v.ctx
                    });
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return norm({
                        ctx: Dhall_Context.insert(v1.value0)(Data_Unit.unit)(v.ctx)
                    });
                };
                throw new Error("Failed pattern match at Dhall.Variables (line 326, column 5 - line 326, column 33): " + [ v1.constructor.name ]);
            };
            return {
                Var: Data_Newtype.over(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(function (v1) {
                    var v2 = Dhall_Context.lookupDepth(v1.value0)(v1.value1)(v.ctx);
                    if (v2 instanceof Data_Maybe.Just) {
                        return new Dhall_Core_AST_Types.V("_", v2.value0.value0);
                    };
                    if (v2 instanceof Data_Maybe.Nothing) {
                        var passed = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive)(Data_FoldableWithIndex.foldMapWithIndex(Dhall_Context.foldableWithIndexContext)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(function (v3) {
                            return function (v4) {
                                var $121 = v3.value0 === v1.value0;
                                if ($121) {
                                    return 1;
                                };
                                return Data_Monoid.mempty(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt));
                            };
                        })(v.ctx));
                        var added = (function () {
                            var $124 = v1.value0 === "_";
                            if ($124) {
                                return Data_Foldable.length(Dhall_Context.foldableContext)(Data_Semiring.semiringInt)(v.ctx);
                            };
                            return 0;
                        })();
                        return new Dhall_Core_AST_Types.V(v1.value0, (v1.value1 + added | 0) - passed | 0);
                    };
                    throw new Error("Failed pattern match at Dhall.Variables (line 332, column 5 - line 345, column 38): " + [ v2.constructor.name ]);
                }),
                Lam: (function () {
                    var $211 = trackIntroBindingBody(function ($213) {
                        return renam(trackIntroVar($213));
                    });
                    return function ($212) {
                        return renamBindingBody($211($212));
                    };
                })(),
                Pi: (function () {
                    var $214 = trackIntroBindingBody(function ($216) {
                        return renam(trackIntroVar($216));
                    });
                    return function ($215) {
                        return renamBindingBody($214($215));
                    };
                })(),
                Let: (function () {
                    var $217 = trackIntroLetF(function ($219) {
                        return renam(trackIntroVar($219));
                    });
                    return function ($218) {
                        return renamLetF($217($218));
                    };
                })(),
                UsingHeaders: trackIntroUsingHeaders(function ($220) {
                    return renam(trackIntroVar($220));
                })
            };
        };
    })(rest));
};
var alphaNormalize = Dhall_Core_AST_Operations_Transformations.runAlgebraExpr(alphaNormalizeAlgG(Data_Variant.case_))(Data_Variant.inj()(new Data_Symbol.IsSymbol(function () {
    return "alphaNormalize";
}))(Dhall_Core_AST_Types_Basics["_S"])({
    ctx: Dhall_Context.empty
}));
module.exports = {
    shift: shift,
    subst: subst,
    shiftSubstShift: shiftSubstShift,
    shiftSubstShift0: shiftSubstShift0,
    rename: rename,
    alphaNormalize: alphaNormalize,
    freeIn: freeIn,
    DoNothing: DoNothing,
    Clear: Clear,
    Intro: Intro,
    trackIntroBindingBody: trackIntroBindingBody,
    trackIntroLetF: trackIntroLetF,
    trackIntroUsingHeaders: trackIntroUsingHeaders,
    trackIntroVar: trackIntroVar,
    trackVar: trackVar,
    trackIntro: trackIntro,
    trackIntroCases: trackIntroCases,
    trackIntroCasesM: trackIntroCasesM,
    freeInAlg: freeInAlg,
    shiftAlgG: shiftAlgG,
    shiftAlgGM: shiftAlgGM,
    shiftSubstAlgG: shiftSubstAlgG,
    shiftSubstAlgGM: shiftSubstAlgGM,
    doRenameAlgG: doRenameAlgG,
    alphaNormalizeAlgG: alphaNormalizeAlgG
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Semigroupoid/index.js":68,"../Data.Const/index.js":108,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor.Compose/index.js":134,"../Data.Functor.Product/index.js":140,"../Data.Functor.Variant/index.js":141,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Identity/index.js":150,"../Data.Maybe/index.js":187,"../Data.Monoid.Additive/index.js":189,"../Data.Monoid.Disj/index.js":191,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semiring/index.js":223,"../Data.Symbol/index.js":240,"../Data.These/index.js":242,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Data.Variant.Internal/index.js":258,"../Data.Variant/index.js":259,"../Dhall.Context/index.js":261,"../Dhall.Core.AST.Constructors/index.js":262,"../Dhall.Core.AST.Operations.Transformations/index.js":265,"../Dhall.Core.AST.Types.Basics/index.js":267,"../Dhall.Core.AST.Types/index.js":268,"../Matryoshka.Fold/index.js":358,"../Type.Equality/index.js":388}],292:[function(require,module,exports){
/* globals exports, setTimeout */
"use strict";

var AVar = function () {

  function MutableQueue () {
    this.head = null;
    this.last = null;
    this.size = 0;
  }

  function MutableCell (queue, value) {
    this.queue = queue;
    this.value = value;
    this.next  = null;
    this.prev  = null;
  }

  function AVar (value) {
    this.draining = false;
    this.error    = null;
    this.value    = value;
    this.takes    = new MutableQueue();
    this.reads    = new MutableQueue();
    this.puts     = new MutableQueue();
  }

  var EMPTY = {};

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function putLast (queue, value) {
    var cell = new MutableCell(queue, value);
    switch (queue.size) {
    case 0:
      queue.head = cell;
      break;
    case 1:
      cell.prev = queue.head;
      queue.head.next = cell;
      queue.last = cell;
      break;
    default:
      cell.prev = queue.last;
      queue.last.next = cell;
      queue.last = cell;
    }
    queue.size++;
    return cell;
  }

  function takeLast (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.last;
      queue.head.next = null;
      queue.last = null;
      break;
    default:
      cell = queue.last;
      queue.last = cell.prev;
      queue.last.next = null;
    }
    cell.prev = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function takeHead (queue) {
    var cell;
    switch (queue.size) {
    case 0:
      return null;
    case 1:
      cell = queue.head;
      queue.head = null;
      break;
    case 2:
      cell = queue.head;
      queue.last.prev = null;
      queue.head = queue.last;
      queue.last = null;
      break;
    default:
      cell = queue.head;
      queue.head = cell.next;
      queue.head.prev = null;
    }
    cell.next = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }

  function deleteCell (cell) {
    if (cell.queue === null) {
      return;
    }
    if (cell.queue.last === cell) {
      takeLast(cell.queue);
      return;
    }
    if (cell.queue.head === cell) {
      takeHead(cell.queue);
      return;
    }
    if (cell.prev) {
      cell.prev.next = cell.next;
    }
    if (cell.next) {
      cell.next.prev = cell.prev;
    }
    cell.queue.size--;
    cell.queue = null;
    cell.value = null;
    cell.next  = null;
    cell.prev  = null;
  }

  function drainVar (util, avar) {
    if (avar.draining) {
      return;
    }

    var ps = avar.puts;
    var ts = avar.takes;
    var rs = avar.reads;
    var p, r, t, value, rsize;

    avar.draining = true;

    while (1) { // eslint-disable-line no-constant-condition
      p = null;
      r = null;
      t = null;
      value = avar.value;
      rsize = rs.size;

      if (avar.error !== null) {
        value = util.left(avar.error);
        while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
          runEff(p.cb(value));
        }
        while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
          runEff(r(value));
        }
        while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
          runEff(t(value));
        }
        break;
      }

      // Process the next put. We do not immediately invoke the callback
      // because we want to preserve ordering. If there are takes/reads
      // we want to run those first.
      if (value === EMPTY && (p = takeHead(ps))) {
        avar.value = value = p.value;
      }

      if (value !== EMPTY) {
        // We go ahead and queue up the next take for the same reasons as
        // above. Invoking the read callbacks can affect the mutable queue.
        t = takeHead(ts);
        // We only want to process the reads queued up before running these
        // callbacks so we guard on rsize.
        while (rsize-- && (r = takeHead(rs))) {
          runEff(r(util.right(value)));
        }
        if (t !== null) {
          avar.value = EMPTY;
          runEff(t(util.right(value)));
        }
      }

      if (p !== null) {
        runEff(p.cb(util.right(void 0)));
      }

      // Callbacks could have queued up more items so we need to guard on the
      // actual mutable properties.
      if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
        break;
      }
    }
    avar.draining = false;
  }

  AVar.EMPTY      = EMPTY;
  AVar.putLast    = putLast;
  AVar.takeLast   = takeLast;
  AVar.takeHead   = takeHead;
  AVar.deleteCell = deleteCell;
  AVar.drainVar   = drainVar;

  return AVar;
}();

exports.empty = function () {
  return new AVar(AVar.EMPTY);
};

exports._newVar = function (value) {
  return function () {
    return new AVar(value);
  };
};

exports._killVar = function (util, error, avar) {
  return function () {
    if (avar.error === null) {
      avar.error = error;
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
    }
  };
};

exports._putVar = function (util, value, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._takeVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.takes, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._readVar = function (util, avar, cb) {
  return function () {
    var cell = AVar.putLast(avar.reads, cb);
    AVar.drainVar(util, avar);
    return function () {
      AVar.deleteCell(cell);
    };
  };
};

exports._tryPutVar = function (util, value, avar) {
  return function () {
    if (avar.value === AVar.EMPTY && avar.error === null) {
      avar.value = value;
      AVar.drainVar(util, avar);
      return true;
    } else {
      return false;
    }
  };
};

exports._tryTakeVar = function (util, avar) {
  return function () {
    var value = avar.value;
    if (value === AVar.EMPTY) {
      return util.nothing;
    } else {
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
      return util.just(value);
    }
  };
};

exports._tryReadVar = function (util, avar) {
  return function () {
    if (avar.value === AVar.EMPTY) {
      return util.nothing;
    } else {
      return util.just(avar.value);
    }
  };
};

exports._status = function (util, avar) {
  return function () {
    if (avar.error) {
      return util.killed(avar.error);
    }
    if (avar.value === AVar.EMPTY) {
      return util.empty;
    }
    return util.filled(avar.value);
  };
};


},{}],293:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var Filled = (function () {
    function Filled(value0) {
        this.value0 = value0;
    };
    Filled.create = function (value0) {
        return new Filled(value0);
    };
    return Filled;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var $$new = $foreign["_newVar"];
var isKilled = function (v) {
    if (v instanceof Killed) {
        return true;
    };
    return false;
};
var isFilled = function (v) {
    if (v instanceof Filled) {
        return true;
    };
    return false;
};
var isEmpty = function (v) {
    if (v instanceof Empty) {
        return true;
    };
    return false;
};
var ffiUtil = {
    left: Data_Either.Left.create,
    right: Data_Either.Right.create,
    nothing: Data_Maybe.Nothing.value,
    just: Data_Maybe.Just.create,
    killed: Killed.create,
    filled: Filled.create,
    empty: Empty.value
};
var kill = function (err) {
    return function (avar) {
        return $foreign["_killVar"](ffiUtil, err, avar);
    };
};
var put = function (value) {
    return function (avar) {
        return function (cb) {
            return $foreign["_putVar"](ffiUtil, value, avar, cb);
        };
    };
};
var read = function (avar) {
    return function (cb) {
        return $foreign["_readVar"](ffiUtil, avar, cb);
    };
};
var status = function (avar) {
    return $foreign["_status"](ffiUtil, avar);
};
var take = function (avar) {
    return function (cb) {
        return $foreign["_takeVar"](ffiUtil, avar, cb);
    };
};
var tryPut = function (value) {
    return function (avar) {
        return $foreign["_tryPutVar"](ffiUtil, value, avar);
    };
};
var tryRead = function (avar) {
    return $foreign["_tryReadVar"](ffiUtil, avar);
};
var tryTake = function (avar) {
    return $foreign["_tryTakeVar"](ffiUtil, avar);
};
module.exports = {
    Killed: Killed,
    Filled: Filled,
    Empty: Empty,
    "new": $$new,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill,
    status: status,
    isEmpty: isEmpty,
    isFilled: isFilled,
    isKilled: isKilled,
    empty: $foreign.empty
};

},{"../Data.Either/index.js":119,"../Data.Maybe/index.js":187,"./foreign.js":292}],294:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Effect_AVar = require("../Effect.AVar/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var tryTake = (function () {
    var $6 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($7) {
        return $6(Effect_AVar.tryTake($7));
    };
})();
var tryRead = (function () {
    var $8 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($9) {
        return $8(Effect_AVar.tryRead($9));
    };
})();
var tryPut = function (value) {
    var $10 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $11 = Effect_AVar.tryPut(value);
    return function ($12) {
        return $10($11($12));
    };
};
var take = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v = Effect_AVar.take(avar)(k)();
            return Effect_Aff.effectCanceler(v);
        };
    });
};
var status = (function () {
    var $13 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($14) {
        return $13(Effect_AVar.status($14));
    };
})();
var read = function (avar) {
    return Effect_Aff.makeAff(function (k) {
        return function __do() {
            var v = Effect_AVar.read(avar)(k)();
            return Effect_Aff.effectCanceler(v);
        };
    });
};
var put = function (value) {
    return function (avar) {
        return Effect_Aff.makeAff(function (k) {
            return function __do() {
                var v = Effect_AVar.put(value)(avar)(k)();
                return Effect_Aff.effectCanceler(v);
            };
        });
    };
};
var $$new = (function () {
    var $15 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    return function ($16) {
        return $15(Effect_AVar["new"]($16));
    };
})();
var kill = function (error) {
    var $17 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
    var $18 = Effect_AVar.kill(error);
    return function ($19) {
        return $17($18($19));
    };
};
var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
module.exports = {
    "new": $$new,
    empty: empty,
    status: status,
    take: take,
    tryTake: tryTake,
    put: put,
    tryPut: tryPut,
    read: read,
    tryRead: tryRead,
    kill: kill
};

},{"../Effect.AVar/index.js":293,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299}],295:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var MonadAff = function (MonadEffect0, liftAff) {
    this.MonadEffect0 = MonadEffect0;
    this.liftAff = liftAff;
};
var monadAffAff = new MonadAff(function () {
    return Effect_Aff.monadEffectAff;
}, Control_Category.identity(Control_Category.categoryFn));
var liftAff = function (dict) {
    return dict.liftAff;
};
var monadAffContT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Cont_Trans.monadEffectContT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $10 = Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)((dictMonadAff.MonadEffect0()).Monad0());
        var $11 = liftAff(dictMonadAff);
        return function ($12) {
            return $10($11($12));
        };
    })());
};
var monadAffExceptT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
        var $14 = liftAff(dictMonadAff);
        return function ($15) {
            return $13($14($15));
        };
    })());
};
var monadAffListT = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_List_Trans.monadEffectListT(dictMonadAff.MonadEffect0());
    }, (function () {
        var $16 = Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)((dictMonadAff.MonadEffect0()).Monad0());
        var $17 = liftAff(dictMonadAff);
        return function ($18) {
            return $16($17($18));
        };
    })());
};
var monadAffMaybe = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Maybe_Trans.monadEffectMaybe(dictMonadAff.MonadEffect0());
    }, (function () {
        var $19 = Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)((dictMonadAff.MonadEffect0()).Monad0());
        var $20 = liftAff(dictMonadAff);
        return function ($21) {
            return $19($20($21));
        };
    })());
};
var monadAffRWS = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_RWS_Trans.monadEffectRWS(dictMonoid)(dictMonadAff.MonadEffect0());
        }, (function () {
            var $22 = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
            var $23 = liftAff(dictMonadAff);
            return function ($24) {
                return $22($23($24));
            };
        })());
    };
};
var monadAffReader = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
    }, (function () {
        var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
        var $26 = liftAff(dictMonadAff);
        return function ($27) {
            return $25($26($27));
        };
    })());
};
var monadAffState = function (dictMonadAff) {
    return new MonadAff(function () {
        return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
    }, (function () {
        var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
        var $29 = liftAff(dictMonadAff);
        return function ($30) {
            return $28($29($30));
        };
    })());
};
var monadAffWriter = function (dictMonadAff) {
    return function (dictMonoid) {
        return new MonadAff(function () {
            return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
        }, (function () {
            var $31 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
            var $32 = liftAff(dictMonadAff);
            return function ($33) {
                return $31($32($33));
            };
        })());
    };
};
module.exports = {
    liftAff: liftAff,
    MonadAff: MonadAff,
    monadAffAff: monadAffAff,
    monadAffContT: monadAffContT,
    monadAffExceptT: monadAffExceptT,
    monadAffListT: monadAffListT,
    monadAffMaybe: monadAffMaybe,
    monadAffReader: monadAffReader,
    monadAffRWS: monadAffRWS,
    monadAffState: monadAffState,
    monadAffWriter: monadAffWriter
};

},{"../Control.Category/index.js":24,"../Control.Monad.Cont.Trans/index.js":36,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.List.Trans/index.js":45,"../Control.Monad.Maybe.Trans/index.js":46,"../Control.Monad.RWS.Trans/index.js":47,"../Control.Monad.Reader.Trans/index.js":49,"../Control.Monad.State.Trans/index.js":54,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Trans/index.js":58,"../Effect.Aff/index.js":297}],296:[function(require,module,exports){
(function (setImmediate,clearImmediate){
/* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
/* jshint -W083, -W098, -W003 */
"use strict";

var Aff = function () {
  // A unique value for empty.
  var EMPTY = {};

  /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */
  var PURE    = "Pure";
  var THROW   = "Throw";
  var CATCH   = "Catch";
  var SYNC    = "Sync";
  var ASYNC   = "Async";
  var BIND    = "Bind";
  var BRACKET = "Bracket";
  var FORK    = "Fork";
  var SEQ     = "Sequential";

  /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */
  var MAP   = "Map";
  var APPLY = "Apply";
  var ALT   = "Alt";

  // Various constructors used in interpretation
  var CONS      = "Cons";      // Cons-list, for stacks
  var RESUME    = "Resume";    // Continue indiscriminately
  var RELEASE   = "Release";   // Continue with bracket finalizers
  var FINALIZER = "Finalizer"; // A non-interruptible effect
  var FINALIZED = "Finalized"; // Marker for finalization
  var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
  var FIBER     = "Fiber";     // Actual fiber reference
  var THUNK     = "Thunk";     // Primed effect, ready to invoke

  function Aff(tag, _1, _2, _3) {
    this.tag = tag;
    this._1  = _1;
    this._2  = _2;
    this._3  = _3;
  }

  function AffCtr(tag) {
    var fn = function (_1, _2, _3) {
      return new Aff(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }

  function nonCanceler(error) {
    return new Aff(PURE, void 0);
  }

  function runEff(eff) {
    try {
      eff();
    } catch (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }

  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error) {
      return left(error);
    }
  }

  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error) {
      k(left(error))();
      return nonCanceler;
    }
  }

  var Scheduler = function () {
    var limit    = 1024;
    var size     = 0;
    var ix       = 0;
    var queue    = new Array(limit);
    var draining = false;

    function drain() {
      var thunk;
      draining = true;
      while (size !== 0) {
        size--;
        thunk     = queue[ix];
        queue[ix] = void 0;
        ix        = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }

    return {
      isDraining: function () {
        return draining;
      },
      enqueue: function (cb) {
        var i, tmp;
        if (size === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }

        queue[(ix + size) % limit] = cb;
        size++;

        if (!draining) {
          drain();
        }
      }
    };
  }();

  function Supervisor(util) {
    var fibers  = {};
    var fiberId = 0;
    var count   = 0;

    return {
      register: function (fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function (result) {
            return function () {
              count--;
              delete fibers[fid];
            };
          }
        });
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function () {
        return count === 0;
      },
      killAll: function (killError, cb) {
        return function () {
          if (count === 0) {
            return cb();
          }

          var killCount = 0;
          var kills     = {};

          function kill(fid) {
            kills[fid] = fibers[fid].kill(killError, function (result) {
              return function () {
                delete kills[fid];
                killCount--;
                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function () {
                    throw util.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }

          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill(k);
            }
          }

          fibers  = {};
          fiberId = 0;
          count   = 0;

          return function (error) {
            return new Aff(SYNC, function () {
              for (var k in kills) {
                if (kills.hasOwnProperty(k)) {
                  kills[k]();
                }
              }
            });
          };
        };
      }
    };
  }

  // Fiber state machine
  var SUSPENDED   = 0; // Suspended, pending a join.
  var CONTINUE    = 1; // Interpret the next instruction.
  var STEP_BIND   = 2; // Apply the next bind.
  var STEP_RESULT = 3; // Handle potential failure from a result.
  var PENDING     = 4; // An async effect is running.
  var RETURN      = 5; // The current stack has returned.
  var COMPLETED   = 6; // The entire fiber has completed.

  function Fiber(util, supervisor, aff) {
    // Monotonically increasing tick, increased on each asynchronous turn.
    var runTick = 0;

    // The current branch of the state machine.
    var status = SUSPENDED;

    // The current point of interest for the state machine branch.
    var step      = aff;  // Successful step
    var fail      = null; // Failure step
    var interrupt = null; // Asynchronous interrupt

    // Stack of continuations for the current fiber.
    var bhead = null;
    var btail = null;

    // Stack of attempts and finalizers for error recovery. Every `Cons` is also
    // tagged with current `interrupt` state. We use this to track which items
    // should be ignored or evaluated as a result of a kill.
    var attempts = null;

    // A special state is needed for Bracket, because it cannot be killed. When
    // we enter a bracket acquisition or finalizer, we increment the counter,
    // and then decrement once complete.
    var bracketCount = 0;

    // Each join gets a new id so they can be revoked.
    var joinId  = 0;
    var joins   = null;
    var rethrow = true;

    // Each invocation of `run` requires a tick. When an asynchronous effect is
    // resolved, we must check that the local tick coincides with the fiber
    // tick before resuming. This prevents multiple async continuations from
    // accidentally resuming the same fiber. A common example may be invoking
    // the provided callback in `makeAff` more than once, but it may also be an
    // async effect resuming after the fiber was already cancelled.
    function run(localRunTick) {
      var tmp, result, attempt;
      while (true) {
        tmp       = null;
        result    = null;
        attempt   = null;

        switch (status) {
        case STEP_BIND:
          status = CONTINUE;
          step   = bhead(step);
          if (btail === null) {
            bhead = null;
          } else {
            bhead = btail._1;
            btail = btail._2;
          }
          break;

        case STEP_RESULT:
          if (util.isLeft(step)) {
            status = RETURN;
            fail   = step;
            step   = null;
          } else if (bhead === null) {
            status = RETURN;
          } else {
            status = STEP_BIND;
            step   = util.fromRight(step);
          }
          break;

        case CONTINUE:
          switch (step.tag) {
          case BIND:
            if (bhead) {
              btail = new Aff(CONS, bhead, btail);
            }
            bhead  = step._2;
            status = CONTINUE;
            step   = step._1;
            break;

          case PURE:
            if (bhead === null) {
              status = RETURN;
              step   = util.right(step._1);
            } else {
              status = STEP_BIND;
              step   = step._1;
            }
            break;

          case SYNC:
            status = STEP_RESULT;
            step   = runSync(util.left, util.right, step._1);
            break;

          case ASYNC:
            status = PENDING;
            step   = runAsync(util.left, step._1, function (result) {
              return function () {
                if (runTick !== localRunTick) {
                  return;
                }
                runTick++;
                Scheduler.enqueue(function () {
                  // It's possible to interrupt the fiber between enqueuing and
                  // resuming, so we need to check that the runTick is still
                  // valid.
                  if (runTick !== localRunTick + 1) {
                    return;
                  }
                  status = STEP_RESULT;
                  step   = result;
                  run(runTick);
                });
              };
            });
            return;

          case THROW:
            status = RETURN;
            fail   = util.left(step._1);
            step   = null;
            break;

          // Enqueue the Catch so that we can call the error handler later on
          // in case of an exception.
          case CATCH:
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead    = null;
            btail    = null;
            status   = CONTINUE;
            step     = step._1;
            break;

          // Enqueue the Bracket so that we can call the appropriate handlers
          // after resource acquisition.
          case BRACKET:
            bracketCount++;
            if (bhead === null) {
              attempts = new Aff(CONS, step, attempts, interrupt);
            } else {
              attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
            }
            bhead  = null;
            btail  = null;
            status = CONTINUE;
            step   = step._1;
            break;

          case FORK:
            status = STEP_RESULT;
            tmp    = Fiber(util, supervisor, step._2);
            if (supervisor) {
              supervisor.register(tmp);
            }
            if (step._1) {
              tmp.run();
            }
            step = util.right(tmp);
            break;

          case SEQ:
            status = CONTINUE;
            step   = sequential(util, supervisor, step._1);
            break;
          }
          break;

        case RETURN:
          bhead = null;
          btail = null;
          // If the current stack has returned, and we have no other stacks to
          // resume or finalizers to run, the fiber has halted and we can
          // invoke all join callbacks. Otherwise we need to resume.
          if (attempts === null) {
            status = COMPLETED;
            step   = interrupt || fail || step;
          } else {
            // The interrupt status for the enqueued item.
            tmp      = attempts._3;
            attempt  = attempts._1;
            attempts = attempts._2;

            switch (attempt.tag) {
            // We cannot recover from an unmasked interrupt. Otherwise we should
            // continue stepping, or run the exception handler if an exception
            // was raised.
            case CATCH:
              // We should compare the interrupt status as well because we
              // only want it to apply if there has been an interrupt since
              // enqueuing the catch.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                status = RETURN;
              } else if (fail) {
                status = CONTINUE;
                step   = attempt._2(util.fromLeft(fail));
                fail   = null;
              }
              break;

            // We cannot resume from an unmasked interrupt or exception.
            case RESUME:
              // As with Catch, we only want to ignore in the case of an
              // interrupt since enqueing the item.
              if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                status = RETURN;
              } else {
                bhead  = attempt._1;
                btail  = attempt._2;
                status = STEP_BIND;
                step   = util.fromRight(step);
              }
              break;

            // If we have a bracket, we should enqueue the handlers,
            // and continue with the success branch only if the fiber has
            // not been interrupted. If the bracket acquisition failed, we
            // should not run either.
            case BRACKET:
              bracketCount--;
              if (fail === null) {
                result   = util.fromRight(step);
                // We need to enqueue the Release with the same interrupt
                // status as the Bracket that is initiating it.
                attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                // We should only coninue as long as the interrupt status has not changed or
                // we are currently within a non-interruptable finalizer.
                if (interrupt === tmp || bracketCount > 0) {
                  status = CONTINUE;
                  step   = attempt._3(result);
                }
              }
              break;

            // Enqueue the appropriate handler. We increase the bracket count
            // because it should not be cancelled.
            case RELEASE:
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              // It has only been killed if the interrupt status has changed
              // since we enqueued the item, and the bracket count is 0. If the
              // bracket count is non-zero then we are in a masked state so it's
              // impossible to be killed.
              if (interrupt && interrupt !== tmp && bracketCount === 0) {
                step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
              } else if (fail) {
                step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
              } else {
                step = attempt._1.completed(util.fromRight(step))(attempt._2);
              }
              fail = null;
              bracketCount++;
              break;

            case FINALIZER:
              bracketCount++;
              attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
              status   = CONTINUE;
              step     = attempt._1;
              break;

            case FINALIZED:
              bracketCount--;
              status = RETURN;
              step   = attempt._1;
              fail   = attempt._2;
              break;
            }
          }
          break;

        case COMPLETED:
          for (var k in joins) {
            if (joins.hasOwnProperty(k)) {
              rethrow = rethrow && joins[k].rethrow;
              runEff(joins[k].handler(step));
            }
          }
          joins = null;
          // If we have an interrupt and a fail, then the thread threw while
          // running finalizers. This should always rethrow in a fresh stack.
          if (interrupt && fail) {
            setTimeout(function () {
              throw util.fromLeft(fail);
            }, 0);
          // If we have an unhandled exception, and no other fiber has joined
          // then we need to throw the exception in a fresh stack.
          } else if (util.isLeft(step) && rethrow) {
            setTimeout(function () {
              // Guard on reathrow because a completely synchronous fiber can
              // still have an observer which was added after-the-fact.
              if (rethrow) {
                throw util.fromLeft(step);
              }
            }, 0);
          }
          return;
        case SUSPENDED:
          status = CONTINUE;
          break;
        case PENDING: return;
        }
      }
    }

    function onComplete(join) {
      return function () {
        if (status === COMPLETED) {
          rethrow = rethrow && join.rethrow;
          join.handler(step)();
          return function () {};
        }

        var jid    = joinId++;
        joins      = joins || {};
        joins[jid] = join;

        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }

    function kill(error, cb) {
      return function () {
        if (status === COMPLETED) {
          cb(util.right(void 0))();
          return function () {};
        }

        var canceler = onComplete({
          rethrow: false,
          handler: function (/* unused */) {
            return cb(util.right(void 0));
          }
        })();

        switch (status) {
        case SUSPENDED:
          interrupt = util.left(error);
          status    = COMPLETED;
          step      = interrupt;
          run(runTick);
          break;
        case PENDING:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            if (status === PENDING) {
              attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
            }
            status   = RETURN;
            step     = null;
            fail     = null;
            run(++runTick);
          }
          break;
        default:
          if (interrupt === null) {
            interrupt = util.left(error);
          }
          if (bracketCount === 0) {
            status = RETURN;
            step   = null;
            fail   = null;
          }
        }

        return canceler;
      };
    }

    function join(cb) {
      return function () {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();
        if (status === SUSPENDED) {
          run(runTick);
        }
        return canceler;
      };
    }

    return {
      kill: kill,
      join: join,
      onComplete: onComplete,
      isSuspended: function () {
        return status === SUSPENDED;
      },
      run: function () {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function () {
              run(runTick);
            });
          } else {
            run(runTick);
          }
        }
      }
    };
  }

  function runPar(util, supervisor, par, cb) {
    // Table of all forked fibers.
    var fiberId   = 0;
    var fibers    = {};

    // Table of currently running cancelers, as a product of `Alt` behavior.
    var killId    = 0;
    var kills     = {};

    // Error used for early cancelation on Alt branches.
    var early     = new Error("[ParAff] Early exit");

    // Error used to kill the entire tree.
    var interrupt = null;

    // The root pointer of the tree.
    var root      = EMPTY;

    // Walks a tree, invoking all the cancelers. Returns the table of pending
    // cancellation fibers.
    function kill(error, par, cb) {
      var step  = par;
      var head  = null;
      var tail  = null;
      var count = 0;
      var kills = {};
      var tmp, kid;

      loop: while (true) {
        tmp = null;

        switch (step.tag) {
        case FORKED:
          if (step._3 === EMPTY) {
            tmp = fibers[step._1];
            kills[count++] = tmp.kill(error, function (result) {
              return function () {
                count--;
                if (count === 0) {
                  cb(result)();
                }
              };
            });
          }
          // Terminal case.
          if (head === null) {
            break loop;
          }
          // Go down the right side of the tree.
          step = head._2;
          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
          break;
        case MAP:
          step = step._2;
          break;
        case APPLY:
        case ALT:
          if (head) {
            tail = new Aff(CONS, head, tail);
          }
          head = step;
          step = step._1;
          break;
        }
      }

      if (count === 0) {
        cb(util.right(void 0))();
      } else {
        // Run the cancelation effects. We alias `count` because it's mutable.
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills[kid] = kills[kid]();
        }
      }

      return kills;
    }

    // When a fiber resolves, we need to bubble back up the tree with the
    // result, computing the applicative nodes.
    function join(result, head, tail) {
      var fail, step, lhs, rhs, tmp, kid;

      if (util.isLeft(result)) {
        fail = result;
        step = null;
      } else {
        step = result;
        fail = null;
      }

      loop: while (true) {
        lhs = null;
        rhs = null;
        tmp = null;
        kid = null;

        // We should never continue if the entire tree has been interrupted.
        if (interrupt !== null) {
          return;
        }

        // We've made it all the way to the root of the tree, which means
        // the tree has fully evaluated.
        if (head === null) {
          cb(fail || step)();
          return;
        }

        // The tree has already been computed, so we shouldn't try to do it
        // again. This should never happen.
        // TODO: Remove this?
        if (head._3 !== EMPTY) {
          return;
        }

        switch (head.tag) {
        case MAP:
          if (fail === null) {
            head._3 = util.right(head._1(util.fromRight(step)));
            step    = head._3;
          } else {
            head._3 = fail;
          }
          break;
        case APPLY:
          lhs = head._1._3;
          rhs = head._2._3;
          // If we have a failure we should kill the other side because we
          // can't possible yield a result anymore.
          if (fail) {
            head._3 = fail;
            tmp     = true;
            kid     = killId++;

            kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(fail, null, null);
                } else {
                  join(fail, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          } else if (lhs === EMPTY || rhs === EMPTY) {
            // We can only proceed if both sides have resolved.
            return;
          } else {
            step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
            head._3 = step;
          }
          break;
        case ALT:
          lhs = head._1._3;
          rhs = head._2._3;
          // We can only proceed if both have resolved or we have a success
          if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
            return;
          }
          // If both sides resolve with an error, we should continue with the
          // first error
          if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
            fail    = step === lhs ? rhs : lhs;
            step    = null;
            head._3 = fail;
          } else {
            head._3 = step;
            tmp     = true;
            kid     = killId++;
            // Once a side has resolved, we need to cancel the side that is still
            // pending before we can continue.
            kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
              return function () {
                delete kills[kid];
                if (tmp) {
                  tmp = false;
                } else if (tail === null) {
                  join(step, null, null);
                } else {
                  join(step, tail._1, tail._2);
                }
              };
            });

            if (tmp) {
              tmp = false;
              return;
            }
          }
          break;
        }

        if (tail === null) {
          head = null;
        } else {
          head = tail._1;
          tail = tail._2;
        }
      }
    }

    function resolve(fiber) {
      return function (result) {
        return function () {
          delete fibers[fiber._1];
          fiber._3 = result;
          join(result, fiber._2._1, fiber._2._2);
        };
      };
    }

    // Walks the applicative tree, substituting non-applicative nodes with
    // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
    // as a mutable slot for memoization. In an unresolved state, the `_3`
    // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
    // the left side first, because both operations are left-associative. As
    // we `RETURN` from those branches, we then walk the right side.
    function run() {
      var status = CONTINUE;
      var step   = par;
      var head   = null;
      var tail   = null;
      var tmp, fid;

      loop: while (true) {
        tmp = null;
        fid = null;

        switch (status) {
        case CONTINUE:
          switch (step.tag) {
          case MAP:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(MAP, step._1, EMPTY, EMPTY);
            step = step._2;
            break;
          case APPLY:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(APPLY, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = new Aff(ALT, EMPTY, step._2, EMPTY);
            step = step._1;
            break;
          default:
            // When we hit a leaf value, we suspend the stack in the `FORKED`.
            // When the fiber resolves, it can bubble back up the tree.
            fid    = fiberId++;
            status = RETURN;
            tmp    = step;
            step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
            tmp    = Fiber(util, supervisor, tmp);
            tmp.onComplete({
              rethrow: false,
              handler: resolve(step)
            })();
            fibers[fid] = tmp;
            if (supervisor) {
              supervisor.register(tmp);
            }
          }
          break;
        case RETURN:
          // Terminal case, we are back at the root.
          if (head === null) {
            break loop;
          }
          // If we are done with the right side, we need to continue down the
          // left. Otherwise we should continue up the stack.
          if (head._1 === EMPTY) {
            head._1 = step;
            status  = CONTINUE;
            step    = head._2;
            head._2 = EMPTY;
          } else {
            head._2 = step;
            step    = head;
            if (tail === null) {
              head  = null;
            } else {
              head  = tail._1;
              tail  = tail._2;
            }
          }
        }
      }

      // Keep a reference to the tree root so it can be cancelled.
      root = step;

      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }

    // Cancels the entire tree. If there are already subtrees being canceled,
    // we need to first cancel those joins. We will then add fresh joins for
    // all pending branches including those that were in the process of being
    // canceled.
    function cancel(error, cb) {
      interrupt = util.left(error);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }

      kills = null;
      var newKills = kill(error, root, cb);

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            for (var kid in newKills) {
              if (newKills.hasOwnProperty(kid)) {
                newKills[kid]();
              }
            }
            return nonCanceler;
          };
        });
      };
    }

    run();

    return function (killError) {
      return new Aff(ASYNC, function (killCb) {
        return function () {
          return cancel(killError, killCb);
        };
      });
    };
  }

  function sequential(util, supervisor, par) {
    return new Aff(ASYNC, function (cb) {
      return function () {
        return runPar(util, supervisor, par, cb);
      };
    });
  }

  Aff.EMPTY       = EMPTY;
  Aff.Pure        = AffCtr(PURE);
  Aff.Throw       = AffCtr(THROW);
  Aff.Catch       = AffCtr(CATCH);
  Aff.Sync        = AffCtr(SYNC);
  Aff.Async       = AffCtr(ASYNC);
  Aff.Bind        = AffCtr(BIND);
  Aff.Bracket     = AffCtr(BRACKET);
  Aff.Fork        = AffCtr(FORK);
  Aff.Seq         = AffCtr(SEQ);
  Aff.ParMap      = AffCtr(MAP);
  Aff.ParApply    = AffCtr(APPLY);
  Aff.ParAlt      = AffCtr(ALT);
  Aff.Fiber       = Fiber;
  Aff.Supervisor  = Supervisor;
  Aff.Scheduler   = Scheduler;
  Aff.nonCanceler = nonCanceler;

  return Aff;
}();

exports._pure = Aff.Pure;

exports._throwError = Aff.Throw;

exports._catchError = function (aff) {
  return function (k) {
    return Aff.Catch(aff, k);
  };
};

exports._map = function (f) {
  return function (aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function (value) {
        return Aff.Pure(f(value));
      });
    }
  };
};

exports._bind = function (aff) {
  return function (k) {
    return Aff.Bind(aff, k);
  };
};

exports._fork = function (immediate) {
  return function (aff) {
    return Aff.Fork(immediate, aff);
  };
};

exports._liftEffect = Aff.Sync;

exports._parAffMap = function (f) {
  return function (aff) {
    return Aff.ParMap(f, aff);
  };
};

exports._parAffApply = function (aff1) {
  return function (aff2) {
    return Aff.ParApply(aff1, aff2);
  };
};

exports._parAffAlt = function (aff1) {
  return function (aff2) {
    return Aff.ParAlt(aff1, aff2);
  };
};

exports.makeAff = Aff.Async;

exports.generalBracket = function (acquire) {
  return function (options) {
    return function (k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
};

exports._makeFiber = function (util, aff) {
  return function () {
    return Aff.Fiber(util, null, aff);
  };
};

exports._makeSupervisedFiber = function (util, aff) {
  return function () {
    var supervisor = Aff.Supervisor(util);
    return {
      fiber: Aff.Fiber(util, supervisor, aff),
      supervisor: supervisor
    };
  };
};

exports._killAll = function (error, supervisor, cb) {
  return supervisor.killAll(error, cb);
};

exports._delay = function () {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }

  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }

  return function (right, ms) {
    return Aff.Async(function (cb) {
      return function () {
        var timer = setDelay(ms, cb(right()));
        return function () {
          return Aff.Sync(function () {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();

exports._sequential = Aff.Seq;

}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"timers":444}],297:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Fiber = function (x) {
    return x;
};
var FFIUtil = function (x) {
    return x;
};
var Canceler = function (x) {
    return x;
};
var suspendAff = $foreign["_fork"](false);
var newtypeCanceler = new Data_Newtype.Newtype(function (n) {
    return n;
}, Canceler);
var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
var functorAff = new Data_Functor.Functor($foreign["_map"]);
var forkAff = $foreign["_fork"](true);
var ffiUtil = (function () {
    var unsafeFromRight = function (v) {
        if (v instanceof Data_Either.Right) {
            return v.value0;
        };
        if (v instanceof Data_Either.Left) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
    };
    var unsafeFromLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return v.value0;
        };
        if (v instanceof Data_Either.Right) {
            return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
        };
        throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
    };
    var isLeft = function (v) {
        if (v instanceof Data_Either.Left) {
            return true;
        };
        if (v instanceof Data_Either.Right) {
            return false;
        };
        throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
    };
    return {
        isLeft: isLeft,
        fromLeft: unsafeFromLeft,
        fromRight: unsafeFromRight,
        left: Data_Either.Left.create,
        right: Data_Either.Right.create
    };
})();
var makeFiber = function (aff) {
    return $foreign["_makeFiber"](ffiUtil, aff);
};
var launchAff = function (aff) {
    return function __do() {
        var v = makeFiber(aff)();
        v.run();
        return v;
    };
};
var launchAff_ = (function () {
    var $49 = Data_Functor["void"](Effect.functorEffect);
    return function ($50) {
        return $49(launchAff($50));
    };
})();
var launchSuspendedAff = makeFiber;
var delay = function (v) {
    return $foreign["_delay"](Data_Either.Right.create, v);
};
var bracket = function (acquire) {
    return function (completed) {
        return $foreign.generalBracket(acquire)({
            killed: Data_Function["const"](completed),
            failed: Data_Function["const"](completed),
            completed: Data_Function["const"](completed)
        });
    };
};
var applyParAff = new Control_Apply.Apply(function () {
    return functorParAff;
}, $foreign["_parAffApply"]);
var semigroupParAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadAff = new Control_Monad.Monad(function () {
    return applicativeAff;
}, function () {
    return bindAff;
});
var bindAff = new Control_Bind.Bind(function () {
    return applyAff;
}, $foreign["_bind"]);
var applyAff = new Control_Apply.Apply(function () {
    return functorAff;
}, Control_Monad.ap(monadAff));
var applicativeAff = new Control_Applicative.Applicative(function () {
    return applyAff;
}, $foreign["_pure"]);
var cancelWith = function (aff) {
    return function (v) {
        return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
            killed: function (e) {
                return function (v1) {
                    return v(e);
                };
            },
            failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
            completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
        })(Data_Function["const"](aff));
    };
};
var $$finally = function (fin) {
    return function (a) {
        return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
    };
};
var invincible = function (a) {
    return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
};
var lazyAff = new Control_Lazy.Lazy(function (f) {
    return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
});
var semigroupAff = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup)));
};
var monadEffectAff = new Effect_Class.MonadEffect(function () {
    return monadAff;
}, $foreign["_liftEffect"]);
var effectCanceler = (function () {
    var $51 = Effect_Class.liftEffect(monadEffectAff);
    return function ($52) {
        return Canceler(Data_Function["const"]($51($52)));
    };
})();
var joinFiber = function (v) {
    return $foreign.makeAff(function (k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
    });
};
var functorFiber = new Data_Functor.Functor(function (f) {
    return function (t) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
    };
});
var applyFiber = new Control_Apply.Apply(function () {
    return functorFiber;
}, function (t1) {
    return function (t2) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
    };
});
var applicativeFiber = new Control_Applicative.Applicative(function () {
    return applyFiber;
}, function (a) {
    return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
});
var killFiber = function (e) {
    return function (v) {
        return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
            if (v1) {
                return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
            };
            return $foreign.makeAff(function (k) {
                return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
            });
        });
    };
};
var fiberCanceler = (function () {
    var $53 = Data_Function.flip(killFiber);
    return function ($54) {
        return Canceler($53($54));
    };
})();
var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
    return monadAff;
}, $foreign["_throwError"]);
var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
    return monadThrowAff;
}, $foreign["_catchError"]);
var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
var runAff = function (k) {
    return function (aff) {
        return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $55 = Effect_Class.liftEffect(monadEffectAff);
            return function ($56) {
                return $55(k($56));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var runAff_ = function (k) {
    return function (aff) {
        return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
    };
};
var runSuspendedAff = function (k) {
    return function (aff) {
        return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)((function () {
            var $57 = Effect_Class.liftEffect(monadEffectAff);
            return function ($58) {
                return $57(k($58));
            };
        })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
    };
};
var parallelAff = new Control_Parallel_Class.Parallel(function () {
    return applicativeParAff;
}, function () {
    return monadAff;
}, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
var applicativeParAff = new Control_Applicative.Applicative(function () {
    return applyParAff;
}, (function () {
    var $59 = Control_Parallel_Class.parallel(parallelAff);
    var $60 = Control_Applicative.pure(applicativeAff);
    return function ($61) {
        return $59($60($61));
    };
})());
var monoidParAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupParAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)));
};
var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return function (err) {
            return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
        };
    };
});
var supervise = function (aff) {
    var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
    var killAll = function (err) {
        return function (sup) {
            return $foreign.makeAff(function (k) {
                return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
            });
        };
    };
    var acquire = function __do() {
        var v = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
        v.fiber.run();
        return v;
    };
    return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
        killed: function (err) {
            return function (sup) {
                return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
            };
        },
        failed: Data_Function["const"](killAll(killError)),
        completed: Data_Function["const"](killAll(killError))
    })(function ($62) {
        return joinFiber((function (v) {
            return v.fiber;
        })($62));
    });
};
var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadAff;
}, function (k) {
    var go = function (a) {
        return Control_Bind.bind(bindAff)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeAff)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return go(v.value0);
            };
            throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ v.constructor.name ]);
        });
    };
    return go;
});
var monoidAff = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAff(dictMonoid.Semigroup0());
    }, Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)));
};
var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
var monoidCanceler = new Data_Monoid.Monoid(function () {
    return semigroupCanceler;
}, nonCanceler);
var never = $foreign.makeAff(function (v) {
    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
});
var apathize = (function () {
    var $63 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
    return function ($64) {
        return $63(attempt($64));
    };
})();
var altParAff = new Control_Alt.Alt(function () {
    return functorParAff;
}, $foreign["_parAffAlt"]);
var altAff = new Control_Alt.Alt(function () {
    return functorAff;
}, function (a1) {
    return function (a2) {
        return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
    };
});
var plusAff = new Control_Plus.Plus(function () {
    return altAff;
}, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
var plusParAff = new Control_Plus.Plus(function () {
    return altParAff;
}, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
var alternativeParAff = new Control_Alternative.Alternative(function () {
    return applicativeParAff;
}, function () {
    return plusParAff;
});
module.exports = {
    Canceler: Canceler,
    launchAff: launchAff,
    launchAff_: launchAff_,
    launchSuspendedAff: launchSuspendedAff,
    runAff: runAff,
    runAff_: runAff_,
    runSuspendedAff: runSuspendedAff,
    forkAff: forkAff,
    suspendAff: suspendAff,
    supervise: supervise,
    attempt: attempt,
    apathize: apathize,
    delay: delay,
    never: never,
    "finally": $$finally,
    invincible: invincible,
    killFiber: killFiber,
    joinFiber: joinFiber,
    cancelWith: cancelWith,
    bracket: bracket,
    nonCanceler: nonCanceler,
    effectCanceler: effectCanceler,
    fiberCanceler: fiberCanceler,
    functorAff: functorAff,
    applyAff: applyAff,
    applicativeAff: applicativeAff,
    bindAff: bindAff,
    monadAff: monadAff,
    semigroupAff: semigroupAff,
    monoidAff: monoidAff,
    altAff: altAff,
    plusAff: plusAff,
    monadRecAff: monadRecAff,
    monadThrowAff: monadThrowAff,
    monadErrorAff: monadErrorAff,
    monadEffectAff: monadEffectAff,
    lazyAff: lazyAff,
    functorParAff: functorParAff,
    applyParAff: applyParAff,
    applicativeParAff: applicativeParAff,
    semigroupParAff: semigroupParAff,
    monoidParAff: monoidParAff,
    altParAff: altParAff,
    plusParAff: plusParAff,
    alternativeParAff: alternativeParAff,
    parallelAff: parallelAff,
    functorFiber: functorFiber,
    applyFiber: applyFiber,
    applicativeFiber: applicativeFiber,
    newtypeCanceler: newtypeCanceler,
    semigroupCanceler: semigroupCanceler,
    monoidCanceler: monoidCanceler,
    makeAff: $foreign.makeAff,
    generalBracket: $foreign.generalBracket
};

},{"../Control.Alt/index.js":14,"../Control.Alternative/index.js":15,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Lazy/index.js":34,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad/index.js":60,"../Control.Parallel.Class/index.js":63,"../Control.Parallel/index.js":64,"../Control.Plus/index.js":65,"../Data.Either/index.js":119,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect.Unsafe/index.js":307,"../Effect/index.js":309,"../Partial.Unsafe/index.js":378,"../Unsafe.Coerce/index.js":391,"./foreign.js":296}],298:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var warnShow = function (dictMonadEffect) {
    return function (dictShow) {
        var $14 = Effect_Class.liftEffect(dictMonadEffect);
        var $15 = Effect_Console.warnShow(dictShow);
        return function ($16) {
            return $14($15($16));
        };
    };
};
var warn = function (dictMonadEffect) {
    var $17 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($18) {
        return $17(Effect_Console.warn($18));
    };
};
var timeEnd = function (dictMonadEffect) {
    var $19 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($20) {
        return $19(Effect_Console.timeEnd($20));
    };
};
var time = function (dictMonadEffect) {
    var $21 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($22) {
        return $21(Effect_Console.time($22));
    };
};
var logShow = function (dictMonadEffect) {
    return function (dictShow) {
        var $23 = Effect_Class.liftEffect(dictMonadEffect);
        var $24 = Effect_Console.logShow(dictShow);
        return function ($25) {
            return $23($24($25));
        };
    };
};
var log = function (dictMonadEffect) {
    var $26 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($27) {
        return $26(Effect_Console.log($27));
    };
};
var infoShow = function (dictMonadEffect) {
    return function (dictShow) {
        var $28 = Effect_Class.liftEffect(dictMonadEffect);
        var $29 = Effect_Console.infoShow(dictShow);
        return function ($30) {
            return $28($29($30));
        };
    };
};
var info = function (dictMonadEffect) {
    var $31 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($32) {
        return $31(Effect_Console.info($32));
    };
};
var errorShow = function (dictMonadEffect) {
    return function (dictShow) {
        var $33 = Effect_Class.liftEffect(dictMonadEffect);
        var $34 = Effect_Console.errorShow(dictShow);
        return function ($35) {
            return $33($34($35));
        };
    };
};
var error = function (dictMonadEffect) {
    var $36 = Effect_Class.liftEffect(dictMonadEffect);
    return function ($37) {
        return $36(Effect_Console.error($37));
    };
};
module.exports = {
    log: log,
    logShow: logShow,
    warn: warn,
    warnShow: warnShow,
    error: error,
    errorShow: errorShow,
    info: info,
    infoShow: infoShow,
    time: time,
    timeEnd: timeEnd
};

},{"../Effect.Class/index.js":299,"../Effect.Console/index.js":301}],299:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Effect = require("../Effect/index.js");
var MonadEffect = function (Monad0, liftEffect) {
    this.Monad0 = Monad0;
    this.liftEffect = liftEffect;
};
var monadEffectEffect = new MonadEffect(function () {
    return Effect.monadEffect;
}, Control_Category.identity(Control_Category.categoryFn));
var liftEffect = function (dict) {
    return dict.liftEffect;
};
module.exports = {
    liftEffect: liftEffect,
    MonadEffect: MonadEffect,
    monadEffectEffect: monadEffectEffect
};

},{"../Control.Category/index.js":24,"../Effect/index.js":309}],300:[function(require,module,exports){
"use strict";

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

exports.info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

exports.time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

exports.timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

},{}],301:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var warnShow = function (dictShow) {
    return function (a) {
        return $foreign.warn(Data_Show.show(dictShow)(a));
    };
};
var logShow = function (dictShow) {
    return function (a) {
        return $foreign.log(Data_Show.show(dictShow)(a));
    };
};
var infoShow = function (dictShow) {
    return function (a) {
        return $foreign.info(Data_Show.show(dictShow)(a));
    };
};
var errorShow = function (dictShow) {
    return function (a) {
        return $foreign.error(Data_Show.show(dictShow)(a));
    };
};
module.exports = {
    logShow: logShow,
    warnShow: warnShow,
    errorShow: errorShow,
    infoShow: infoShow,
    log: $foreign.log,
    warn: $foreign.warn,
    error: $foreign.error,
    info: $foreign.info,
    time: $foreign.time,
    timeEnd: $foreign.timeEnd
};

},{"../Data.Show/index.js":226,"./foreign.js":300}],302:[function(require,module,exports){
"use strict";

exports.showErrorImpl = function (err) {
  return err.stack || err.toString();
};

exports.error = function (msg) {
  return new Error(msg);
};

exports.message = function (e) {
  return e.message;
};

exports.name = function (e) {
  return e.name || "Error";
};

exports.stackImpl = function (just) {
  return function (nothing) {
    return function (e) {
      return e.stack ? just(e.stack) : nothing;
    };
  };
};

exports.throwException = function (e) {
  return function () {
    throw e;
  };
};

exports.catchException = function (c) {
  return function (t) {
    return function () {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c(e)();
        } else {
          return c(new Error(e.toString()))();
        }
      }
    };
  };
};

},{}],303:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var $$try = function (action) {
    return $foreign.catchException((function () {
        var $0 = Control_Applicative.pure(Effect.applicativeEffect);
        return function ($1) {
            return $0(Data_Either.Left.create($1));
        };
    })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};
var $$throw = function ($2) {
    return $foreign.throwException($foreign.error($2));
};
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack,
    "throw": $$throw,
    "try": $$try,
    showError: showError,
    error: $foreign.error,
    message: $foreign.message,
    name: $foreign.name,
    throwException: $foreign.throwException,
    catchException: $foreign.catchException
};

},{"../Control.Applicative/index.js":17,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Show/index.js":226,"../Effect/index.js":309,"./foreign.js":302}],304:[function(require,module,exports){
"use strict";

exports.new = function (val) {
  return function () {
    return { value: val };
  };
};

exports.read = function (ref) {
  return function () {
    return ref.value;
  };
};

exports["modify'"] = function (f) {
  return function (ref) {
    return function () {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

exports.write = function (val) {
  return function (ref) {
    return function () {
      ref.value = val;
      return {};
    };
  };
};

},{}],305:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var modify = function (f) {
    return $foreign["modify'"](function (s) {
        var s$prime = f(s);
        return {
            state: s$prime,
            value: s$prime
        };
    });
};
var modify_ = function (f) {
    return function (s) {
        return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
    };
};
module.exports = {
    modify: modify,
    modify_: modify_,
    "new": $foreign["new"],
    read: $foreign.read,
    "modify'": $foreign["modify'"],
    write: $foreign.write
};

},{"../Data.Functor/index.js":143,"../Effect/index.js":309,"./foreign.js":304}],306:[function(require,module,exports){
"use strict";

exports.unsafePerformEffect = function (f) {
  return f();
};

},{}],307:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafePerformEffect: $foreign.unsafePerformEffect
};

},{"./foreign.js":306}],308:[function(require,module,exports){
"use strict";

exports.pureE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],309:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var monadEffect = new Control_Monad.Monad(function () {
    return applicativeEffect;
}, function () {
    return bindEffect;
});
var bindEffect = new Control_Bind.Bind(function () {
    return applyEffect;
}, $foreign.bindE);
var applyEffect = new Control_Apply.Apply(function () {
    return functorEffect;
}, Control_Monad.ap(monadEffect));
var applicativeEffect = new Control_Applicative.Applicative(function () {
    return applyEffect;
}, $foreign.pureE);
var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
var semigroupEffect = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
};
var monoidEffect = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupEffect(dictMonoid.Semigroup0());
    }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
};
module.exports = {
    functorEffect: functorEffect,
    applyEffect: applyEffect,
    applicativeEffect: applicativeEffect,
    bindEffect: bindEffect,
    monadEffect: monadEffect,
    semigroupEffect: semigroupEffect,
    monoidEffect: monoidEffect,
    untilE: $foreign.untilE,
    whileE: $foreign.whileE,
    forE: $foreign.forE,
    foreachE: $foreign.foreachE
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.Functor/index.js":143,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"./foreign.js":308}],310:[function(require,module,exports){
"use strict";

exports.unsafeReadPropImpl = function (f, s, key, value) {
  return value == null ? f : s(value[key]);
};

exports.unsafeHasOwnProperty = function (prop, value) {
  return Object.prototype.hasOwnProperty.call(value, prop);
};

exports.unsafeHasProperty = function (prop, value) {
  return prop in value;
};

},{}],311:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Foreign = require("../Foreign/index.js");
var Indexable = function (ix) {
    this.ix = ix;
};
var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
    this.errorAt = errorAt;
    this.hasOwnProperty = hasOwnProperty;
    this.hasProperty = hasProperty;
    this.index = index;
};
var unsafeReadProp = function (k) {
    return function (value) {
        return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
    };
};
var readProp = unsafeReadProp;
var readIndex = unsafeReadProp;
var ix = function (dict) {
    return dict.ix;
};
var index = function (dict) {
    return dict.index;
};
var indexableExceptT = new Indexable(function (dictIndex) {
    return function (f) {
        return function (i) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
        };
    };
});
var indexableForeign = new Indexable(function (dictIndex) {
    return index(dictIndex);
});
var hasPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasProperty(v, value);
        };
        return false;
    };
};
var hasProperty = function (dict) {
    return dict.hasProperty;
};
var hasOwnPropertyImpl = function (v) {
    return function (value) {
        if (Foreign.isNull(value)) {
            return false;
        };
        if (Foreign.isUndefined(value)) {
            return false;
        };
        if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
            return $foreign.unsafeHasOwnProperty(v, value);
        };
        return false;
    };
};
var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
var hasOwnProperty = function (dict) {
    return dict.hasOwnProperty;
};
var errorAt = function (dict) {
    return dict.errorAt;
};
module.exports = {
    Index: Index,
    Indexable: Indexable,
    readProp: readProp,
    readIndex: readIndex,
    ix: ix,
    index: index,
    hasProperty: hasProperty,
    hasOwnProperty: hasOwnProperty,
    errorAt: errorAt,
    indexString: indexString,
    indexInt: indexInt,
    indexableForeign: indexableForeign,
    indexableExceptT: indexableExceptT
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Monad.Except.Trans/index.js":38,"../Data.Function/index.js":132,"../Data.Identity/index.js":150,"../Foreign/index.js":317,"./foreign.js":310}],312:[function(require,module,exports){
"use strict";

exports["new"] = function () {
  return {};
};

exports.peekImpl = function (just) {
  return function (nothing) {
    return function (k) {
      return function (m) {
        return function () {
          return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
        };
      };
    };
  };
};

exports.poke = function (k) {
  return function (v) {
    return function (m) {
      return function () {
        m[k] = v;
        return m;
      };
    };
  };
};

exports["delete"] = function (k) {
  return function (m) {
    return function () {
      delete m[k];
      return m;
    };
  };
};

},{}],313:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    peek: peek,
    "new": $foreign["new"],
    poke: $foreign.poke,
    "delete": $foreign["delete"]
};

},{"../Data.Maybe/index.js":187,"./foreign.js":312}],314:[function(require,module,exports){
"use strict";

exports._copyST = function (m) {
  return function () {
    var r = {};
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }
    return r;
  };
};

exports.empty = {};

exports.runST = function (f) {
  return f();
};

exports._fmapObject = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
};

exports._mapWithKey = function (m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
};

exports._foldM = function (bind) {
  return function (f) {
    return function (mz) {
      return function (m) {
        var acc = mz;
        function g(k) {
          return function (z) {
            return f(z)(k)(m[k]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind(acc)(g(k));
          }
        }
        return acc;
      };
    };
  };
};

exports._foldSCObject = function (m, z, f, fromMaybe) {
  var acc = z;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      var maybeR = f(acc)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return acc;
      else acc = r;
    }
  }
  return acc;
};

exports.all = function (f) {
  return function (m) {
    for (var k in m) {
      if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
    }
    return true;
  };
};

exports.size = function (m) {
  var s = 0;
  for (var k in m) {
    if (hasOwnProperty.call(m, k)) {
      ++s;
    }
  }
  return s;
};

exports._lookup = function (no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
};

exports._lookupST = function (no, yes, k, m) {
  return function () {
    return k in m ? yes(m[k]) : no;
  };
};

function toArrayWithKey(f) {
  return function (m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}

exports.toArrayWithKey = toArrayWithKey;

exports.keys = Object.keys || toArrayWithKey(function (k) {
  return function () { return k; };
});

},{}],315:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var values = $foreign.toArrayWithKey(function (v) {
    return function (v1) {
        return v1;
    };
});
var toUnfoldable = function (dictUnfoldable) {
    var $45 = Data_Array.toUnfoldable(dictUnfoldable);
    var $46 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
    return function ($47) {
        return $45($46($47));
    };
};
var toAscUnfoldable = function (dictUnfoldable) {
    var $48 = Data_Array.toUnfoldable(dictUnfoldable);
    var $49 = Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst);
    var $50 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
    return function ($51) {
        return $48($49($50($51)));
    };
};
var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
var thawST = $foreign["_copyST"];
var singleton = function (k) {
    return function (v) {
        return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
    };
};
var showObject = function (dictShow) {
    return new Data_Show.Show(function (m) {
        return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
    });
};
var mutate = function (f) {
    return function (m) {
        return $foreign.runST(function __do() {
            var v = thawST(m)();
            var v1 = f(v)();
            return v;
        });
    };
};
var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
var mapWithKey = function (f) {
    return function (m) {
        return $foreign["_mapWithKey"](m, f);
    };
};
var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var isSubmap = function (dictEq) {
    return function (m1) {
        return function (m2) {
            var f = function (k) {
                return function (v) {
                    return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
                };
            };
            return $foreign.all(f)(m1);
        };
    };
};
var isEmpty = $foreign.all(function (v) {
    return function (v1) {
        return false;
    };
});
var insert = function (k) {
    return function (v) {
        return mutate(Foreign_Object_ST.poke(k)(v));
    };
};
var functorObject = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $foreign["_fmapObject"](m, f);
    };
});
var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
    return functorObject;
}, mapWithKey);
var fromHomogeneous = function (dictHomogeneous) {
    return Unsafe_Coerce.unsafeCoerce;
};
var fromFoldableWith = function (dictFoldable) {
    return function (f) {
        return function (l) {
            return $foreign.runST(function __do() {
                var v = Foreign_Object_ST["new"]();
                Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function (v1) {
                    return function __do() {
                        var v$prime = $foreign["_lookupST"](v1.value1, f(v1.value1), v1.value0, v)();
                        return Foreign_Object_ST.poke(v1.value0)(v$prime)(v)();
                    };
                })();
                return v;
            });
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return function (l) {
        return $foreign.runST(function __do() {
            var v = Foreign_Object_ST["new"]();
            Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v1.value0)(v1.value1)(v));
            })();
            return v;
        });
    };
};
var freezeST = $foreign["_copyST"];
var foldMaybe = function (f) {
    return function (z) {
        return function (m) {
            return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
        };
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (z) {
            return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
        };
    };
};
var semigroupObject = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(function (m1) {
        return function (m2) {
            return mutate(function (s1) {
                return foldM(Control_Monad_ST_Internal.monadST)(function (s2) {
                    return function (k) {
                        return function (v2) {
                            return Foreign_Object_ST.poke(k)($foreign["_lookup"](v2, function (v1) {
                                return Data_Semigroup.append(dictSemigroup)(v1)(v2);
                            }, k, m2))(s2);
                        };
                    };
                })(s1)(m1);
            })(m2);
        };
    });
};
var monoidObject = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupObject(dictSemigroup);
    }, $foreign.empty);
};
var union = function (m) {
    return mutate(function (s) {
        return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
            return function (k) {
                return function (v) {
                    return Foreign_Object_ST.poke(k)(v)(s$prime);
                };
            };
        })(s)(m);
    });
};
var unions = function (dictFoldable) {
    return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
};
var fold = $foreign["_foldM"](Data_Function.applyFlipped);
var foldMap = function (dictMonoid) {
    return function (f) {
        return fold(function (acc) {
            return function (k) {
                return function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                };
            };
        })(Data_Monoid.mempty(dictMonoid));
    };
};
var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return foldMap(dictMonoid)(Data_Function["const"](f));
    };
}, function (f) {
    return fold(function (z) {
        return function (v) {
            return f(z);
        };
    });
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
});
var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
    return foldableObject;
}, function (dictMonoid) {
    return foldMap(dictMonoid);
}, function (f) {
    return fold(Data_Function.flip(f));
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
        };
    };
});
var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
    return foldableWithIndexObject;
}, function () {
    return functorWithIndexObject;
}, function () {
    return traversableObject;
}, function (dictApplicative) {
    return function (f) {
        return function (ms) {
            return fold(function (acc) {
                return function (k) {
                    return function (v) {
                        return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                    };
                };
            })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
        };
    };
});
var traversableObject = new Data_Traversable.Traversable(function () {
    return foldableObject;
}, function () {
    return functorObject;
}, function (dictApplicative) {
    return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
}, function (dictApplicative) {
    var $52 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
    return function ($53) {
        return $52(Data_Function["const"]($53));
    };
});
var filterWithKey = function (predicate) {
    return function (m) {
        var go = (function () {
            var step = function (acc) {
                return function (k) {
                    return function (v) {
                        var $41 = predicate(k)(v);
                        if ($41) {
                            return Foreign_Object_ST.poke(k)(v)(acc);
                        };
                        return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
                    };
                };
            };
            return function __do() {
                var v = Foreign_Object_ST["new"]();
                return foldM(Control_Monad_ST_Internal.monadST)(step)(v)(m)();
            };
        })();
        return $foreign.runST(go);
    };
};
var filterKeys = function (predicate) {
    return filterWithKey(function ($54) {
        return Data_Function["const"](predicate($54));
    });
};
var filter = function (predicate) {
    return filterWithKey(Data_Function["const"](predicate));
};
var eqObject = function (dictEq) {
    return new Data_Eq.Eq(function (m1) {
        return function (m2) {
            return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
        };
    });
};
var ordObject = function (dictOrd) {
    return new Data_Ord.Ord(function () {
        return eqObject(dictOrd.Eq0());
    }, function (m1) {
        return function (m2) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
        };
    });
};
var eq1Object = new Data_Eq.Eq1(function (dictEq) {
    return Data_Eq.eq(eqObject(dictEq));
});
var $$delete = function (k) {
    return mutate(Foreign_Object_ST["delete"](k));
};
var pop = function (k) {
    return function (m) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
            return new Data_Tuple.Tuple(a, $$delete(k)(m));
        });
    };
};
var alter = function (f) {
    return function (k) {
        return function (m) {
            var v = f(lookup(k)(m));
            if (v instanceof Data_Maybe.Nothing) {
                return $$delete(k)(m);
            };
            if (v instanceof Data_Maybe.Just) {
                return insert(k)(v.value0)(m);
            };
            throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [ v.constructor.name ]);
        };
    };
};
var update = function (f) {
    return function (k) {
        return function (m) {
            return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
    };
};
module.exports = {
    isEmpty: isEmpty,
    singleton: singleton,
    insert: insert,
    lookup: lookup,
    toUnfoldable: toUnfoldable,
    toAscUnfoldable: toAscUnfoldable,
    fromFoldable: fromFoldable,
    fromFoldableWith: fromFoldableWith,
    fromHomogeneous: fromHomogeneous,
    "delete": $$delete,
    pop: pop,
    member: member,
    alter: alter,
    update: update,
    mapWithKey: mapWithKey,
    filterWithKey: filterWithKey,
    filterKeys: filterKeys,
    filter: filter,
    values: values,
    union: union,
    unions: unions,
    isSubmap: isSubmap,
    fold: fold,
    foldMap: foldMap,
    foldM: foldM,
    foldMaybe: foldMaybe,
    thawST: thawST,
    freezeST: freezeST,
    functorObject: functorObject,
    functorWithIndexObject: functorWithIndexObject,
    foldableObject: foldableObject,
    foldableWithIndexObject: foldableWithIndexObject,
    traversableObject: traversableObject,
    traversableWithIndexObject: traversableWithIndexObject,
    eqObject: eqObject,
    eq1Object: eq1Object,
    ordObject: ordObject,
    showObject: showObject,
    semigroupObject: semigroupObject,
    monoidObject: monoidObject,
    empty: $foreign.empty,
    size: $foreign.size,
    keys: $foreign.keys,
    all: $foreign.all,
    runST: $foreign.runST,
    toArrayWithKey: $foreign.toArrayWithKey
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.ST.Internal/index.js":52,"../Data.Array/index.js":91,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function.Uncurried/index.js":131,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Traversable/index.js":248,"../Data.TraversableWithIndex/index.js":249,"../Data.Tuple/index.js":251,"../Data.Unfoldable/index.js":253,"../Foreign.Object.ST/index.js":313,"../Unsafe.Coerce/index.js":391,"./foreign.js":314}],316:[function(require,module,exports){
"use strict";

exports.unsafeToForeign = function (value) {
  return value;
};

exports.unsafeFromForeign = function (value) {
  return value;
};

exports.typeOf = function (value) {
  return typeof value;
};

exports.tagOf = function (value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};

exports.isNull = function (value) {
  return value === null;
};

exports.isUndefined = function (value) {
  return value === undefined;
};

exports.isArray = Array.isArray || function (value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

},{}],317:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var ForeignError = (function () {
    function ForeignError(value0) {
        this.value0 = value0;
    };
    ForeignError.create = function (value0) {
        return new ForeignError(value0);
    };
    return ForeignError;
})();
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var showForeignError = new Data_Show.Show(function (v) {
    if (v instanceof ForeignError) {
        return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
    };
    if (v instanceof ErrorAtIndex) {
        return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof ErrorAtProperty) {
        return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
    };
    if (v instanceof TypeMismatch) {
        return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
    };
    throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [ v.constructor.name ]);
});
var renderForeignError = function (v) {
    if (v instanceof ForeignError) {
        return v.value0;
    };
    if (v instanceof ErrorAtIndex) {
        return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof ErrorAtProperty) {
        return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
    };
    if (v instanceof TypeMismatch) {
        return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
    };
    throw new Error("Failed pattern match at Foreign (line 72, column 1 - line 72, column 45): " + [ v.constructor.name ]);
};
var readUndefined = function (value) {
    if ($foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 157, column 1 - line 157, column 46): " + [ value.constructor.name ]);
};
var readNullOrUndefined = function (value) {
    if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 162, column 1 - line 162, column 52): " + [ value.constructor.name ]);
};
var readNull = function (value) {
    if ($foreign.isNull(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
    };
    if (Data_Boolean.otherwise) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
    };
    throw new Error("Failed pattern match at Foreign (line 152, column 1 - line 152, column 41): " + [ value.constructor.name ]);
};
var fail = (function () {
    var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
    return function ($108) {
        return $107(Data_List_NonEmpty.singleton($108));
    };
})();
var readArray = function (value) {
    if ($foreign.isArray(value)) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
    };
    if (Data_Boolean.otherwise) {
        return fail(new TypeMismatch("array", $foreign.tagOf(value)));
    };
    throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
};
var unsafeReadTagged = function (tag) {
    return function (value) {
        if ($foreign.tagOf(value) === tag) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
        };
        if (Data_Boolean.otherwise) {
            return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
        };
        throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
    };
};
var readBoolean = unsafeReadTagged("Boolean");
var readNumber = unsafeReadTagged("Number");
var readInt = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
    var fromNumber = (function () {
        var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
        return function ($110) {
            return $109(Data_Int.fromNumber($110));
        };
    })();
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
};
var readString = unsafeReadTagged("String");
var readChar = function (value) {
    var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
    var fromString = (function () {
        var $111 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
        return function ($112) {
            return $111(Data_String_CodeUnits.toChar($112));
        };
    })();
    return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
};
var eqForeignError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return x.value0 === y.value0;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0 && x.value1 === y.value1;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
        };
        return false;
    };
});
var ordForeignError = new Data_Ord.Ord(function () {
    return eqForeignError;
}, function (x) {
    return function (y) {
        if (x instanceof ForeignError && y instanceof ForeignError) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof ForeignError) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ForeignError) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
        };
        if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        if (x instanceof ErrorAtIndex) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof ErrorAtIndex) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
        };
        throw new Error("Failed pattern match at Foreign (line 61, column 1 - line 61, column 52): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    ForeignError: ForeignError,
    TypeMismatch: TypeMismatch,
    ErrorAtIndex: ErrorAtIndex,
    ErrorAtProperty: ErrorAtProperty,
    renderForeignError: renderForeignError,
    unsafeReadTagged: unsafeReadTagged,
    readString: readString,
    readChar: readChar,
    readBoolean: readBoolean,
    readNumber: readNumber,
    readInt: readInt,
    readArray: readArray,
    readNull: readNull,
    readUndefined: readUndefined,
    readNullOrUndefined: readNullOrUndefined,
    fail: fail,
    eqForeignError: eqForeignError,
    ordForeignError: ordForeignError,
    showForeignError: showForeignError,
    unsafeToForeign: $foreign.unsafeToForeign,
    unsafeFromForeign: $foreign.unsafeFromForeign,
    typeOf: $foreign.typeOf,
    tagOf: $foreign.tagOf,
    isNull: $foreign.isNull,
    isUndefined: $foreign.isUndefined,
    isArray: $foreign.isArray
};

},{"../Control.Applicative/index.js":17,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Except/index.js":39,"../Data.Boolean/index.js":100,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Identity/index.js":150,"../Data.Int/index.js":152,"../Data.List.NonEmpty/index.js":181,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226,"../Data.String.CodeUnits/index.js":230,"./foreign.js":316}],318:[function(require,module,exports){
/* globals exports */
"use strict";

exports.nan = NaN;

exports.isNaN = isNaN;

exports.infinity = Infinity;

exports.isFinite = isFinite;

exports.readInt = function (radix) {
  return function (n) {
    return parseInt(n, radix);
  };
};

exports.readFloat = parseFloat;

},{}],319:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    nan: $foreign.nan,
    "isNaN": $foreign["isNaN"],
    infinity: $foreign.infinity,
    "isFinite": $foreign["isFinite"],
    readInt: $foreign.readInt,
    readFloat: $foreign.readFloat
};

},{"./foreign.js":318}],320:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var unsubscribe = function (sid) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v.subscriptions)))(function (v1) {
                return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_Query_EventSource.finalize)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(v1));
            });
        });
    };
};
var queueOrRun = function (ref) {
    return function (au) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return au;
            };
            if (v instanceof Data_Maybe.Just) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 195, column 33 - line 197, column 57): " + [ v.constructor.name ]);
        });
    };
};
var handleLifecycle = function (lchs) {
    return function (f) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
            initializers: Data_List_Types.Nil.value,
            finalizers: Data_List_Types.Nil.value
        })(lchs)))(function () {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (v) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v1) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v1.finalizers))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v1.initializers))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v);
                        });
                    });
                });
            });
        });
    };
};
var fresh = function (f) {
    return function (ref) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                return {
                    state: i + 1 | 0,
                    value: f(i)
                };
            })(v.fresh));
        });
    };
};
var evalQ = function (render) {
    return function (ref) {
        return function (q) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
            });
        };
    };
};
var evalM = function (render) {
    return function (initRef) {
        return function (v) {
            var evalChildQuery = function (ref) {
                return function (cqb) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                        return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                            var evalChild = function (v3) {
                                return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (v4) {
                                    return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                        return evalQ(render)(ds.selfRef)(v2.value1);
                                    })(v4);
                                }));
                            };
                            return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                        })(cqb);
                    });
                };
            };
            var go = function (ref) {
                return function (v1) {
                    if (v1 instanceof Halogen_Query_HalogenM.State) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            var v3 = v1.value0(v2.state);
                            if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                            };
                            if (Data_Boolean.otherwise) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                    component: v2.component,
                                    state: v3.value1,
                                    refs: v2.refs,
                                    children: v2.children,
                                    childrenIn: v2.childrenIn,
                                    childrenOut: v2.childrenOut,
                                    selfRef: v2.selfRef,
                                    handlerRef: v2.handlerRef,
                                    pendingQueries: v2.pendingQueries,
                                    pendingOuts: v2.pendingOuts,
                                    pendingHandlers: v2.pendingHandlers,
                                    rendering: v2.rendering,
                                    fresh: v2.fresh,
                                    subscriptions: v2.subscriptions,
                                    forks: v2.forks,
                                    lifecycleHandlers: v2.lifecycleHandlers
                                })(ref)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                    });
                                });
                            };
                            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 85, column 7 - line 91, column 21): " + [ v3.constructor.name ]);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (v2) {
                            var v3 = v1.value0(v2);
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v4) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Effect_Aff.bindAff)(v3)(function (v5) {
                                    var done = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v4.subscriptions)))(function (v6) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordSubscriptionId)(v2)))(v4.subscriptions)))(function () {
                                            return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(v2))(v6))(Halogen_Query_EventSource.finalize(v5.finalizer));
                                        });
                                    });
                                    var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Coroutine["await"](Effect_Aff.monadAff))(function (v6) {
                                        return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v4.subscriptions))))(function (v7) {
                                            return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(v2))(v7))(new Data_Maybe.Just(true)))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalF(render)(ref)(new Halogen_Query_Input.Action(v6)))))(function (v8) {
                                                return consumer;
                                            }));
                                        });
                                    });
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(v2)(done)))(v4.subscriptions)))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.pullFrom(Effect_Aff.monadRecAff)(consumer)(v5.producer)))(function () {
                                            return Halogen_Query_EventSource.finalize(done);
                                        });
                                    });
                                })))(function (v5) {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(v2));
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(unsubscribe(v1.value0)(ref))(function () {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                        return v1.value0;
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                        return evalChildQuery(ref)(v1.value0);
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(v3(v1.value0)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Par) {
                        return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                            var $111 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                            var $112 = evalM(render)(ref);
                            return function ($113) {
                                return $111($112($113));
                            };
                        })())(v1.value0)));
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v3) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (v4) {
                                    return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                        Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(v2))(v3.forks)();
                                        return Effect_Ref.write(true)(v4)();
                                    }))(evalM(render)(ref)(v1.value0))))(function (v5) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(v4))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(v2)(v5))(v3.forks))))(function () {
                                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(v2));
                                        });
                                    });
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(v3)))(function () {
                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                });
                            });
                        });
                    };
                    if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                        });
                    };
                    throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 82, column 12 - line 146, column 33): " + [ v1.constructor.name ]);
                };
            };
            return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
        };
    };
};
var evalF = function (render) {
    return function (ref) {
        return function (v) {
            if (v instanceof Halogen_Query_Input.RefUpdate) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                    return {
                        component: st.component,
                        state: st.state,
                        refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                        children: st.children,
                        childrenIn: st.childrenIn,
                        childrenOut: st.childrenOut,
                        selfRef: st.selfRef,
                        handlerRef: st.handlerRef,
                        pendingQueries: st.pendingQueries,
                        pendingOuts: st.pendingOuts,
                        pendingHandlers: st.pendingHandlers,
                        rendering: st.rendering,
                        fresh: st.fresh,
                        subscriptions: st.subscriptions,
                        forks: st.forks,
                        lifecycleHandlers: st.lifecycleHandlers
                    };
                })));
            };
            if (v instanceof Halogen_Query_Input.Action) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                    return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                });
            };
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 51, column 20 - line 57, column 62): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    evalF: evalF,
    evalQ: evalQ,
    evalM: evalM,
    handleLifecycle: handleLifecycle,
    queueOrRun: queueOrRun
};

},{"../Control.Applicative.Free/index.js":16,"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Coroutine/index.js":31,"../Control.Monad.Fork.Class/index.js":40,"../Control.Monad.Free.Trans/index.js":41,"../Control.Monad.Free/index.js":42,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad/index.js":60,"../Control.Parallel.Class/index.js":63,"../Control.Parallel/index.js":64,"../Data.Boolean/index.js":100,"../Data.Coyoneda/index.js":109,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Unit/index.js":257,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect.Ref/index.js":305,"../Effect/index.js":309,"../Halogen.Aff.Driver.State/index.js":321,"../Halogen.Query.ChildQuery/index.js":338,"../Halogen.Query.EventSource/index.js":339,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query.HalogenQ/index.js":341,"../Halogen.Query.Input/index.js":342,"../Unsafe.Reference/index.js":393}],321:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var DriverStateRef = function (x) {
    return x;
};
var DriverState = function (x) {
    return x;
};
var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX_ = function (dictApplicative) {
    return function (f) {
        return unDriverStateX(function (st) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
        });
    };
};
var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
var renderStateX = function (dictFunctor) {
    return function (f) {
        return unDriverStateX(function (st) {
            return mkRenderStateX(f(st.rendering));
        });
    };
};
var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
var mapDriverState = function (f) {
    return function (v) {
        return f(v);
    };
};
var initDriverState = function (component) {
    return function (input) {
        return function (handler) {
            return function (lchs) {
                return function __do() {
                    var v = Effect_Ref["new"]({})();
                    var v1 = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var v2 = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                    var v3 = Effect_Ref["new"](handler)();
                    var v4 = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var v5 = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                    var v6 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                    var v7 = Effect_Ref["new"](1)();
                    var v8 = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                    var v9 = Effect_Ref["new"](Data_Map_Internal.empty)();
                    var ds = {
                        component: component,
                        state: component.initialState(input),
                        refs: Data_Map_Internal.empty,
                        children: Halogen_Data_Slot.empty,
                        childrenIn: v1,
                        childrenOut: v2,
                        selfRef: v,
                        handlerRef: v3,
                        pendingQueries: v4,
                        pendingOuts: v5,
                        pendingHandlers: v6,
                        rendering: Data_Maybe.Nothing.value,
                        fresh: v7,
                        subscriptions: v8,
                        forks: v9,
                        lifecycleHandlers: lchs
                    };
                    Effect_Ref.write(ds)(v)();
                    return mkDriverStateXRef(v);
                };
            };
        };
    };
};
module.exports = {
    DriverState: DriverState,
    mapDriverState: mapDriverState,
    DriverStateRef: DriverStateRef,
    unDriverStateX: unDriverStateX,
    mkDriverStateXRef: mkDriverStateXRef,
    renderStateX: renderStateX,
    renderStateX_: renderStateX_,
    unRenderStateX: unRenderStateX,
    initDriverState: initDriverState
};

},{"../Data.Foldable/index.js":128,"../Data.List.Types/index.js":182,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Effect.Ref/index.js":305,"../Halogen.Data.Slot/index.js":328,"../Unsafe.Coerce/index.js":391}],322:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Fork_Class = require("../Control.Monad.Fork.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Parallel = require("../Control.Parallel/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver_Eval = require("../Halogen.Aff.Driver.Eval/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var newLifecycleHandlers = Effect_Ref["new"]({
    initializers: Data_List_Types.Nil.value,
    finalizers: Data_List_Types.Nil.value
});
var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var handlePending = function (ref) {
    return function __do() {
        var v = Effect_Ref.read(ref)();
        Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
        return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v)((function () {
            var $79 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
            return function ($80) {
                return handleAff($79(Data_List.reverse($80)));
            };
        })())();
    };
};
var cleanupSubscriptionsAndForks = function (v) {
    return function __do() {
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
            var $81 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)((function () {
                var $83 = Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff);
                return function ($84) {
                    return $83(Halogen_Query_EventSource.finalize($84));
                };
            })());
            return function ($82) {
                return handleAff($81($82));
            };
        })()))(Effect_Ref.read(v.subscriptions))();
        Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
        Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
            var $85 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
            return function ($86) {
                return handleAff($85($86));
            };
        })()))(Effect_Ref.read(v.forks))();
        return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
    };
};
var runUI = function (renderSpec) {
    return function (component) {
        return function (i) {
            var subscribe = function (fresh) {
                return function (ref) {
                    return function (consumer) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                var v1 = Effect_Ref.read(fresh)();
                                Effect_Ref.modify_(function (v2) {
                                    return v2 + 1 | 0;
                                })(fresh)();
                                Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(v1)(v))(ref)();
                                return v1;
                            }))(function (v1) {
                                var producer = Control_Coroutine.producer(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)))(Data_Either.Left.create))(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_AVar.take(v))));
                                return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.connect(Effect_Aff.monadRecAff)(Effect_Aff.parallelAff)(producer)(consumer)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(v1))(ref)))(function () {
                                        return Effect_Aff_AVar.kill(Effect_Exception.error("ended"))(v);
                                    });
                                })));
                            });
                        });
                    };
                };
            };
            var rootHandler = function (ref) {
                return function (message) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                        return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map_Internal.functorMap)(Effect_Aff_AVar.put(message))(v));
                    });
                };
            };
            var squashChildInitializers = function (lchs) {
                return function (preInits) {
                    return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                        var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                        return Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                            handlePending(st.pendingQueries)();
                                            return handlePending(st.pendingOuts)();
                                        });
                                    });
                                }), preInits),
                                finalizers: handlers.finalizers
                            };
                        })(lchs);
                    });
                };
            };
            var runComponent = function (lchs) {
                return function (handler) {
                    return function (j) {
                        return Halogen_Component.unComponent(function (c) {
                            return function __do() {
                                var v = newLifecycleHandlers();
                                var v1 = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(v)();
                                var v2 = Effect_Ref.read(lchs)();
                                Effect_Ref.write({
                                    initializers: Data_List_Types.Nil.value,
                                    finalizers: v2.finalizers
                                })(lchs)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                    var $87 = render(lchs);
                                    return function ($88) {
                                        return $87((function (v3) {
                                            return v3.selfRef;
                                        })($88));
                                    };
                                })()))(Effect_Ref.read(v1))();
                                Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(v2.initializers))(Effect_Ref.read(v1))();
                                return v1;
                            };
                        });
                    };
                };
            };
            var renderChild = function (lchs) {
                return function (handler) {
                    return function (childrenInRef) {
                        return function (childrenOutRef) {
                            return Halogen_Component.unComponentSlot(function (slot) {
                                return function __do() {
                                    var v = Effect_Ref.read(childrenInRef)();
                                    var v1 = (function () {
                                        var v1 = slot.pop(v);
                                        if (v1 instanceof Data_Maybe.Just) {
                                            Effect_Ref.write(v1.value0.value1)(childrenInRef)();
                                            var v2 = Effect_Ref.read(v1.value0.value0)();
                                            Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                return function __do() {
                                                    Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                        var $89 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                        return function ($90) {
                                                            return $89(slot.output($90));
                                                        };
                                                    })())();
                                                    return handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](slot.input)))();
                                                };
                                            })(v2)();
                                            return v1.value0.value0;
                                        };
                                        if (v1 instanceof Data_Maybe.Nothing) {
                                            if (slot.input instanceof Halogen_Query_HalogenQ.Receive) {
                                                return runComponent(lchs)((function () {
                                                    var $91 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                    return function ($92) {
                                                        return $91(slot.output($92));
                                                    };
                                                })())(slot.input.value0)(slot.component)();
                                            };
                                            return Effect_Exception["throw"]("Halogen internal error: slot input was not a Receive query")();
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 232, column 14 - line 245, column 81): " + [ v1.constructor.name ]);
                                    })();
                                    var v2 = Data_Functor.map(Effect.functorEffect)(function ($93) {
                                        return Data_Maybe.isJust(slot.get($93));
                                    })(Effect_Ref.read(childrenOutRef))();
                                    Control_Applicative.when(Effect.applicativeEffect)(v2)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                    Effect_Ref.modify_(slot.set(v1))(childrenOutRef)();
                                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v3) {
                                        if (v3 instanceof Data_Maybe.Nothing) {
                                            return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                        };
                                        if (v3 instanceof Data_Maybe.Just) {
                                            return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v3.value0));
                                        };
                                        throw new Error("Failed pattern match at Halogen.Aff.Driver (line 250, column 37 - line 252, column 50): " + [ v3.constructor.name ]);
                                    }))();
                                };
                            });
                        };
                    };
                };
            };
            var render = function (lchs) {
                return function ($$var) {
                    return function __do() {
                        var v = Effect_Ref.read($$var)();
                        var v1 = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                        Control_Applicative.when(Effect.applicativeEffect)(v1)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                        Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                        Effect_Ref.write(v.children)(v.childrenIn)();
                        var handler = (function () {
                            var $94 = Halogen_Aff_Driver_Eval.queueOrRun(v.pendingHandlers);
                            var $95 = Data_Functor["void"](Effect_Aff.functorAff);
                            var $96 = Halogen_Aff_Driver_Eval.evalF(render)(v.selfRef);
                            return function ($97) {
                                return $94($95($96($97)));
                            };
                        })();
                        var childHandler = (function () {
                            var $98 = Halogen_Aff_Driver_Eval.queueOrRun(v.pendingQueries);
                            return function ($99) {
                                return $98(handler(Halogen_Query_Input.Action.create($99)));
                            };
                        })();
                        var v2 = renderSpec.render(function ($100) {
                            return handleAff(handler($100));
                        })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                        var v3 = Effect_Ref.read(v.childrenOut)();
                        var v4 = Effect_Ref.read(v.childrenIn)();
                        Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(v4)(function (v5) {
                            return function __do() {
                                var v6 = Effect_Ref.read(v5)();
                                Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(v6)();
                                return finalize(lchs)(v6)();
                            };
                        })();
                        Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                            return {
                                component: ds$prime.component,
                                state: ds$prime.state,
                                refs: ds$prime.refs,
                                children: v3,
                                childrenIn: ds$prime.childrenIn,
                                childrenOut: ds$prime.childrenOut,
                                selfRef: ds$prime.selfRef,
                                handlerRef: ds$prime.handlerRef,
                                pendingQueries: ds$prime.pendingQueries,
                                pendingOuts: ds$prime.pendingOuts,
                                pendingHandlers: ds$prime.pendingHandlers,
                                rendering: new Data_Maybe.Just(v2),
                                fresh: ds$prime.fresh,
                                subscriptions: ds$prime.subscriptions,
                                forks: ds$prime.forks,
                                lifecycleHandlers: ds$prime.lifecycleHandlers
                            };
                        }))();
                        return Control_Applicative.when(Effect.applicativeEffect)(v1)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v5) {
                            return function __do() {
                                var v6 = Effect_Ref.read(v.pendingHandlers)();
                                Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers)();
                                Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                    var $101 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                    return function ($102) {
                                        return handleAff($101(Data_List.reverse($102)));
                                    };
                                })())(v6)();
                                var v7 = Effect_Ref.read(v.pendingHandlers)();
                                var $69 = Data_Maybe.maybe(false)(Data_List["null"])(v7);
                                if ($69) {
                                    return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(v.pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                };
                                return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                            };
                        }))();
                    };
                };
            };
            var finalize = function (lchs) {
                return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                    return function __do() {
                        cleanupSubscriptionsAndForks(st)();
                        var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                        Effect_Ref.modify_(function (handlers) {
                            return {
                                initializers: handlers.initializers,
                                finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                            };
                        })(lchs)();
                        return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                            return function __do() {
                                var v1 = Effect_Ref.read(v)();
                                return finalize(lchs)(v1)();
                            };
                        })();
                    };
                });
            };
            var evalDriver = function (disposed) {
                return function (ref) {
                    return function (q) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                            if (v) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                            };
                            return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                        });
                    };
                };
            };
            var dispose = function (disposed) {
                return function (lchs) {
                    return function (dsx) {
                        return function (subsRef) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                var v = Effect_Ref.read(disposed)();
                                if (v) {
                                    return Data_Unit.unit;
                                };
                                Effect_Ref.write(true)(disposed)();
                                Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
                                    var $103 = Effect_Aff_AVar.kill(Effect_Exception.error("disposed"));
                                    return function ($104) {
                                        return Effect_Aff.launchAff_($103($104));
                                    };
                                })()))(Effect_Ref.read(subsRef))();
                                finalize(lchs)(dsx)();
                                return Halogen_Aff_Driver_State.unDriverStateX((function () {
                                    var $105 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(renderSpec.dispose);
                                    return function ($106) {
                                        return $105((function (v1) {
                                            return v1.rendering;
                                        })($106));
                                    };
                                })())(dsx)();
                            });
                        };
                    };
                };
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (v) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (v1) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (v2) {
                        return Halogen_Aff_Driver_Eval.handleLifecycle(v)(function __do() {
                            var v3 = Effect_Ref["new"](Data_Map_Internal.empty)();
                            var v4 = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(v)(rootHandler(v3))(i)(component))();
                            return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                return Control_Applicative.pure(Effect.applicativeEffect)({
                                    query: evalDriver(v2)(st.selfRef),
                                    subscribe: subscribe(v1)(v3),
                                    dispose: dispose(v2)(v)(v4)(v3)
                                });
                            })(v4)();
                        });
                    });
                });
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Coroutine/index.js":31,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Fork.Class/index.js":40,"../Control.Monad.Rec.Class/index.js":50,"../Control.Parallel/index.js":64,"../Data.Either/index.js":119,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.List.Types/index.js":182,"../Data.List/index.js":183,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Unit/index.js":257,"../Effect.Aff.AVar/index.js":294,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Console/index.js":301,"../Effect.Exception/index.js":303,"../Effect.Ref/index.js":305,"../Effect/index.js":309,"../Halogen.Aff.Driver.Eval/index.js":320,"../Halogen.Aff.Driver.State/index.js":321,"../Halogen.Component/index.js":326,"../Halogen.Data.Slot/index.js":328,"../Halogen.Query.EventSource/index.js":339,"../Halogen.Query.HalogenQ/index.js":341,"../Halogen.Query.Input/index.js":342}],323:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_DOM_ParentNode = require("../Web.DOM.ParentNode/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var selectElement = function (query) {
    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
        var $12 = Web_DOM_ParentNode.querySelector(query);
        return function ($13) {
            return $12(Web_HTML_HTMLDocument.toParentNode($13));
        };
    })())(Web_HTML_Window.document))(Web_HTML.window)))(function (v) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(v));
    });
};
var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
var awaitLoad = Effect_Aff.makeAff(function (callback) {
    return function __do() {
        var v = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
        if (v instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
            var v1 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
            var v2 = Web_Event_EventTarget.eventListener(function (v2) {
                return callback(new Data_Either.Right(Data_Unit.unit));
            })();
            Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(v2)(false)(v1)();
            return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(v2)(false)(v1));
        };
        callback(new Data_Either.Right(Data_Unit.unit))();
        return Effect_Aff.nonCanceler;
    };
});
var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(awaitLoad)(function () {
    return Control_Bind.bind(Effect_Aff.bindAff)(selectElement("body"))(function (v) {
        return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not find body")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(v);
    });
});
module.exports = {
    awaitLoad: awaitLoad,
    awaitBody: awaitBody,
    selectElement: selectElement,
    runHalogenAff: runHalogenAff
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Monad.Error.Class/index.js":37,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect/index.js":309,"../Web.DOM.ParentNode/index.js":406,"../Web.Event.EventTarget/index.js":411,"../Web.HTML.Event.EventTypes/index.js":413,"../Web.HTML.HTMLDocument.ReadyState/index.js":414,"../Web.HTML.HTMLDocument/index.js":416,"../Web.HTML.HTMLElement/index.js":418,"../Web.HTML.Window/index.js":425,"../Web.HTML/index.js":427}],324:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var ProComponent = function (x) {
    return x;
};
var newtypeProComponent = new Data_Newtype.Newtype(function (n) {
    return n;
}, ProComponent);
var dimapSpec = function (dictFunctor) {
    return function (f) {
        return function (g) {
            return function (spec) {
                return {
                    initialState: function ($9) {
                        return spec.initialState(f($9));
                    },
                    render: spec.render,
                    "eval": Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(Data_Bifunctor.lmap(Halogen_Query_HalogenQ.bifunctorHalogenQ)(f))(Halogen_Query_HalogenM.mapOutput(g))(spec["eval"])
                };
            };
        };
    };
};
var profunctorProComponent = function (dictFunctor) {
    return new Data_Profunctor.Profunctor(function (f) {
        return function (g) {
            return function (v) {
                return Halogen_Component.unComponent((function () {
                    var $10 = dimapSpec(dictFunctor)(f)(g);
                    return function ($11) {
                        return Halogen_Component.mkComponent($10($11));
                    };
                })())(v);
            };
        };
    });
};
module.exports = {
    ProComponent: ProComponent,
    newtypeProComponent: newtypeProComponent,
    profunctorProComponent: profunctorProComponent
};

},{"../Data.Bifunctor/index.js":98,"../Data.Newtype/index.js":197,"../Data.Profunctor/index.js":213,"../Halogen.Component/index.js":326,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query.HalogenQ/index.js":341}],325:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Web_UIEvent_MouseEvent_EventTypes = require("../Web.UIEvent.MouseEvent.EventTypes/index.js");
var Move = (function () {
    function Move(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Move.create = function (value0) {
        return function (value1) {
            return new Move(value0, value1);
        };
    };
    return Move;
})();
var Done = (function () {
    function Done(value0) {
        this.value0 = value0;
    };
    Done.create = function (value0) {
        return new Done(value0);
    };
    return Done;
})();
var unsafeEventToPageCoord = Unsafe_Coerce.unsafeCoerce;
var unsafeEventToMouseEvent = Unsafe_Coerce.unsafeCoerce;
var mouseEventToPageCoord = Unsafe_Coerce.unsafeCoerce;
var dragEventSource = function (dictMonadAff) {
    return function (mouseEvent) {
        return function (f) {
            return Halogen_Query_EventSource.effectEventSource(dictMonadAff)(function (emitter) {
                var emittance = (function () {
                    var $15 = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Halogen_Query_EventSource.emit(emitter));
                    return function ($16) {
                        return $15(f($16));
                    };
                })();
                var initEv = mouseEventToPageCoord(mouseEvent);
                return function __do() {
                    var v = Effect_Ref["new"](initEv)();
                    var v1 = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                    var v2 = Web_Event_EventTarget.eventListener(function (ev) {
                        return function __do() {
                            var v2 = Effect_Ref.read(v)();
                            var ev$prime = unsafeEventToPageCoord(ev);
                            var dragData = {
                                x: ev$prime.pageX,
                                y: ev$prime.pageY,
                                deltaX: ev$prime.pageX - v2.pageX,
                                deltaY: ev$prime.pageY - v2.pageY,
                                offsetX: ev$prime.pageX - initEv.pageX,
                                offsetY: ev$prime.pageY - initEv.pageY
                            };
                            Effect_Ref.write(ev$prime)(v)();
                            return emittance(new Move(unsafeEventToMouseEvent(ev), dragData))();
                        };
                    })();
                    var v3 = Web_Event_EventTarget.eventListener(function (ev) {
                        return function __do() {
                            Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(v1))();
                            return emittance(new Done(unsafeEventToMouseEvent(ev)))();
                        };
                    })();
                    var removeListeners = function __do() {
                        var v4 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
                        Web_Event_EventTarget.removeEventListener(Web_UIEvent_MouseEvent_EventTypes.mousemove)(v2)(false)(v4)();
                        return Web_Event_EventTarget.removeEventListener(Web_UIEvent_MouseEvent_EventTypes.mouseup)(v3)(false)(v4)();
                    };
                    Effect_Ref.write(removeListeners)(v1)();
                    var v4 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
                    Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousemove)(v2)(false)(v4)();
                    Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mouseup)(v3)(false)(v4)();
                    return removeListeners;
                };
            });
        };
    };
};
module.exports = {
    dragEventSource: dragEventSource,
    Move: Move,
    Done: Done,
    mouseEventToPageCoord: mouseEventToPageCoord
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257,"../Effect.Ref/index.js":305,"../Effect/index.js":309,"../Halogen.Query.EventSource/index.js":339,"../Unsafe.Coerce/index.js":391,"../Web.Event.EventTarget/index.js":411,"../Web.HTML.Window/index.js":425,"../Web.HTML/index.js":427,"../Web.UIEvent.MouseEvent.EventTypes/index.js":432}],326:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bifunctor_Wrap = require("../Data.Bifunctor.Wrap/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ComponentSlot = (function () {
    function ComponentSlot(value0) {
        this.value0 = value0;
    };
    ComponentSlot.create = function (value0) {
        return new ComponentSlot(value0);
    };
    return ComponentSlot;
})();
var ThunkSlot = (function () {
    function ThunkSlot(value0) {
        this.value0 = value0;
    };
    ThunkSlot.create = function (value0) {
        return new ThunkSlot(value0);
    };
    return ThunkSlot;
})();
var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
var unComponent = Unsafe_Coerce.unsafeCoerce;
var mkEval = function (args) {
    return function (v) {
        if (v instanceof Halogen_Query_HalogenQ.Initialize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Finalize) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Receive) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Action) {
            return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Query) {
            return Data_Coyoneda.unCoyoneda(function (g) {
                var $28 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                return function ($29) {
                    return $28(args.handleQuery($29));
                };
            })(v.value0);
        };
        throw new Error("Failed pattern match at Halogen.Component (line 172, column 15 - line 182, column 70): " + [ v.constructor.name ]);
    };
};
var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
var mkComponent = Unsafe_Coerce.unsafeCoerce;
var hoistSlot = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return function (v) {
                if (v instanceof ComponentSlot) {
                    return unComponentSlot(function (slot) {
                        return ComponentSlot.create(mkComponentSlot({
                            get: slot.get,
                            pop: slot.pop,
                            set: slot.set,
                            component: hoist(dictBifunctor)(dictFunctor)(nat)(slot.component),
                            input: slot.input,
                            output: slot.output
                        }));
                    })(v.value0);
                };
                if (v instanceof ThunkSlot) {
                    return ThunkSlot.create(Halogen_VDom_Thunk.hoist(Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat)))(v.value0));
                };
                throw new Error("Failed pattern match at Halogen.Component (line 271, column 17 - line 276, column 53): " + [ v.constructor.name ]);
            };
        };
    };
};
var hoist = function (dictBifunctor) {
    return function (dictFunctor) {
        return function (nat) {
            return unComponent(function (c) {
                return mkComponent({
                    initialState: c.initialState,
                    render: (function () {
                        var $30 = Data_Bifunctor.lmap(dictBifunctor)(hoistSlot(dictBifunctor)(dictFunctor)(nat));
                        return function ($31) {
                            return $30(c.render($31));
                        };
                    })(),
                    "eval": (function () {
                        var $32 = Halogen_Query_HalogenM.hoist(dictFunctor)(nat);
                        return function ($33) {
                            return $32(c["eval"]($33));
                        };
                    })()
                });
            });
        };
    };
};
var functorComponentSlotBox = new Data_Functor.Functor(function (f) {
    return unComponentSlot(function (slot) {
        return mkComponentSlot({
            get: slot.get,
            pop: slot.pop,
            set: slot.set,
            component: slot.component,
            input: slot.input,
            output: Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(slot.output)
        });
    });
});
var functorComponentSlot = function (dictBifunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof ComponentSlot) {
                return new ComponentSlot(Data_Functor.map(functorComponentSlotBox)(f)(v.value0));
            };
            if (v instanceof ThunkSlot) {
                return new ThunkSlot(Halogen_VDom_Thunk.mapThunk((function () {
                    var $34 = Data_Newtype.under(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.newtypeWrap)(Data_Bifunctor_Wrap.Wrap)(Data_Functor.map(Data_Bifunctor_Wrap.functorWrap(dictBifunctor))(f));
                    var $35 = Data_Bifunctor.lmap(dictBifunctor)(Data_Functor.map(functorComponentSlot(dictBifunctor))(f));
                    return function ($36) {
                        return $34($35($36));
                    };
                })())(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.Component (line 200, column 11 - line 202, column 94): " + [ v.constructor.name ]);
        };
    });
};
var defaultEval = {
    handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
    handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
    receive: Data_Function["const"](Data_Maybe.Nothing.value),
    initialize: Data_Maybe.Nothing.value,
    finalize: Data_Maybe.Nothing.value
};
var componentSlot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (comp) {
                        return function (input) {
                            return function (output) {
                                return mkComponentSlot({
                                    get: Halogen_Data_Slot.lookup(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    pop: Halogen_Data_Slot.pop(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    set: Halogen_Data_Slot.insert(dictCons)(dictIsSymbol)(dictOrd)(label)(p),
                                    component: comp,
                                    input: new Halogen_Query_HalogenQ.Receive(input, Data_Unit.unit),
                                    output: output
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    mkComponent: mkComponent,
    unComponent: unComponent,
    hoist: hoist,
    mkEval: mkEval,
    defaultEval: defaultEval,
    ComponentSlot: ComponentSlot,
    ThunkSlot: ThunkSlot,
    componentSlot: componentSlot,
    mkComponentSlot: mkComponentSlot,
    unComponentSlot: unComponentSlot,
    hoistSlot: hoistSlot,
    functorComponentSlotBox: functorComponentSlotBox,
    functorComponentSlot: functorComponentSlot
};

},{"../Control.Applicative/index.js":17,"../Data.Bifunctor.Wrap/index.js":97,"../Data.Bifunctor/index.js":98,"../Data.Coyoneda/index.js":109,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Unit/index.js":257,"../Halogen.Data.Slot/index.js":328,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query.HalogenQ/index.js":341,"../Halogen.VDom.Thunk/index.js":348,"../Unsafe.Coerce/index.js":391}],327:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var OrdBox = (function () {
    function OrdBox(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    OrdBox.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new OrdBox(value0, value1, value2);
            };
        };
    };
    return OrdBox;
})();
var unOrdBox = function (v) {
    return v.value2;
};
var mkOrdBox = function (dictOrd) {
    return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
};
var eqOrdBox = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.value0(v.value2)(v1.value2);
    };
});
var ordOrdBox = new Data_Ord.Ord(function () {
    return eqOrdBox;
}, function (v) {
    return function (v1) {
        return v.value1(v.value2)(v1.value2);
    };
});
module.exports = {
    mkOrdBox: mkOrdBox,
    unOrdBox: unOrdBox,
    eqOrdBox: eqOrdBox,
    ordOrdBox: ordOrdBox
};

},{"../Data.Eq/index.js":123,"../Data.Ord/index.js":205}],328:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_Data_OrdBox = require("../Halogen.Data.OrdBox/index.js");
var SlotStorage = function (x) {
    return x;
};
var slots = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (v) {
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(sym);
                    var go = function (v1) {
                        return function (val) {
                            if (key === v1.value0) {
                                return Data_Map_Internal.singleton(Halogen_Data_OrdBox.unOrdBox(v1.value1))(val);
                            };
                            if (Data_Boolean.otherwise) {
                                return Data_Monoid.mempty(Data_Map_Internal.monoidMap(dictOrd));
                            };
                            throw new Error("Failed pattern match at Halogen.Data.Slot (line 101, column 3 - line 103, column 25): " + [ v1.constructor.name, val.constructor.name ]);
                        };
                    };
                    return Data_Map_Internal.foldSubmap(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(Data_Map_Internal.monoidMap(dictOrd))(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(go)(v);
                };
            };
        };
    };
};
var pop = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var lookup = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (v) {
                        return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                    };
                };
            };
        };
    };
};
var insert = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (key) {
                    return function (val) {
                        return function (v) {
                            return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                        };
                    };
                };
            };
        };
    };
};
var foreachSlot = function (dictApplicative) {
    return function (v) {
        return function (k) {
            return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                return k($37);
            })(v);
        };
    };
};
var empty = Data_Map_Internal.empty;
module.exports = {
    empty: empty,
    lookup: lookup,
    insert: insert,
    pop: pop,
    slots: slots,
    foreachSlot: foreachSlot
};

},{"../Data.Boolean/index.js":100,"../Data.Foldable/index.js":128,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Ord/index.js":205,"../Data.Symbol/index.js":240,"../Data.Tuple/index.js":251,"../Halogen.Data.OrdBox/index.js":327}],329:[function(require,module,exports){
exports.computedStyle = function(element) {
  return function() {
    return getComputedStyle(element, null).cssText;
  };
};

},{}],330:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var CSS_Font = require("../CSS.Font/index.js");
var CSS_Geometry = require("../CSS.Geometry/index.js");
var CSS_Property = require("../CSS.Property/index.js");
var CSS_Size = require("../CSS.Size/index.js");
var CSS_String = require("../CSS.String/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Halogen_Aff_Util = require("../Halogen.Aff.Util/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML = require("../Halogen.HTML/index.js");
var Halogen_HTML_CSS = require("../Halogen.HTML.CSS/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query = require("../Halogen.Query/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_VDom_Driver = require("../Halogen.VDom.Driver/index.js");
var Record = require("../Record/index.js");
var Web_DOM_Document = require("../Web.DOM.Document/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_HTMLInputElement = require("../Web.HTML.HTMLInputElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Web_Util_TextCursor = require("../Web.Util.TextCursor/index.js");
var Web_Util_TextCursor_Element = require("../Web.Util.TextCursor.Element/index.js");
var Web_Util_TextCursor_Element_Type = require("../Web.Util.TextCursor.Element.Type/index.js");
var Blurred = (function () {
    function Blurred(value0) {
        this.value0 = value0;
    };
    Blurred.create = function (value0) {
        return new Blurred(value0);
    };
    return Blurred;
})();
var Focused = (function () {
    function Focused(value0) {
        this.value0 = value0;
    };
    Focused.create = function (value0) {
        return new Focused(value0);
    };
    return Focused;
})();
var Reset = (function () {
    function Reset(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Reset.create = function (value0) {
        return function (value1) {
            return new Reset(value0, value1);
        };
    };
    return Reset;
})();
var Receive = (function () {
    function Receive(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Receive.create = function (value0) {
        return function (value1) {
            return new Receive(value0, value1);
        };
    };
    return Receive;
})();
var Focus = (function () {
    function Focus(value0) {
        this.value0 = value0;
    };
    Focus.create = function (value0) {
        return new Focus(value0);
    };
    return Focus;
})();
var FontSize = (function () {
    function FontSize(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FontSize.create = function (value0) {
        return function (value1) {
            return new FontSize(value0, value1);
        };
    };
    return FontSize;
})();
var Input = (function () {
    function Input(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Input.create = function (value0) {
        return function (value1) {
            return new Input(value0, value1);
        };
    };
    return Input;
})();
var $$Set = (function () {
    function $$Set(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    $$Set.create = function (value0) {
        return function (value1) {
            return new $$Set(value0, value1);
        };
    };
    return $$Set;
})();
var Get = (function () {
    function Get(value0) {
        this.value0 = value0;
    };
    Get.create = function (value0) {
        return new Get(value0);
    };
    return Get;
})();
var Raising = (function () {
    function Raising(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Raising.create = function (value0) {
        return function (value1) {
            return new Raising(value0, value1);
        };
    };
    return Raising;
})();
var PreventDefault = (function () {
    function PreventDefault(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    PreventDefault.create = function (value0) {
        return function (value1) {
            return new PreventDefault(value0, value1);
        };
    };
    return PreventDefault;
})();
var Resize = (function () {
    function Resize(value0) {
        this.value0 = value0;
    };
    Resize.create = function (value0) {
        return new Resize(value0);
    };
    return Resize;
})();
var toTC = function (v) {
    if (v instanceof Blurred) {
        return Web_Util_TextCursor.single(Web_Util_TextCursor["_selected"](Data_Profunctor_Strong.strongFn))(v.value0);
    };
    if (v instanceof Focused) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Halogen.Expanding (line 150, column 1 - line 150, column 29): " + [ v.constructor.name ]);
};
var toString = function (v) {
    if (v instanceof Blurred) {
        return v.value0;
    };
    if (v instanceof Focused) {
        return Web_Util_TextCursor.content(v.value0);
    };
    throw new Error("Failed pattern match at Halogen.Expanding (line 146, column 1 - line 146, column 29): " + [ v.constructor.name ]);
};
var styleReset = ";\x0amax-width: none;\x0amin-width: 0px;\x0awidth: auto;\x0aposition: static;\x0awhite-space: pre;\x0a";
var testWidth = function (input) {
    return function (val) {
        return function __do() {
            var v = Control_Bind.bindFlipped(Effect.bindEffect)((function () {
                var $150 = Web_DOM_Document.createElement("div");
                return function ($151) {
                    return $150(Web_HTML_HTMLDocument.toDocument($151));
                };
            })())(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
            var tmpNode = Web_DOM_Element.toNode(v);
            Web_DOM_Node.setTextContent(val)(tmpNode)();
            var inputHTMLElement = Web_HTML_HTMLInputElement.toHTMLElement(input);
            var inputElement = Web_HTML_HTMLElement.toElement(inputHTMLElement);
            var inputNode = Web_DOM_Element.toNode(inputElement);
            var v1 = $foreign.computedStyle(inputElement)();
            return Control_Bind.bind(Effect.bindEffect)(Web_DOM_Node.parentNode(inputNode))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(function (parNode) {
                return function __do() {
                    var v2 = Web_DOM_Node.appendChild(tmpNode)(parNode)();
                    Web_DOM_Element.setAttribute("style")(v1 + styleReset)(v)();
                    var v3 = Web_DOM_Element.clientWidth(v)();
                    Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Class_Console.log(Effect_Class.monadEffectEffect))($foreign.computedStyle(v))();
                    var v4 = Web_DOM_Node.removeChild(tmpNode)(parNode)();
                    return v3;
                };
            }))();
        };
    };
};
var showBlurry = new Data_Show.Show(function (v) {
    if (v instanceof Blurred) {
        return "(Blurred " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
    };
    if (v instanceof Focused) {
        return "(Focused " + (Data_Show.show(Web_Util_TextCursor.showTextCursor)(v.value0) + ")");
    };
    throw new Error("Failed pattern match at Halogen.Expanding (line 135, column 1 - line 137, column 52): " + [ v.constructor.name ]);
});
var set = function (b) {
    return Control_Monad_Free.liftF(new $$Set(b, Data_Unit.unit));
};
var qRaising = function (mb) {
    return function (a) {
        return Control_Monad_Free.liftF(new Raising(mb, a));
    };
};
var obtainInputTC = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_Util_TextCursor_Element_Type.read);
var obtainInput = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLInputElement.fromElement);
var notify = Control_Monad_Free.liftF(new Raising(Data_Maybe.Nothing.value, Data_Unit.unit));
var isBlurred = function (v) {
    if (v instanceof Blurred) {
        return true;
    };
    if (v instanceof Focused) {
        return false;
    };
    throw new Error("Failed pattern match at Halogen.Expanding (line 139, column 1 - line 139, column 31): " + [ v.constructor.name ]);
};
var isFocused = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isBlurred);
var guardedModify = function (dictEq) {
    return function (dictIsSymbol) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictMonadState) {
                    return function (s) {
                        return function (v$prime) {
                            return Control_Bind.bind((dictMonadState.Monad0()).Bind1())(Control_Monad_State_Class.gets(dictMonadState)(Record.get(dictIsSymbol)(dictCons)(s)))(function (v) {
                                return Control_Applicative.when((dictMonadState.Monad0()).Applicative0())(Data_Eq.notEq(dictEq)(v)(v$prime))(Control_Monad_State_Class.modify_(dictMonadState)(Record.set(dictIsSymbol)(dictCons)(dictCons)(s)(v$prime)));
                            });
                        };
                    };
                };
            };
        };
    };
};
var get = Control_Monad_Free.liftF(new Get(Control_Category.identity(Control_Category.categoryFn)));
var modify = function (f) {
    return Control_Bind.bind(Control_Monad_Free.freeBind)(get)(function (v) {
        var v$prime = f(v);
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(set(v$prime))(function () {
            return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v$prime);
        });
    });
};
var modify_ = function (f) {
    return Data_Functor["void"](Control_Monad_Free.freeFunctor)(modify(f));
};
var functorQuery = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Input) {
            return new Input(m.value0, f(m.value1));
        };
        if (m instanceof $$Set) {
            return new $$Set(m.value0, f(m.value1));
        };
        if (m instanceof Get) {
            return new Get(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
        };
        if (m instanceof Raising) {
            return new Raising(m.value0, f(m.value1));
        };
        if (m instanceof PreventDefault) {
            return new PreventDefault(m.value0, f(m.value1));
        };
        if (m instanceof Resize) {
            return new Resize(f(m.value0));
        };
        throw new Error("Failed pattern match at Halogen.Expanding (line 54, column 1 - line 54, column 46): " + [ m.constructor.name ]);
    };
});
var fromTC = function (v) {
    return function (tc) {
        if (v) {
            return new Focused(tc);
        };
        if (!v) {
            return new Blurred(Web_Util_TextCursor.content(tc));
        };
        throw new Error("Failed pattern match at Halogen.Expanding (line 154, column 1 - line 154, column 42): " + [ v.constructor.name, tc.constructor.name ]);
    };
};
var eqBlurry = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Blurred && y instanceof Blurred) {
            return x.value0 === y.value0;
        };
        if (x instanceof Focused && y instanceof Focused) {
            return Data_Eq.eq(Web_Util_TextCursor.eqTextCursor)(x.value0)(y.value0);
        };
        return false;
    };
});
var expandingComponent = function (dictMonadEffect) {
    var render = function (s) {
        return Halogen_HTML_Elements.input([ Halogen_HTML_Properties.ref("textcursor-component"), Halogen_HTML_Properties.value(toString(s.value)), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(s.settings.type_), Halogen_HTML_Properties.classes(s.settings.classes), Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(s.settings.style)(function () {
            var padding = (function () {
                if (s.focus) {
                    return s.settings.padding.focused;
                };
                return s.settings.padding.blurred;
            })();
            return CSS_Geometry.width(Data_Exists.runExists(function (v) {
                return CSS_Size.Size(Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_String.fromString(CSS_Property.isStringValue)("calc(" + (Data_Show.show(Data_Show.showNumber)(s.size) + "px + ")))(Data_Semigroup.append(CSS_Property.semigroupValue)(v)(CSS_String.fromString(CSS_Property.isStringValue)(")"))));
            })(padding));
        })), Halogen_HTML_Events.onInput(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(Data_Maybe.Nothing.value)(Data_Unit.unit)))), Halogen_HTML_Events.onInput(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(Data_Maybe.Nothing.value)(Data_Unit.unit)))), Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(Data_Maybe.Nothing.value)(Data_Unit.unit)))), Halogen_HTML_Events.onKeyUp(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(Data_Maybe.Nothing.value)(Data_Unit.unit)))), Halogen_HTML_Events.onFocus(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(new Data_Maybe.Just(true))(Data_Unit.unit)))), Halogen_HTML_Events.onBlur(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(qRaising(new Data_Maybe.Just(false))(Data_Unit.unit)))) ]);
    };
    var withEl = function (h) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.getRef("textcursor-component"))((function () {
            var $152 = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Halogen_Query_HalogenM.applicativeHalogenM)(h);
            return function ($153) {
                return $152(obtainInputTC($153));
            };
        })());
    };
    var resetTo = function (v) {
        return Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(withEl(function (el) {
            return Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(function __do() {
                Web_Util_TextCursor_Element.setTextCursor(toTC(v))(el)();
                if (v instanceof Blurred) {
                    return Web_HTML_HTMLElement.blur(Web_Util_TextCursor_Element_Type.toHTMLElement(el))();
                };
                if (v instanceof Focused) {
                    return Web_HTML_HTMLElement.focus(Web_Util_TextCursor_Element_Type.toHTMLElement(el))();
                };
                throw new Error("Failed pattern match at Halogen.Expanding (line 232, column 7 - line 234, column 58): " + [ v.constructor.name ]);
            });
        }));
    };
    var reset = Control_Bind.bindFlipped(Halogen_Query_HalogenM.bindHalogenM)(resetTo)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
        return v.value;
    }));
    var initializer = new Data_Maybe.Just(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(modify_(Control_Category.identity(Control_Category.categoryFn)))(function () {
        return Control_Monad_Free.liftF(new Resize(Data_Unit.unit));
    }));
    var check = withEl(function (el) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
            return v.focus;
        }))(function (v) {
            return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(fromTC(v))(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(Web_Util_TextCursor_Element.textCursor(el)));
        });
    });
    var eval1 = function (v) {
        if (v instanceof PreventDefault) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(reset);
        };
        if (v instanceof Get) {
            return Data_Functor.mapFlipped(Halogen_Query_HalogenM.functorHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.value;
            }))(v.value0);
        };
        if (v instanceof Raising) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(guardedModify(Data_Eq.eqBoolean)(new Data_Symbol.IsSymbol(function () {
                return "focus";
            }))()()(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Symbol.SProxy.value))(v.value0))(function () {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(check)(function (v1) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                        return v2.value;
                    }))(function (v2) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(resetTo(v2))(function () {
                            return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(Data_Maybe.eqMaybe(eqBlurry))(v1)(new Data_Maybe.Just(v2)))(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(Halogen_Query_HalogenM.raise)(v1));
                        });
                    });
                });
            }));
        };
        if (v instanceof Input) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                var $111 = {};
                for (var $112 in v2) {
                    if ({}.hasOwnProperty.call(v2, $112)) {
                        $111[$112] = v2[$112];
                    };
                };
                $111.settings = v.value0.value0;
                return $111;
            }))(function () {
                return eval1(new $$Set(v.value0.value1, v.value1));
            });
        };
        if (v instanceof $$Set) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(resetTo(v.value0))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(guardedModify(eqBlurry)(new Data_Symbol.IsSymbol(function () {
                    return "value";
                }))()()(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Symbol.SProxy.value)(v.value0))(function () {
                    return eval1(new Resize(v.value1));
                });
            });
        };
        if (v instanceof Resize) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.getRef("textcursor-component"))((function () {
                var $154 = Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(function (el) {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                        return v1.value;
                    }))(function (v1) {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect))(testWidth(el)(toString(v1))))(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(function (w) {
                            return guardedModify(Data_Eq.eqNumber)(new Data_Symbol.IsSymbol(function () {
                                return "size";
                            }))()()(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Symbol.SProxy.value)(w);
                        }));
                    });
                });
                return function ($155) {
                    return $154(obtainInput($155));
                };
            })()));
        };
        throw new Error("Failed pattern match at Halogen.Expanding (line 240, column 5 - line 240, column 69): " + [ v.constructor.name ]);
    };
    var $$eval = function (a) {
        return Control_Monad_Free.foldFree(Halogen_Query_HalogenM.monadRecHalogenM)(eval1)(a);
    };
    return Halogen_Component.mkComponent({
        initialState: function (v) {
            return {
                settings: v.value0,
                value: v.value1,
                focus: false,
                size: 0.0
            };
        },
        render: render,
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $156 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($157) {
                    return $156($$eval($157));
                };
            })(),
            receive: (function () {
                var $158 = Data_Function.applyFlipped(Data_Unit.unit);
                var $159 = Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Control_Monad_Free.liftF);
                return function ($160) {
                    return Data_Maybe.Just.create($158($159(Input.create($160))));
                };
            })(),
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        })
    });
};
var demo = function (dictMonadEffect) {
    var settings = function (s) {
        return {
            classes: [  ],
            type_: DOM_HTML_Indexed_InputType.InputText.value,
            padding: {
                focused: Data_Exists.mkExists(CSS_Size.em(2.0)),
                blurred: Data_Exists.mkExists(CSS_Size.em(1.0))
            },
            style: (function () {
                var focus = isFocused(s.value);
                return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.minWidth((function () {
                    if (focus) {
                        return CSS_Size.em(7.0);
                    };
                    return CSS_Size.em(3.0);
                })()))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.maxWidth((function () {
                        if (focus) {
                            return CSS_Size.em(24.0);
                        };
                        return CSS_Size.em(20.0);
                    })()))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Font.fontSize(CSS_Size.px(s.fontSize)))(function () {
                            return CSS_Stylesheet.key(CSS_Property.valString)(CSS_String.fromString(CSS_Property.isStringKey)("text-overflow"))("ellipsis");
                        });
                    });
                });
            })()
        };
    };
    var render = function (s) {
        return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputRange.value), Halogen_HTML_Properties.value(Data_Show.show(Data_Show.showNumber)(s.fontSize)), Halogen_HTML_Properties.min(5.0), Halogen_HTML_Properties.max(50.0), Halogen_HTML_Events.onValueInput(function (v) {
            return Data_Functor.flap(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(FontSize.create)(Data_Number.fromString(v)))(Data_Unit.unit);
        }) ]), Halogen_HTML_Elements.br_, Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
            return "tc";
        }))(Data_Ord.ordUnit)(Data_Symbol.SProxy.value)(Data_Unit.unit)(expandingComponent(dictMonadEffect))(Control_Apply.apply(Control_Apply.applyFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Tuple.Tuple.create)(settings))(function (v) {
            return v.value;
        })(s))(function ($161) {
            return Data_Maybe.Just.create(Halogen_Query.tell(Receive.create($161)));
        }), Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Halogen_Query.tell(Focus.create)))) ])([ Halogen_HTML_Core.text("Focus") ]) ]);
    };
    var nov = Focused.create({
        before: "before",
        selected: "(selected)",
        after: "after",
        direction: Web_Util_TextCursor.None.value
    });
    var inform = Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v) {
        return v.value;
    }))((function () {
        var $162 = Effect_Class_Console.log(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadEffect));
        return function ($163) {
            return $162((function (v) {
                if (v instanceof Blurred) {
                    return v.value0;
                };
                if (v instanceof Focused) {
                    return [ v.value0.before, v.value0.selected, v.value0.after ];
                };
                throw new Error("Failed pattern match at Halogen.Expanding (line 311, column 34 - line 314, column 55): " + [ v.constructor.name ]);
            })($163));
        };
    })());
    var update = function (v) {
        return Control_Apply.applySecond(Halogen_Query_HalogenM.applyHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
            var $130 = {};
            for (var $131 in v1) {
                if ({}.hasOwnProperty.call(v1, $131)) {
                    $130[$131] = v1[$131];
                };
            };
            $130.value = v;
            return $130;
        }))(inform);
    };
    var $$eval = function (v) {
        if (v instanceof Focus) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value0)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.value;
            }))((function () {
                var $164 = Web_Util_TextCursor.single(Web_Util_TextCursor["_selected"](Data_Profunctor_Strong.strongFn));
                return function ($165) {
                    return update(Focused.create($164(toString($165))));
                };
            })()));
        };
        if (v instanceof Reset) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(update(v.value0));
        };
        if (v instanceof FontSize) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                var $137 = {};
                for (var $138 in v1) {
                    if ({}.hasOwnProperty.call(v1, $138)) {
                        $137[$138] = v1[$138];
                    };
                };
                $137.fontSize = v.value0;
                return $137;
            }));
        };
        if (v instanceof Receive) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                return v2.value;
            }))(function (v2) {
                var stayhere = (function () {
                    if (v.value0 instanceof Blurred && (Data_String_CodeUnits.contains("stay here")(v.value0.value0) || Data_String_CodeUnits.contains("stay here")(toString(v2)))) {
                        return true;
                    };
                    return false;
                })();
                var samesies = toString(v.value0) === toString(v2);
                var mentions = function (p) {
                    var $166 = Data_String_CodeUnits.contains(p);
                    return function ($167) {
                        return $166(toString($167));
                    };
                };
                var ignore = mentions("stop");
                var updating = (function () {
                    if (stayhere) {
                        return false;
                    };
                    if (samesies) {
                        return true;
                    };
                    var $147 = ignore(v2) && ignore(v.value0);
                    if ($147) {
                        return false;
                    };
                    return true;
                })();
                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(updating)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(update(v.value0))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(mentions("reset")(v.value0))(update(new Focused(Web_Util_TextCursor.empty))))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(mentions("blur")(v.value0) && (isFocused(v2) && !samesies))(update(Blurred.create(toString(v.value0)))))(function () {
                            return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(mentions("select all")(v.value0))(update(Focused.create(Web_Util_TextCursor.single(Web_Util_TextCursor["_selected"](Data_Profunctor_Strong.strongFn))(toString(v.value0)))));
                        });
                    });
                }));
            }));
        };
        throw new Error("Failed pattern match at Halogen.Expanding (line 330, column 5 - line 330, column 110): " + [ v.constructor.name ]);
    };
    return Halogen_Component.mkComponent({
        initialState: Data_Function["const"]({
            value: nov,
            fontSize: 15.0
        }),
        render: render,
        "eval": Halogen_Component.mkEval({
            handleAction: $$eval,
            handleQuery: (function () {
                var $168 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
                return function ($169) {
                    return $168($$eval($169));
                };
            })(),
            receive: Halogen_Component.defaultEval.receive,
            initialize: Halogen_Component.defaultEval.initialize,
            finalize: Halogen_Component.defaultEval.finalize
        })
    });
};
var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(Halogen_VDom_Driver.runUI(demo(Effect_Aff.monadEffectAff))(Data_Unit.unit)));
var blur = modify_(function ($170) {
    return Blurred.create(toString($170));
});
module.exports = {
    Input: Input,
    "Set": $$Set,
    Get: Get,
    Raising: Raising,
    PreventDefault: PreventDefault,
    Resize: Resize,
    set: set,
    get: get,
    modify: modify,
    modify_: modify_,
    blur: blur,
    notify: notify,
    qRaising: qRaising,
    styleReset: styleReset,
    testWidth: testWidth,
    obtainInput: obtainInput,
    obtainInputTC: obtainInputTC,
    Blurred: Blurred,
    Focused: Focused,
    isBlurred: isBlurred,
    isFocused: isFocused,
    toString: toString,
    toTC: toTC,
    fromTC: fromTC,
    guardedModify: guardedModify,
    expandingComponent: expandingComponent,
    Reset: Reset,
    Receive: Receive,
    Focus: Focus,
    FontSize: FontSize,
    demo: demo,
    main: main,
    functorQuery: functorQuery,
    eqBlurry: eqBlurry,
    showBlurry: showBlurry,
    computedStyle: $foreign.computedStyle
};

},{"../CSS.Font/index.js":5,"../CSS.Geometry/index.js":6,"../CSS.Property/index.js":7,"../CSS.Size/index.js":10,"../CSS.String/index.js":11,"../CSS.Stylesheet/index.js":12,"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Free/index.js":42,"../Control.Monad.State.Class/index.js":53,"../Control.Semigroupoid/index.js":68,"../DOM.HTML.Indexed.InputType/index.js":74,"../Data.Eq/index.js":123,"../Data.Exists/index.js":126,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Number/index.js":201,"../Data.Ord/index.js":205,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.String.CodeUnits/index.js":230,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Aff/index.js":297,"../Effect.Class.Console/index.js":298,"../Effect.Class/index.js":299,"../Effect/index.js":309,"../Halogen.Aff.Util/index.js":323,"../Halogen.Component/index.js":326,"../Halogen.HTML.CSS/index.js":331,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.HTML/index.js":337,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query/index.js":343,"../Halogen.VDom.Driver/index.js":346,"../Record/index.js":385,"../Web.DOM.Document/index.js":397,"../Web.DOM.Element/index.js":399,"../Web.DOM.Node/index.js":401,"../Web.HTML.HTMLDocument/index.js":416,"../Web.HTML.HTMLElement/index.js":418,"../Web.HTML.HTMLInputElement/index.js":420,"../Web.HTML.Window/index.js":425,"../Web.HTML/index.js":427,"../Web.Util.TextCursor.Element.Type/index.js":435,"../Web.Util.TextCursor.Element/index.js":436,"../Web.Util.TextCursor/index.js":437,"./foreign.js":329}],331:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var CSS_Render = require("../CSS.Render/index.js");
var CSS_Stylesheet = require("../CSS.Stylesheet/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var stylesheet = function (css) {
    var content = Data_Maybe.fromMaybe("")(CSS_Render.renderedSheet(CSS_Render.render(css)));
    return Halogen_HTML_Elements.style([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropMediaType)("text/css") ])([ Halogen_HTML_Core.text(content) ]);
};
var style = (function () {
    var toString = (function () {
        var $4 = Data_String_Common.joinWith("; ");
        var $5 = Foreign_Object.foldMap(Data_Monoid.monoidArray)(function (key) {
            return function (val) {
                return [ key + (": " + val) ];
            };
        });
        return function ($6) {
            return $4($5($6));
        };
    })();
    var rights = Data_Array.concatMap(Data_Foldable.foldMap(Data_Either.foldableEither)(Data_Monoid.monoidArray)(Data_Array.singleton));
    var property = function (v) {
        if (v instanceof CSS_Stylesheet.Property) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
        };
        return Data_Maybe.Nothing.value;
    };
    var rules = function (rs) {
        var properties = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapMaybe(property)(rs))(function ($7) {
            return rights(CSS_Render.collect($7));
        });
        return Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(properties);
    };
    var $8 = Halogen_HTML_Properties.attr("style");
    return function ($9) {
        return $8(toString(rules(CSS_Stylesheet.runS($9))));
    };
})();
module.exports = {
    style: style,
    stylesheet: stylesheet
};

},{"../CSS.Render/index.js":8,"../CSS.Stylesheet/index.js":12,"../Control.Bind/index.js":23,"../Data.Array/index.js":91,"../Data.Either/index.js":119,"../Data.Foldable/index.js":128,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.String.Common/index.js":232,"../Data.Tuple/index.js":251,"../Foreign.Object/index.js":315,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Properties/index.js":336}],332:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var DOM_HTML_Indexed_ButtonType = require("../DOM.HTML.Indexed.ButtonType/index.js");
var DOM_HTML_Indexed_CrossOriginValue = require("../DOM.HTML.Indexed.CrossOriginValue/index.js");
var DOM_HTML_Indexed_DirValue = require("../DOM.HTML.Indexed.DirValue/index.js");
var DOM_HTML_Indexed_FormMethod = require("../DOM.HTML.Indexed.FormMethod/index.js");
var DOM_HTML_Indexed_InputAcceptType = require("../DOM.HTML.Indexed.InputAcceptType/index.js");
var DOM_HTML_Indexed_InputType = require("../DOM.HTML.Indexed.InputType/index.js");
var DOM_HTML_Indexed_KindValue = require("../DOM.HTML.Indexed.KindValue/index.js");
var DOM_HTML_Indexed_MenuType = require("../DOM.HTML.Indexed.MenuType/index.js");
var DOM_HTML_Indexed_MenuitemType = require("../DOM.HTML.Indexed.MenuitemType/index.js");
var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");
var DOM_HTML_Indexed_OrderedListType = require("../DOM.HTML.Indexed.OrderedListType/index.js");
var DOM_HTML_Indexed_PreloadValue = require("../DOM.HTML.Indexed.PreloadValue/index.js");
var DOM_HTML_Indexed_ScopeValue = require("../DOM.HTML.Indexed.ScopeValue/index.js");
var DOM_HTML_Indexed_StepValue = require("../DOM.HTML.Indexed.StepValue/index.js");
var DOM_HTML_Indexed_WrapValue = require("../DOM.HTML.Indexed.WrapValue/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var PropName = function (x) {
    return x;
};
var HTML = function (x) {
    return x;
};
var ClassName = function (x) {
    return x;
};
var AttrName = function (x) {
    return x;
};
var IsProp = function (toPropValue) {
    this.toPropValue = toPropValue;
};
var widget = function ($30) {
    return HTML(Halogen_VDom_Types.Widget.create($30));
};
var toPropValue = function (dict) {
    return dict.toPropValue;
};
var text = function ($31) {
    return HTML(Halogen_VDom_Types.Text.create($31));
};
var semigroupClassName = Data_Semigroup.semigroupString;
var ref = function (f) {
    return Halogen_VDom_DOM_Prop.Ref.create(function ($32) {
        return f((function (v) {
            if (v instanceof Halogen_VDom_DOM_Prop.Created) {
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Halogen.HTML.Core (line 104, column 21 - line 106, column 23): " + [ v.constructor.name ]);
        })($32));
    });
};
var prop = function (dictIsProp) {
    return function (v) {
        var $33 = Halogen_VDom_DOM_Prop.Property.create(v);
        var $34 = toPropValue(dictIsProp);
        return function ($35) {
            return $33($34($35));
        };
    };
};
var ordPropName = Data_Ord.ordString;
var ordClassName = Data_Ord.ordString;
var ordAttrName = Data_Ord.ordString;
var newtypePropName = new Data_Newtype.Newtype(function (n) {
    return n;
}, PropName);
var newtypeHTML = new Data_Newtype.Newtype(function (n) {
    return n;
}, HTML);
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            return Halogen_VDom_Types.renderWidget(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))))((function () {
                var $36 = Data_Newtype.un(newtypeHTML)(HTML);
                return function ($37) {
                    return $36(g($37));
                };
            })())(v);
        };
    };
};
var newtypeClassName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ClassName);
var newtypeAttrName = new Data_Newtype.Newtype(function (n) {
    return n;
}, AttrName);
var keyed = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Keyed(ns, name, props, children);
            };
        };
    };
};
var isPropWrapValue = new IsProp(function ($38) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_WrapValue.renderWrapValue($38));
});
var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
var isPropStepValue = new IsProp(function ($39) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_StepValue.renderStepValue($39));
});
var isPropScopeValue = new IsProp(function ($40) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ScopeValue.renderScopeValue($40));
});
var isPropPreloadValue = new IsProp(function ($41) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_PreloadValue.renderPreloadValue($41));
});
var isPropOrderedListType = new IsProp(function ($42) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OrderedListType.renderOrderedListType($42));
});
var isPropOnOff = new IsProp(function ($43) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_OnOff.renderOnOff($43));
});
var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
var isPropMenuitemType = new IsProp(function ($44) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuitemType.renderMenuitemType($44));
});
var isPropMenuType = new IsProp(function ($45) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_MenuType.renderMenuType($45));
});
var isPropMediaType = new IsProp((function () {
    var $46 = Data_Newtype.unwrap(Data_MediaType.newtypeMediaType);
    return function ($47) {
        return Halogen_VDom_DOM_Prop.propFromString($46($47));
    };
})());
var isPropKindValue = new IsProp(function ($48) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_KindValue.renderKindValue($48));
});
var isPropInt = new IsProp(Halogen_VDom_DOM_Prop.propFromInt);
var isPropInputType = new IsProp(function ($49) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($49));
});
var isPropInputAcceptType = new IsProp(function ($50) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputAcceptType.renderInputAcceptType($50));
});
var isPropFormMethod = new IsProp(function ($51) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_FormMethod.renderFormMethod($51));
});
var isPropDirValue = new IsProp(function ($52) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_DirValue.renderDirValue($52));
});
var isPropCrossOriginValue = new IsProp(function ($53) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_CrossOriginValue.renderCrossOriginValue($53));
});
var isPropButtonType = new IsProp(function ($54) {
    return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($54));
});
var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
var handler = Halogen_VDom_DOM_Prop.Handler.create;
var eqPropName = Data_Eq.eqString;
var eqClassName = Data_Eq.eqString;
var eqAttrName = Data_Eq.eqString;
var element = function (ns) {
    return function (name) {
        return function (props) {
            return function (children) {
                return new Halogen_VDom_Types.Elem(ns, name, props, children);
            };
        };
    };
};
var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(g))))(f)(v);
        };
    };
});
var functorHTML = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorHTML));
var attr = function (ns) {
    return function (v) {
        return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
    };
};
module.exports = {
    HTML: HTML,
    renderWidget: renderWidget,
    widget: widget,
    text: text,
    element: element,
    keyed: keyed,
    prop: prop,
    attr: attr,
    handler: handler,
    ref: ref,
    IsProp: IsProp,
    toPropValue: toPropValue,
    PropName: PropName,
    AttrName: AttrName,
    ClassName: ClassName,
    newtypeHTML: newtypeHTML,
    bifunctorHTML: bifunctorHTML,
    functorHTML: functorHTML,
    isPropString: isPropString,
    isPropInt: isPropInt,
    isPropNumber: isPropNumber,
    isPropBoolean: isPropBoolean,
    isPropMediaType: isPropMediaType,
    isPropButtonType: isPropButtonType,
    isPropCrossOriginValue: isPropCrossOriginValue,
    isPropDirValue: isPropDirValue,
    isPropFormMethod: isPropFormMethod,
    isPropInputType: isPropInputType,
    isPropKindValue: isPropKindValue,
    isPropMenuitemType: isPropMenuitemType,
    isPropMenuType: isPropMenuType,
    isPropOnOff: isPropOnOff,
    isPropOrderedListType: isPropOrderedListType,
    isPropPreloadValue: isPropPreloadValue,
    isPropScopeValue: isPropScopeValue,
    isPropStepValue: isPropStepValue,
    isPropWrapValue: isPropWrapValue,
    isPropInputAcceptType: isPropInputAcceptType,
    newtypePropName: newtypePropName,
    eqPropName: eqPropName,
    ordPropName: ordPropName,
    newtypeAttrName: newtypeAttrName,
    eqAttrName: eqAttrName,
    ordAttrName: ordAttrName,
    newtypeClassName: newtypeClassName,
    eqClassName: eqClassName,
    ordClassName: ordClassName,
    semigroupClassName: semigroupClassName
};

},{"../DOM.HTML.Indexed.ButtonType/index.js":69,"../DOM.HTML.Indexed.CrossOriginValue/index.js":70,"../DOM.HTML.Indexed.DirValue/index.js":71,"../DOM.HTML.Indexed.FormMethod/index.js":72,"../DOM.HTML.Indexed.InputAcceptType/index.js":73,"../DOM.HTML.Indexed.InputType/index.js":74,"../DOM.HTML.Indexed.KindValue/index.js":75,"../DOM.HTML.Indexed.MenuType/index.js":76,"../DOM.HTML.Indexed.MenuitemType/index.js":77,"../DOM.HTML.Indexed.OnOff/index.js":78,"../DOM.HTML.Indexed.OrderedListType/index.js":79,"../DOM.HTML.Indexed.PreloadValue/index.js":80,"../DOM.HTML.Indexed.ScopeValue/index.js":81,"../DOM.HTML.Indexed.StepValue/index.js":82,"../DOM.HTML.Indexed.WrapValue/index.js":83,"../Data.Bifunctor/index.js":98,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.MediaType/index.js":188,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Halogen.Query.Input/index.js":342,"../Halogen.VDom.DOM.Prop/index.js":344,"../Halogen.VDom.Types/index.js":349}],333:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var ul = Halogen_HTML_Elements.keyed("ul");
var ul_ = ul([  ]);
var tr = Halogen_HTML_Elements.keyed("tr");
var tr_ = tr([  ]);
var thead = Halogen_HTML_Elements.keyed("thead");
var thead_ = thead([  ]);
var tfoot = Halogen_HTML_Elements.keyed("tfoot");
var tfoot_ = tfoot([  ]);
var tbody = Halogen_HTML_Elements.keyed("tbody");
var tbody_ = tbody([  ]);
var table = Halogen_HTML_Elements.keyed("table");
var table_ = table([  ]);
var ol = Halogen_HTML_Elements.keyed("ol");
var ol_ = ol([  ]);
var menu = Halogen_HTML_Elements.keyed("menu");
var menu_ = menu([  ]);
var header = Halogen_HTML_Elements.keyed("header");
var header_ = header([  ]);
var form = Halogen_HTML_Elements.keyed("form");
var form_ = form([  ]);
var footer = Halogen_HTML_Elements.keyed("footer");
var footer_ = footer([  ]);
var fieldset = Halogen_HTML_Elements.keyed("fieldset");
var fieldset_ = fieldset([  ]);
var dl = Halogen_HTML_Elements.keyed("dl");
var dl_ = dl([  ]);
var div = Halogen_HTML_Elements.keyed("div");
var div_ = div([  ]);
var dialog = Halogen_HTML_Elements.keyed("dialog");
var dialog_ = dialog([  ]);
var colgroup = Halogen_HTML_Elements.keyed("colgroup");
var colgroup_ = colgroup([  ]);
var article = Halogen_HTML_Elements.keyed("article");
var article_ = article([  ]);
module.exports = {
    article: article,
    article_: article_,
    colgroup: colgroup,
    colgroup_: colgroup_,
    dialog: dialog,
    dialog_: dialog_,
    div: div,
    div_: div_,
    dl: dl,
    dl_: dl_,
    fieldset: fieldset,
    fieldset_: fieldset_,
    footer: footer,
    footer_: footer_,
    form: form,
    form_: form_,
    header: header,
    header_: header_,
    menu: menu,
    menu_: menu_,
    ol: ol,
    ol_: ol_,
    table: table,
    table_: table_,
    tbody: tbody,
    tbody_: tbody_,
    tfoot: tfoot,
    tfoot_: tfoot_,
    thead: thead,
    thead_: thead_,
    tr: tr,
    tr_: tr_,
    ul: ul,
    ul_: ul_
};

},{"../Halogen.HTML.Elements/index.js":334}],334:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var withKeys_ = function (ctor) {
    return function (children) {
        var v = ctor([  ]);
        if (v instanceof Halogen_VDom_Types.Elem) {
            return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
        };
        return v;
    };
};
var withKeys = function (ctor) {
    return function (props) {
        return function (children) {
            var v = ctor(props)([  ]);
            if (v instanceof Halogen_VDom_Types.Elem) {
                return new Halogen_VDom_Types.Keyed(v.value0, v.value1, v.value2, children);
            };
            return v;
        };
    };
};
var keyedNS = (function () {
    var $12 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
    return function ($13) {
        return Halogen_HTML_Core.keyed($12($13));
    };
})();
var keyed = Halogen_HTML_Core.keyed(Data_Maybe.Nothing.value);
var elementNS = (function () {
    var $14 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
    return function ($15) {
        return Halogen_HTML_Core.element($14($15));
    };
})();
var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
var em = element("em");
var em_ = em([  ]);
var embed = element("embed");
var embed_ = embed([  ]);
var fieldset = element("fieldset");
var fieldset_ = fieldset([  ]);
var figcaption = element("figcaption");
var figcaption_ = figcaption([  ]);
var figure = element("figure");
var figure_ = figure([  ]);
var footer = element("footer");
var footer_ = footer([  ]);
var form = element("form");
var form_ = form([  ]);
var h1 = element("h1");
var h1_ = h1([  ]);
var h2 = element("h2");
var h2_ = h2([  ]);
var h3 = element("h3");
var h3_ = h3([  ]);
var h4 = element("h4");
var h4_ = h4([  ]);
var h5 = element("h5");
var h5_ = h5([  ]);
var h6 = element("h6");
var h6_ = h6([  ]);
var head = element("head");
var head_ = head([  ]);
var header = element("header");
var header_ = header([  ]);
var hr = function (props) {
    return element("hr")(props)([  ]);
};
var hr_ = hr([  ]);
var html = element("html");
var html_ = html([  ]);
var i = element("i");
var i_ = i([  ]);
var iframe = function (props) {
    return element("iframe")(props)([  ]);
};
var img = function (props) {
    return element("img")(props)([  ]);
};
var input = function (props) {
    return element("input")(props)([  ]);
};
var ins = element("ins");
var ins_ = ins([  ]);
var kbd = element("kbd");
var kbd_ = kbd([  ]);
var label = element("label");
var label_ = label([  ]);
var legend = element("legend");
var legend_ = legend([  ]);
var li = element("li");
var li_ = li([  ]);
var link = function (props) {
    return element("link")(props)([  ]);
};
var main = element("main");
var main_ = main([  ]);
var map = element("map");
var map_ = map([  ]);
var mark = element("mark");
var mark_ = mark([  ]);
var menu = element("menu");
var menu_ = menu([  ]);
var menuitem = element("menuitem");
var menuitem_ = menuitem([  ]);
var meta = function (props) {
    return element("meta")(props)([  ]);
};
var meter = element("meter");
var meter_ = meter([  ]);
var nav = element("nav");
var nav_ = nav([  ]);
var noscript = element("noscript");
var noscript_ = noscript([  ]);
var object = element("object");
var object_ = object([  ]);
var ol = element("ol");
var ol_ = ol([  ]);
var optgroup = element("optgroup");
var optgroup_ = optgroup([  ]);
var option = element("option");
var option_ = option([  ]);
var output = element("output");
var output_ = output([  ]);
var p = element("p");
var p_ = p([  ]);
var param = function (props) {
    return element("param")(props)([  ]);
};
var pre = element("pre");
var pre_ = pre([  ]);
var progress = element("progress");
var progress_ = progress([  ]);
var q = element("q");
var q_ = q([  ]);
var rp = element("rp");
var rp_ = rp([  ]);
var rt = element("rt");
var rt_ = rt([  ]);
var ruby = element("ruby");
var ruby_ = ruby([  ]);
var samp = element("samp");
var samp_ = samp([  ]);
var script = element("script");
var script_ = script([  ]);
var section = element("section");
var section_ = section([  ]);
var select = element("select");
var select_ = select([  ]);
var small = element("small");
var small_ = small([  ]);
var source = function (props) {
    return element("source")(props)([  ]);
};
var span = element("span");
var span_ = span([  ]);
var strong = element("strong");
var strong_ = strong([  ]);
var style = element("style");
var style_ = style([  ]);
var sub = element("sub");
var sub_ = sub([  ]);
var summary = element("summary");
var summary_ = summary([  ]);
var sup = element("sup");
var sup_ = sup([  ]);
var table = element("table");
var table_ = table([  ]);
var tbody = element("tbody");
var tbody_ = tbody([  ]);
var td = element("td");
var td_ = td([  ]);
var textarea = function (es) {
    return element("textarea")(es)([  ]);
};
var tfoot = element("tfoot");
var tfoot_ = tfoot([  ]);
var th = element("th");
var th_ = th([  ]);
var thead = element("thead");
var thead_ = thead([  ]);
var time = element("time");
var time_ = time([  ]);
var title = element("title");
var title_ = title([  ]);
var tr = element("tr");
var tr_ = tr([  ]);
var track = function (props) {
    return element("track")(props)([  ]);
};
var u = element("u");
var u_ = u([  ]);
var ul = element("ul");
var ul_ = ul([  ]);
var $$var = element("var");
var var_ = $$var([  ]);
var video = element("video");
var video_ = video([  ]);
var wbr = function (props) {
    return element("wbr")(props)([  ]);
};
var dt = element("dt");
var dt_ = dt([  ]);
var dl = element("dl");
var dl_ = dl([  ]);
var div = element("div");
var div_ = div([  ]);
var dialog = element("dialog");
var dialog_ = dialog([  ]);
var dfn = element("dfn");
var dfn_ = dfn([  ]);
var details = element("details");
var details_ = details([  ]);
var del = element("del");
var del_ = del([  ]);
var dd = element("dd");
var dd_ = dd([  ]);
var datalist = element("datalist");
var datalist_ = datalist([  ]);
var command = function (props) {
    return element("command")(props)([  ]);
};
var colgroup = element("colgroup");
var colgroup_ = colgroup([  ]);
var col = function (props) {
    return element("col")(props)([  ]);
};
var code = element("code");
var code_ = code([  ]);
var cite = element("cite");
var cite_ = cite([  ]);
var caption = element("caption");
var caption_ = caption([  ]);
var canvas = function (props) {
    return element("canvas")(props)([  ]);
};
var button = element("button");
var button_ = button([  ]);
var br = function (props) {
    return element("br")(props)([  ]);
};
var br_ = br([  ]);
var body = element("body");
var body_ = body([  ]);
var blockquote = element("blockquote");
var blockquote_ = blockquote([  ]);
var bdo = element("bdo");
var bdo_ = bdo([  ]);
var bdi = element("bdi");
var bdi_ = bdi([  ]);
var base = function (props) {
    return element("base")(props)([  ]);
};
var b = element("b");
var b_ = b([  ]);
var audio = element("audio");
var audio_ = audio([  ]);
var aside = element("aside");
var aside_ = aside([  ]);
var article = element("article");
var article_ = article([  ]);
var area = function (props) {
    return element("area")(props)([  ]);
};
var address = element("address");
var address_ = address([  ]);
var abbr = element("abbr");
var abbr_ = abbr([  ]);
var a = element("a");
var a_ = a([  ]);
module.exports = {
    element: element,
    elementNS: elementNS,
    keyed: keyed,
    keyedNS: keyedNS,
    withKeys: withKeys,
    withKeys_: withKeys_,
    a: a,
    a_: a_,
    abbr: abbr,
    abbr_: abbr_,
    address: address,
    address_: address_,
    area: area,
    article: article,
    article_: article_,
    aside: aside,
    aside_: aside_,
    audio: audio,
    audio_: audio_,
    b: b,
    b_: b_,
    base: base,
    bdi: bdi,
    bdi_: bdi_,
    bdo: bdo,
    bdo_: bdo_,
    blockquote: blockquote,
    blockquote_: blockquote_,
    body: body,
    body_: body_,
    br: br,
    br_: br_,
    button: button,
    button_: button_,
    canvas: canvas,
    caption: caption,
    caption_: caption_,
    cite: cite,
    cite_: cite_,
    code: code,
    code_: code_,
    col: col,
    colgroup: colgroup,
    colgroup_: colgroup_,
    command: command,
    datalist: datalist,
    datalist_: datalist_,
    dd: dd,
    dd_: dd_,
    del: del,
    del_: del_,
    details: details,
    details_: details_,
    dfn: dfn,
    dfn_: dfn_,
    dialog: dialog,
    dialog_: dialog_,
    div: div,
    div_: div_,
    dl: dl,
    dl_: dl_,
    dt: dt,
    dt_: dt_,
    em: em,
    em_: em_,
    embed: embed,
    embed_: embed_,
    fieldset: fieldset,
    fieldset_: fieldset_,
    figcaption: figcaption,
    figcaption_: figcaption_,
    figure: figure,
    figure_: figure_,
    footer: footer,
    footer_: footer_,
    form: form,
    form_: form_,
    h1: h1,
    h1_: h1_,
    h2: h2,
    h2_: h2_,
    h3: h3,
    h3_: h3_,
    h4: h4,
    h4_: h4_,
    h5: h5,
    h5_: h5_,
    h6: h6,
    h6_: h6_,
    head: head,
    head_: head_,
    header: header,
    header_: header_,
    hr: hr,
    hr_: hr_,
    html: html,
    html_: html_,
    i: i,
    i_: i_,
    iframe: iframe,
    img: img,
    input: input,
    ins: ins,
    ins_: ins_,
    kbd: kbd,
    kbd_: kbd_,
    label: label,
    label_: label_,
    legend: legend,
    legend_: legend_,
    li: li,
    li_: li_,
    link: link,
    main: main,
    main_: main_,
    map: map,
    map_: map_,
    mark: mark,
    mark_: mark_,
    menu: menu,
    menu_: menu_,
    menuitem: menuitem,
    menuitem_: menuitem_,
    meta: meta,
    meter: meter,
    meter_: meter_,
    nav: nav,
    nav_: nav_,
    noscript: noscript,
    noscript_: noscript_,
    object: object,
    object_: object_,
    ol: ol,
    ol_: ol_,
    optgroup: optgroup,
    optgroup_: optgroup_,
    option: option,
    option_: option_,
    output: output,
    output_: output_,
    p: p,
    p_: p_,
    param: param,
    pre: pre,
    pre_: pre_,
    progress: progress,
    progress_: progress_,
    q: q,
    q_: q_,
    rp: rp,
    rp_: rp_,
    rt: rt,
    rt_: rt_,
    ruby: ruby,
    ruby_: ruby_,
    samp: samp,
    samp_: samp_,
    script: script,
    script_: script_,
    section: section,
    section_: section_,
    select: select,
    select_: select_,
    small: small,
    small_: small_,
    source: source,
    span: span,
    span_: span_,
    strong: strong,
    strong_: strong_,
    style: style,
    style_: style_,
    sub: sub,
    sub_: sub_,
    summary: summary,
    summary_: summary_,
    sup: sup,
    sup_: sup_,
    table: table,
    table_: table_,
    tbody: tbody,
    tbody_: tbody_,
    td: td,
    td_: td_,
    textarea: textarea,
    tfoot: tfoot,
    tfoot_: tfoot_,
    th: th,
    th_: th_,
    thead: thead,
    thead_: thead_,
    time: time,
    time_: time_,
    title: title,
    title_: title_,
    tr: tr,
    tr_: tr_,
    track: track,
    u: u,
    u_: u_,
    ul: ul,
    ul_: ul_,
    "var": $$var,
    var_: var_,
    video: video,
    video_: video_,
    wbr: wbr
};

},{"../Control.Applicative/index.js":17,"../Data.Maybe/index.js":187,"../Halogen.HTML.Core/index.js":332,"../Halogen.VDom.Types/index.js":349}],335:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Index = require("../Foreign.Index/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Clipboard_ClipboardEvent_EventTypes = require("../Web.Clipboard.ClipboardEvent.EventTypes/index.js");
var Web_Event_Event = require("../Web.Event.Event/index.js");
var Web_HTML_Event_DragEvent_EventTypes = require("../Web.HTML.Event.DragEvent.EventTypes/index.js");
var Web_HTML_Event_EventTypes = require("../Web.HTML.Event.EventTypes/index.js");
var Web_UIEvent_FocusEvent_EventTypes = require("../Web.UIEvent.FocusEvent.EventTypes/index.js");
var Web_UIEvent_KeyboardEvent_EventTypes = require("../Web.UIEvent.KeyboardEvent.EventTypes/index.js");
var Web_UIEvent_MouseEvent_EventTypes = require("../Web.UIEvent.MouseEvent.EventTypes/index.js");
var Web_UIEvent_WheelEvent_EventTypes = require("../Web.UIEvent.WheelEvent.EventTypes/index.js");
var wheelHandler = Unsafe_Coerce.unsafeCoerce;
var touchHandler = Unsafe_Coerce.unsafeCoerce;
var mouseHandler = Unsafe_Coerce.unsafeCoerce;
var keyHandler = Unsafe_Coerce.unsafeCoerce;
var handler = function (et) {
    var $0 = Halogen_HTML_Core.handler(et);
    var $1 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create));
    return function ($2) {
        return $0($1($2));
    };
};
var onAbort = handler("abort");
var onChange = handler(Web_HTML_Event_EventTypes.change);
var onClick = (function () {
    var $3 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
    return function ($4) {
        return $3(mouseHandler($4));
    };
})();
var onDoubleClick = (function () {
    var $5 = handler(Web_UIEvent_MouseEvent_EventTypes.dblclick);
    return function ($6) {
        return $5(mouseHandler($6));
    };
})();
var onError = handler(Web_HTML_Event_EventTypes.error);
var onInput = handler(Web_HTML_Event_EventTypes.input);
var onInvalid = handler(Web_HTML_Event_EventTypes.invalid);
var onKeyDown = (function () {
    var $7 = handler(Web_UIEvent_KeyboardEvent_EventTypes.keydown);
    return function ($8) {
        return $7(keyHandler($8));
    };
})();
var onKeyUp = (function () {
    var $9 = handler(Web_UIEvent_KeyboardEvent_EventTypes.keyup);
    return function ($10) {
        return $9(keyHandler($10));
    };
})();
var onLoad = handler(Web_HTML_Event_EventTypes.load);
var onMouseDown = (function () {
    var $11 = handler(Web_UIEvent_MouseEvent_EventTypes.mousedown);
    return function ($12) {
        return $11(mouseHandler($12));
    };
})();
var onMouseEnter = (function () {
    var $13 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseenter);
    return function ($14) {
        return $13(mouseHandler($14));
    };
})();
var onMouseLeave = (function () {
    var $15 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseleave);
    return function ($16) {
        return $15(mouseHandler($16));
    };
})();
var onMouseMove = (function () {
    var $17 = handler(Web_UIEvent_MouseEvent_EventTypes.mousemove);
    return function ($18) {
        return $17(mouseHandler($18));
    };
})();
var onMouseOut = (function () {
    var $19 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseout);
    return function ($20) {
        return $19(mouseHandler($20));
    };
})();
var onMouseOver = (function () {
    var $21 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseover);
    return function ($22) {
        return $21(mouseHandler($22));
    };
})();
var onMouseUp = (function () {
    var $23 = handler(Web_UIEvent_MouseEvent_EventTypes.mouseup);
    return function ($24) {
        return $23(mouseHandler($24));
    };
})();
var onReset = handler("reset");
var onResize = handler("resize");
var onScroll = handler("scroll");
var onSelect = handler(Web_HTML_Event_EventTypes.select);
var onSubmit = handler("submit");
var onTouchCancel = (function () {
    var $25 = handler("touchcancel");
    return function ($26) {
        return $25(touchHandler($26));
    };
})();
var onTouchEnd = (function () {
    var $27 = handler("touchend");
    return function ($28) {
        return $27(touchHandler($28));
    };
})();
var onTouchEnter = (function () {
    var $29 = handler("touchenter");
    return function ($30) {
        return $29(touchHandler($30));
    };
})();
var onTouchLeave = (function () {
    var $31 = handler("touchleave");
    return function ($32) {
        return $31(touchHandler($32));
    };
})();
var onTouchMove = (function () {
    var $33 = handler("touchmove");
    return function ($34) {
        return $33(touchHandler($34));
    };
})();
var onTouchStart = (function () {
    var $35 = handler("touchstart");
    return function ($36) {
        return $35(touchHandler($36));
    };
})();
var onTransitionEnd = handler("transitionend");
var onWheel = (function () {
    var $37 = handler(Web_UIEvent_WheelEvent_EventTypes.wheel);
    return function ($38) {
        return $37(wheelHandler($38));
    };
})();
var focusHandler = Unsafe_Coerce.unsafeCoerce;
var onBlur = (function () {
    var $39 = handler(Web_HTML_Event_EventTypes.blur);
    return function ($40) {
        return $39(focusHandler($40));
    };
})();
var onFocus = (function () {
    var $41 = handler(Web_UIEvent_FocusEvent_EventTypes.focus);
    return function ($42) {
        return $41(focusHandler($42));
    };
})();
var onFocusIn = (function () {
    var $43 = handler(Web_UIEvent_FocusEvent_EventTypes.focusin);
    return function ($44) {
        return $43(focusHandler($44));
    };
})();
var onFocusOut = (function () {
    var $45 = handler(Web_UIEvent_FocusEvent_EventTypes.focusout);
    return function ($46) {
        return $45(focusHandler($46));
    };
})();
var dragHandler = Unsafe_Coerce.unsafeCoerce;
var onDrag = (function () {
    var $47 = handler(Web_HTML_Event_DragEvent_EventTypes.drag);
    return function ($48) {
        return $47(dragHandler($48));
    };
})();
var onDragEnd = (function () {
    var $49 = handler(Web_HTML_Event_DragEvent_EventTypes.dragend);
    return function ($50) {
        return $49(dragHandler($50));
    };
})();
var onDragEnter = (function () {
    var $51 = handler(Web_HTML_Event_DragEvent_EventTypes.dragenter);
    return function ($52) {
        return $51(dragHandler($52));
    };
})();
var onDragExit = (function () {
    var $53 = handler(Web_HTML_Event_DragEvent_EventTypes.dragexit);
    return function ($54) {
        return $53(dragHandler($54));
    };
})();
var onDragLeave = (function () {
    var $55 = handler(Web_HTML_Event_DragEvent_EventTypes.dragleave);
    return function ($56) {
        return $55(dragHandler($56));
    };
})();
var onDragOver = (function () {
    var $57 = handler(Web_HTML_Event_DragEvent_EventTypes.dragover);
    return function ($58) {
        return $57(dragHandler($58));
    };
})();
var onDragStart = (function () {
    var $59 = handler(Web_HTML_Event_DragEvent_EventTypes.dragstart);
    return function ($60) {
        return $59(dragHandler($60));
    };
})();
var onDrop = (function () {
    var $61 = handler(Web_HTML_Event_DragEvent_EventTypes.drop);
    return function ($62) {
        return $61(dragHandler($62));
    };
})();
var clipboardHandler = Unsafe_Coerce.unsafeCoerce;
var onCopy = (function () {
    var $63 = handler(Web_Clipboard_ClipboardEvent_EventTypes.copy);
    return function ($64) {
        return $63(clipboardHandler($64));
    };
})();
var onCut = (function () {
    var $65 = handler(Web_Clipboard_ClipboardEvent_EventTypes.cut);
    return function ($66) {
        return $65(clipboardHandler($66));
    };
})();
var onPaste = (function () {
    var $67 = handler(Web_Clipboard_ClipboardEvent_EventTypes.paste);
    return function ($68) {
        return $67(clipboardHandler($68));
    };
})();
var addForeignPropHandler = function (key) {
    return function (prop) {
        return function (reader) {
            return function (f) {
                var go = function (a) {
                    return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(prop))(Foreign.unsafeToForeign(a));
                };
                return handler(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
                    return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(f)(Control_Monad_Except.runExcept(go(e)));
                }));
            };
        };
    };
};
var onChecked = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("checked")(Foreign.readBoolean);
var onSelectedIndexChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("selectedIndex")(Foreign.readInt);
var onValueChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("value")(Foreign.readString);
var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString);
module.exports = {
    handler: handler,
    onAbort: onAbort,
    onError: onError,
    onLoad: onLoad,
    onScroll: onScroll,
    onChange: onChange,
    onInput: onInput,
    onInvalid: onInvalid,
    onReset: onReset,
    onSelect: onSelect,
    onSubmit: onSubmit,
    onTransitionEnd: onTransitionEnd,
    onCopy: onCopy,
    onPaste: onPaste,
    onCut: onCut,
    onClick: onClick,
    onDoubleClick: onDoubleClick,
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onMouseMove: onMouseMove,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    onMouseUp: onMouseUp,
    onWheel: onWheel,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onBlur: onBlur,
    onFocus: onFocus,
    onFocusIn: onFocusIn,
    onFocusOut: onFocusOut,
    onDrag: onDrag,
    onDragEnd: onDragEnd,
    onDragExit: onDragExit,
    onDragEnter: onDragEnter,
    onDragLeave: onDragLeave,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onTouchCancel: onTouchCancel,
    onTouchEnd: onTouchEnd,
    onTouchEnter: onTouchEnter,
    onTouchLeave: onTouchLeave,
    onTouchMove: onTouchMove,
    onTouchStart: onTouchStart,
    onResize: onResize,
    onValueChange: onValueChange,
    onValueInput: onValueInput,
    onSelectedIndexChange: onSelectedIndexChange,
    onChecked: onChecked
};

},{"../Control.Bind/index.js":23,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Except/index.js":39,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Maybe/index.js":187,"../Foreign.Index/index.js":311,"../Foreign/index.js":317,"../Halogen.HTML.Core/index.js":332,"../Halogen.Query.Input/index.js":342,"../Unsafe.Coerce/index.js":391,"../Web.Clipboard.ClipboardEvent.EventTypes/index.js":395,"../Web.Event.Event/index.js":408,"../Web.HTML.Event.DragEvent.EventTypes/index.js":412,"../Web.HTML.Event.EventTypes/index.js":413,"../Web.UIEvent.FocusEvent.EventTypes/index.js":430,"../Web.UIEvent.KeyboardEvent.EventTypes/index.js":431,"../Web.UIEvent.MouseEvent.EventTypes/index.js":432,"../Web.UIEvent.WheelEvent.EventTypes/index.js":433}],336:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var DOM_HTML_Indexed_OnOff = require("../DOM.HTML.Indexed.OnOff/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_Query_Input = require("../Halogen.Query.Input/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var IProp = function (x) {
    return x;
};
var ref = (function () {
    var go = function (p) {
        return function (mel) {
            return new Data_Maybe.Just(new Halogen_Query_Input.RefUpdate(p, mel));
        };
    };
    return function ($11) {
        return Halogen_HTML_Core.ref(go($11));
    };
})();
var prop = function (dictIsProp) {
    return Halogen_HTML_Core.prop(dictIsProp);
};
var readOnly = prop(Halogen_HTML_Core.isPropBoolean)("readOnly");
var rel = prop(Halogen_HTML_Core.isPropString)("rel");
var required = prop(Halogen_HTML_Core.isPropBoolean)("required");
var rowSpan = prop(Halogen_HTML_Core.isPropInt)("rowSpan");
var rows = prop(Halogen_HTML_Core.isPropInt)("rows");
var selected = prop(Halogen_HTML_Core.isPropBoolean)("selected");
var selectedIndex = prop(Halogen_HTML_Core.isPropInt)("selectedIndex");
var spellcheck = prop(Halogen_HTML_Core.isPropBoolean)("spellcheck");
var src = prop(Halogen_HTML_Core.isPropString)("src");
var step = prop(Halogen_HTML_Core.isPropStepValue)("step");
var tabIndex = prop(Halogen_HTML_Core.isPropInt)("tabIndex");
var target = prop(Halogen_HTML_Core.isPropString)("target");
var title = prop(Halogen_HTML_Core.isPropString)("title");
var type_ = function (dictIsProp) {
    return prop(dictIsProp)("type");
};
var value = prop(Halogen_HTML_Core.isPropString)("value");
var width = prop(Halogen_HTML_Core.isPropInt)("width");
var preload = prop(Halogen_HTML_Core.isPropPreloadValue)("preload");
var poster = prop(Halogen_HTML_Core.isPropString)("poster");
var placeholder = prop(Halogen_HTML_Core.isPropString)("placeholder");
var pattern = prop(Halogen_HTML_Core.isPropString)("pattern");
var noValidate = prop(Halogen_HTML_Core.isPropBoolean)("noValidate");
var newtypeIProp = new Data_Newtype.Newtype(function (n) {
    return n;
}, IProp);
var name = prop(Halogen_HTML_Core.isPropString)("name");
var muted = prop(Halogen_HTML_Core.isPropBoolean)("muted");
var multiple = prop(Halogen_HTML_Core.isPropBoolean)("multiple");
var min = prop(Halogen_HTML_Core.isPropNumber)("min");
var method = prop(Halogen_HTML_Core.isPropFormMethod)("method");
var max = prop(Halogen_HTML_Core.isPropNumber)("max");
var loop = prop(Halogen_HTML_Core.isPropBoolean)("loop");
var id_ = prop(Halogen_HTML_Core.isPropString)("id");
var href = prop(Halogen_HTML_Core.isPropString)("href");
var height = prop(Halogen_HTML_Core.isPropInt)("height");
var functorIProp = new Data_Functor.Functor(function (f) {
    return function (m) {
        return Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_Input.functorInput)(f))(m);
    };
});
var $$for = prop(Halogen_HTML_Core.isPropString)("htmlFor");
var expand = function (dictUnion) {
    return Unsafe_Coerce.unsafeCoerce;
};
var enctype = prop(Halogen_HTML_Core.isPropMediaType)("enctype");
var draggable = prop(Halogen_HTML_Core.isPropBoolean)("draggable");
var download = prop(Halogen_HTML_Core.isPropString)("download");
var disabled = prop(Halogen_HTML_Core.isPropBoolean)("disabled");
var enabled = (function () {
    var $12 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
    return function ($13) {
        return disabled($12($13));
    };
})();
var controls = prop(Halogen_HTML_Core.isPropBoolean)("controls");
var cols = prop(Halogen_HTML_Core.isPropInt)("cols");
var colSpan = prop(Halogen_HTML_Core.isPropInt)("colSpan");
var classes = (function () {
    var $14 = prop(Halogen_HTML_Core.isPropString)("className");
    var $15 = Data_String_Common.joinWith(" ");
    var $16 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName));
    return function ($17) {
        return $14($15($16($17)));
    };
})();
var class_ = (function () {
    var $18 = prop(Halogen_HTML_Core.isPropString)("className");
    var $19 = Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName);
    return function ($20) {
        return $18($19($20));
    };
})();
var checked = prop(Halogen_HTML_Core.isPropBoolean)("checked");
var charset = prop(Halogen_HTML_Core.isPropString)("charset");
var autoplay = prop(Halogen_HTML_Core.isPropBoolean)("autoplay");
var autofocus = prop(Halogen_HTML_Core.isPropBoolean)("autofocus");
var autocomplete = (function () {
    var $21 = prop(Halogen_HTML_Core.isPropOnOff)("autocomplete");
    return function ($22) {
        return $21((function (b) {
            if (b) {
                return DOM_HTML_Indexed_OnOff.On.value;
            };
            return DOM_HTML_Indexed_OnOff.Off.value;
        })($22));
    };
})();
var attrNS = (function () {
    var $23 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
    return function ($24) {
        return Halogen_HTML_Core.attr($23($24));
    };
})();
var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
var list = attr("list");
var alt = prop(Halogen_HTML_Core.isPropString)("alt");
var action = prop(Halogen_HTML_Core.isPropString)("action");
var accept = prop(Halogen_HTML_Core.isPropInputAcceptType)("accept");
module.exports = {
    IProp: IProp,
    prop: prop,
    attr: attr,
    attrNS: attrNS,
    ref: ref,
    expand: expand,
    alt: alt,
    charset: charset,
    class_: class_,
    classes: classes,
    cols: cols,
    rows: rows,
    colSpan: colSpan,
    rowSpan: rowSpan,
    "for": $$for,
    height: height,
    width: width,
    href: href,
    id_: id_,
    name: name,
    rel: rel,
    src: src,
    target: target,
    title: title,
    download: download,
    method: method,
    action: action,
    enctype: enctype,
    noValidate: noValidate,
    type_: type_,
    value: value,
    min: min,
    max: max,
    step: step,
    disabled: disabled,
    enabled: enabled,
    required: required,
    readOnly: readOnly,
    spellcheck: spellcheck,
    checked: checked,
    selected: selected,
    selectedIndex: selectedIndex,
    placeholder: placeholder,
    autocomplete: autocomplete,
    list: list,
    autofocus: autofocus,
    multiple: multiple,
    pattern: pattern,
    accept: accept,
    autoplay: autoplay,
    controls: controls,
    loop: loop,
    muted: muted,
    poster: poster,
    preload: preload,
    draggable: draggable,
    tabIndex: tabIndex,
    newtypeIProp: newtypeIProp,
    functorIProp: functorIProp
};

},{"../Control.Applicative/index.js":17,"../DOM.HTML.Indexed.OnOff/index.js":78,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.String.Common/index.js":232,"../Halogen.HTML.Core/index.js":332,"../Halogen.Query.Input/index.js":342,"../Halogen.VDom.DOM.Prop/index.js":344,"../Unsafe.Coerce/index.js":391}],337:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var slot = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (component) {
                        return function (input) {
                            return function (outputQuery) {
                                return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot(dictCons)(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(outputQuery)));
                            };
                        };
                    };
                };
            };
        };
    };
};
var memoized = function (eqFn) {
    return function (f) {
        return function (a) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunked(eqFn)(f)(a)));
        };
    };
};
var lazy3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk3(f, a, b, c)));
            };
        };
    };
};
var lazy2 = function (f) {
    return function (a) {
        return function (b) {
            return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk2(f, a, b)));
        };
    };
};
var lazy = function (f) {
    return function (a) {
        return Halogen_HTML_Core.widget(new Halogen_Component.ThunkSlot(Halogen_VDom_Thunk.thunk1(f, a)));
    };
};
var fromPlainHTML = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    fromPlainHTML: fromPlainHTML,
    slot: slot,
    memoized: memoized
};

},{"../Halogen.Component/index.js":326,"../Halogen.HTML.Core/index.js":332,"../Halogen.VDom.Thunk/index.js":348,"../Unsafe.Coerce/index.js":391}],338:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var ChildQuery = (function () {
    function ChildQuery(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    ChildQuery.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new ChildQuery(value0, value1, value2);
            };
        };
    };
    return ChildQuery;
})();
var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
var functorChildQuery = new Data_Functor.Functor(function (f) {
    return unChildQueryBox(function (v) {
        return mkChildQueryBox(new ChildQuery(function (dictApplicative) {
            return v.value0(dictApplicative);
        }, v.value1, function ($6) {
            return f(v.value2($6));
        }));
    });
});
module.exports = {
    ChildQuery: ChildQuery,
    mkChildQueryBox: mkChildQueryBox,
    unChildQueryBox: unChildQueryBox,
    functorChildQuery: functorChildQuery
};

},{"../Data.Functor/index.js":143,"../Unsafe.Coerce/index.js":391}],339:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Coroutine = require("../Control.Coroutine/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_AVar = require("../Effect.Aff.AVar/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Finalizer = function (x) {
    return x;
};
var EventSource = function (x) {
    return x;
};
var Emitter = function (x) {
    return x;
};
var semigroupFinalizer = function (dictApply) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
        };
    });
};
var newtypeEventSource = new Data_Newtype.Newtype(function (n) {
    return n;
}, EventSource);
var monoidFinalizer = function (dictApplicative) {
    return new Data_Monoid.Monoid(function () {
        return semigroupFinalizer(dictApplicative.Apply0());
    }, Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
};
var hoistFinalizer = function (nat) {
    return function (v) {
        return nat(v);
    };
};
var hoistEmitter = function (nat) {
    return function (v) {
        return function ($43) {
            return nat(v($43));
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.hoistFreeT(Control_Coroutine.functorEmit)(dictFunctor)(nat)(e.producer),
                    finalizer: hoistFinalizer(nat)(e.finalizer)
                };
            })(nat(v)));
        };
    };
};
var functorEventSource = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return EventSource(Data_Functor.map(dictFunctor)(function (e) {
                return {
                    producer: Control_Monad_Free_Trans.interpret(Control_Coroutine.functorEmit)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine.bifunctorEmit)(f))(e.producer),
                    finalizer: e.finalizer
                };
            })(v));
        };
    });
};
var finalize = function (v) {
    return v;
};
var emit = function (v) {
    return function (a) {
        return v(new Data_Either.Left(a));
    };
};
var close = function (v) {
    return v(new Data_Either.Right(Data_Unit.unit));
};
var affEventSource = function (dictMonadAff) {
    return function (recv) {
        return EventSource(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v1) {
                var producer = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorEmit)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorEmit))((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Function.flip(Effect_Aff_AVar.put)(v1))(recv(Data_Function.flip(Effect_Aff_AVar.put)(v))))))(function () {
                    return Control_Coroutine.producer((dictMonadAff.MonadEffect0()).Monad0())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff_AVar.take(v)));
                });
                var finalizer = Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.attempt(Effect_Aff_AVar.take(v1))))(function (v2) {
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                    };
                    if (v2 instanceof Data_Either.Right) {
                        return Effect_Aff_Class.liftAff(dictMonadAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.kill(Effect_Exception.error("finalized"))(v1))(function () {
                            return finalize(v2.value0);
                        }));
                    };
                    throw new Error("Failed pattern match at Halogen.Query.EventSource (line 71, column 51 - line 75, column 21): " + [ v2.constructor.name ]);
                });
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    producer: producer,
                    finalizer: finalizer
                });
            });
        })));
    };
};
var effectEventSource = function (dictMonadAff) {
    var $44 = affEventSource(dictMonadAff);
    var $45 = Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(hoistEmitter(Effect_Aff.launchAff_))((function () {
        var $47 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
        var $48 = Data_Functor.map(Effect.functorEffect)(hoistFinalizer(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)));
        return function ($49) {
            return $47($48($49));
        };
    })());
    return function ($46) {
        return $44($45($46));
    };
};
var eventListenerEventSource = function (dictMonadAff) {
    return function (eventType) {
        return function (target) {
            return function (f) {
                return effectEventSource(dictMonadAff)(function (emitter) {
                    return function __do() {
                        var v = Web_Event_EventTarget.eventListener((function () {
                            var $50 = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(emit(emitter));
                            return function ($51) {
                                return $50(f($51));
                            };
                        })())();
                        Web_Event_EventTarget.addEventListener(eventType)(v)(false)(target)();
                        return Web_Event_EventTarget.removeEventListener(eventType)(v)(false)(target);
                    };
                });
            };
        };
    };
};
module.exports = {
    EventSource: EventSource,
    hoist: hoist,
    affEventSource: affEventSource,
    effectEventSource: effectEventSource,
    eventListenerEventSource: eventListenerEventSource,
    Emitter: Emitter,
    emit: emit,
    close: close,
    hoistEmitter: hoistEmitter,
    Finalizer: Finalizer,
    finalize: finalize,
    hoistFinalizer: hoistFinalizer,
    newtypeEventSource: newtypeEventSource,
    functorEventSource: functorEventSource,
    semigroupFinalizer: semigroupFinalizer,
    monoidFinalizer: monoidFinalizer
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Coroutine/index.js":31,"../Control.Monad.Free.Trans/index.js":41,"../Control.Monad.Trans.Class/index.js":56,"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Profunctor/index.js":213,"../Data.Semigroup/index.js":221,"../Data.Unit/index.js":257,"../Effect.Aff.AVar/index.js":294,"../Effect.Aff.Class/index.js":295,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Exception/index.js":303,"../Effect/index.js":309,"../Web.Event.EventTarget/index.js":411}],340:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Applicative_Free = require("../Control.Applicative.Free/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource/index.js");
var SubscriptionId = function (x) {
    return x;
};
var ForkId = function (x) {
    return x;
};
var State = (function () {
    function State(value0) {
        this.value0 = value0;
    };
    State.create = function (value0) {
        return new State(value0);
    };
    return State;
})();
var Subscribe = (function () {
    function Subscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Subscribe.create = function (value0) {
        return function (value1) {
            return new Subscribe(value0, value1);
        };
    };
    return Subscribe;
})();
var Unsubscribe = (function () {
    function Unsubscribe(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Unsubscribe.create = function (value0) {
        return function (value1) {
            return new Unsubscribe(value0, value1);
        };
    };
    return Unsubscribe;
})();
var Lift = (function () {
    function Lift(value0) {
        this.value0 = value0;
    };
    Lift.create = function (value0) {
        return new Lift(value0);
    };
    return Lift;
})();
var ChildQuery = (function () {
    function ChildQuery(value0) {
        this.value0 = value0;
    };
    ChildQuery.create = function (value0) {
        return new ChildQuery(value0);
    };
    return ChildQuery;
})();
var Raise = (function () {
    function Raise(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Raise.create = function (value0) {
        return function (value1) {
            return new Raise(value0, value1);
        };
    };
    return Raise;
})();
var Par = (function () {
    function Par(value0) {
        this.value0 = value0;
    };
    Par.create = function (value0) {
        return new Par(value0);
    };
    return Par;
})();
var Fork = (function () {
    function Fork(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Fork.create = function (value0) {
        return function (value1) {
            return new Fork(value0, value1);
        };
    };
    return Fork;
})();
var Kill = (function () {
    function Kill(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Kill.create = function (value0) {
        return function (value1) {
            return new Kill(value0, value1);
        };
    };
    return Kill;
})();
var GetRef = (function () {
    function GetRef(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    GetRef.create = function (value0) {
        return function (value1) {
            return new GetRef(value0, value1);
        };
    };
    return GetRef;
})();
var HalogenAp = function (x) {
    return x;
};
var HalogenM = function (x) {
    return x;
};
var unsubscribe = function (sid) {
    return HalogenM(Control_Monad_Free.liftF(new Unsubscribe(sid, Data_Unit.unit)));
};
var subscribe$prime = function (esc) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(esc, Data_Function["const"](Data_Unit.unit))));
};
var subscribe = function (es) {
    return HalogenM(Control_Monad_Free.liftF(new Subscribe(function (v) {
        return es;
    }, Control_Category.identity(Control_Category.categoryFn))));
};
var raise = function (o) {
    return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
};
var queryAll = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (q) {
                    var catMapMaybes = function (dictOrd1) {
                        return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (k) {
                            return function (v) {
                                return function (acc) {
                                    return Data_Maybe.maybe(acc)(Data_Function.flip(Data_Map_Internal.insert(dictOrd1)(k))(acc))(v);
                                };
                            };
                        })(Data_Map_Internal.empty);
                    };
                    return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                        return function (k) {
                            var $129 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(catMapMaybes(dictOrd));
                            var $130 = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(dictApplicative)(k);
                            var $131 = Halogen_Data_Slot.slots(dictCons)(dictIsSymbol)(dictOrd)(label);
                            return function ($132) {
                                return $129($130($131($132)));
                            };
                        };
                    }, q, Control_Category.identity(Control_Category.categoryFn))))));
                };
            };
        };
    };
};
var query = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (label) {
                return function (p) {
                    return function (q) {
                        return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            return function (k) {
                                var $133 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                                var $134 = Halogen_Data_Slot.lookup(dictCons)(dictIsSymbol)(dictOrd)(label)(p);
                                return function ($135) {
                                    return $133($134($135));
                                };
                            };
                        }, q, Control_Category.identity(Control_Category.categoryFn))))));
                    };
                };
            };
        };
    };
};
var ordSubscriptionId = Data_Ord.ordInt;
var ordForkId = Data_Ord.ordInt;
var newtypeHalogenAp = new Data_Newtype.Newtype(function (n) {
    return n;
}, HalogenAp);
var monadTransHalogenM = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($136) {
        return HalogenM(Control_Monad_Free.liftF(Lift.create($136)));
    };
});
var monadHalogenM = Control_Monad_Free.freeMonad;
var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
    return monadHalogenM;
}, function ($137) {
    return HalogenM(Control_Monad_Free.liftF(State.create($137)));
});
var monadTellHalogenM = function (dictMonadTell) {
    return new Control_Monad_Writer_Class.MonadTell(function () {
        return monadHalogenM;
    }, (function () {
        var $138 = Control_Monad_Writer_Class.tell(dictMonadTell);
        return function ($139) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($138($139))));
        };
    })());
};
var monadThrowHalogenM = function (dictMonadThrow) {
    return new Control_Monad_Error_Class.MonadThrow(function () {
        return monadHalogenM;
    }, (function () {
        var $140 = Control_Monad_Error_Class.throwError(dictMonadThrow);
        return function ($141) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($140($141))));
        };
    })());
};
var monadEffectHalogenM = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function () {
        return monadHalogenM;
    }, (function () {
        var $142 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($143) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($142($143))));
        };
    })());
};
var monadAskHalogenM = function (dictMonadAsk) {
    return new Control_Monad_Reader_Class.MonadAsk(function () {
        return monadHalogenM;
    }, HalogenM(Control_Monad_Free.liftF(new Lift(Control_Monad_Reader_Class.ask(dictMonadAsk)))));
};
var monadAffHalogenM = function (dictMonadAff) {
    return new Effect_Aff_Class.MonadAff(function () {
        return monadEffectHalogenM(dictMonadAff.MonadEffect0());
    }, (function () {
        var $144 = Effect_Aff_Class.liftAff(dictMonadAff);
        return function ($145) {
            return HalogenM(Control_Monad_Free.liftF(Lift.create($144($145))));
        };
    })());
};
var mapOutput = function (f) {
    return function (v) {
        var go = function (v1) {
            if (v1 instanceof State) {
                return new State(v1.value0);
            };
            if (v1 instanceof Subscribe) {
                return new Subscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Unsubscribe) {
                return new Unsubscribe(v1.value0, v1.value1);
            };
            if (v1 instanceof Lift) {
                return new Lift(v1.value0);
            };
            if (v1 instanceof ChildQuery) {
                return new ChildQuery(v1.value0);
            };
            if (v1 instanceof Raise) {
                return new Raise(f(v1.value0), v1.value1);
            };
            if (v1 instanceof Par) {
                return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapOutput(f)))(v1.value0));
            };
            if (v1 instanceof Fork) {
                return new Fork(mapOutput(f)(v1.value0), v1.value1);
            };
            if (v1 instanceof Kill) {
                return new Kill(v1.value0, v1.value1);
            };
            if (v1 instanceof GetRef) {
                return new GetRef(v1.value0, v1.value1);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 258, column 8 - line 268, column 29): " + [ v1.constructor.name ]);
        };
        return Control_Monad_Free.hoistFree(go)(v);
    };
};
var mapAction = function (dictFunctor) {
    return function (f) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe((function () {
                        var $146 = Data_Functor.map(Halogen_Query_EventSource.functorEventSource(dictFunctor))(f);
                        return function ($147) {
                            return $146(v1.value0($147));
                        };
                    })(), v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(mapAction(dictFunctor)(f)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(mapAction(dictFunctor)(f)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 238, column 8 - line 248, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var kill = function (fid) {
    return HalogenM(Control_Monad_Free.liftF(new Kill(fid, Data_Unit.unit)));
};
var imapState = function (f) {
    return function (f$prime) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State((function () {
                        var $148 = Data_Functor.map(Data_Tuple.functorTuple)(f);
                        return function ($149) {
                            return $148(v1.value0(f$prime($149)));
                        };
                    })());
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(v1.value0);
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(imapState(f)(f$prime)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(imapState(f)(f$prime)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 217, column 8 - line 227, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var hoist = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            var go = function (v1) {
                if (v1 instanceof State) {
                    return new State(v1.value0);
                };
                if (v1 instanceof Subscribe) {
                    return new Subscribe((function () {
                        var $150 = Halogen_Query_EventSource.hoist(dictFunctor)(nat);
                        return function ($151) {
                            return $150(v1.value0($151));
                        };
                    })(), v1.value1);
                };
                if (v1 instanceof Unsubscribe) {
                    return new Unsubscribe(v1.value0, v1.value1);
                };
                if (v1 instanceof Lift) {
                    return new Lift(nat(v1.value0));
                };
                if (v1 instanceof ChildQuery) {
                    return new ChildQuery(v1.value0);
                };
                if (v1 instanceof Raise) {
                    return new Raise(v1.value0, v1.value1);
                };
                if (v1 instanceof Par) {
                    return new Par(Data_Newtype.over(newtypeHalogenAp)(newtypeHalogenAp)(HalogenAp)(Control_Applicative_Free.hoistFreeAp(hoist(dictFunctor)(nat)))(v1.value0));
                };
                if (v1 instanceof Fork) {
                    return new Fork(hoist(dictFunctor)(nat)(v1.value0), v1.value1);
                };
                if (v1 instanceof Kill) {
                    return new Kill(v1.value0, v1.value1);
                };
                if (v1 instanceof GetRef) {
                    return new GetRef(v1.value0, v1.value1);
                };
                throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 279, column 8 - line 289, column 29): " + [ v1.constructor.name ]);
            };
            return Control_Monad_Free.hoistFree(go)(v);
        };
    };
};
var getRef = function (p) {
    return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.identity(Control_Category.categoryFn))));
};
var functorHalogenM = Control_Monad_Free.freeFunctor;
var functorHalogenAp = Control_Applicative_Free.functorFreeAp;
var functorHalogenF = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            if (v instanceof State) {
                return new State((function () {
                    var $152 = Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(f);
                    return function ($153) {
                        return $152(v.value0($153));
                    };
                })());
            };
            if (v instanceof Subscribe) {
                return new Subscribe(v.value0, function ($154) {
                    return f(v.value1($154));
                });
            };
            if (v instanceof Unsubscribe) {
                return new Unsubscribe(v.value0, f(v.value1));
            };
            if (v instanceof Lift) {
                return new Lift(Data_Functor.map(dictFunctor)(f)(v.value0));
            };
            if (v instanceof ChildQuery) {
                return new ChildQuery(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(f)(v.value0));
            };
            if (v instanceof Raise) {
                return new Raise(v.value0, f(v.value1));
            };
            if (v instanceof Par) {
                return new Par(Data_Functor.map(functorHalogenAp)(f)(v.value0));
            };
            if (v instanceof Fork) {
                return new Fork(v.value0, function ($155) {
                    return f(v.value1($155));
                });
            };
            if (v instanceof Kill) {
                return new Kill(v.value0, f(v.value1));
            };
            if (v instanceof GetRef) {
                return new GetRef(v.value0, function ($156) {
                    return f(v.value1($156));
                });
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 47, column 11 - line 57, column 37): " + [ v.constructor.name ]);
        };
    });
};
var fork = function (hmu) {
    return HalogenM(Control_Monad_Free.liftF(new Fork(hmu, Control_Category.identity(Control_Category.categoryFn))));
};
var eqSubscriptionId = Data_Eq.eqInt;
var eqForkId = Data_Eq.eqInt;
var bindHalogenM = Control_Monad_Free.freeBind;
var applyHalogenM = Control_Monad_Free.freeApply;
var applyHalogenAp = Control_Applicative_Free.applyFreeAp;
var applicativeHalogenM = Control_Monad_Free.freeApplicative;
var monadRecHalogenM = new Control_Monad_Rec_Class.MonadRec(function () {
    return monadHalogenM;
}, function (k) {
    return function (a) {
        return Control_Bind.bind(bindHalogenM)(k(a))(function (v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Monad_Rec_Class.tailRecM(monadRecHalogenM)(k)(v.value0);
            };
            if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeHalogenM)(v.value0);
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenM (line 82, column 26 - line 84, column 21): " + [ v.constructor.name ]);
        });
    };
});
var applicativeHalogenAp = Control_Applicative_Free.applicativeFreeAp;
var parallelHalogenM = new Control_Parallel_Class.Parallel(function () {
    return applicativeHalogenAp;
}, function () {
    return monadHalogenM;
}, function ($157) {
    return HalogenAp(Control_Applicative_Free.liftFreeAp($157));
}, function ($158) {
    return HalogenM(Control_Monad_Free.liftF(Par.create($158)));
});
module.exports = {
    State: State,
    Subscribe: Subscribe,
    Unsubscribe: Unsubscribe,
    Lift: Lift,
    ChildQuery: ChildQuery,
    Raise: Raise,
    Par: Par,
    Fork: Fork,
    Kill: Kill,
    GetRef: GetRef,
    HalogenM: HalogenM,
    HalogenAp: HalogenAp,
    raise: raise,
    query: query,
    queryAll: queryAll,
    SubscriptionId: SubscriptionId,
    subscribe: subscribe,
    "subscribe'": subscribe$prime,
    unsubscribe: unsubscribe,
    ForkId: ForkId,
    fork: fork,
    kill: kill,
    getRef: getRef,
    imapState: imapState,
    mapAction: mapAction,
    mapOutput: mapOutput,
    hoist: hoist,
    functorHalogenF: functorHalogenF,
    functorHalogenM: functorHalogenM,
    applyHalogenM: applyHalogenM,
    applicativeHalogenM: applicativeHalogenM,
    bindHalogenM: bindHalogenM,
    monadHalogenM: monadHalogenM,
    monadEffectHalogenM: monadEffectHalogenM,
    monadAffHalogenM: monadAffHalogenM,
    parallelHalogenM: parallelHalogenM,
    monadTransHalogenM: monadTransHalogenM,
    monadRecHalogenM: monadRecHalogenM,
    monadStateHalogenM: monadStateHalogenM,
    monadAskHalogenM: monadAskHalogenM,
    monadTellHalogenM: monadTellHalogenM,
    monadThrowHalogenM: monadThrowHalogenM,
    newtypeHalogenAp: newtypeHalogenAp,
    functorHalogenAp: functorHalogenAp,
    applyHalogenAp: applyHalogenAp,
    applicativeHalogenAp: applicativeHalogenAp,
    eqSubscriptionId: eqSubscriptionId,
    ordSubscriptionId: ordSubscriptionId,
    eqForkId: eqForkId,
    ordForkId: ordForkId
};

},{"../Control.Applicative.Free/index.js":16,"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Error.Class/index.js":37,"../Control.Monad.Free/index.js":42,"../Control.Monad.Reader.Class/index.js":48,"../Control.Monad.Rec.Class/index.js":50,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.Monad.Writer.Class/index.js":57,"../Control.Parallel.Class/index.js":63,"../Data.Bifunctor/index.js":98,"../Data.Eq/index.js":123,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Map.Internal/index.js":184,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Aff.Class/index.js":295,"../Effect.Class/index.js":299,"../Halogen.Data.Slot/index.js":328,"../Halogen.Query.ChildQuery/index.js":338,"../Halogen.Query.EventSource/index.js":339}],341:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Initialize = (function () {
    function Initialize(value0) {
        this.value0 = value0;
    };
    Initialize.create = function (value0) {
        return new Initialize(value0);
    };
    return Initialize;
})();
var Finalize = (function () {
    function Finalize(value0) {
        this.value0 = value0;
    };
    Finalize.create = function (value0) {
        return new Finalize(value0);
    };
    return Finalize;
})();
var Receive = (function () {
    function Receive(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Receive.create = function (value0) {
        return function (value1) {
            return new Receive(value0, value1);
        };
    };
    return Receive;
})();
var Action = (function () {
    function Action(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Action.create = function (value0) {
        return function (value1) {
            return new Action(value0, value1);
        };
    };
    return Action;
})();
var Query = (function () {
    function Query(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Query.create = function (value0) {
        return function (value1) {
            return new Query(value0, value1);
        };
    };
    return Query;
})();
var functorHalogenQ = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Initialize) {
            return new Initialize(f(m.value0));
        };
        if (m instanceof Finalize) {
            return new Finalize(f(m.value0));
        };
        if (m instanceof Receive) {
            return new Receive(m.value0, f(m.value1));
        };
        if (m instanceof Action) {
            return new Action(m.value0, f(m.value1));
        };
        if (m instanceof Query) {
            return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(f)(m.value0), Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
        };
        throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 23, column 1 - line 23, column 73): " + [ m.constructor.name ]);
    };
});
var bifunctorHalogenQ = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Initialize) {
                return new Initialize(g(v.value0));
            };
            if (v instanceof Finalize) {
                return new Finalize(g(v.value0));
            };
            if (v instanceof Receive) {
                return new Receive(f(v.value0), g(v.value1));
            };
            if (v instanceof Action) {
                return new Action(v.value0, g(v.value1));
            };
            if (v instanceof Query) {
                return new Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(g)(v.value0), Data_Functor.map(Data_Functor.functorFn)(g)(v.value1));
            };
            throw new Error("Failed pattern match at Halogen.Query.HalogenQ (line 16, column 15 - line 21, column 45): " + [ v.constructor.name ]);
        };
    };
});
module.exports = {
    Initialize: Initialize,
    Finalize: Finalize,
    Receive: Receive,
    Action: Action,
    Query: Query,
    bifunctorHalogenQ: bifunctorHalogenQ,
    functorHalogenQ: functorHalogenQ
};

},{"../Data.Bifunctor/index.js":98,"../Data.Coyoneda/index.js":109,"../Data.Functor/index.js":143}],342:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var RefLabel = function (x) {
    return x;
};
var RefUpdate = (function () {
    function RefUpdate(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RefUpdate.create = function (value0) {
        return function (value1) {
            return new RefUpdate(value0, value1);
        };
    };
    return RefUpdate;
})();
var Action = (function () {
    function Action(value0) {
        this.value0 = value0;
    };
    Action.create = function (value0) {
        return new Action(value0);
    };
    return Action;
})();
var ordRefLabel = Data_Ord.ordString;
var newtypeRefLabel = new Data_Newtype.Newtype(function (n) {
    return n;
}, RefLabel);
var functorInput = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof RefUpdate) {
            return new RefUpdate(m.value0, m.value1);
        };
        if (m instanceof Action) {
            return new Action(f(m.value0));
        };
        throw new Error("Failed pattern match at Halogen.Query.Input (line 19, column 1 - line 19, column 46): " + [ m.constructor.name ]);
    };
});
var eqRefLabel = Data_Eq.eqString;
module.exports = {
    RefLabel: RefLabel,
    RefUpdate: RefUpdate,
    Action: Action,
    newtypeRefLabel: newtypeRefLabel,
    eqRefLabel: eqRefLabel,
    ordRefLabel: ordRefLabel,
    functorInput: functorInput
};

},{"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205}],343:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var tell = function (act) {
    return act(Data_Unit.unit);
};
var request = function (req) {
    return req(Control_Category.identity(Control_Category.categoryFn));
};
var getHTMLElementRef = (function () {
    var $1 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (v) {
        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(v);
    });
    return function ($2) {
        return $1(Halogen_Query_HalogenM.getRef($2));
    };
})();
module.exports = {
    tell: tell,
    request: request,
    getHTMLElementRef: getHTMLElementRef
};

},{"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Unit/index.js":257,"../Halogen.Query.HalogenM/index.js":340,"../Web.HTML.HTMLElement/index.js":418}],344:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Event_EventTarget = require("../Web.Event.EventTarget/index.js");
var Created = (function () {
    function Created(value0) {
        this.value0 = value0;
    };
    Created.create = function (value0) {
        return new Created(value0);
    };
    return Created;
})();
var Removed = (function () {
    function Removed(value0) {
        this.value0 = value0;
    };
    Removed.create = function (value0) {
        return new Removed(value0);
    };
    return Removed;
})();
var Attribute = (function () {
    function Attribute(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Attribute.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Attribute(value0, value1, value2);
            };
        };
    };
    return Attribute;
})();
var Property = (function () {
    function Property(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Property.create = function (value0) {
        return function (value1) {
            return new Property(value0, value1);
        };
    };
    return Property;
})();
var Handler = (function () {
    function Handler(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Handler.create = function (value0) {
        return function (value1) {
            return new Handler(value0, value1);
        };
    };
    return Handler;
})();
var Ref = (function () {
    function Ref(value0) {
        this.value0 = value0;
    };
    Ref.create = function (value0) {
        return new Ref(value0);
    };
    return Ref;
})();
var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
var setProperty = Halogen_VDom_Util.unsafeSetAny;
var removeProperty = function (key, el) {
    var v = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
    if (v === "string") {
        return Halogen_VDom_Util.unsafeSetAny(key, "", el);
    };
    if (key === "rowSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    if (key === "colSpan") {
        return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
    };
    return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
};
var propToStrKey = function (v) {
    if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
        return "attr/" + (v.value0.value0 + (":" + v.value1));
    };
    if (v instanceof Attribute) {
        return "attr/:" + v.value1;
    };
    if (v instanceof Property) {
        return "prop/" + v.value0;
    };
    if (v instanceof Handler) {
        return "handler/" + v.value0;
    };
    if (v instanceof Ref) {
        return "ref";
    };
    throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
};
var propFromString = Unsafe_Coerce.unsafeCoerce;
var propFromNumber = Unsafe_Coerce.unsafeCoerce;
var propFromInt = Unsafe_Coerce.unsafeCoerce;
var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
var functorProp = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Handler) {
            return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
        };
        if (v instanceof Ref) {
            return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
        };
        return v;
    };
});
var functorElemRef = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Created) {
            return new Created(f(v.value0));
        };
        if (v instanceof Removed) {
            return new Removed(f(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 49, column 1 - line 51, column 36): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var buildProp = function (emit) {
    return function (el) {
        var removeProp = function (prevEvents) {
            return function (v, v1) {
                if (v1 instanceof Attribute) {
                    return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                };
                if (v1 instanceof Property) {
                    return removeProperty(v1.value0, el);
                };
                if (v1 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                    return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                };
                if (v1 instanceof Ref) {
                    return Data_Unit.unit;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
            };
        };
        var mbEmit = function (v) {
            if (v instanceof Data_Maybe.Just) {
                return emit(v.value0)();
            };
            return Data_Unit.unit;
        };
        var haltProp = function (state) {
            var v = Foreign_Object.lookup("ref")(state.props);
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                return mbEmit(v.value0.value0(new Removed(el)));
            };
            return Data_Unit.unit;
        };
        var diffProp = function (prevEvents, events) {
            return function (v, v1, v11, v2) {
                if (v11 instanceof Attribute && v2 instanceof Attribute) {
                    var $61 = v11.value2 === v2.value2;
                    if ($61) {
                        return v2;
                    };
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v11 instanceof Property && v2 instanceof Property) {
                    var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                    if (v4) {
                        return v2;
                    };
                    if (v2.value0 === "value") {
                        var elVal = unsafeGetProperty("value", el);
                        var $70 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                        if ($70) {
                            return v2;
                        };
                        setProperty(v2.value0, v2.value1, el);
                        return v2;
                    };
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v11 instanceof Handler && v2 instanceof Handler) {
                    var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                    Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                    return v2;
                };
                return v2;
            };
        };
        var applyProp = function (events) {
            return function (v, v1, v2) {
                if (v2 instanceof Attribute) {
                    Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                    return v2;
                };
                if (v2 instanceof Property) {
                    setProperty(v2.value0, v2.value1, el);
                    return v2;
                };
                if (v2 instanceof Handler) {
                    var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                    if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                        Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                        return v2;
                    };
                    var v4 = Effect_Ref["new"](v2.value1)();
                    var v5 = Web_Event_EventTarget.eventListener(function (ev) {
                        return function __do() {
                            var v5 = Effect_Ref.read(v4)();
                            return mbEmit(v5(ev));
                        };
                    })();
                    Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(v5, v4), events);
                    Halogen_VDom_Util.addEventListener(v2.value0, v5, el);
                    return v2;
                };
                if (v2 instanceof Ref) {
                    mbEmit(v2.value0(new Created(el)));
                    return v2;
                };
                throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
            };
        };
        var patchProp = function (state, ps2) {
            var v = Halogen_VDom_Util.newMutMap();
            var onThis = removeProp(state.events);
            var onThese = diffProp(state.events, v);
            var onThat = applyProp(v);
            var v1 = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
            var nextState = {
                events: Halogen_VDom_Util.unsafeFreeze(v),
                props: v1
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
        };
        var renderProp = function (ps1) {
            var v = Halogen_VDom_Util.newMutMap();
            var v1 = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(v));
            var state = {
                events: Halogen_VDom_Util.unsafeFreeze(v),
                props: v1
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
        };
        return renderProp;
    };
};
module.exports = {
    Attribute: Attribute,
    Property: Property,
    Handler: Handler,
    Ref: Ref,
    Created: Created,
    Removed: Removed,
    propFromString: propFromString,
    propFromBoolean: propFromBoolean,
    propFromInt: propFromInt,
    propFromNumber: propFromNumber,
    buildProp: buildProp,
    functorProp: functorProp,
    functorElemRef: functorElemRef
};

},{"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Ref/index.js":305,"../Foreign.Object/index.js":315,"../Foreign/index.js":317,"../Halogen.VDom.Machine/index.js":347,"../Halogen.VDom.Util/index.js":351,"../Unsafe.Coerce/index.js":391,"../Web.Event.EventTarget/index.js":411}],345:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Types = require("../Halogen.VDom.Types/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var VDomSpec = function (x) {
    return x;
};
var haltWidget = function (v) {
    return Halogen_VDom_Machine.halt(v.widget);
};
var patchWidget = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Widget) {
        var v = Halogen_VDom_Machine.step(state.widget, vdom.value0);
        var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
                build: state.build,
                widget: v
            }, patchWidget, haltWidget));
        })(v);
        return res$prime;
    };
    haltWidget(state);
    return state.build(vdom);
};
var haltText = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    return Halogen_VDom_Util.removeChild(v.node, v1);
};
var patchText = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Text) {
        if (state.value === vdom.value0) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
        };
        if (Data_Boolean.otherwise) {
            var nextState = {
                build: state.build,
                node: state.node,
                value: vdom.value0
            };
            Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
        };
    };
    haltText(state);
    return state.build(vdom);
};
var haltKeyed = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, v1);
    Halogen_VDom_Util.forInE(v.children, function (v2, s) {
        return Halogen_VDom_Machine.halt(s);
    });
    return Halogen_VDom_Machine.halt(v.attrs);
};
var haltElem = function (v) {
    var v1 = Halogen_VDom_Util.parentNode(v.node);
    Halogen_VDom_Util.removeChild(v.node, v1);
    Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
    return Halogen_VDom_Machine.halt(v.attrs);
};
var eqElemSpec = function (ns1, v, ns2, v1) {
    var $84 = v === v1;
    if ($84) {
        if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
            return true;
        };
        if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
            return true;
        };
        return false;
    };
    return false;
};
var patchElem = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        var v1 = Data_Array.length(state.children);
        if (v1 === 0 && v === 0) {
            var v2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: v2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
        };
        var onThis = function (ix, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (ix, s, v2) {
            var v3 = Halogen_VDom_Machine.step(s, v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), state.node);
            return v3;
        };
        var onThat = function (ix, v2) {
            var v3 = state.build(v2);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), state.node);
            return v3;
        };
        var v2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
        var v3 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: v3,
            ns: vdom.value0,
            name: vdom.value1,
            children: v2
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
    };
    haltElem(state);
    return state.build(vdom);
};
var patchKeyed = function (state, vdom) {
    if (vdom instanceof Halogen_VDom_Types.Grafted) {
        return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
    };
    if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
        var v = Data_Array.length(vdom.value3);
        if (state.length === 0 && v === 0) {
            var v2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
            var nextState = {
                build: state.build,
                node: state.node,
                attrs: v2,
                ns: vdom.value0,
                name: vdom.value1,
                children: state.children,
                length: 0
            };
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
        };
        var onThis = function (v2, s) {
            return Halogen_VDom_Machine.halt(s);
        };
        var onThese = function (v2, ix$prime, s, v3) {
            var v5 = Halogen_VDom_Machine.step(s, v3.value1);
            Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(v5), state.node);
            return v5;
        };
        var onThat = function (v2, ix, v3) {
            var v5 = state.build(v3.value1);
            Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v5), state.node);
            return v5;
        };
        var v2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
        var v3 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
        var nextState = {
            build: state.build,
            node: state.node,
            attrs: v3,
            ns: vdom.value0,
            name: vdom.value1,
            children: v2,
            length: v
        };
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
    };
    haltKeyed(state);
    return state.build(vdom);
};
var buildWidget = function (v, build, w) {
    var v1 = v.buildWidget(v)(w);
    var res$prime = Halogen_VDom_Machine.unStep(function (v2) {
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v2.value0, {
            build: build,
            widget: v1
        }, patchWidget, haltWidget));
    })(v1);
    return res$prime;
};
var buildText = function (v, build, s) {
    var v1 = Halogen_VDom_Util.createTextNode(s, v.document);
    var state = {
        build: build,
        node: v1,
        value: s
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1, state, patchText, haltText));
};
var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
    var v1 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(v1);
    var onChild = function (k, ix, v2) {
        var v3 = build(v2.value1);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v3), node);
        return v3;
    };
    var v2 = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
    var v3 = v.buildAttributes(v1)(as1);
    var state = {
        build: build,
        node: node,
        attrs: v3,
        ns: ns1,
        name: name1,
        children: v2,
        length: Data_Array.length(ch1)
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
};
var buildElem = function (v, build, ns1, name1, as1, ch1) {
    var v1 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
    var node = Web_DOM_Element.toNode(v1);
    var onChild = function (ix, child) {
        var v2 = build(child);
        Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(v2), node);
        return v2;
    };
    var v2 = Halogen_VDom_Util.forE(ch1, onChild);
    var v3 = v.buildAttributes(v1)(as1);
    var state = {
        build: build,
        node: node,
        attrs: v3,
        ns: ns1,
        name: name1,
        children: v2
    };
    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
};
var buildVDom = function (spec) {
    var build = function (v) {
        if (v instanceof Halogen_VDom_Types.Text) {
            return buildText(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Elem) {
            return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Keyed) {
            return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
        };
        if (v instanceof Halogen_VDom_Types.Widget) {
            return buildWidget(spec, build, v.value0);
        };
        if (v instanceof Halogen_VDom_Types.Grafted) {
            return build(Halogen_VDom_Types.runGraft(v.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
    };
    return build;
};
module.exports = {
    VDomSpec: VDomSpec,
    buildVDom: buildVDom,
    buildText: buildText,
    buildElem: buildElem,
    buildKeyed: buildKeyed,
    buildWidget: buildWidget
};

},{"../Data.Array/index.js":91,"../Data.Boolean/index.js":100,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Data.Tuple/index.js":251,"../Halogen.VDom.Machine/index.js":347,"../Halogen.VDom.Types/index.js":349,"../Halogen.VDom.Util/index.js":351,"../Web.DOM.Element/index.js":399}],346:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Halogen_Aff_Driver = require("../Halogen.Aff.Driver/index.js");
var Halogen_Aff_Driver_State = require("../Halogen.Aff.Driver.State/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_DOM_Prop = require("../Halogen.VDom.DOM.Prop/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Thunk = require("../Halogen.VDom.Thunk/index.js");
var Unsafe_Reference = require("../Unsafe.Reference/index.js");
var Web_DOM_Node = require("../Web.DOM.Node/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var RenderState = function (x) {
    return x;
};
var substInParent = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
            };
            if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
            };
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
        };
    };
};
var removeChild = function (v) {
    return function __do() {
        var v1 = Web_DOM_Node.parentNode(v.node)();
        return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
            return Web_DOM_Node.removeChild(v.node)(pn);
        })(v1)();
    };
};
var mkSpec = function (handler) {
    return function (renderChildRef) {
        return function (document) {
            var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                return v.node;
            });
            var done = function (st) {
                if (st instanceof Data_Maybe.Just) {
                    return Halogen_VDom_Machine.halt(st.value0);
                };
                return Data_Unit.unit;
            };
            var buildWidget = function (spec) {
                var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeHTML))(spec);
                var renderComponentSlot = function (cs) {
                    var v = Effect_Ref.read(renderChildRef)();
                    var v1 = v(cs)();
                    var node = getNode(v1);
                    return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                };
                var render = function (slot) {
                    if (slot instanceof Halogen_Component.ComponentSlot) {
                        return renderComponentSlot(slot.value0);
                    };
                    if (slot instanceof Halogen_Component.ThunkSlot) {
                        var v = buildThunk(slot.value0);
                        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), new Data_Maybe.Just(v), patch, done));
                    };
                    throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                };
                var patch = function (st, slot) {
                    if (st instanceof Data_Maybe.Just) {
                        if (slot instanceof Halogen_Component.ComponentSlot) {
                            Halogen_VDom_Machine.halt(st.value0);
                            return renderComponentSlot(slot.value0);
                        };
                        if (slot instanceof Halogen_Component.ThunkSlot) {
                            var v = Halogen_VDom_Machine.step(st.value0, slot.value0);
                            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), new Data_Maybe.Just(v), patch, done));
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                    };
                    return render(slot);
                };
                return render;
            };
            var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
            return {
                buildWidget: buildWidget,
                buildAttributes: buildAttributes,
                document: document
            };
        };
    };
};
var renderSpec = function (document) {
    return function (container) {
        var render = function (handler) {
            return function (child) {
                return function (v) {
                    return function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return function __do() {
                                var v2 = Effect_Ref["new"](child)();
                                var spec = mkSpec(handler)(v2)(document);
                                var v3 = Halogen_VDom_DOM.buildVDom(spec)(v);
                                var node = Halogen_VDom_Machine.extract(v3);
                                Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                return {
                                    machine: v3,
                                    node: node,
                                    renderChildRef: v2
                                };
                            };
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return function __do() {
                                Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                var v2 = Web_DOM_Node.parentNode(v1.value0.node)();
                                var v3 = Web_DOM_Node.nextSibling(v1.value0.node)();
                                var v4 = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                var newNode = Halogen_VDom_Machine.extract(v4);
                                Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(v3)(v2))();
                                return {
                                    machine: v4,
                                    node: newNode,
                                    renderChildRef: v1.value0.renderChildRef
                                };
                            };
                        };
                        throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                    };
                };
            };
        };
        return {
            render: render,
            renderChild: Control_Category.identity(Control_Category.categoryFn),
            removeChild: removeChild,
            dispose: removeChild
        };
    };
};
var runUI = function (component) {
    return function (i) {
        return function (element) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (v) {
                return Halogen_Aff_Driver.runUI(renderSpec(v)(element))(component)(i);
            });
        };
    };
};
module.exports = {
    runUI: runUI
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Unit/index.js":257,"../Effect.Aff/index.js":297,"../Effect.Class/index.js":299,"../Effect.Ref/index.js":305,"../Effect/index.js":309,"../Halogen.Aff.Driver.State/index.js":321,"../Halogen.Aff.Driver/index.js":322,"../Halogen.Component/index.js":326,"../Halogen.HTML.Core/index.js":332,"../Halogen.VDom.DOM.Prop/index.js":344,"../Halogen.VDom.DOM/index.js":345,"../Halogen.VDom.Machine/index.js":347,"../Halogen.VDom.Thunk/index.js":348,"../Unsafe.Reference/index.js":393,"../Web.DOM.Node/index.js":401,"../Web.HTML.HTMLDocument/index.js":416,"../Web.HTML.HTMLElement/index.js":418,"../Web.HTML.Window/index.js":425,"../Web.HTML/index.js":427}],347:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Step = (function () {
    function Step(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Step.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Step(value0, value1, value2, value3);
                };
            };
        };
    };
    return Step;
})();
var unStep = Unsafe_Coerce.unsafeCoerce;
var step = function (v, a) {
    return v.value2(v.value1, a);
};
var mkStep = Unsafe_Coerce.unsafeCoerce;
var halt = function (v) {
    return v.value3(v.value1);
};
var extract = unStep(function (v) {
    return v.value0;
});
module.exports = {
    Step: Step,
    mkStep: mkStep,
    unStep: unStep,
    extract: extract,
    step: step,
    halt: halt
};

},{"../Unsafe.Coerce/index.js":391}],348:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Halogen_VDom_DOM = require("../Halogen.VDom.DOM/index.js");
var Halogen_VDom_Machine = require("../Halogen.VDom.Machine/index.js");
var Halogen_VDom_Util = require("../Halogen.VDom.Util/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Thunk = (function () {
    function Thunk(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Thunk.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Thunk(value0, value1, value2, value3);
                };
            };
        };
    };
    return Thunk;
})();
var unsafeThunkId = Unsafe_Coerce.unsafeCoerce;
var unsafeEqThunk = function (v, v1) {
    return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && Halogen_VDom_Util.refEq(v.value3, v1.value3));
};
var thunk = function (tid, eqFn, f, a) {
    return new Thunk(tid, eqFn, f, a);
};
var thunk1 = function (f, a) {
    return thunk(unsafeThunkId(f), Halogen_VDom_Util.refEq, f, a);
};
var thunk2 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && Halogen_VDom_Util.refEq(a["_2"], b["_2"]);
    };
    return function (f, a, b) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"]);
        }, {
            "_1": a,
            "_2": b
        });
    };
})();
var thunk3 = (function () {
    var eqFn = function (a, b) {
        return Halogen_VDom_Util.refEq(a["_1"], b["_1"]) && (Halogen_VDom_Util.refEq(a["_2"], b["_2"]) && Halogen_VDom_Util.refEq(a["_3"], b["_3"]));
    };
    return function (f, a, b, c) {
        return thunk(unsafeThunkId(f), eqFn, function (v) {
            return f(v["_1"])(v["_2"])(v["_3"]);
        }, {
            "_1": a,
            "_2": b,
            "_3": c
        });
    };
})();
var thunked = function (eqFn) {
    return function (f) {
        var tid = unsafeThunkId({
            f: f
        });
        var eqFn$prime = Data_Function_Uncurried.mkFn2(eqFn);
        return function (a) {
            return thunk(tid, eqFn$prime, f, a);
        };
    };
};
var runThunk = function (v) {
    return v.value2(v.value3);
};
var mapThunk = function (k) {
    return function (v) {
        return new Thunk(v.value0, v.value1, function ($50) {
            return k(v.value2($50));
        }, v.value3);
    };
};
var hoist = mapThunk;
var functorThunk = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return new Thunk(v.value0, v.value1, (function () {
                var $51 = Data_Functor.map(dictFunctor)(f);
                return function ($52) {
                    return $51(v.value2($52));
                };
            })(), v.value3);
        };
    });
};
var buildThunk = function (toVDom) {
    var haltThunk = function (state) {
        return Halogen_VDom_Machine.halt(state.vdom);
    };
    var patchThunk = function (state, t2) {
        var $45 = unsafeEqThunk(state.thunk, t2);
        if ($45) {
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
        };
        var v = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
        return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), {
            vdom: v,
            thunk: t2
        }, patchThunk, haltThunk));
    };
    var renderThunk = function (spec) {
        return function (t) {
            var v = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
            return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(v), {
                thunk: t,
                vdom: v
            }, patchThunk, haltThunk));
        };
    };
    return renderThunk;
};
module.exports = {
    buildThunk: buildThunk,
    runThunk: runThunk,
    hoist: hoist,
    mapThunk: mapThunk,
    thunked: thunked,
    thunk1: thunk1,
    thunk2: thunk2,
    thunk3: thunk3,
    functorThunk: functorThunk
};

},{"../Data.Function.Uncurried/index.js":131,"../Data.Functor/index.js":143,"../Halogen.VDom.DOM/index.js":345,"../Halogen.VDom.Machine/index.js":347,"../Halogen.VDom.Util/index.js":351,"../Unsafe.Coerce/index.js":391}],349:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Namespace = function (x) {
    return x;
};
var ElemName = function (x) {
    return x;
};
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();
var Elem = (function () {
    function Elem(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Elem.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Elem(value0, value1, value2, value3);
                };
            };
        };
    };
    return Elem;
})();
var Keyed = (function () {
    function Keyed(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Keyed.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Keyed(value0, value1, value2, value3);
                };
            };
        };
    };
    return Keyed;
})();
var Widget = (function () {
    function Widget(value0) {
        this.value0 = value0;
    };
    Widget.create = function (value0) {
        return new Widget(value0);
    };
    return Widget;
})();
var Grafted = (function () {
    function Grafted(value0) {
        this.value0 = value0;
    };
    Grafted.create = function (value0) {
        return new Grafted(value0);
    };
    return Grafted;
})();
var Graft = (function () {
    function Graft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Graft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Graft(value0, value1, value2);
            };
        };
    };
    return Graft;
})();
var unGraft = function (f) {
    return function ($58) {
        return f($58);
    };
};
var ordNamespace = Data_Ord.ordString;
var ordElemName = Data_Ord.ordString;
var newtypeNamespace = new Data_Newtype.Newtype(function (n) {
    return n;
}, Namespace);
var newtypeElemName = new Data_Newtype.Newtype(function (n) {
    return n;
}, ElemName);
var graft = Unsafe_Coerce.unsafeCoerce;
var functorGraft = new Data_Functor.Functor(function (g) {
    return unGraft(function (v) {
        return graft(new Graft(v.value0, function ($59) {
            return g(v.value1($59));
        }, v.value2));
    });
});
var functorVDom = new Data_Functor.Functor(function (g) {
    return function (v) {
        if (v instanceof Text) {
            return new Text(v.value0);
        };
        if (v instanceof Grafted) {
            return new Grafted(Data_Functor.map(functorGraft)(g)(v.value0));
        };
        return new Grafted(graft(new Graft(Control_Category.identity(Control_Category.categoryFn), g, v)));
    };
});
var eqNamespace = Data_Eq.eqString;
var eqElemName = Data_Eq.eqString;
var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return unGraft(function (v) {
            return graft(new Graft(function ($60) {
                return f(v.value0($60));
            }, function ($61) {
                return g(v.value1($61));
            }, v.value2));
        });
    };
});
var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Grafted) {
                return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
            };
            return new Grafted(graft(new Graft(f, g, v)));
        };
    };
});
var runGraft = unGraft(function (v) {
    var go = function (v2) {
        if (v2 instanceof Text) {
            return new Text(v2.value0);
        };
        if (v2 instanceof Elem) {
            return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
        };
        if (v2 instanceof Keyed) {
            return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
        };
        if (v2 instanceof Widget) {
            return new Widget(v.value1(v2.value0));
        };
        if (v2 instanceof Grafted) {
            return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
        };
        throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
    };
    return go(v.value2);
});
var renderWidget = function (f) {
    return function (g) {
        return function (v) {
            if (v instanceof Text) {
                return new Text(v.value0);
            };
            if (v instanceof Elem) {
                return new Elem(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(renderWidget(f)(g))(v.value3));
            };
            if (v instanceof Keyed) {
                return new Keyed(v.value0, v.value1, f(v.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(renderWidget(f)(g)))(v.value3));
            };
            if (v instanceof Widget) {
                return g(v.value0);
            };
            if (v instanceof Grafted) {
                return renderWidget(f)(g)(runGraft(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.VDom.Types (line 48, column 20 - line 53, column 48): " + [ v.constructor.name ]);
        };
    };
};
module.exports = {
    Text: Text,
    Elem: Elem,
    Keyed: Keyed,
    Widget: Widget,
    Grafted: Grafted,
    renderWidget: renderWidget,
    Graft: Graft,
    graft: graft,
    unGraft: unGraft,
    runGraft: runGraft,
    ElemName: ElemName,
    Namespace: Namespace,
    functorVDom: functorVDom,
    bifunctorVDom: bifunctorVDom,
    functorGraft: functorGraft,
    bifunctorGraft: bifunctorGraft,
    newtypeElemName: newtypeElemName,
    eqElemName: eqElemName,
    ordElemName: ordElemName,
    newtypeNamespace: newtypeNamespace,
    eqNamespace: eqNamespace,
    ordNamespace: ordNamespace
};

},{"../Control.Category/index.js":24,"../Data.Bifunctor/index.js":98,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Tuple/index.js":251,"../Unsafe.Coerce/index.js":391}],350:[function(require,module,exports){
"use strict";

exports.unsafeGetAny = function (key, obj) {
  return obj[key];
};

exports.unsafeHasAny = function (key, obj) {
  return obj.hasOwnProperty(key);
};

exports.unsafeSetAny = function (key, val, obj) {
    obj[key] = val;
};

exports.unsafeDeleteAny = function (key, obj) {
  delete obj[key];
};

exports.forE = function (a, f) {
  var b = [];
  for (var i = 0; i < a.length; i++) {
    b.push(f(i, a[i]));
  }
  return b;
};

exports.forEachE = function (a, f) {
  for (var i = 0; i < a.length; i++) {
    f(a[i]);
  }
};

exports.forInE = function (o, f) {
  var ks = Object.keys(o);
  for (var i = 0; i < ks.length; i++) {
    var k = ks[i];
    f(k, o[k]);
  }
};

exports.replicateE = function (n, f) {
  for (var i = 0; i < n; i++) {
    f();
  }
};

exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
  var a3 = [];
  var l1 = a1.length;
  var l2 = a2.length;
  var i  = 0;
  while (1) {
    if (i < l1) {
      if (i < l2) {
        a3.push(f1(i, a1[i], a2[i]));
      } else {
        f2(i, a1[i]);
      }
    } else if (i < l2) {
      a3.push(f3(i, a2[i]));
    } else {
      break;
    }
    i++;
  }
  return a3;
};

exports.strMapWithIxE = function (as, fk, f) {
  var o = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    o[k] = f(k, i, a);
  }
  return o;
};

exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
  var o2 = {};
  for (var i = 0; i < as.length; i++) {
    var a = as[i];
    var k = fk(a);
    if (o1.hasOwnProperty(k)) {
      o2[k] = f1(k, i, o1[k], a);
    } else {
      o2[k] = f3(k, i, a);
    }
  }
  for (var k in o1) {
    if (k in o2) {
      continue;
    }
    f2(k, o1[k]);
  }
  return o2;
};

exports.refEq = function (a, b) {
  return a === b;
};

exports.createTextNode = function (s, doc) {
  return doc.createTextNode(s);
};

exports.setTextContent = function (s, n) {
  n.textContent = s;
};

exports.createElement = function (ns, name, doc) {
  if (ns != null) {
    return doc.createElementNS(ns, name);
  } else {
    return doc.createElement(name)
  }
};

exports.insertChildIx = function (i, a, b) {
  var n = b.childNodes.item(i) || null;
  if (n !== a) {
    b.insertBefore(a, n);
  }
};

exports.removeChild = function (a, b) {
  if (b && a.parentNode === b) {
    b.removeChild(a);
  }
};

exports.parentNode = function (a) {
  return a.parentNode;
};

exports.setAttribute = function (ns, attr, val, el) {
  if (ns != null) {
    el.setAttributeNS(ns, attr, val);
  } else {
    el.setAttribute(attr, val);
  }
};

exports.removeAttribute = function (ns, attr, el) {
  if (ns != null) {
    el.removeAttributeNS(ns, attr);
  } else {
    el.removeAttribute(attr);
  }
};

exports.addEventListener = function (ev, listener, el) {
  el.addEventListener(ev, listener, false);
};

exports.removeEventListener = function (ev, listener, el) {
  el.removeEventListener(ev, listener, false);
};

exports.jsUndefined = void 0;

},{}],351:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Foreign_Object_ST = require("../Foreign.Object.ST/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unsafeLookup = $foreign.unsafeGetAny;
var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
var pokeMutMap = $foreign.unsafeSetAny;
var newMutMap = Foreign_Object_ST["new"];
var deleteMutMap = $foreign.unsafeDeleteAny;
module.exports = {
    newMutMap: newMutMap,
    pokeMutMap: pokeMutMap,
    deleteMutMap: deleteMutMap,
    unsafeFreeze: unsafeFreeze,
    unsafeLookup: unsafeLookup,
    unsafeGetAny: $foreign.unsafeGetAny,
    unsafeHasAny: $foreign.unsafeHasAny,
    unsafeSetAny: $foreign.unsafeSetAny,
    unsafeDeleteAny: $foreign.unsafeDeleteAny,
    forE: $foreign.forE,
    forEachE: $foreign.forEachE,
    forInE: $foreign.forInE,
    replicateE: $foreign.replicateE,
    diffWithIxE: $foreign.diffWithIxE,
    diffWithKeyAndIxE: $foreign.diffWithKeyAndIxE,
    strMapWithIxE: $foreign.strMapWithIxE,
    refEq: $foreign.refEq,
    createTextNode: $foreign.createTextNode,
    setTextContent: $foreign.setTextContent,
    createElement: $foreign.createElement,
    insertChildIx: $foreign.insertChildIx,
    removeChild: $foreign.removeChild,
    parentNode: $foreign.parentNode,
    setAttribute: $foreign.setAttribute,
    removeAttribute: $foreign.removeAttribute,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    jsUndefined: $foreign.jsUndefined
};

},{"../Foreign.Object.ST/index.js":313,"../Unsafe.Coerce/index.js":391,"./foreign.js":350}],352:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_MonadZero = require("../Control.MonadZero/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Coyoneda = require("../Data.Coyoneda/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Lens_Prism_Maybe = require("../Data.Lens.Prism.Maybe/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Halogen_Component = require("../Halogen.Component/index.js");
var Halogen_Component_Profunctor = require("../Halogen.Component.Profunctor/index.js");
var Halogen_Component_Utils_Drag = require("../Halogen.Component.Utils.Drag/index.js");
var Halogen_Data_Slot = require("../Halogen.Data.Slot/index.js");
var Halogen_HTML_Core = require("../Halogen.HTML.Core/index.js");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements/index.js");
var Halogen_HTML_Elements_Keyed = require("../Halogen.HTML.Elements.Keyed/index.js");
var Halogen_HTML_Events = require("../Halogen.HTML.Events/index.js");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties/index.js");
var Halogen_Query_ChildQuery = require("../Halogen.Query.ChildQuery/index.js");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM/index.js");
var Halogen_Query_HalogenQ = require("../Halogen.Query.HalogenQ/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var NewState = (function () {
    function NewState(value0) {
        this.value0 = value0;
    };
    NewState.create = function (value0) {
        return new NewState(value0);
    };
    return NewState;
})();
var Preview = (function () {
    function Preview(value0) {
        this.value0 = value0;
    };
    Preview.create = function (value0) {
        return new Preview(value0);
    };
    return Preview;
})();
var Added = (function () {
    function Added(value0) {
        this.value0 = value0;
    };
    Added.create = function (value0) {
        return new Added(value0);
    };
    return Added;
})();
var DragStart = (function () {
    function DragStart() {

    };
    DragStart.value = new DragStart();
    return DragStart;
})();
var DragEnd = (function () {
    function DragEnd() {

    };
    DragEnd.value = new DragEnd();
    return DragEnd;
})();
var Reset = (function () {
    function Reset(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Reset.create = function (value0) {
        return function (value1) {
            return new Reset(value0, value1);
        };
    };
    return Reset;
})();
var NewInput = (function () {
    function NewInput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    NewInput.create = function (value0) {
        return function (value1) {
            return new NewInput(value0, value1);
        };
    };
    return NewInput;
})();
var Add = (function () {
    function Add(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Add.create = function (value0) {
        return function (value1) {
            return new Add(value0, value1);
        };
    };
    return Add;
})();
var Update = (function () {
    function Update(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Update.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Update(value0, value1, value2);
            };
        };
    };
    return Update;
})();
var Remove = (function () {
    function Remove(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Remove.create = function (value0) {
        return function (value1) {
            return new Remove(value0, value1);
        };
    };
    return Remove;
})();
var Swap = (function () {
    function Swap(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Swap.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Swap(value0, value1, value2);
            };
        };
    };
    return Swap;
})();
var Dragging = (function () {
    function Dragging(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Dragging.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Dragging(value0, value1, value2);
            };
        };
    };
    return Dragging;
})();
var Move = (function () {
    function Move(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Move.create = function (value0) {
        return function (value1) {
            return new Move(value0, value1);
        };
    };
    return Move;
})();
var DragTo = (function () {
    function DragTo(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DragTo.create = function (value0) {
        return function (value1) {
            return new DragTo(value0, value1);
        };
    };
    return DragTo;
})();
var Output = (function () {
    function Output(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Output.create = function (value0) {
        return function (value1) {
            return new Output(value0, value1);
        };
    };
    return Output;
})();
var QueryChild = (function () {
    function QueryChild(value0) {
        this.value0 = value0;
    };
    QueryChild.create = function (value0) {
        return new QueryChild(value0);
    };
    return QueryChild;
})();
var Renderer = function (x) {
    return x;
};
var Vertical = (function () {
    function Vertical() {

    };
    Vertical.value = new Vertical();
    return Vertical;
})();
var Horizontal = (function () {
    function Horizontal() {

    };
    Horizontal.value = new Horizontal();
    return Horizontal;
})();
var InputN = function (x) {
    return x;
};
var transHalogenQ = function (t) {
    return function (v) {
        if (v instanceof Halogen_Query_HalogenQ.Initialize) {
            return new Halogen_Query_HalogenQ.Initialize(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Finalize) {
            return new Halogen_Query_HalogenQ.Finalize(v.value0);
        };
        if (v instanceof Halogen_Query_HalogenQ.Receive) {
            return new Halogen_Query_HalogenQ.Receive(v.value0, v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Action) {
            return new Halogen_Query_HalogenQ.Action(v.value0, v.value1);
        };
        if (v instanceof Halogen_Query_HalogenQ.Query) {
            return new Halogen_Query_HalogenQ.Query(Data_Coyoneda.hoistCoyoneda(t)(v.value0), v.value1);
        };
        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 737, column 19 - line 742, column 49): " + [ v.constructor.name ]);
    };
};
var surroundMapWithIndicesWhere = function (dictMonoid) {
    return function (v) {
        return function (f) {
            return function (as) {
                var notAfter = Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(dictMonoid)(function (i) {
                    return function (a) {
                        var addSpacer = (function () {
                            var $115 = i === 0;
                            if ($115) {
                                return v.before;
                            };
                            return v.between;
                        })();
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(function (v1) {
                            return v1(i);
                        })(addSpacer))(f(i)(a));
                    };
                })(as);
                return Data_Semigroup.append(dictMonoid.Semigroup0())(notAfter)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(function (v1) {
                    return v1(Data_Array.length(as));
                })(v.after));
            };
        };
    };
};
var surroundMapWhere = function (dictMonoid) {
    return function (v) {
        return function (f) {
            return function (as) {
                var notAfter = Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(dictMonoid)(function (i) {
                    return function (a) {
                        var addSpacer = (function () {
                            var $122 = i === 0;
                            if ($122) {
                                return v.before;
                            };
                            return v.between;
                        })();
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(function (v1) {
                            return v1(i);
                        })(addSpacer))(f(a));
                    };
                })(as);
                return Data_Semigroup.append(dictMonoid.Semigroup0())(notAfter)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(function (v1) {
                    return v1(Data_Array.length(as));
                })(v.after));
            };
        };
    };
};
var queryInside = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (p) {
                    return function (q) {
                        return QueryChild.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            return function (k) {
                                var $307 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                                var $308 = Halogen_Data_Slot.lookup(dictCons)(dictIsSymbol)(dictOrd)(sym)(p);
                                return function ($309) {
                                    return $307($308($309));
                                };
                            };
                        }, q, Control_Category.identity(Control_Category.categoryFn))));
                    };
                };
            };
        };
    };
};
var queryAllInside = function (dictCons) {
    return function (dictIsSymbol) {
        return function (dictOrd) {
            return function (sym) {
                return function (q) {
                    var catMapMaybes = function (dictOrd1) {
                        return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (k) {
                            return function (v) {
                                return function (acc) {
                                    return Data_Maybe.maybe(acc)(Data_Function.flip(Data_Map_Internal.insert(dictOrd1)(k))(acc))(v);
                                };
                            };
                        })(Data_Map_Internal.empty);
                    };
                    return QueryChild.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                        return function (k) {
                            var $310 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(catMapMaybes(dictOrd));
                            var $311 = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(dictApplicative)(k);
                            var $312 = Halogen_Data_Slot.slots(dictCons)(dictIsSymbol)(dictOrd)(sym);
                            return function ($313) {
                                return $310($311($312($313)));
                            };
                        };
                    }, q, Control_Category.identity(Control_Category.categoryFn))));
                };
            };
        };
    };
};
var mkJust = Data_Maybe.Just.create;
var mid = function (dictPlus) {
    return function (dictMonadState) {
        return function (v) {
            if (v.bottom === 0.0 && (v.height === 0.0 && (v.left === 0.0 && (v.right === 0.0 && (v.top === 0.0 && v.width === 0.0))))) {
                return Control_Plus.empty(dictPlus);
            };
            return Control_Monad_State_Class.gets(dictMonadState)(function ($314) {
                return (function (v1) {
                    if (v1 instanceof Vertical) {
                        return (v.top + v.bottom) / 2.0;
                    };
                    if (v1 instanceof Horizontal) {
                        return (v.left + v.right) / 2.0;
                    };
                    throw new Error("Failed pattern match at Halogen.Zuruzuru (line 602, column 35 - line 604, column 45): " + [ v1.constructor.name ]);
                })((function (v1) {
                    return v1.direction;
                })($314));
            });
        };
    };
};
var mapRenderAdderWhere = function (f) {
    return function (v) {
        return {
            before: Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.before),
            between: Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.between),
            after: Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.after)
        };
    };
};
var mapQueryI = function (f) {
    return function (v) {
        if (v instanceof Reset) {
            return new Reset(v.value0, v.value1);
        };
        if (v instanceof NewInput) {
            return new NewInput(f(v.value0), v.value1);
        };
        if (v instanceof Add) {
            return new Add(v.value0, v.value1);
        };
        if (v instanceof Update) {
            return new Update(v.value0, v.value1, v.value2);
        };
        if (v instanceof Remove) {
            return new Remove(v.value0, v.value1);
        };
        if (v instanceof Swap) {
            return new Swap(v.value0, v.value1, v.value2);
        };
        if (v instanceof Dragging) {
            return new Dragging(v.value0, v.value1, v.value2);
        };
        if (v instanceof Move) {
            return new Move(v.value0, v.value1);
        };
        if (v instanceof DragTo) {
            return new DragTo(v.value0, v.value1);
        };
        if (v instanceof Output) {
            return new Output(v.value0, v.value1);
        };
        if (v instanceof QueryChild) {
            return new QueryChild(v.value0);
        };
        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 711, column 15 - line 722, column 39): " + [ v.constructor.name ]);
    };
};
var label = function (i) {
    return "zuruzuru-component" + i;
};
var render = (function () {
    var isDragging = function (dragging) {
        return function (key) {
            if (dragging instanceof Data_Maybe.Just && dragging.value0.key === key) {
                return true;
            };
            return false;
        };
    };
    return function (v) {
        return Data_Functor.flap(Data_Functor.functorFn)(v.renderer)({
            add: Data_Functor.flap(Data_Functor.functorFn)(Add.create)(Data_Unit.unit),
            output: Data_Functor.flap(Data_Functor.functorFn)(Output.create)(Data_Unit.unit)
        })((function () {
            var top = Data_Array.length(v.values) - 1 | 0;
            var isDragged = isDragging(v.dragging);
            var element_offset = (function () {
                if (v.dragging instanceof Data_Maybe.Just) {
                    return v.dragging.value0.displacement - v.dragging.value0.offset;
                };
                return 0;
            })();
            return Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
                return function (v1) {
                    var dragged = isDragged(v1.value0);
                    return {
                        helpers: {
                            prev: Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(i > 0))(new Swap(i, i - 1 | 0, Data_Unit.unit)),
                            next: Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(i < top))(new Swap(i, i + 1 | 0, Data_Unit.unit)),
                            remove: new Remove(v1.value0, Data_Unit.unit),
                            set: function (e) {
                                return new Update(v1.value0, Data_Function["const"](e), Data_Unit.unit);
                            },
                            modify: Data_Functor.flap(Data_Functor.functorFn)(Update.create(v1.value0))(Data_Unit.unit),
                            output: Data_Functor.flap(Data_Functor.functorFn)(Output.create)(Data_Unit.unit)
                        },
                        handle: {
                            label: label(v1.value0),
                            onMouseDown: (function () {
                                var $315 = Data_Function.flip(Dragging.create(v1.value0))(Data_Unit.unit);
                                return function ($316) {
                                    return Data_Maybe.Just.create($315($316));
                                };
                            })()
                        },
                        info: {
                            key: v1.value0,
                            index: i,
                            value: v1.value1,
                            dragged: dragged,
                            offset: (function () {
                                if (dragged) {
                                    return element_offset;
                                };
                                return 0;
                            })()
                        }
                    };
                };
            });
        })()(v.values));
    };
})();
var justBefore$prime = function (a) {
    return {
        before: new Data_Maybe.Just(a),
        between: Data_Maybe.Nothing.value,
        after: Data_Maybe.Nothing.value
    };
};
var justBefore = function (a) {
    return {
        before: Data_Maybe.Nothing.value,
        between: Data_Maybe.Nothing.value,
        after: mkJust(a)
    };
};
var justAfter$prime = function (a) {
    return {
        before: Data_Maybe.Nothing.value,
        between: Data_Maybe.Nothing.value,
        after: new Data_Maybe.Just(a)
    };
};
var justAfter = function (a) {
    return {
        before: Data_Maybe.Nothing.value,
        between: Data_Maybe.Nothing.value,
        after: mkJust(a)
    };
};
var inside$prime = function (a) {
    return {
        before: Data_Maybe.Nothing.value,
        between: new Data_Maybe.Just(a),
        after: Data_Maybe.Nothing.value
    };
};
var inside = function (a) {
    return {
        before: Data_Maybe.Nothing.value,
        between: mkJust(a),
        after: Data_Maybe.Nothing.value
    };
};
var getPos = function (dictMonadAff) {
    return function (k) {
        return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Halogen_Query_HalogenM.getRef(label(k))))(function (v) {
            return Control_Bind.bindFlipped(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(mid(Control_Monad_Maybe_Trans.plusMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM)))(Effect_Class.liftEffect(Control_Monad_Maybe_Trans.monadEffectMaybe(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0())))(Web_HTML_HTMLElement.getBoundingClientRect(v)));
        });
    };
};
var functorQueryI = new Data_Functor.Functor(function (f) {
    return function (m) {
        if (m instanceof Reset) {
            return new Reset(m.value0, f(m.value1));
        };
        if (m instanceof NewInput) {
            return new NewInput(m.value0, f(m.value1));
        };
        if (m instanceof Add) {
            return new Add(m.value0, f(m.value1));
        };
        if (m instanceof Update) {
            return new Update(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof Remove) {
            return new Remove(m.value0, f(m.value1));
        };
        if (m instanceof Swap) {
            return new Swap(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof Dragging) {
            return new Dragging(m.value0, m.value1, f(m.value2));
        };
        if (m instanceof Move) {
            return new Move(m.value0, f(m.value1));
        };
        if (m instanceof DragTo) {
            return new DragTo(m.value0, f(m.value1));
        };
        if (m instanceof Output) {
            return new Output(m.value0, f(m.value1));
        };
        if (m instanceof QueryChild) {
            return new QueryChild(Data_Functor.map(Halogen_Query_ChildQuery.functorChildQuery)(f)(m.value0));
        };
        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 300, column 1 - line 300, column 59): " + [ m.constructor.name ]);
    };
});
var everywhere$prime = function (a) {
    return {
        before: new Data_Maybe.Just(a),
        between: new Data_Maybe.Just(a),
        after: new Data_Maybe.Just(a)
    };
};
var everywhere = function (a) {
    return {
        before: mkJust(a),
        between: mkJust(a),
        after: mkJust(a)
    };
};
var dirClass = function (v) {
    if (v instanceof Horizontal) {
        return "horizontal";
    };
    if (v instanceof Vertical) {
        return "vertical";
    };
    throw new Error("Failed pattern match at Halogen.Zuruzuru (line 551, column 12 - line 553, column 25): " + [ v.constructor.name ]);
};
var ctransQuery = function (t) {
    return Halogen_Component.unComponent(function (c) {
        return Halogen_Component.mkComponent({
            initialState: c.initialState,
            render: c.render,
            "eval": (function () {
                var $317 = transHalogenQ(t);
                return function ($318) {
                    return c["eval"]($317($318));
                };
            })()
        });
    });
};
var chooseQuery = function (v) {
    return {
        before: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.before)(function (q) {
            return q;
        }),
        between: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.between)(function (q) {
            return q;
        }),
        after: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.after)(function (q) {
            return q;
        })
    };
};
var addKeys = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)((function () {
    var $319 = Data_Semigroup.append(Data_Semigroup.semigroupString)("item");
    var $320 = Data_Show.show(Data_Show.showInt);
    return function ($321) {
        return Data_Tuple.Tuple.create($319($320($321)));
    };
})());
var initialState = function (v) {
    return {
        direction: v.direction,
        "default": v["default"],
        renderer: v.renderer,
        values: addKeys(v.values),
        supply: Data_Array.length(v.values),
        dragging: Data_Maybe.Nothing.value
    };
};
var _zuruzuru = Data_Symbol.SProxy.value;
var _values = function (dictStrong) {
    return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "values";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
};
var getPoses = function (dictMonadAff) {
    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Getter.use(Halogen_Query_HalogenM.monadStateHalogenM)(_values(Data_Lens_Internal_Forget.strongForget)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Halogen_Query_HalogenM.applicativeHalogenM)(function (v) {
        return Control_Monad_Maybe_Trans.runMaybeT(getPos(dictMonadAff)(v.value0));
    }));
};
var notify = Control_Bind.bindFlipped(Halogen_Query_HalogenM.bindHalogenM)((function () {
    var $322 = Data_Functor.map(Data_Functor.functorArray)(Control_Comonad.extract(Data_Tuple.comonadTuple));
    return function ($323) {
        return Halogen_Query_HalogenM.raise(Data_Either.Left.create(NewState.create($322($323))));
    };
})())(Data_Lens_Getter.use(Halogen_Query_HalogenM.monadStateHalogenM)(_values(Data_Lens_Internal_Forget.strongForget)));
var _dragging = function (dictStrong) {
    return Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "dragging";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
};
var _offset = function (dictWander) {
    var $324 = _dragging(dictWander.Strong0());
    var $325 = Data_Lens_Prism_Maybe["_Just"](dictWander.Choice1());
    var $326 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "offset";
    }))()()(Data_Symbol.SProxy.value)(dictWander.Strong0());
    return function ($327) {
        return $324($325($326($327)));
    };
};
var _dragKey = function (dictWander) {
    var $328 = _dragging(dictWander.Strong0());
    var $329 = Data_Lens_Prism_Maybe["_Just"](dictWander.Choice1());
    var $330 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "key";
    }))()()(Data_Symbol.SProxy.value)(dictWander.Strong0());
    return function ($331) {
        return $328($329($330($331)));
    };
};
var $$eval = function (dictMonadAff) {
    return function (v) {
        if (v instanceof Output) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Halogen_Query_HalogenM.raise(new Data_Either.Right(v.value0)));
        };
        if (v instanceof Reset) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class_Console.log(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))("Reset"))(function () {
                return Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                    var $223 = {};
                    for (var $224 in v1) {
                        if ({}.hasOwnProperty.call(v1, $224)) {
                            $223[$224] = v1[$224];
                        };
                    };
                    $223.values = addKeys(v.value0);
                    $223.supply = Data_Array.length(v.value0);
                    return $223;
                });
            }));
        };
        if (v instanceof NewInput) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(initialState(v.value0)));
        };
        if (v instanceof Update) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value2)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(_values(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Functor.functorArray)(Control_Extend.extend(Data_Tuple.extendTuple)(function (v1) {
                var $231 = v.value0 === v1.value0;
                if ($231) {
                    return v.value1(v1.value1);
                };
                return v1.value1;
            }))))(function () {
                return notify;
            }));
        };
        if (v instanceof Add) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.supply;
            }))(function (v1) {
                var k = Data_Show.show(Data_Show.showInt)(v1);
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                    var $238 = {};
                    for (var $239 in v2) {
                        if ({}.hasOwnProperty.call(v2, $239)) {
                            $238[$239] = v2[$239];
                        };
                    };
                    $238.supply = v1 + 1 | 0;
                    return $238;
                }))(function () {
                    return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Bind.bindFlipped(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Trans_Class.lift(Halogen_Query_HalogenM.monadTransHalogenM)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v2) {
                        return v2["default"];
                    })))(function (v2) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(_values(Data_Profunctor_Strong.strongFn))(Control_Apply.apply(Control_Apply.applyFn)(Data_Maybe.fromMaybe)(Data_Array.insertAt(v.value0)(new Data_Tuple.Tuple(k, v2)))))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(notify)(function () {
                                return Halogen_Query_HalogenM.raise(Data_Either.Left.create(new Added({
                                    key: "item" + k,
                                    index: v.value0,
                                    value: v2
                                })));
                            });
                        });
                    });
                });
            }));
        };
        if (v instanceof Remove) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(_values(Data_Profunctor_Strong.strongFn))(Data_Array.filter((function () {
                var $332 = Data_Eq.notEq(Data_Eq.eqString)(v.value0);
                return function ($333) {
                    return $332(Data_Tuple.fst($333));
                };
            })())))(function () {
                return notify;
            }));
        };
        if (v instanceof Swap) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value2)(Control_Monad_Maybe_Trans.runMaybeT(Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Getter.use(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(_values(Data_Lens_Internal_Forget.strongForget)))(function (v1) {
                return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array.index(v1)(v.value0))))(function (v2) {
                    return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array.index(v1)(v.value1))))(function (v3) {
                        return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array.updateAt(v.value0)(v3)(v1))))(function (v4) {
                            return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array.updateAt(v.value1)(v2)(v4))))(function (v5) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Setter.assign(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(_values(Data_Profunctor_Strong.strongFn))(v5))(function () {
                                    return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Halogen_Query_HalogenM.monadHalogenM)(notify);
                                });
                            });
                        });
                    });
                });
            })));
        };
        if (v instanceof DragTo) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Monad_Maybe_Trans.runMaybeT(Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Data_Lens_Getter.use(Halogen_Query_HalogenM.monadStateHalogenM)(_dragging(Data_Lens_Internal_Forget.strongForget))))(function (v1) {
                return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(getPos(dictMonadAff)(v1.key))(function (v2) {
                    return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Getter.use(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(_values(Data_Lens_Internal_Forget.strongForget)))(function (v3) {
                        return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.findIndex((function () {
                            var $334 = Data_Eq.eq(Data_Eq.eqString)(v1.key);
                            return function ($335) {
                                return $334(Data_Tuple.fst($335));
                            };
                        })())(v3))(function (v4) {
                            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(v3)(v4))(function (v5) {
                                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.deleteAt(v4)(v3))(Data_Array.insertAt(v.value0)(v5));
                            });
                        }))))(function (v4) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_State_Class.modify_(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(function (v5) {
                                var $260 = {};
                                for (var $261 in v5) {
                                    if ({}.hasOwnProperty.call(v5, $261)) {
                                        $260[$261] = v5[$261];
                                    };
                                };
                                $260.values = v4;
                                return $260;
                            }))(function () {
                                return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(getPos(dictMonadAff)(v1.key))(function (v5) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Effect_Class_Console.log(Control_Monad_Maybe_Trans.monadEffectMaybe(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0())))("dragTo offset: " + Data_Show.show(Data_Show.showNumber)(v5 - v2)))(function () {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Setter.addModifying(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(Data_Semiring.semiringNumber)(_offset(Data_Lens_Internal_Wander.wanderFunction))(v5 - v2))(function () {
                                            return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Halogen_Query_HalogenM.monadHalogenM)(Halogen_Query_HalogenM.raise(Data_Either.Left.create(new Preview(Data_Functor.map(Data_Functor.functorArray)(Control_Comonad.extract(Data_Tuple.comonadTuple))(v4)))));
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            })));
        };
        if (v instanceof Dragging) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value2)(Control_Monad_Maybe_Trans.runMaybeT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Functor["void"](Control_Monad_Maybe_Trans.functorMaybeT(Halogen_Query_HalogenM.functorHalogenM))(Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Halogen_Query_HalogenM.monadHalogenM)(Halogen_Query_HalogenM.subscribe(Halogen_Component_Utils_Drag.dragEventSource(dictMonadAff)(v.value1)(function (e$prime) {
                return Data_Maybe.Just.create(new Move(e$prime, Data_Unit.unit));
            })))))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Setter.assignJust(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(_dragging(Data_Profunctor_Strong.strongFn))({
                    key: v.value0,
                    displacement: 0.0,
                    offset: 0.0
                }))(function () {
                    return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Halogen_Query_HalogenM.monadHalogenM)(Halogen_Query_HalogenM.raise(Data_Either.Left.create(DragStart.value)));
                });
            })));
        };
        if (v instanceof Move && v.value0 instanceof Halogen_Component_Utils_Drag.Move) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                return v1.direction;
            }))(function (v1) {
                var mouseMovement = (function () {
                    if (v1 instanceof Horizontal) {
                        return v.value0.value1.offsetX;
                    };
                    if (v1 instanceof Vertical) {
                        return v.value0.value1.offsetY;
                    };
                    throw new Error("Failed pattern match at Halogen.Zuruzuru (line 675, column 21 - line 677, column 28): " + [ v1.constructor.name ]);
                })();
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class_Console.logShow(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Show.showNumber)(mouseMovement))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.modifying(Halogen_Query_HalogenM.monadStateHalogenM)(_dragging(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                        return {
                            displacement: mouseMovement,
                            key: v2.key,
                            offset: v2.offset
                        };
                    })))(function () {
                        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(getPoses(dictMonadAff))(function (v2) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class_Console.logShow(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Data_Show.showArray(Data_Maybe.showMaybe(Data_Show.showNumber)))(v2))(function () {
                                return Control_Monad_Maybe_Trans.runMaybeT(Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Monad_State_Class.gets(Halogen_Query_HalogenM.monadStateHalogenM)(Data_Lens_Fold.preview(_dragKey(Data_Lens_Internal_Forget.wanderForget(Data_Maybe_First.monoidFirst))))))(function (v3) {
                                    return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Data_Lens_Getter.use(Control_Monad_Maybe_Trans.monadStateMaybeT(Halogen_Query_HalogenM.monadStateHalogenM))(_values(Data_Lens_Internal_Forget.strongForget)))(function (v4) {
                                        return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_Monad_Maybe_Trans.MaybeT(Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array.findIndex((function () {
                                            var $336 = Data_Eq.eq(Data_Eq.eqString)(v3);
                                            return function ($337) {
                                                return $336(Data_Tuple.fst($337));
                                            };
                                        })())(v4))))(function (v5) {
                                            return Control_Bind.bind(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(getPos(dictMonadAff)(v3))(function (v6) {
                                                var most = Data_Maybe.fromMaybe(v5)(Data_Array.findLastIndex(Data_Maybe.maybe(false)(function (v7) {
                                                    return v7 <= v6;
                                                }))(v2));
                                                var least = Data_Maybe.fromMaybe(v5)(Data_Array.findIndex(Data_Maybe.maybe(false)(function (v7) {
                                                    return v7 >= v6;
                                                }))(v2));
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_MonadZero.guard(Control_Monad_Maybe_Trans.monadZeroMaybeT(Halogen_Query_HalogenM.monadHalogenM))(least < most))(function () {
                                                    var i$prime = (function () {
                                                        if (most > v5 && least === v5) {
                                                            return most;
                                                        };
                                                        if (least < v5 && most === v5) {
                                                            return least;
                                                        };
                                                        if (Data_Boolean.otherwise) {
                                                            return v5;
                                                        };
                                                        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 694, column 7 - line 697, column 24): " + [  ]);
                                                    })();
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Maybe_Trans.bindMaybeT(Halogen_Query_HalogenM.monadHalogenM))(Control_MonadZero.guard(Control_Monad_Maybe_Trans.monadZeroMaybeT(Halogen_Query_HalogenM.monadHalogenM))(v5 !== i$prime))(function () {
                                                        return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(Halogen_Query_HalogenM.monadHalogenM)($$eval(dictMonadAff)(new DragTo(i$prime, Data_Unit.unit)));
                                                    });
                                                });
                                            });
                                        });
                                    });
                                }));
                            });
                        });
                    });
                });
            }));
        };
        if (v instanceof Move && v.value0 instanceof Halogen_Component_Utils_Drag.Done) {
            return Data_Functor.voidRight(Halogen_Query_HalogenM.functorHalogenM)(v.value1)(Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class_Console.log(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))("End"))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Lens_Setter.assign(Halogen_Query_HalogenM.monadStateHalogenM)(_dragging(Data_Profunctor_Strong.strongFn))(Data_Maybe.Nothing.value))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(Data_Either.Left.create(DragEnd.value)))(function () {
                        return notify;
                    });
                });
            }));
        };
        if (v instanceof QueryChild) {
            return Halogen_Query_HalogenM.HalogenM(Control_Monad_Free.liftF(new Halogen_Query_HalogenM.ChildQuery(v.value0)));
        };
        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 624, column 1 - line 624, column 132): " + [ v.constructor.name ]);
    };
};
var zuruzuru$prime = function (dictMonadAff) {
    return Halogen_Component.mkComponent({
        initialState: initialState,
        render: render,
        "eval": function (v) {
            if (v instanceof Halogen_Query_HalogenQ.Initialize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            };
            if (v instanceof Halogen_Query_HalogenQ.Finalize) {
                return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
            };
            if (v instanceof Halogen_Query_HalogenQ.Receive) {
                return $$eval(dictMonadAff)(new NewInput(v.value0, v.value1));
            };
            if (v instanceof Halogen_Query_HalogenQ.Action) {
                return $$eval(dictMonadAff)(Data_Functor.voidRight(functorQueryI)(v.value1)(v.value0));
            };
            if (v instanceof Halogen_Query_HalogenQ.Query) {
                return $$eval(dictMonadAff)(Data_Coyoneda.lowerCoyoneda(functorQueryI)(v.value0));
            };
            throw new Error("Failed pattern match at Halogen.Zuruzuru (line 531, column 13 - line 536, column 48): " + [ v.constructor.name ]);
        }
    });
};
var zuruzuru = function (dictMonadAff) {
    var topClass = (function () {
        var $338 = Data_Functor.map(Data_Functor.functorArray)(Halogen_HTML_Core.ClassName);
        var $339 = Control_Applicative.pure(Control_Applicative.applicativeArray);
        return function ($340) {
            return Halogen_HTML_Properties.classes($338($339(dirClass($340))));
        };
    })();
    var itemStyle = Halogen_HTML_Properties.attr("style");
    var dragStyleD = function (direction) {
        return function (dragged) {
            return function (offset) {
                if (dragged) {
                    var axis = (function () {
                        if (direction instanceof Horizontal) {
                            return "X";
                        };
                        if (direction instanceof Vertical) {
                            return "Y";
                        };
                        throw new Error("Failed pattern match at Halogen.Zuruzuru (line 507, column 18 - line 509, column 28): " + [ direction.constructor.name ]);
                    })();
                    return "transform: translate" + (axis + ("(" + (Data_Show.show(Data_Show.showNumber)(offset) + "px)")));
                };
                return "";
            };
        };
    };
    var cmapI = function (v) {
        return {
            direction: v.direction,
            "default": v["default"],
            values: v.values,
            renderer: function (datums) {
                return function (q) {
                    return Halogen_HTML_Elements_Keyed.div([ topClass(v.direction) ])((function () {
                        var top = Data_Array.length(datums) - 1 | 0;
                        var item = function (dir) {
                            return function (k) {
                                return function (styl) {
                                    return function (props) {
                                        return function (children) {
                                            return [ new Data_Tuple.Tuple(k, Halogen_HTML_Elements.div(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ topClass(dir), itemStyle(styl) ])(props))(children)) ];
                                        };
                                    };
                                };
                            };
                        };
                        var dragStyle = dragStyleD(v.direction);
                        var adding1 = function (addBtn) {
                            return function (i) {
                                return Control_Bind.join(Control_Bind.bindArray)(Data_Array.fromFoldable(Data_Foldable.foldableMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(addBtn(q.add(i)))(function (b) {
                                    return item(v.direction)("add" + Data_Show.show(Data_Show.showInt)(i))("")([  ])([ b ]);
                                })));
                            };
                        };
                        var adding = mapRenderAdderWhere(adding1)(chooseQuery(v.renderers.adder));
                        return surroundMapWhere(Data_Monoid.monoidArray)(adding)(function (v1) {
                            return item(v.direction)(v1.info.key)(dragStyle(v1.info.dragged)(v1.info.offset))([ Halogen_HTML_Properties.ref(v1.handle.label) ])(Control_Applicative.pure(Control_Applicative.applicativeArray)(v.renderers.item(v1.helpers)(Halogen_HTML_Events.onMouseDown(v1.handle.onMouseDown))({
                                key: v1.info.key,
                                index: v1.info.index,
                                value: v1.info.value,
                                dragged: v1.info.dragged
                            })));
                        });
                    })()(datums));
                };
            }
        };
    };
    return ctransQuery(mapQueryI(function (v) {
        return cmapI(v);
    }))(Data_Newtype.un(Halogen_Component_Profunctor.newtypeProComponent)(Halogen_Component_Profunctor.ProComponent)(Data_Profunctor.dimap(Halogen_Component_Profunctor.profunctorProComponent(functorQueryI))(cmapI)(Control_Category.identity(Control_Category.categoryFn))(zuruzuru$prime(dictMonadAff))));
};
var zuru = function (dictMonadAff) {
    return zuruzuru(dictMonadAff);
};
module.exports = {
    zuruzuru: zuruzuru,
    zuru: zuru,
    "zuruzuru'": zuruzuru$prime,
    Vertical: Vertical,
    Horizontal: Horizontal,
    Renderer: Renderer,
    NewState: NewState,
    Preview: Preview,
    Added: Added,
    DragStart: DragStart,
    DragEnd: DragEnd,
    Reset: Reset,
    NewInput: NewInput,
    Add: Add,
    Update: Update,
    Remove: Remove,
    Swap: Swap,
    Dragging: Dragging,
    Move: Move,
    DragTo: DragTo,
    Output: Output,
    QueryChild: QueryChild,
    queryInside: queryInside,
    queryAllInside: queryAllInside,
    everywhere: everywhere,
    justAfter: justAfter,
    justBefore: justBefore,
    inside: inside,
    "_zuruzuru": _zuruzuru,
    functorQueryI: functorQueryI
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Control.Monad.Free/index.js":42,"../Control.Monad.Maybe.Trans/index.js":46,"../Control.Monad.State.Class/index.js":53,"../Control.Monad.Trans.Class/index.js":56,"../Control.MonadZero/index.js":62,"../Control.Plus/index.js":65,"../Data.Array/index.js":91,"../Data.Boolean/index.js":100,"../Data.Coyoneda/index.js":109,"../Data.Either/index.js":119,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.FoldableWithIndex/index.js":129,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.FunctorWithIndex/index.js":145,"../Data.Lens.Fold/index.js":157,"../Data.Lens.Getter/index.js":158,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Lens.Prism.Maybe/index.js":174,"../Data.Lens.Record/index.js":176,"../Data.Lens.Setter/index.js":177,"../Data.Map.Internal/index.js":184,"../Data.Maybe.First/index.js":185,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Profunctor.Strong/index.js":212,"../Data.Profunctor/index.js":213,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.Symbol/index.js":240,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Data.Unit/index.js":257,"../Effect.Class.Console/index.js":298,"../Effect.Class/index.js":299,"../Halogen.Component.Profunctor/index.js":324,"../Halogen.Component.Utils.Drag/index.js":325,"../Halogen.Component/index.js":326,"../Halogen.Data.Slot/index.js":328,"../Halogen.HTML.Core/index.js":332,"../Halogen.HTML.Elements.Keyed/index.js":333,"../Halogen.HTML.Elements/index.js":334,"../Halogen.HTML.Events/index.js":335,"../Halogen.HTML.Properties/index.js":336,"../Halogen.Query.ChildQuery/index.js":338,"../Halogen.Query.HalogenM/index.js":340,"../Halogen.Query.HalogenQ/index.js":341,"../Web.HTML.HTMLElement/index.js":418}],353:[function(require,module,exports){
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.trunc = Math.trunc || function (n) {
  return n < 0 ? Math.ceil(n) : Math.floor(n);
};

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports.remainder = function (n) {
  return function (m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.tau = 2 * Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],354:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    abs: $foreign.abs,
    acos: $foreign.acos,
    asin: $foreign.asin,
    atan: $foreign.atan,
    atan2: $foreign.atan2,
    ceil: $foreign.ceil,
    cos: $foreign.cos,
    exp: $foreign.exp,
    floor: $foreign.floor,
    log: $foreign.log,
    max: $foreign.max,
    min: $foreign.min,
    pow: $foreign.pow,
    round: $foreign.round,
    sin: $foreign.sin,
    sqrt: $foreign.sqrt,
    tan: $foreign.tan,
    trunc: $foreign.trunc,
    remainder: $foreign.remainder,
    e: $foreign.e,
    ln2: $foreign.ln2,
    ln10: $foreign.ln10,
    log2e: $foreign.log2e,
    log10e: $foreign.log10e,
    pi: $foreign.pi,
    tau: $foreign.tau,
    sqrt1_2: $foreign.sqrt1_2,
    sqrt2: $foreign.sqrt2
};

},{"./foreign.js":353}],355:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Mu = require("../Data.Functor.Mu/index.js");
var Data_Functor_Nu = require("../Data.Functor.Nu/index.js");
var Matryoshka_Pattern_CoEnvT = require("../Matryoshka.Pattern.CoEnvT/index.js");
var Corecursive = function (Functor0, embed) {
    this.Functor0 = Functor0;
    this.embed = embed;
};
var embed = function (dict) {
    return dict.embed;
};
var corecursiveNu = function (dictFunctor) {
    return new Corecursive(function () {
        return dictFunctor;
    }, Data_Function.flip(Data_Functor_Nu.unfold)(Data_Functor.map(dictFunctor)(Data_Functor_Nu.observe(dictFunctor))));
};
var corecursiveMu = function (dictFunctor) {
    return new Corecursive(function () {
        return dictFunctor;
    }, Data_Functor_Mu.roll);
};
var corecursiveFree = function (dictFunctor) {
    return new Corecursive(function () {
        return Matryoshka_Pattern_CoEnvT.functorEnvT(dictFunctor);
    }, function (v) {
        return Data_Either.either(Control_Applicative.pure(Control_Monad_Free.freeApplicative))((function () {
            var $14 = Control_Bind.join(Control_Monad_Free.freeBind);
            return function ($15) {
                return $14(Control_Monad_Free.liftF($15));
            };
        })())(v);
    });
};
var corecursiveCofree = function (dictFunctor) {
    return new Corecursive(function () {
        return Control_Comonad_Env_Trans.functorEnvT(dictFunctor);
    }, function (et) {
        var lower = function (v) {
            return v.value1;
        };
        var ask = function (v) {
            return v.value0;
        };
        return Control_Comonad_Cofree.mkCofree(ask(et))(lower(et));
    });
};
module.exports = {
    embed: embed,
    Corecursive: Corecursive,
    corecursiveMu: corecursiveMu,
    corecursiveNu: corecursiveNu,
    corecursiveFree: corecursiveFree,
    corecursiveCofree: corecursiveCofree
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Monad.Free/index.js":42,"../Data.Either/index.js":119,"../Data.Function/index.js":132,"../Data.Functor.Mu/index.js":138,"../Data.Functor.Nu/index.js":139,"../Data.Functor/index.js":143,"../Matryoshka.Pattern.CoEnvT/index.js":359}],356:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor_Mu = require("../Data.Functor.Mu/index.js");
var Data_Functor_Nu = require("../Data.Functor.Nu/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Matryoshka_Pattern_CoEnvT = require("../Matryoshka.Pattern.CoEnvT/index.js");
var Recursive = function (Functor0, project) {
    this.Functor0 = Functor0;
    this.project = project;
};
var recursiveNu = function (dictFunctor) {
    return new Recursive(function () {
        return dictFunctor;
    }, Data_Functor_Nu.observe(dictFunctor));
};
var recursiveMu = function (dictFunctor) {
    return new Recursive(function () {
        return dictFunctor;
    }, Data_Functor_Mu.unroll);
};
var recursiveFree = function (dictFunctor) {
    return new Recursive(function () {
        return Matryoshka_Pattern_CoEnvT.functorEnvT(dictFunctor);
    }, (function () {
        var $4 = Data_Either.either(Data_Either.Right.create)(Data_Either.Left.create);
        var $5 = Control_Monad_Free.resume(dictFunctor);
        return function ($6) {
            return Matryoshka_Pattern_CoEnvT.CoEnvT($4($5($6)));
        };
    })());
};
var recursiveCofree = function (dictFunctor) {
    return new Recursive(function () {
        return Control_Comonad_Env_Trans.functorEnvT(dictFunctor);
    }, function (cf) {
        return Control_Comonad_Env_Trans.EnvT(new Data_Tuple.Tuple(Control_Comonad_Cofree.head(cf), Control_Comonad_Cofree.tail(cf)));
    });
};
var project = function (dict) {
    return dict.project;
};
module.exports = {
    project: project,
    Recursive: Recursive,
    recursiveMu: recursiveMu,
    recursiveNu: recursiveNu,
    recursiveFree: recursiveFree,
    recursiveCofree: recursiveCofree
};

},{"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Monad.Free/index.js":42,"../Data.Either/index.js":119,"../Data.Functor.Mu/index.js":138,"../Data.Functor.Nu/index.js":139,"../Data.Tuple/index.js":251,"../Matryoshka.Pattern.CoEnvT/index.js":359}],357:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Comonad_Trans_Class = require("../Control.Comonad.Trans.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Distributive = require("../Data.Distributive/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var distZygoT = function (dictFunctor) {
    return function (dictComonad) {
        return function (g) {
            return function (k) {
                return function (fe) {
                    return Control_Comonad_Env_Trans.EnvT(new Data_Tuple.Tuple(g(Data_Functor.map(dictFunctor)(function ($26) {
                        return Data_Tuple.fst(Control_Comonad_Env_Trans.runEnvT($26));
                    })(fe)), k(Data_Functor.map(dictFunctor)(Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonad))(fe))));
                };
            };
        };
    };
};
var distZygo = function (dictFunctor) {
    return function (g) {
        return function (m) {
            return new Data_Tuple.Tuple(g(Data_Functor.map(dictFunctor)(Data_Tuple.fst)(m)), Data_Functor.map(dictFunctor)(Data_Tuple.snd)(m));
        };
    };
};
var distParaT = function (dictCorecursive) {
    return function (dictComonad) {
        return distZygoT(dictCorecursive.Functor0())(dictComonad)(Matryoshka_Class_Corecursive.embed(dictCorecursive));
    };
};
var distPara = function (dictCorecursive) {
    return distZygo(dictCorecursive.Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive));
};
var distGHisto = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (k) {
            return Control_Comonad_Cofree.unfoldCofree(dictFunctor1)(Data_Functor.map(dictFunctor)(Control_Comonad.extract(Control_Comonad_Cofree.comonadCofree(dictFunctor1))))((function () {
                var $27 = Data_Functor.map(dictFunctor)(Control_Comonad_Cofree.tail);
                return function ($28) {
                    return k($27($28));
                };
            })());
        };
    };
};
var distHisto = function (dictFunctor) {
    return distGHisto(dictFunctor)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};
var distGFutu = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (k) {
            return function (f) {
                var v = Control_Monad_Free.resume(dictFunctor1)(f);
                if (v instanceof Data_Either.Left) {
                    return Data_Functor.map(dictFunctor)((function () {
                        var $29 = Control_Bind.join(Control_Monad_Free.freeBind);
                        return function ($30) {
                            return $29(Control_Monad_Free.liftF($30));
                        };
                    })())(k(Data_Functor.map(dictFunctor1)(distGFutu(dictFunctor)(dictFunctor1)(k))(v.value0)));
                };
                if (v instanceof Data_Either.Right) {
                    return Data_Functor.map(dictFunctor)(Control_Applicative.pure(Control_Monad_Free.freeApplicative))(v.value0);
                };
                throw new Error("Failed pattern match at Matryoshka.DistributiveLaw (line 113, column 17 - line 115, column 23): " + [ v.constructor.name ]);
            };
        };
    };
};
var distGApo = function (dictFunctor) {
    return function (f) {
        return Data_Either.either((function () {
            var $31 = Data_Functor.map(dictFunctor)(Data_Either.Left.create);
            return function ($32) {
                return $31(f($32));
            };
        })())(Data_Functor.map(dictFunctor)(Data_Either.Right.create));
    };
};
var distGApoT = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (g) {
            return function (k) {
                var $33 = Data_Functor.map(dictFunctor)(Control_Monad_Except_Trans.ExceptT);
                var $34 = Data_Functor.map(dictFunctor1)(distGApo(dictFunctor)(g));
                return function ($35) {
                    return $33(k($34(Control_Monad_Except_Trans.runExceptT($35))));
                };
            };
        };
    };
};
var distFutu = function (dictFunctor) {
    return distGFutu(dictFunctor)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
};
var distDistributive = function (dictTraversable) {
    return function (dictDistributive) {
        return Data_Distributive.distribute(dictDistributive)(dictTraversable.Functor0());
    };
};
var distCata = function (dictFunctor) {
    var $36 = Data_Newtype.wrap(Data_Identity.newtypeIdentity);
    var $37 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity));
    return function ($38) {
        return $36($37($38));
    };
};
var distApplicative = function (dictTraversable) {
    return function (dictApplicative) {
        return Data_Traversable.sequence(dictTraversable)(dictApplicative);
    };
};
var distApo = function (dictRecursive) {
    return distGApo(dictRecursive.Functor0())(Matryoshka_Class_Recursive.project(dictRecursive));
};
var distAna = function (dictFunctor) {
    var $39 = Data_Functor.map(dictFunctor)(Data_Newtype.wrap(Data_Identity.newtypeIdentity));
    var $40 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
    return function ($41) {
        return $39($40($41));
    };
};
module.exports = {
    distApplicative: distApplicative,
    distDistributive: distDistributive,
    distCata: distCata,
    distPara: distPara,
    distParaT: distParaT,
    distZygo: distZygo,
    distZygoT: distZygoT,
    distHisto: distHisto,
    distGHisto: distGHisto,
    distAna: distAna,
    distApo: distApo,
    distGApo: distGApo,
    distGApoT: distGApoT,
    distFutu: distFutu,
    distGFutu: distGFutu
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad.Trans.Class/index.js":29,"../Control.Comonad/index.js":30,"../Control.Monad.Except.Trans/index.js":38,"../Control.Monad.Free/index.js":42,"../Data.Distributive/index.js":117,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Newtype/index.js":197,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356}],358:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Cofree = require("../Control.Comonad.Cofree/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_DistributiveLaw = require("../Matryoshka.DistributiveLaw/index.js");
var Matryoshka_Util = require("../Matryoshka.Util/index.js");
var transParaT = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return f(t)(Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go))(t));
            };
            return go;
        };
    };
};
var transPara = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)((function () {
                    var $82 = Data_Functor.map(dictRecursive.Functor0())(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(Control_Category.identity(Control_Category.categoryFn))(go));
                    return function ($83) {
                        return f($82($83));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transCataTM = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (dictTraversable) {
                return function (f) {
                    var go = function (t) {
                        return Control_Bind.bindFlipped(dictMonad.Bind1())(f)(Matryoshka_Util.traverseR(dictRecursive)(dictCorecursive)(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go))(t));
                    };
                    return go;
                };
            };
        };
    };
};
var transCataT = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return f(Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go))(t));
            };
            return go;
        };
    };
};
var transCataM = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (dictTraversable) {
                return function (f) {
                    var go = function (t) {
                        return Matryoshka_Util.traverseR(dictRecursive)(dictCorecursive)(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.composeKleisliFlipped(dictMonad.Bind1())(f)(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go)))(t);
                    };
                    return go;
                };
            };
        };
    };
};
var transCata = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)((function () {
                    var $84 = Data_Functor.map(dictRecursive.Functor0())(go);
                    return function ($85) {
                        return f($84($85));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transPrepro = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictCorecursive1) {
            return function (f) {
                return function (g) {
                    var go = function (t) {
                        return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive1)((function () {
                            var $86 = Data_Functor.map(dictCorecursive.Functor0())((function () {
                                var $88 = transCata(dictRecursive)(dictCorecursive)(f);
                                return function ($89) {
                                    return go($88($89));
                                };
                            })());
                            return function ($87) {
                                return g($86($87));
                            };
                        })())(t);
                    };
                    return go;
                };
            };
        };
    };
};
var topDownCataM = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (dictTraversable) {
                return function (f) {
                    var go = function (a) {
                        return function (t) {
                            return Control_Bind.bind(dictMonad.Bind1())(f(a)(t))(function (v) {
                                return Matryoshka_Util.traverseR(dictRecursive)(dictCorecursive)(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go(v.value0)))(v.value1);
                            });
                        };
                    };
                    return go;
                };
            };
        };
    };
};
var topDownCata = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (a) {
                return function (t) {
                    var v = f(a)(t);
                    return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go(v.value0)))(v.value1);
                };
            };
            return go;
        };
    };
};
var paraM = function (dictRecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                var go = function (t) {
                    return Control_Bind.bindFlipped(dictMonad.Bind1())(f)(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())((function () {
                        var $90 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Tuple.Tuple.create(t));
                        return function ($91) {
                            return $90(go($91));
                        };
                    })())(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                };
                return go;
            };
        };
    };
};
var para = function (dictRecursive) {
    return function (f) {
        var go = function (t) {
            return f(Data_Functor.map(dictRecursive.Functor0())(g)(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
        };
        var g = function (t) {
            return new Data_Tuple.Tuple(t, go(t));
        };
        return go;
    };
};
var mutu = function (dictRecursive) {
    return function (f) {
        return function (g) {
            var go = function (x) {
                return new Data_Tuple.Tuple(mutu(dictRecursive)(g)(f)(x), mutu(dictRecursive)(f)(g)(x));
            };
            var $92 = Data_Functor.map(dictRecursive.Functor0())(go);
            var $93 = Matryoshka_Class_Recursive.project(dictRecursive);
            return function ($94) {
                return g($92($93($94)));
            };
        };
    };
};
var isLeaf = function (dictRecursive) {
    return function (dictFoldable) {
        return function (t) {
            return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(Data_Foldable.foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Data_Function["const"](true))(Matryoshka_Class_Recursive.project(dictRecursive)(t));
        };
    };
};
var gcataM = function (dictRecursive) {
    return function (dictMonad) {
        return function (dictComonad) {
            return function (dictTraversable) {
                return function (dictTraversable1) {
                    return function (k) {
                        return function (g) {
                            var loop = function (t) {
                                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(k)(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(Control_Bind.composeKleisliFlipped(dictMonad.Bind1())((function () {
                                    var $95 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Extend.duplicate(dictComonad.Extend0()));
                                    var $96 = Data_Traversable.traverse(dictTraversable1)(dictMonad.Applicative0())(g);
                                    return function ($97) {
                                        return $95($96($97));
                                    };
                                })())(loop))(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                            };
                            return Control_Bind.composeKleisliFlipped(dictMonad.Bind1())((function () {
                                var $98 = Control_Comonad.extract(dictComonad);
                                return function ($99) {
                                    return g($98($99));
                                };
                            })())(loop);
                        };
                    };
                };
            };
        };
    };
};
var gcata = function (dictRecursive) {
    return function (dictComonad) {
        return function (k) {
            return function (g) {
                var go = function (t) {
                    return k(Data_Functor.map(dictRecursive.Functor0())((function () {
                        var $100 = Control_Extend.duplicate(dictComonad.Extend0());
                        var $101 = Data_Functor.map((dictComonad.Extend0()).Functor0())(g);
                        return function ($102) {
                            return $100($101(go($102)));
                        };
                    })())(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                };
                var $103 = Control_Comonad.extract(dictComonad);
                return function ($104) {
                    return g($103(go($104)));
                };
            };
        };
    };
};
var ghisto = function (dictRecursive) {
    return function (dictFunctor) {
        return function (g) {
            return gcata(dictRecursive)(Control_Comonad_Cofree.comonadCofree(dictFunctor))(Matryoshka_DistributiveLaw.distGHisto(dictRecursive.Functor0())(dictFunctor)(g));
        };
    };
};
var gzygo = function (dictRecursive) {
    return function (dictComonad) {
        return function (f) {
            return function (w) {
                return gcata(dictRecursive)(Control_Comonad_Env_Trans.comonadEnvT(dictComonad))(Matryoshka_DistributiveLaw.distZygoT(dictRecursive.Functor0())(dictComonad)(f)(w));
            };
        };
    };
};
var gpara = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictComonad) {
            return gzygo(dictRecursive)(dictComonad)(Matryoshka_Class_Corecursive.embed(dictCorecursive));
        };
    };
};
var histo = function (dictRecursive) {
    return gcata(dictRecursive)(Control_Comonad_Cofree.comonadCofree(dictRecursive.Functor0()))(Matryoshka_DistributiveLaw.distHisto(dictRecursive.Functor0()));
};
var zygo = function (dictRecursive) {
    var $105 = gcata(dictRecursive)(Data_Tuple.comonadTuple);
    var $106 = Matryoshka_DistributiveLaw.distZygo(dictRecursive.Functor0());
    return function ($107) {
        return $105($106($107));
    };
};
var elgotPara = function (dictRecursive) {
    return function (f) {
        var go = function (t) {
            return f(new Data_Tuple.Tuple(t, Data_Functor.map(dictRecursive.Functor0())(go)(Matryoshka_Class_Recursive.project(dictRecursive)(t))));
        };
        return go;
    };
};
var elgotCata = function (dictRecursive) {
    return function (dictComonad) {
        return function (k) {
            return function (g) {
                var go = function (t) {
                    return k(Data_Functor.map(dictRecursive.Functor0())((function () {
                        var $108 = Data_Functor.map((dictComonad.Extend0()).Functor0())(g);
                        var $109 = Control_Extend.duplicate(dictComonad.Extend0());
                        return function ($110) {
                            return $108($109(go($110)));
                        };
                    })())(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                };
                return function ($111) {
                    return g(go($111));
                };
            };
        };
    };
};
var elgotHisto = function (dictRecursive) {
    return elgotCata(dictRecursive)(Control_Comonad_Cofree.comonadCofree(dictRecursive.Functor0()))(Matryoshka_DistributiveLaw.distHisto(dictRecursive.Functor0()));
};
var elgotZygo = function (dictRecursive) {
    var $112 = elgotCata(dictRecursive)(Data_Tuple.comonadTuple);
    var $113 = Matryoshka_DistributiveLaw.distZygo(dictRecursive.Functor0());
    return function ($114) {
        return $112($113($114));
    };
};
var gElgotZygo = function (dictRecursive) {
    return function (dictComonad) {
        return function (f) {
            return function (w) {
                return elgotCata(dictRecursive)(Control_Comonad_Env_Trans.comonadEnvT(dictComonad))(Matryoshka_DistributiveLaw.distZygoT(dictRecursive.Functor0())(dictComonad)(f)(w));
            };
        };
    };
};
var children = function (dictRecursive) {
    return function (dictFoldable) {
        var $115 = Data_Foldable.foldMap(dictFoldable)(Data_List_Types.monoidList)(Control_Applicative.pure(Data_List_Types.applicativeList));
        var $116 = Matryoshka_Class_Recursive.project(dictRecursive);
        return function ($117) {
            return $115($116($117));
        };
    };
};
var universe = function (dictRecursive) {
    return function (dictFoldable) {
        return function (t) {
            return Control_Bind.bindFlipped(Data_List_Types.bindList)(universe(dictRecursive)(dictFoldable))(children(dictRecursive)(dictFoldable)(t));
        };
    };
};
var cataM = function (dictRecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                var go = function (t) {
                    return Control_Bind.bindFlipped(dictMonad.Bind1())(f)(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go)(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                };
                return go;
            };
        };
    };
};
var cata = function (dictRecursive) {
    return function (f) {
        var go = function (t) {
            return f(Data_Functor.map(dictRecursive.Functor0())(go)(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
        };
        return go;
    };
};
var gprepro = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictComonad) {
            return function (f) {
                return function (g) {
                    return function (h) {
                        var go = function (t) {
                            return Data_Functor.map((dictComonad.Extend0()).Functor0())(h)(f(Data_Functor.map(dictCorecursive.Functor0())((function () {
                                var $118 = Control_Extend.duplicate(dictComonad.Extend0());
                                var $119 = cata(dictRecursive)((function () {
                                    var $121 = Matryoshka_Class_Corecursive.embed(dictCorecursive);
                                    return function ($122) {
                                        return $121(g($122));
                                    };
                                })());
                                return function ($120) {
                                    return $118(go($119($120)));
                                };
                            })())(Matryoshka_Class_Recursive.project(dictRecursive)(t))));
                        };
                        var $123 = Control_Comonad.extract(dictComonad);
                        return function ($124) {
                            return $123(go($124));
                        };
                    };
                };
            };
        };
    };
};
var lambek = function (dictRecursive) {
    return function (dictCorecursive) {
        return cata(dictRecursive)(Data_Functor.map(dictCorecursive.Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive)));
    };
};
var prepro = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            return function (g) {
                var go = function (t) {
                    return g(Data_Functor.map(dictCorecursive.Functor0())((function () {
                        var $125 = cata(dictRecursive)((function () {
                            var $127 = Matryoshka_Class_Corecursive.embed(dictCorecursive);
                            return function ($128) {
                                return $127(f($128));
                            };
                        })());
                        return function ($126) {
                            return go($125($126));
                        };
                    })())(Matryoshka_Class_Recursive.project(dictRecursive)(t)));
                };
                return go;
            };
        };
    };
};
var annotateTopDownM = function (dictRecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                return function (z) {
                    var go = function (t) {
                        var ft = Matryoshka_Class_Recursive.project(dictRecursive)(t);
                        return Control_Bind.bindFlipped(dictMonad.Bind1())((function () {
                            var $129 = Data_Function.flip(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go)(ft));
                            return function ($130) {
                                return $129(Control_Comonad_Cofree.mkCofree($130));
                            };
                        })())(f(z)(ft));
                    };
                    return go;
                };
            };
        };
    };
};
var annotateTopDown = function (dictRecursive) {
    return function (f) {
        return function (z) {
            var go = function (t) {
                var ft = Matryoshka_Class_Recursive.project(dictRecursive)(t);
                return Control_Comonad_Cofree.mkCofree(f(z)(ft))(Data_Functor.map(dictRecursive.Functor0())(go)(ft));
            };
            return go;
        };
    };
};
module.exports = {
    cata: cata,
    cataM: cataM,
    gcata: gcata,
    gcataM: gcataM,
    elgotCata: elgotCata,
    transCata: transCata,
    transCataT: transCataT,
    transCataM: transCataM,
    transCataTM: transCataTM,
    topDownCata: topDownCata,
    topDownCataM: topDownCataM,
    prepro: prepro,
    gprepro: gprepro,
    transPrepro: transPrepro,
    para: para,
    paraM: paraM,
    gpara: gpara,
    elgotPara: elgotPara,
    transPara: transPara,
    transParaT: transParaT,
    zygo: zygo,
    gzygo: gzygo,
    elgotZygo: elgotZygo,
    gElgotZygo: gElgotZygo,
    mutu: mutu,
    histo: histo,
    ghisto: ghisto,
    elgotHisto: elgotHisto,
    annotateTopDown: annotateTopDown,
    annotateTopDownM: annotateTopDownM,
    isLeaf: isLeaf,
    children: children,
    universe: universe,
    lambek: lambek
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Comonad.Cofree/index.js":25,"../Control.Comonad.Env.Trans/index.js":26,"../Control.Comonad/index.js":30,"../Control.Extend/index.js":33,"../Data.Foldable/index.js":128,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.List.Types/index.js":182,"../Data.Monoid.Disj/index.js":191,"../Data.Newtype/index.js":197,"../Data.Profunctor.Strong/index.js":212,"../Data.Traversable/index.js":248,"../Data.Tuple/index.js":251,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.DistributiveLaw/index.js":357,"../Matryoshka.Util/index.js":361}],359:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var CoEnvT = function (x) {
    return x;
};
var withEnvT = function (f) {
    return function (v) {
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(f)(v);
    };
};
var runEnvT = function (v) {
    return v;
};
var newtypeEnvT = new Data_Newtype.Newtype(function (n) {
    return n;
}, CoEnvT);
var mapEnvT = function (f) {
    return function (v) {
        return Data_Functor.map(Data_Either.functorEither)(f)(v);
    };
};
var functorEnvT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return function (v) {
            return Data_Functor.map(Data_Either.functorEither)(Data_Functor.map(dictFunctor)(f))(v);
        };
    });
};
module.exports = {
    CoEnvT: CoEnvT,
    runEnvT: runEnvT,
    withEnvT: withEnvT,
    mapEnvT: mapEnvT,
    newtypeEnvT: newtypeEnvT,
    functorEnvT: functorEnvT
};

},{"../Data.Bifunctor/index.js":98,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197}],360:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var Matryoshka_DistributiveLaw = require("../Matryoshka.DistributiveLaw/index.js");
var Matryoshka_Util = require("../Matryoshka.Util/index.js");
var transApoT = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go)))(f(t));
            };
            return go;
        };
    };
};
var transApo = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)((function () {
                    var $51 = Data_Functor.map(dictCorecursive.Functor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(go));
                    return function ($52) {
                        return $51(f($52));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transAnaTM = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (dictTraversable) {
                return function (f) {
                    var go = function (t) {
                        return Control_Bind.bindFlipped(dictMonad.Bind1())(Matryoshka_Util.traverseR(dictRecursive)(dictCorecursive)(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go)))(f(t));
                    };
                    return go;
                };
            };
        };
    };
};
var transAnaT = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go))(f(t));
            };
            return go;
        };
    };
};
var transAnaM = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (dictTraversable) {
                return function (f) {
                    var go = function (t) {
                        return Matryoshka_Util.traverseR(dictRecursive)(dictCorecursive)(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.composeKleisliFlipped(dictMonad.Bind1())(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go))(f))(t);
                    };
                    return go;
                };
            };
        };
    };
};
var transAna = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var go = function (t) {
                return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)((function () {
                    var $53 = Data_Functor.map(dictCorecursive.Functor0())(go);
                    return function ($54) {
                        return $53(f($54));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transPostpro = function (dictRecursive) {
    return function (dictRecursive1) {
        return function (dictCorecursive) {
            return function (f) {
                return function (g) {
                    var go = function (t) {
                        return Matryoshka_Util.mapR(dictRecursive)(dictCorecursive)((function () {
                            var $55 = Data_Functor.map(dictCorecursive.Functor0())((function () {
                                var $57 = transAna(dictRecursive1)(dictCorecursive)(f);
                                return function ($58) {
                                    return $57(go($58));
                                };
                            })());
                            return function ($56) {
                                return $55(g($56));
                            };
                        })())(t);
                    };
                    return go;
                };
            };
        };
    };
};
var ganaM = function (dictCorecursive) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictTraversable) {
                return function (dictTraversable1) {
                    return function (k) {
                        return function (f) {
                            var go = function (a) {
                                return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive))(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(Control_Bind.composeKleisliFlipped(dictMonad.Bind1())(go)((function () {
                                    var $59 = Data_Traversable.traverse(dictTraversable1)(dictMonad.Applicative0())(f);
                                    var $60 = Control_Bind.join(dictMonad1.Bind1());
                                    return function ($61) {
                                        return $59($60($61));
                                    };
                                })()))(k(a)));
                            };
                            return Control_Bind.composeKleisliFlipped(dictMonad.Bind1())(go)((function () {
                                var $62 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Applicative.pure(dictMonad1.Applicative0()));
                                return function ($63) {
                                    return $62(f($63));
                                };
                            })());
                        };
                    };
                };
            };
        };
    };
};
var gana = function (dictCorecursive) {
    return function (dictMonad) {
        return function (k) {
            return function (f) {
                var go = function (a) {
                    return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())((function () {
                        var $64 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f);
                        var $65 = Control_Bind.join(dictMonad.Bind1());
                        return function ($66) {
                            return go($64($65($66)));
                        };
                    })())(k(a)));
                };
                var $67 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($68) {
                    return go($67(f($68)));
                };
            };
        };
    };
};
var futuM = function (dictCorecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                var loop = function (x) {
                    return Data_Either.either((function () {
                        var $69 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive));
                        var $70 = Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(loop);
                        return function ($71) {
                            return $69($70($71));
                        };
                    })())(go)(Control_Monad_Free.resume(dictCorecursive.Functor0())(x));
                };
                var go = function (a) {
                    return Control_Bind.bindFlipped(dictMonad.Bind1())((function () {
                        var $72 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive));
                        var $73 = Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(loop);
                        return function ($74) {
                            return $72($73($74));
                        };
                    })())(f(a));
                };
                return go;
            };
        };
    };
};
var futu = function (dictCorecursive) {
    return gana(dictCorecursive)(Control_Monad_Free.freeMonad)(Matryoshka_DistributiveLaw.distFutu(dictCorecursive.Functor0()));
};
var elgotApo = function (dictCorecursive) {
    return function (f) {
        var go = function (a) {
            return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))((function () {
                var $75 = Matryoshka_Class_Corecursive.embed(dictCorecursive);
                var $76 = Data_Functor.map(dictCorecursive.Functor0())(go);
                return function ($77) {
                    return $75($76($77));
                };
            })())(f(a));
        };
        return go;
    };
};
var elgotAna = function (dictCorecursive) {
    return function (dictMonad) {
        return function (k) {
            return function (f) {
                var go = function (a) {
                    return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(function ($78) {
                        return go((function (v) {
                            return Control_Bind.bindFlipped(dictMonad.Bind1())(f)(v);
                        })($78));
                    })(k(a)));
                };
                return function ($79) {
                    return go(f($79));
                };
            };
        };
    };
};
var elgotFutu = function (dictCorecursive) {
    return elgotAna(dictCorecursive)(Control_Monad_Free.freeMonad)(Matryoshka_DistributiveLaw.distFutu(dictCorecursive.Functor0()));
};
var apoM = function (dictCorecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                var go = function (a) {
                    return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive))(Control_Bind.bindFlipped(dictMonad.Bind1())(Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(Data_Either.either(Control_Applicative.pure(dictMonad.Applicative0()))(go)))(f(a)));
                };
                return go;
            };
        };
    };
};
var apo = function (dictCorecursive) {
    return function (f) {
        var go = function (a) {
            return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(go))(f(a)));
        };
        return go;
    };
};
var anaM = function (dictCorecursive) {
    return function (dictMonad) {
        return function (dictTraversable) {
            return function (f) {
                var go = function (a) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a))((function () {
                        var $80 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive));
                        var $81 = Data_Traversable.traverse(dictTraversable)(dictMonad.Applicative0())(go);
                        return function ($82) {
                            return $80($81($82));
                        };
                    })());
                };
                return go;
            };
        };
    };
};
var ana = function (dictCorecursive) {
    return function (f) {
        var go = function (a) {
            return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(go)(f(a)));
        };
        return go;
    };
};
var colambek = function (dictRecursive) {
    return function (dictCorecursive) {
        return ana(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(Matryoshka_Class_Recursive.project(dictRecursive)));
    };
};
var gapo = function (dictCorecursive) {
    return function (f) {
        return function (g) {
            var anaf = ana(dictCorecursive)(f);
            var go = function (a) {
                return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())(Data_Either.either(anaf)(go))(g(a)));
            };
            return go;
        };
    };
};
var gpostpro = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictMonad) {
            return function (f) {
                return function (g) {
                    return function (h) {
                        var go = function (na) {
                            return Matryoshka_Class_Corecursive.embed(dictCorecursive)(Data_Functor.map(dictCorecursive.Functor0())((function () {
                                var $83 = ana(dictCorecursive)((function () {
                                    var $86 = Matryoshka_Class_Recursive.project(dictRecursive);
                                    return function ($87) {
                                        return g($86($87));
                                    };
                                })());
                                var $84 = Control_Bind.join(dictMonad.Bind1());
                                return function ($85) {
                                    return $83(go($84($85)));
                                };
                            })())(f(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(na))));
                        };
                        var $88 = Control_Applicative.pure(dictMonad.Applicative0());
                        return function ($89) {
                            return go($88($89));
                        };
                    };
                };
            };
        };
    };
};
var postpro = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            return function (g) {
                return gpostpro(dictRecursive)(dictCorecursive)(Data_Identity.monadIdentity)(Matryoshka_DistributiveLaw.distAna(dictCorecursive.Functor0()))(f)((function () {
                    var $90 = Data_Functor.map(dictCorecursive.Functor0())(Data_Identity.Identity);
                    return function ($91) {
                        return $90(g($91));
                    };
                })());
            };
        };
    };
};
module.exports = {
    ana: ana,
    anaM: anaM,
    gana: gana,
    ganaM: ganaM,
    elgotAna: elgotAna,
    transAna: transAna,
    transAnaT: transAnaT,
    transAnaM: transAnaM,
    transAnaTM: transAnaTM,
    postpro: postpro,
    gpostpro: gpostpro,
    transPostpro: transPostpro,
    apo: apo,
    gapo: gapo,
    apoM: apoM,
    elgotApo: elgotApo,
    transApo: transApo,
    transApoT: transApoT,
    futu: futu,
    elgotFutu: elgotFutu,
    futuM: futuM,
    colambek: colambek
};

},{"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Control.Category/index.js":24,"../Control.Monad.Free/index.js":42,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Data.Identity/index.js":150,"../Data.Traversable/index.js":248,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356,"../Matryoshka.DistributiveLaw/index.js":357,"../Matryoshka.Util/index.js":361}],361:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Matryoshka_Class_Corecursive = require("../Matryoshka.Class.Corecursive/index.js");
var Matryoshka_Class_Recursive = require("../Matryoshka.Class.Recursive/index.js");
var traverseR = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (dictFunctor) {
            return function (f) {
                var $5 = Data_Functor.map(dictFunctor)(Matryoshka_Class_Corecursive.embed(dictCorecursive));
                var $6 = Matryoshka_Class_Recursive.project(dictRecursive);
                return function ($7) {
                    return $5(f($6($7)));
                };
            };
        };
    };
};
var mapR = function (dictRecursive) {
    return function (dictCorecursive) {
        return function (f) {
            var $8 = Matryoshka_Class_Corecursive.embed(dictCorecursive);
            var $9 = Matryoshka_Class_Recursive.project(dictRecursive);
            return function ($10) {
                return $8(f($9($10)));
            };
        };
    };
};
module.exports = {
    mapR: mapR,
    traverseR: traverseR
};

},{"../Data.Functor/index.js":143,"../Matryoshka.Class.Corecursive/index.js":355,"../Matryoshka.Class.Recursive/index.js":356}],362:[function(require,module,exports){
exports._fetch = function(fetchImpl) {
  return function(url) {
    return function(options) {
      return function() {
        return fetchImpl(url, options).catch(function(e) {
          // we have to wrap node-fetch's non-Error error :(
          throw new Error(e);
        });
      };
    };
  };
};

exports.jsonImpl = function(response) {
  return function() {
    return response.json().catch(function(e) {
      throw new Error(e);
    });
  };
};

exports.textImpl = function(response) {
  return function() {
    return response.text();
  };
};

exports.arrayBufferImpl = function(response) {
  return function() {
    return response.arrayBuffer();
  };
};

exports.fromRecordImpl = function(r) {
  return r;
};

},{}],363:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Promise = require("../Control.Promise/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var URL = function (x) {
    return x;
};
var text = function (res) {
    return Control_Promise.toAffE($foreign.textImpl(res));
};
var statusCode = function (response) {
    return response.status;
};
var showURL = Data_Show.showString;
var sameOriginCredentials = "same-origin";
var putMethod = "PUT";
var postMethod = "POST";
var omitCredentials = "omit";
var newtypeURL = new Data_Newtype.Newtype(function (n) {
    return n;
}, URL);
var json = function (res) {
    return Control_Promise.toAffE($foreign.jsonImpl(res));
};
var includeCredentials = "include";
var headMethod = "HEAD";
var getMethod = "GET";
var fromRecord = function (dictHomogeneous) {
    return $foreign.fromRecordImpl;
};
var makeHeaders = function (dictHomogeneous) {
    return fromRecord(dictHomogeneous);
};
var fetch = function (impl) {
    return function (dictUnion) {
        return function (url) {
            return function (opts) {
                return Control_Promise.toAffE($foreign["_fetch"](impl)(url)(opts));
            };
        };
    };
};
var deleteMethod = "DELETE";
var defaultFetchOptions = {
    method: getMethod
};
var arrayBuffer = function (res) {
    return Control_Promise.toAffE($foreign.arrayBufferImpl(res));
};
module.exports = {
    URL: URL,
    defaultFetchOptions: defaultFetchOptions,
    getMethod: getMethod,
    postMethod: postMethod,
    putMethod: putMethod,
    deleteMethod: deleteMethod,
    headMethod: headMethod,
    omitCredentials: omitCredentials,
    sameOriginCredentials: sameOriginCredentials,
    includeCredentials: includeCredentials,
    fetch: fetch,
    json: json,
    text: text,
    arrayBuffer: arrayBuffer,
    makeHeaders: makeHeaders,
    statusCode: statusCode,
    newtypeURL: newtypeURL,
    showURL: showURL
};

},{"../Control.Promise/index.js":67,"../Data.Newtype/index.js":197,"../Data.Show/index.js":226,"./foreign.js":362}],364:[function(require,module,exports){
(function (Buffer){
/* global exports */
/* global Buffer */
/* global require */
"use strict";

exports.showImpl = require('util').inspect;

exports.create = function (size) {
  return function() {
    return Buffer.alloc(size);
  };
};

exports.fromArray = function (octets) {
  return function() {
    return Buffer.from(octets);
  };
};

exports.fromStringImpl = function (str) {
  return function (encoding) {
    return function() {
      return Buffer.from(str, encoding);
    };
  };
};

exports.fromArrayBuffer = function(ab) {
  return function() {
    return Buffer.from(ab);
  };
};

exports.toArrayBuffer = function(buff) {
  return function() {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };
};

exports.readImpl = function (ty) {
  return function (offset) {
    return function (buf) {
      return function() {
        return buf['read' + ty](offset);
      };
    };
  };
};

exports.readStringImpl = function (enc) {
  return function (start) {
    return function (end) {
      return function (buff) {
        return function() {
          return buff.toString(enc, start, end);
        };
      };
    };
  };
};

exports.toStringImpl = function (enc) {
  return function (buff) {
    return function() {
      return buff.toString(enc);
    };
  };
};

exports.writeImpl = function (ty) {
  return function (value) {
    return function (offset) {
      return function (buf) {
        return function() {
          buf['write' + ty](value, offset);
          return {};
        }
      };
    };
  };
};

exports.writeStringImpl = function (encoding) {
  return function (offset) {
    return function (length) {
      return function (value) {
        return function (buff) {
          return function() {
            return buff.write(value, offset, length, encoding);
          }
        };
      };
    };
  };
};

exports.toArray = function (buff) {
  return function() {
    var json = buff.toJSON()
    return json.data || json;
  };
};

exports.getAtOffsetImpl = function (just) {
  return function (nothing) {
    return function (offset) {
      return function (buff) {
        return function() {
          var octet = buff[offset];
          return octet == null ? nothing
                               : just(octet);
        };
      };
    };
  };
};

exports.setAtOffset = function (value) {
  return function (offset) {
    return function (buff) {
      return function() {
        buff[offset] = value;
        return {};
      };
    };
  };
};

exports.size = function (buff) {
  return function() {
    return buff.length;
  };
};



exports.concat = function (buffs) {
  return function() {
    return Buffer.concat(buffs);
  };
};

exports["concat'"] = function (buffs) {
  return function (totalLength) {
    return function() {
      return Buffer.concat(buffs, totalLength);
    };
  };
};

exports.copy = function (srcStart) {
  return function (srcEnd) {
    return function (src) {
      return function (targStart) {
        return function (targ) {
          return function() {
            return src.copy(targ, targStart, srcStart, srcEnd);
          };
        };
      };
    };
  };
};

exports.fill = function (octet) {
  return function (start) {
    return function (end) {
      return function (buf) {
        return function() {
          buf.fill(octet, start, end);
          return {};
        };
      };
    };
  };
};

}).call(this,require("buffer").Buffer)
},{"buffer":441,"util":447}],365:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var UInt8 = (function () {
    function UInt8() {

    };
    UInt8.value = new UInt8();
    return UInt8;
})();
var UInt16LE = (function () {
    function UInt16LE() {

    };
    UInt16LE.value = new UInt16LE();
    return UInt16LE;
})();
var UInt16BE = (function () {
    function UInt16BE() {

    };
    UInt16BE.value = new UInt16BE();
    return UInt16BE;
})();
var UInt32LE = (function () {
    function UInt32LE() {

    };
    UInt32LE.value = new UInt32LE();
    return UInt32LE;
})();
var UInt32BE = (function () {
    function UInt32BE() {

    };
    UInt32BE.value = new UInt32BE();
    return UInt32BE;
})();
var Int8 = (function () {
    function Int8() {

    };
    Int8.value = new Int8();
    return Int8;
})();
var Int16LE = (function () {
    function Int16LE() {

    };
    Int16LE.value = new Int16LE();
    return Int16LE;
})();
var Int16BE = (function () {
    function Int16BE() {

    };
    Int16BE.value = new Int16BE();
    return Int16BE;
})();
var Int32LE = (function () {
    function Int32LE() {

    };
    Int32LE.value = new Int32LE();
    return Int32LE;
})();
var Int32BE = (function () {
    function Int32BE() {

    };
    Int32BE.value = new Int32BE();
    return Int32BE;
})();
var FloatLE = (function () {
    function FloatLE() {

    };
    FloatLE.value = new FloatLE();
    return FloatLE;
})();
var FloatBE = (function () {
    function FloatBE() {

    };
    FloatBE.value = new FloatBE();
    return FloatBE;
})();
var DoubleLE = (function () {
    function DoubleLE() {

    };
    DoubleLE.value = new DoubleLE();
    return DoubleLE;
})();
var DoubleBE = (function () {
    function DoubleBE() {

    };
    DoubleBE.value = new DoubleBE();
    return DoubleBE;
})();
var writeString = function ($2) {
    return $foreign.writeStringImpl(Node_Encoding.encodingToNode($2));
};
var toString = function ($3) {
    return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
};
var showBufferValueType = new Data_Show.Show(function (v) {
    if (v instanceof UInt8) {
        return "UInt8";
    };
    if (v instanceof UInt16LE) {
        return "UInt16LE";
    };
    if (v instanceof UInt16BE) {
        return "UInt16BE";
    };
    if (v instanceof UInt32LE) {
        return "UInt32LE";
    };
    if (v instanceof UInt32BE) {
        return "UInt32BE";
    };
    if (v instanceof Int8) {
        return "Int8";
    };
    if (v instanceof Int16LE) {
        return "Int16LE";
    };
    if (v instanceof Int16BE) {
        return "Int16BE";
    };
    if (v instanceof Int32LE) {
        return "Int32LE";
    };
    if (v instanceof Int32BE) {
        return "Int32BE";
    };
    if (v instanceof FloatLE) {
        return "FloatLE";
    };
    if (v instanceof FloatBE) {
        return "FloatBE";
    };
    if (v instanceof DoubleLE) {
        return "DoubleLE";
    };
    if (v instanceof DoubleBE) {
        return "DoubleBE";
    };
    throw new Error("Failed pattern match at Node.Buffer (line 65, column 1 - line 79, column 29): " + [ v.constructor.name ]);
});
var write = (function () {
    var $4 = Data_Show.show(showBufferValueType);
    return function ($5) {
        return $foreign.writeImpl($4($5));
    };
})();
var showBuffer = new Data_Show.Show($foreign.showImpl);
var readString = function ($6) {
    return $foreign.readStringImpl(Node_Encoding.encodingToNode($6));
};
var read = (function () {
    var $7 = Data_Show.show(showBufferValueType);
    return function ($8) {
        return $foreign.readImpl($7($8));
    };
})();
var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = function (str) {
    var $9 = $foreign.fromStringImpl(str);
    return function ($10) {
        return $9(Node_Encoding.encodingToNode($10));
    };
};
module.exports = {
    UInt8: UInt8,
    UInt16LE: UInt16LE,
    UInt16BE: UInt16BE,
    UInt32LE: UInt32LE,
    UInt32BE: UInt32BE,
    Int8: Int8,
    Int16LE: Int16LE,
    Int16BE: Int16BE,
    Int32LE: Int32LE,
    Int32BE: Int32BE,
    FloatLE: FloatLE,
    FloatBE: FloatBE,
    DoubleLE: DoubleLE,
    DoubleBE: DoubleBE,
    fromString: fromString,
    read: read,
    readString: readString,
    toString: toString,
    write: write,
    writeString: writeString,
    getAtOffset: getAtOffset,
    showBuffer: showBuffer,
    showBufferValueType: showBufferValueType,
    create: $foreign.create,
    fromArray: $foreign.fromArray,
    fromArrayBuffer: $foreign.fromArrayBuffer,
    toArrayBuffer: $foreign.toArrayBuffer,
    toArray: $foreign.toArray,
    setAtOffset: $foreign.setAtOffset,
    size: $foreign.size,
    concat: $foreign.concat,
    "concat'": $foreign["concat'"],
    copy: $foreign.copy,
    fill: $foreign.fill
};

},{"../Data.Maybe/index.js":187,"../Data.Show/index.js":226,"../Node.Encoding/index.js":367,"./foreign.js":364}],366:[function(require,module,exports){
(function (Buffer){
/* global exports */
/* global Buffer */
"use strict";

exports.byteLengthImpl = function (str) {
  return function (enc) {
    return Buffer.byteLength(str, enc);
  };
};

}).call(this,require("buffer").Buffer)
},{"buffer":441}],367:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var ASCII = (function () {
    function ASCII() {

    };
    ASCII.value = new ASCII();
    return ASCII;
})();
var UTF8 = (function () {
    function UTF8() {

    };
    UTF8.value = new UTF8();
    return UTF8;
})();
var UTF16LE = (function () {
    function UTF16LE() {

    };
    UTF16LE.value = new UTF16LE();
    return UTF16LE;
})();
var UCS2 = (function () {
    function UCS2() {

    };
    UCS2.value = new UCS2();
    return UCS2;
})();
var Base64 = (function () {
    function Base64() {

    };
    Base64.value = new Base64();
    return Base64;
})();
var Latin1 = (function () {
    function Latin1() {

    };
    Latin1.value = new Latin1();
    return Latin1;
})();
var Binary = (function () {
    function Binary() {

    };
    Binary.value = new Binary();
    return Binary;
})();
var Hex = (function () {
    function Hex() {

    };
    Hex.value = new Hex();
    return Hex;
})();
var showEncoding = new Data_Show.Show(function (v) {
    if (v instanceof ASCII) {
        return "ASCII";
    };
    if (v instanceof UTF8) {
        return "UTF8";
    };
    if (v instanceof UTF16LE) {
        return "UTF16LE";
    };
    if (v instanceof UCS2) {
        return "UCS2";
    };
    if (v instanceof Base64) {
        return "Base64";
    };
    if (v instanceof Latin1) {
        return "Latin1";
    };
    if (v instanceof Binary) {
        return "Binary";
    };
    if (v instanceof Hex) {
        return "Hex";
    };
    throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
});
var encodingToNode = function (v) {
    if (v instanceof ASCII) {
        return "ascii";
    };
    if (v instanceof UTF8) {
        return "utf8";
    };
    if (v instanceof UTF16LE) {
        return "utf16le";
    };
    if (v instanceof UCS2) {
        return "ucs2";
    };
    if (v instanceof Base64) {
        return "base64";
    };
    if (v instanceof Latin1) {
        return "latin1";
    };
    if (v instanceof Binary) {
        return "binary";
    };
    if (v instanceof Hex) {
        return "hex";
    };
    throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
};
var byteLength = function (str) {
    return function (enc) {
        return $foreign.byteLengthImpl(str)(encodingToNode(enc));
    };
};
module.exports = {
    ASCII: ASCII,
    UTF8: UTF8,
    UTF16LE: UTF16LE,
    UCS2: UCS2,
    Base64: Base64,
    Latin1: Latin1,
    Binary: Binary,
    Hex: Hex,
    encodingToNode: encodingToNode,
    byteLength: byteLength,
    showEncoding: showEncoding
};

},{"../Data.Show/index.js":226,"./foreign.js":366}],368:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Node_FS_Async = require("../Node.FS.Async/index.js");
var toAff = function (p) {
    return Effect_Aff.makeAff(function (k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
    });
};
var toAff1 = function (f) {
    return function (a) {
        return toAff(f(a));
    };
};
var unlink = toAff1(Node_FS_Async.unlink);
var toAff2 = function (f) {
    return function (a) {
        return function (b) {
            return toAff(f(a)(b));
        };
    };
};
var truncate = toAff2(Node_FS_Async.truncate);
var writeFile = toAff2(Node_FS_Async.writeFile);
var toAff3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return toAff(f(a)(b)(c));
            };
        };
    };
};
var utimes = toAff3(Node_FS_Async.utimes);
var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
var toAff5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return toAff(f(a)(b)(c)(d)(e));
                    };
                };
            };
        };
    };
};
var symlink = toAff3(Node_FS_Async.symlink);
var stat = toAff1(Node_FS_Async.stat);
var rmdir = toAff1(Node_FS_Async.rmdir);
var rename = toAff2(Node_FS_Async.rename);
var realpath$prime = toAff2(Node_FS_Async["realpath'"]);
var realpath = toAff1(Node_FS_Async.realpath);
var readlink = toAff1(Node_FS_Async.readlink);
var readdir = toAff1(Node_FS_Async.readdir);
var readTextFile = toAff2(Node_FS_Async.readTextFile);
var readFile = toAff1(Node_FS_Async.readFile);
var mkdir$prime = toAff2(Node_FS_Async["mkdir'"]);
var mkdir = toAff1(Node_FS_Async.mkdir);
var link = toAff2(Node_FS_Async.link);
var fdWrite = toAff5(Node_FS_Async.fdWrite);
var fdRead = toAff5(Node_FS_Async.fdRead);
var fdOpen = toAff3(Node_FS_Async.fdOpen);
var fdNext = toAff2(Node_FS_Async.fdNext);
var fdClose = toAff1(Node_FS_Async.fdClose);
var fdAppend = toAff2(Node_FS_Async.fdAppend);
var exists = function (file) {
    return Effect_Aff.makeAff(function (k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)((function () {
            var $0 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($1) {
                return k($0($1));
            };
        })()))(Effect_Aff.nonCanceler);
    });
};
var chown = toAff3(Node_FS_Async.chown);
var chmod = toAff2(Node_FS_Async.chmod);
var appendTextFile = toAff3(Node_FS_Async.appendTextFile);
var appendFile = toAff2(Node_FS_Async.appendFile);
module.exports = {
    rename: rename,
    truncate: truncate,
    chown: chown,
    chmod: chmod,
    stat: stat,
    link: link,
    symlink: symlink,
    readlink: readlink,
    realpath: realpath,
    "realpath'": realpath$prime,
    unlink: unlink,
    rmdir: rmdir,
    mkdir: mkdir,
    "mkdir'": mkdir$prime,
    readdir: readdir,
    utimes: utimes,
    readFile: readFile,
    readTextFile: readTextFile,
    writeFile: writeFile,
    writeTextFile: writeTextFile,
    appendFile: appendFile,
    appendTextFile: appendTextFile,
    exists: exists,
    fdOpen: fdOpen,
    fdRead: fdRead,
    fdNext: fdNext,
    fdWrite: fdWrite,
    fdAppend: fdAppend,
    fdClose: fdClose
};

},{"../Control.Applicative/index.js":17,"../Data.Either/index.js":119,"../Data.Functor/index.js":143,"../Effect.Aff/index.js":297,"../Effect/index.js":309,"../Node.FS.Async/index.js":370}],369:[function(require,module,exports){
"use strict";

exports.handleCallbackImpl = function (left, right, f) {
  return function (err, value) {
    if (err) {
      f(left(err))();
    } else {
      f(right(value))();
    }
  };
};

},{}],370:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Node_FS = require("../Node.FS/index.js");
var Node_FS_Internal = require("../Node.FS.Internal/index.js");
var Node_FS_Perms = require("../Node.FS.Perms/index.js");
var Node_FS_Stats = require("../Node.FS.Stats/index.js");
var handleCallback = function (cb) {
    return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
};
var fs = Node_FS_Internal.unsafeRequireFS;
var link = function (src) {
    return function (dst) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.link(src, dst, handleCallback(cb));
            });
        };
    };
};
var mkdir$prime = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
var readFile = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readFile(file, {}, handleCallback(cb));
        });
    };
};
var readTextFile = function (encoding) {
    return function (file) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.readFile(file, {
                    encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                }, handleCallback(cb));
            });
        };
    };
};
var readdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readdir(file, handleCallback(cb));
        });
    };
};
var readlink = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readlink(path, handleCallback(cb));
        });
    };
};
var realpath = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.realpath(path, {}, handleCallback(cb));
        });
    };
};
var realpath$prime = function (path) {
    return function (cache) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.realpath(path, cache, handleCallback(cb));
            });
        };
    };
};
var rename = function (oldFile) {
    return function (newFile) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.rename(oldFile, newFile, handleCallback(cb));
            });
        };
    };
};
var rmdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.rmdir(file, handleCallback(cb));
        });
    };
};
var stat = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.stat(file, handleCallback((function () {
                var $32 = Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create);
                return function ($33) {
                    return cb($32($33));
                };
            })()));
        });
    };
};
var symlink = function (src) {
    return function (dest) {
        return function (ty) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                });
            };
        };
    };
};
var truncate = function (file) {
    return function (len) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.truncate(file, len, handleCallback(cb));
            });
        };
    };
};
var unlink = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.unlink(file, handleCallback(cb));
        });
    };
};
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            return function (cb) {
                var toEpochMilliseconds = function ($34) {
                    return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($34));
                };
                var ms = function (v) {
                    return Data_Int.round(v);
                };
                var fromDate = function (date) {
                    return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1000);
                };
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                });
            };
        };
    };
};
var writeFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.writeFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
var writeTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.writeFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                });
            };
        };
    };
};
var fdNext = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var fdClose = function (fd) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.close(fd, handleCallback(cb));
        });
    };
};
var fdAppend = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var exists = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.exists(file, function (b) {
                return Effect_Unsafe.unsafePerformEffect(cb(b));
            });
        });
    };
};
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.chown(file, uid, gid, handleCallback(cb));
                });
            };
        };
    };
};
var chmod = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.appendFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var appendFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.appendFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
module.exports = {
    rename: rename,
    truncate: truncate,
    chown: chown,
    chmod: chmod,
    stat: stat,
    link: link,
    symlink: symlink,
    readlink: readlink,
    realpath: realpath,
    "realpath'": realpath$prime,
    unlink: unlink,
    rmdir: rmdir,
    mkdir: mkdir,
    "mkdir'": mkdir$prime,
    readdir: readdir,
    utimes: utimes,
    readFile: readFile,
    readTextFile: readTextFile,
    writeFile: writeFile,
    writeTextFile: writeTextFile,
    appendFile: appendFile,
    appendTextFile: appendTextFile,
    exists: exists,
    fdOpen: fdOpen,
    fdRead: fdRead,
    fdNext: fdNext,
    fdWrite: fdWrite,
    fdAppend: fdAppend,
    fdClose: fdClose
};

},{"../Data.DateTime.Instant/index.js":114,"../Data.Either/index.js":119,"../Data.EuclideanRing/index.js":125,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Data.Show/index.js":226,"../Effect.Unsafe/index.js":307,"../Node.Buffer/index.js":365,"../Node.Encoding/index.js":367,"../Node.FS.Internal/index.js":372,"../Node.FS.Perms/index.js":373,"../Node.FS.Stats/index.js":375,"../Node.FS/index.js":376,"./foreign.js":369}],371:[function(require,module,exports){
"use strict";

exports.unsafeRequireFS = require("fs");

},{"fs":440}],372:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var mkEffect = Unsafe_Coerce.unsafeCoerce;
module.exports = {
    mkEffect: mkEffect,
    unsafeRequireFS: $foreign.unsafeRequireFS
};

},{"../Unsafe.Coerce/index.js":391,"./foreign.js":371}],373:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Global = require("../Global/index.js");
var Perm = function (x) {
    return x;
};
var Perms = function (x) {
    return x;
};
var write = {
    r: false,
    w: true,
    x: false
};
var semiringPerm = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return {
            r: v.r || v1.r,
            w: v.w || v1.w,
            x: v.x || v1.x
        };
    };
}, function (v) {
    return function (v1) {
        return {
            r: v.r && v1.r,
            w: v.w && v1.w,
            x: v.x && v1.x
        };
    };
}, {
    r: true,
    w: true,
    x: true
}, {
    r: false,
    w: false,
    x: false
});
var read = {
    r: true,
    w: false,
    x: false
};
var permToInt = function (v) {
    return ((function () {
        if (v.r) {
            return 4;
        };
        return 0;
    })() + (function () {
        if (v.w) {
            return 2;
        };
        return 0;
    })() | 0) + (function () {
        if (v.x) {
            return 1;
        };
        return 0;
    })() | 0;
};
var permToString = (function () {
    var $97 = Data_Show.show(Data_Show.showInt);
    return function ($98) {
        return $97(permToInt($98));
    };
})();
var permsToString = function (v) {
    return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
};
var permsToInt = (function (dictPartial) {
    var $99 = Data_Maybe.fromJust(dictPartial);
    var $100 = Global.readInt(8);
    return function ($101) {
        return $99(Data_Int.fromNumber($100(permsToString($101))));
    };
})();
var none = Data_Semiring.zero(semiringPerm);
var mkPerms = function (u) {
    return function (g) {
        return function (o) {
            return {
                u: u,
                g: g,
                o: o
            };
        };
    };
};
var mkPerm = function (r) {
    return function (w) {
        return function (x) {
            return {
                r: r,
                w: w,
                x: x
            };
        };
    };
};
var execute = {
    r: false,
    w: false,
    x: true
};
var permFromChar = function (c) {
    if (c === "0") {
        return Data_Maybe.Just.create(none);
    };
    if (c === "1") {
        return Data_Maybe.Just.create(execute);
    };
    if (c === "2") {
        return Data_Maybe.Just.create(write);
    };
    if (c === "3") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(write)(execute));
    };
    if (c === "4") {
        return Data_Maybe.Just.create(read);
    };
    if (c === "5") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(execute));
    };
    if (c === "6") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(write));
    };
    if (c === "7") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(Data_Semiring.add(semiringPerm)(read)(write))(execute));
    };
    return Data_Maybe.Nothing.value;
};
var permsFromString = (function () {
    var zeroChar = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Enum.boundedEnumChar)(48));
    var dropPrefix = function (x) {
        return function (xs) {
            if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String_CodeUnits.charAt(0)(xs))(new Data_Maybe.Just(x))) {
                return Data_String_CodePoints.drop(1)(xs);
            };
            if (Data_Boolean.otherwise) {
                return xs;
            };
            throw new Error("Failed pattern match at Node.FS.Perms (line 126, column 5 - line 128, column 35): " + [ x.constructor.name, xs.constructor.name ]);
        };
    };
    var _perms = function (v) {
        if (v.length === 3) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkPerms)(permFromChar(v[0])))(permFromChar(v[1])))(permFromChar(v[2]));
        };
        return Data_Maybe.Nothing.value;
    };
    var $102 = dropPrefix(zeroChar);
    return function ($103) {
        return _perms(Data_String_CodeUnits.toCharArray($102($103)));
    };
})();
var eqPerm = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.r === v1.r && (v.w === v1.w && v.x === v1.x);
    };
});
var eqPerms = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(eqPerm)(v.u)(v1.u) && (Data_Eq.eq(eqPerm)(v.g)(v1.g) && Data_Eq.eq(eqPerm)(v.o)(v1.o));
    };
});
var ordPerm = new Data_Ord.Ord(function () {
    return eqPerm;
}, function (v) {
    return function (v1) {
        return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordBoolean))([ v.r, v.w, v.x ])([ v1.r, v1.w, v1.x ]);
    };
});
var ordPerms = new Data_Ord.Ord(function () {
    return eqPerms;
}, function (v) {
    return function (v1) {
        return Data_Ord.compare(Data_Ord.ordArray(ordPerm))([ v.u, v.g, v.o ])([ v1.u, v1.g, v1.o ]);
    };
});
var all = Data_Semiring.one(semiringPerm);
var showPerm = new Data_Show.Show(function (v) {
    if (Data_Eq.eq(eqPerm)(v)(none)) {
        return "none";
    };
    if (Data_Eq.eq(eqPerm)(v)(all)) {
        return "all";
    };
    var ps = Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
        if (v.r) {
            return [ "read" ];
        };
        return [  ];
    })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
        if (v.w) {
            return [ "write" ];
        };
        return [  ];
    })())((function () {
        if (v.x) {
            return [ "execute" ];
        };
        return [  ];
    })()));
    return Data_String_Common.joinWith(" + ")(ps);
});
var showPerms = new Data_Show.Show(function (v) {
    var f = function (perm) {
        var str = Data_Show.show(showPerm)(perm);
        var $93 = Data_Maybe.isNothing(Data_String_CodePoints.indexOf(" ")(str));
        if ($93) {
            return str;
        };
        return "(" + (str + ")");
    };
    return "mkPerms " + Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(f)([ v.u, v.g, v.o ]));
});
module.exports = {
    none: none,
    read: read,
    write: write,
    execute: execute,
    all: all,
    mkPerms: mkPerms,
    permsFromString: permsFromString,
    permsToString: permsToString,
    permsToInt: permsToInt,
    eqPerm: eqPerm,
    ordPerm: ordPerm,
    showPerm: showPerm,
    semiringPerm: semiringPerm,
    eqPerms: eqPerms,
    ordPerms: ordPerms,
    showPerms: showPerms
};

},{"../Control.Apply/index.js":19,"../Data.Boolean/index.js":100,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Int/index.js":152,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226,"../Data.String.CodePoints/index.js":228,"../Data.String.CodeUnits/index.js":230,"../Data.String.Common/index.js":232,"../Global/index.js":319}],374:[function(require,module,exports){
"use strict";

exports.showStatsObj = require("util").inspect;

exports.statsMethod = function (m, s) {
  return s[m]();
};

},{"util":447}],375:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_JSDate = require("../Data.JSDate/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Stats = (function () {
    function Stats(value0) {
        this.value0 = value0;
    };
    Stats.create = function (value0) {
        return new Stats(value0);
    };
    return Stats;
})();
var statusChangedTime = function (v) {
    return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.ctime));
};
var showStats = new Data_Show.Show(function (v) {
    return "Stats " + $foreign.showStatsObj(v.value0);
});
var modifiedTime = function (v) {
    return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.mtime));
};
var isSymbolicLink = function (v) {
    return $foreign.statsMethod("isSymbolicLink", v.value0);
};
var isSocket = function (v) {
    return $foreign.statsMethod("isSocket", v.value0);
};
var isFile = function (v) {
    return $foreign.statsMethod("isFile", v.value0);
};
var isFIFO = function (v) {
    return $foreign.statsMethod("isFIFO", v.value0);
};
var isDirectory = function (v) {
    return $foreign.statsMethod("isDirectory", v.value0);
};
var isCharacterDevice = function (v) {
    return $foreign.statsMethod("isCharacterDevice", v.value0);
};
var isBlockDevice = function (v) {
    return $foreign.statsMethod("isBlockDevice", v.value0);
};
var accessedTime = function (v) {
    return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.atime));
};
module.exports = {
    Stats: Stats,
    isFile: isFile,
    isDirectory: isDirectory,
    isBlockDevice: isBlockDevice,
    isCharacterDevice: isCharacterDevice,
    isFIFO: isFIFO,
    isSocket: isSocket,
    isSymbolicLink: isSymbolicLink,
    accessedTime: accessedTime,
    modifiedTime: modifiedTime,
    statusChangedTime: statusChangedTime,
    showStats: showStats
};

},{"../Data.JSDate/index.js":154,"../Data.Maybe/index.js":187,"../Data.Show/index.js":226,"./foreign.js":374}],376:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Show = require("../Data.Show/index.js");
var FileLink = (function () {
    function FileLink() {

    };
    FileLink.value = new FileLink();
    return FileLink;
})();
var DirLink = (function () {
    function DirLink() {

    };
    DirLink.value = new DirLink();
    return DirLink;
})();
var JunctionLink = (function () {
    function JunctionLink() {

    };
    JunctionLink.value = new JunctionLink();
    return JunctionLink;
})();
var R = (function () {
    function R() {

    };
    R.value = new R();
    return R;
})();
var R_PLUS = (function () {
    function R_PLUS() {

    };
    R_PLUS.value = new R_PLUS();
    return R_PLUS;
})();
var RS = (function () {
    function RS() {

    };
    RS.value = new RS();
    return RS;
})();
var RS_PLUS = (function () {
    function RS_PLUS() {

    };
    RS_PLUS.value = new RS_PLUS();
    return RS_PLUS;
})();
var W = (function () {
    function W() {

    };
    W.value = new W();
    return W;
})();
var WX = (function () {
    function WX() {

    };
    WX.value = new WX();
    return WX;
})();
var W_PLUS = (function () {
    function W_PLUS() {

    };
    W_PLUS.value = new W_PLUS();
    return W_PLUS;
})();
var WX_PLUS = (function () {
    function WX_PLUS() {

    };
    WX_PLUS.value = new WX_PLUS();
    return WX_PLUS;
})();
var A = (function () {
    function A() {

    };
    A.value = new A();
    return A;
})();
var AX = (function () {
    function AX() {

    };
    AX.value = new AX();
    return AX;
})();
var A_PLUS = (function () {
    function A_PLUS() {

    };
    A_PLUS.value = new A_PLUS();
    return A_PLUS;
})();
var AX_PLUS = (function () {
    function AX_PLUS() {

    };
    AX_PLUS.value = new AX_PLUS();
    return AX_PLUS;
})();
var symlinkTypeToNode = function (ty) {
    if (ty instanceof FileLink) {
        return "file";
    };
    if (ty instanceof DirLink) {
        return "dir";
    };
    if (ty instanceof JunctionLink) {
        return "junction";
    };
    throw new Error("Failed pattern match at Node.FS (line 68, column 24 - line 71, column 29): " + [ ty.constructor.name ]);
};
var showSymlinkType = new Data_Show.Show(function (v) {
    if (v instanceof FileLink) {
        return "FileLink";
    };
    if (v instanceof DirLink) {
        return "DirLink";
    };
    if (v instanceof JunctionLink) {
        return "JunctionLink";
    };
    throw new Error("Failed pattern match at Node.FS (line 73, column 1 - line 76, column 37): " + [ v.constructor.name ]);
});
var showFileFlags = new Data_Show.Show(function (v) {
    if (v instanceof R) {
        return "R";
    };
    if (v instanceof R_PLUS) {
        return "R_PLUS";
    };
    if (v instanceof RS) {
        return "RS";
    };
    if (v instanceof RS_PLUS) {
        return "RS_PLUS";
    };
    if (v instanceof W) {
        return "W";
    };
    if (v instanceof WX) {
        return "WX";
    };
    if (v instanceof W_PLUS) {
        return "W_PLUS";
    };
    if (v instanceof WX_PLUS) {
        return "WX_PLUS";
    };
    if (v instanceof A) {
        return "A";
    };
    if (v instanceof AX) {
        return "AX";
    };
    if (v instanceof A_PLUS) {
        return "A_PLUS";
    };
    if (v instanceof AX_PLUS) {
        return "AX_PLUS";
    };
    throw new Error("Failed pattern match at Node.FS (line 22, column 1 - line 34, column 27): " + [ v.constructor.name ]);
});
var fileFlagsToNode = function (ff) {
    if (ff instanceof R) {
        return "r";
    };
    if (ff instanceof R_PLUS) {
        return "r+";
    };
    if (ff instanceof RS) {
        return "rs";
    };
    if (ff instanceof RS_PLUS) {
        return "rs+";
    };
    if (ff instanceof W) {
        return "w";
    };
    if (ff instanceof WX) {
        return "wx";
    };
    if (ff instanceof W_PLUS) {
        return "w+";
    };
    if (ff instanceof WX_PLUS) {
        return "wx+";
    };
    if (ff instanceof A) {
        return "a";
    };
    if (ff instanceof AX) {
        return "ax";
    };
    if (ff instanceof A_PLUS) {
        return "a+";
    };
    if (ff instanceof AX_PLUS) {
        return "ax+";
    };
    throw new Error("Failed pattern match at Node.FS (line 42, column 22 - line 54, column 19): " + [ ff.constructor.name ]);
};
var eqSymlinkType = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof FileLink && v1 instanceof FileLink) {
            return true;
        };
        if (v instanceof DirLink && v1 instanceof DirLink) {
            return true;
        };
        if (v instanceof JunctionLink && v1 instanceof JunctionLink) {
            return true;
        };
        return false;
    };
});
var eqFileFlags = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Show.show(showFileFlags)(x) === Data_Show.show(showFileFlags)(y);
    };
});
module.exports = {
    R: R,
    R_PLUS: R_PLUS,
    RS: RS,
    RS_PLUS: RS_PLUS,
    W: W,
    WX: WX,
    W_PLUS: W_PLUS,
    WX_PLUS: WX_PLUS,
    A: A,
    AX: AX,
    A_PLUS: A_PLUS,
    AX_PLUS: AX_PLUS,
    FileLink: FileLink,
    DirLink: DirLink,
    JunctionLink: JunctionLink,
    symlinkTypeToNode: symlinkTypeToNode,
    fileFlagsToNode: fileFlagsToNode,
    showFileFlags: showFileFlags,
    eqFileFlags: eqFileFlags,
    showSymlinkType: showSymlinkType,
    eqSymlinkType: eqSymlinkType
};

},{"../Data.Eq/index.js":123,"../Data.Show/index.js":226}],377:[function(require,module,exports){
"use strict";

// module Partial.Unsafe

exports.unsafePartial = function (f) {
  return f();
};

},{}],378:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Partial = require("../Partial/index.js");
var unsafePartialBecause = function (v) {
    return function (x) {
        return $foreign.unsafePartial(function (dictPartial) {
            return x(dictPartial);
        });
    };
};
var unsafeCrashWith = function (msg) {
    return $foreign.unsafePartial(function (dictPartial) {
        return Partial.crashWith(dictPartial)(msg);
    });
};
module.exports = {
    unsafePartialBecause: unsafePartialBecause,
    unsafeCrashWith: unsafeCrashWith,
    unsafePartial: $foreign.unsafePartial
};

},{"../Partial/index.js":380,"./foreign.js":377}],379:[function(require,module,exports){
"use strict";

// module Partial

exports.crashWith = function () {
  return function (msg) {
    throw new Error(msg);
  };
};

},{}],380:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var crash = function (dictPartial) {
    return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
};
module.exports = {
    crash: crash,
    crashWith: $foreign.crashWith
};

},{"./foreign.js":379}],381:[function(require,module,exports){
"use strict";

exports.unsafeUnionFn = function(r1, r2) {
  var copy = {};
  for (var k1 in r2) {
    if ({}.hasOwnProperty.call(r2, k1)) {
      copy[k1] = r2[k1];
    }
  }
  for (var k2 in r1) {
    if ({}.hasOwnProperty.call(r1, k2)) {
      copy[k2] = r1[k2];
    }
  }
  return copy;
};

},{}],382:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
module.exports = {
    unsafeUnion: unsafeUnion,
    unsafeUnionFn: $foreign.unsafeUnionFn
};

},{"../Data.Function.Uncurried/index.js":131,"./foreign.js":381}],383:[function(require,module,exports){
"use strict";

exports.unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

exports.unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

exports.unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      copy[label] = value;
      return copy;
    };
  };
};

exports.unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
};

},{}],384:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeHas: $foreign.unsafeHas,
    unsafeGet: $foreign.unsafeGet,
    unsafeSet: $foreign.unsafeSet,
    unsafeDelete: $foreign.unsafeDelete
};

},{"./foreign.js":383}],385:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Record_Unsafe = require("../Record.Unsafe/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var EqualFields = function (equalFields) {
    this.equalFields = equalFields;
};
var union = function (dictUnion) {
    return function (l) {
        return function (r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
        };
    };
};
var set = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (b) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                    };
                };
            };
        };
    };
};
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var insert = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (a) {
                    return function (r) {
                        return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                    };
                };
            };
        };
    };
};
var get = function (dictIsSymbol) {
    return function (dictCons) {
        return function (l) {
            return function (r) {
                return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
            };
        };
    };
};
var modify = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (l) {
                return function (f) {
                    return function (r) {
                        return set(dictIsSymbol)(dictCons)(dictCons1)(l)(f(get(dictIsSymbol)(dictCons)(l)(r)))(r);
                    };
                };
            };
        };
    };
};
var equalFieldsNil = new EqualFields(function (v) {
    return function (v1) {
        return function (v2) {
            return true;
        };
    };
});
var equalFields = function (dict) {
    return dict.equalFields;
};
var equalFieldsCons = function (dictIsSymbol) {
    return function (dictEq) {
        return function (dictCons) {
            return function (dictEqualFields) {
                return new EqualFields(function (v) {
                    return function (a) {
                        return function (b) {
                            var get$prime = get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value);
                            var equalRest = equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value);
                            return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                        };
                    };
                });
            };
        };
    };
};
var equal = function (dictRowToList) {
    return function (dictEqualFields) {
        return function (a) {
            return function (b) {
                return equalFields(dictEqualFields)(Type_Data_RowList.RLProxy.value)(a)(b);
            };
        };
    };
};
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (l) {
            return function (r) {
                return Record_Unsafe_Union.unsafeUnionFn(l, r);
            };
        };
    };
};
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r) {
                    return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                };
            };
        };
    };
};
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (prev) {
                            return function (next) {
                                return function (record) {
                                    return insert(dictIsSymbol1)(dictLacks1)(dictCons1)(next)(get(dictIsSymbol)(dictCons)(prev)(record))($$delete(dictIsSymbol)(dictLacks)(dictCons)(prev)(record));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    get: get,
    set: set,
    modify: modify,
    insert: insert,
    "delete": $$delete,
    rename: rename,
    equal: equal,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    EqualFields: EqualFields,
    equalFields: equalFields,
    equalFieldsCons: equalFieldsCons,
    equalFieldsNil: equalFieldsNil
};

},{"../Data.Eq/index.js":123,"../Data.Symbol/index.js":240,"../Record.Unsafe.Union/index.js":382,"../Record.Unsafe/index.js":384,"../Type.Data.RowList/index.js":387,"../Unsafe.Coerce/index.js":391}],386:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var RProxy = (function () {
    function RProxy() {

    };
    RProxy.value = new RProxy();
    return RProxy;
})();
module.exports = {
    RProxy: RProxy
};

},{}],387:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var RLProxy = (function () {
    function RLProxy() {

    };
    RLProxy.value = new RLProxy();
    return RLProxy;
})();
module.exports = {
    RLProxy: RLProxy
};

},{}],388:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var TypeEquals = function (from, to) {
    this.from = from;
    this.to = to;
};
var to = function (dict) {
    return dict.to;
};
var refl = new TypeEquals(function (a) {
    return a;
}, function (a) {
    return a;
});
var from = function (dict) {
    return dict.from;
};
module.exports = {
    TypeEquals: TypeEquals,
    to: to,
    from: from,
    refl: refl
};

},{}],389:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Data_BooleanAlgebra = require("../Data.BooleanAlgebra/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_CommutativeRing = require("../Data.CommutativeRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Proxy3 = (function () {
    function Proxy3() {

    };
    Proxy3.value = new Proxy3();
    return Proxy3;
})();
var Proxy2 = (function () {
    function Proxy2() {

    };
    Proxy2.value = new Proxy2();
    return Proxy2;
})();
var $$Proxy = (function () {
    function $$Proxy() {

    };
    $$Proxy.value = new $$Proxy();
    return $$Proxy;
})();
var showProxy3 = new Data_Show.Show(function (v) {
    return "Proxy3";
});
var showProxy2 = new Data_Show.Show(function (v) {
    return "Proxy2";
});
var showProxy = new Data_Show.Show(function (v) {
    return "Proxy";
});
var semiringProxy3 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, Proxy3.value);
var semiringProxy2 = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, Proxy2.value);
var semiringProxy = new Data_Semiring.Semiring(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, $$Proxy.value);
var semigroupProxy3 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var semigroupProxy2 = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var semigroupProxy = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var ringProxy3 = new Data_Ring.Ring(function () {
    return semiringProxy3;
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
});
var ringProxy2 = new Data_Ring.Ring(function () {
    return semiringProxy2;
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
});
var ringProxy = new Data_Ring.Ring(function () {
    return semiringProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var heytingAlgebraProxy3 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, Proxy3.value, function (v) {
    return function (v1) {
        return Proxy3.value;
    };
}, function (v) {
    return Proxy3.value;
}, Proxy3.value);
var heytingAlgebraProxy2 = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, Proxy2.value, function (v) {
    return function (v1) {
        return Proxy2.value;
    };
}, function (v) {
    return Proxy2.value;
}, Proxy2.value);
var heytingAlgebraProxy = new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, $$Proxy.value, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
}, function (v) {
    return $$Proxy.value;
}, $$Proxy.value);
var functorProxy = new Data_Functor.Functor(function (f) {
    return function (m) {
        return $$Proxy.value;
    };
});
var eqProxy3 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy3 = new Data_Ord.Ord(function () {
    return eqProxy3;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy2 = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy2 = new Data_Ord.Ord(function () {
    return eqProxy2;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var eqProxy = new Data_Eq.Eq(function (x) {
    return function (y) {
        return true;
    };
});
var ordProxy = new Data_Ord.Ord(function () {
    return eqProxy;
}, function (x) {
    return function (y) {
        return Data_Ordering.EQ.value;
    };
});
var discardProxy3 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy2 = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var discardProxy = new Control_Bind.Discard(function (dictBind) {
    return Control_Bind.bind(dictBind);
});
var commutativeRingProxy3 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy3;
});
var commutativeRingProxy2 = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy2;
});
var commutativeRingProxy = new Data_CommutativeRing.CommutativeRing(function () {
    return ringProxy;
});
var boundedProxy3 = new Data_Bounded.Bounded(function () {
    return ordProxy3;
}, Proxy3.value, Proxy3.value);
var boundedProxy2 = new Data_Bounded.Bounded(function () {
    return ordProxy2;
}, Proxy2.value, Proxy2.value);
var boundedProxy = new Data_Bounded.Bounded(function () {
    return ordProxy;
}, $$Proxy.value, $$Proxy.value);
var booleanAlgebraProxy3 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy3;
});
var booleanAlgebraProxy2 = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy2;
});
var booleanAlgebraProxy = new Data_BooleanAlgebra.BooleanAlgebra(function () {
    return heytingAlgebraProxy;
});
var applyProxy = new Control_Apply.Apply(function () {
    return functorProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var bindProxy = new Control_Bind.Bind(function () {
    return applyProxy;
}, function (v) {
    return function (v1) {
        return $$Proxy.value;
    };
});
var applicativeProxy = new Control_Applicative.Applicative(function () {
    return applyProxy;
}, function (v) {
    return $$Proxy.value;
});
var monadProxy = new Control_Monad.Monad(function () {
    return applicativeProxy;
}, function () {
    return bindProxy;
});
module.exports = {
    "Proxy": $$Proxy,
    Proxy2: Proxy2,
    Proxy3: Proxy3,
    eqProxy: eqProxy,
    functorProxy: functorProxy,
    ordProxy: ordProxy,
    applicativeProxy: applicativeProxy,
    applyProxy: applyProxy,
    bindProxy: bindProxy,
    booleanAlgebraProxy: booleanAlgebraProxy,
    boundedProxy: boundedProxy,
    commutativeRingProxy: commutativeRingProxy,
    discardProxy: discardProxy,
    heytingAlgebraProxy: heytingAlgebraProxy,
    monadProxy: monadProxy,
    ringProxy: ringProxy,
    semigroupProxy: semigroupProxy,
    semiringProxy: semiringProxy,
    showProxy: showProxy,
    eqProxy2: eqProxy2,
    ordProxy2: ordProxy2,
    booleanAlgebraProxy2: booleanAlgebraProxy2,
    boundedProxy2: boundedProxy2,
    commutativeRingProxy2: commutativeRingProxy2,
    discardProxy2: discardProxy2,
    heytingAlgebraProxy2: heytingAlgebraProxy2,
    ringProxy2: ringProxy2,
    semigroupProxy2: semigroupProxy2,
    semiringProxy2: semiringProxy2,
    showProxy2: showProxy2,
    eqProxy3: eqProxy3,
    ordProxy3: ordProxy3,
    booleanAlgebraProxy3: booleanAlgebraProxy3,
    boundedProxy3: boundedProxy3,
    commutativeRingProxy3: commutativeRingProxy3,
    discardProxy3: discardProxy3,
    heytingAlgebraProxy3: heytingAlgebraProxy3,
    ringProxy3: ringProxy3,
    semigroupProxy3: semigroupProxy3,
    semiringProxy3: semiringProxy3,
    showProxy3: showProxy3
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Monad/index.js":60,"../Data.BooleanAlgebra/index.js":101,"../Data.Bounded/index.js":103,"../Data.CommutativeRing/index.js":107,"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Ring/index.js":215,"../Data.Semigroup/index.js":221,"../Data.Semiring/index.js":223,"../Data.Show/index.js":226}],390:[function(require,module,exports){
"use strict";

// module Unsafe.Coerce

exports.unsafeCoerce = function (x) {
  return x;
};

},{}],391:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    unsafeCoerce: $foreign.unsafeCoerce
};

},{"./foreign.js":390}],392:[function(require,module,exports){
"use strict";

exports.reallyUnsafeRefEq = function (a) {
  return function (b) {
    return a === b;
  };
};

},{}],393:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var unsafeRefEq = $foreign.reallyUnsafeRefEq;
module.exports = {
    unsafeRefEq: unsafeRefEq,
    reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
};

},{"./foreign.js":392}],394:[function(require,module,exports){
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Compose = require("../Data.Functor.Compose/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");

// | Yet another alternative validation type, this one uses two layers of
// | NonEmptyArray instead of a generic/free Semiring, in order to guarantee
// | that an error is actually thrown. Thus it does not provide `empty`; you
// | must supply your own error for a failure case.
// |
// | There is no need for a monad transformer like this because this isn't a
// | monad, and applicatives `Compose`.
var Success = (function () {
    function Success(value0) {
        this.value0 = value0;
    };
    Success.create = function (value0) {
        return new Success(value0);
    };
    return Success;
})();

// | Yet another alternative validation type, this one uses two layers of
// | NonEmptyArray instead of a generic/free Semiring, in order to guarantee
// | that an error is actually thrown. Thus it does not provide `empty`; you
// | must supply your own error for a failure case.
// |
// | There is no need for a monad transformer like this because this isn't a
// | monad, and applicatives `Compose`.
var $$Error = (function () {
    function $$Error(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    $$Error.create = function (value0) {
        return function (value1) {
            return new $$Error(value0, value1);
        };
    };
    return $$Error;
})();
var suggest = function (a) {
    return function (v) {
        if (v instanceof Success) {
            return new Success(a);
        };
        if (v instanceof $$Error) {
            return new $$Error(v.value0, new Data_Maybe.Just(a));
        };
        throw new Error("Failed pattern match at Validation.These (line 64, column 1 - line 64, column 59): " + [ a.constructor.name, v.constructor.name ]);
    };
};
var showErroring = function (dictShow) {
    return function (dictShow1) {
        return new Data_Show.Show(function (v) {
            if (v instanceof Success) {
                return "(Success " + (Data_Show.show(dictShow1)(v.value0) + ")");
            };
            if (v instanceof $$Error) {
                return "(Error " + (Data_Show.show(Data_Array_NonEmpty_Internal.showNonEmptyArray(dictShow))(v.value0) + (" " + (Data_Show.show(Data_Maybe.showMaybe(dictShow1))(v.value1) + ")")));
            };
            throw new Error("Failed pattern match at Validation.These (line 27, column 1 - line 29, column 69): " + [ v.constructor.name ]);
        });
    };
};

//------------------------------------------------------------------------------
// | Lift from Errors to Feedback, ERrors to FeedbackR
var liftW = function (dictFunctor) {
    return function (dictMonoid) {
        return function (m) {
            return Data_Functor.flap(dictFunctor)(Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create)(m))(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var liftCR = function (dictApplicative) {
    var $122 = Control_Applicative.pure(dictApplicative);
    return function ($123) {
        return Data_Functor_Compose.Compose($122($123));
    };
};
var liftCL = function (dictFunctor) {
    return function (dictApplicative) {
        var $124 = Data_Functor.map(dictFunctor)(Control_Applicative.pure(dictApplicative));
        return function ($125) {
            return Data_Functor_Compose.Compose($124($125));
        };
    };
};
var hushW$prime = function (v) {
    if (v instanceof $$Error) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Success) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0.value0);
    };
    throw new Error("Failed pattern match at Validation.These (line 105, column 1 - line 105, column 62): " + [ v.constructor.name ]);
};
var hushW = function (v) {
    if (v instanceof $$Error) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.value1)(function (v1) {
            return v1.value0;
        });
    };
    if (v instanceof Success) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0.value0);
    };
    throw new Error("Failed pattern match at Validation.These (line 101, column 1 - line 101, column 61): " + [ v.constructor.name ]);
};
var hush$prime = function (v) {
    if (v instanceof $$Error) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof Success) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0);
    };
    throw new Error("Failed pattern match at Validation.These (line 83, column 1 - line 83, column 45): " + [ v.constructor.name ]);
};
var hush = function (v) {
    if (v instanceof $$Error) {
        return v.value1;
    };
    if (v instanceof Success) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0);
    };
    throw new Error("Failed pattern match at Validation.These (line 79, column 1 - line 79, column 44): " + [ v.constructor.name ]);
};
var functorErroring = new Data_Functor.Functor(function (f) {
    return function (v) {
        if (v instanceof Success) {
            return new Success(f(v.value0));
        };
        if (v instanceof $$Error) {
            return new $$Error(v.value0, Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value1));
        };
        throw new Error("Failed pattern match at Validation.These (line 37, column 1 - line 39, column 42): " + [ f.constructor.name, v.constructor.name ]);
    };
});
var foldableErroring = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Success) {
                return f(v.value0);
            };
            if (v instanceof $$Error) {
                return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f)(v.value1);
            };
            throw new Error("Failed pattern match at Validation.These (line 31, column 1 - line 35, column 27): " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (f) {
    return Data_Foldable.foldlDefault(foldableErroring)(f);
}, function (f) {
    return Data_Foldable.foldrDefault(foldableErroring)(f);
});

// | Throw an error, but let the computation continue with a known result anyways.
var erroringBut = function (e) {
    return function (a) {
        return new $$Error(Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray)(e), Control_Applicative.pure(Data_Maybe.applicativeMaybe)(a));
    };
};

// | Throw an error! No frills.
var erroring = (function () {
    var $126 = Data_Functor.flap(Data_Functor.functorFn)($$Error.create)(Control_Plus.empty(Data_Maybe.plusMaybe));
    var $127 = Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray);
    return function ($128) {
        return $126($127($128));
    };
})();
var eqErroring = function (dictEq) {
    return function (dictEq1) {
        return new Data_Eq.Eq(function (x) {
            return function (y) {
                if (x instanceof Success && y instanceof Success) {
                    return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                };
                if (x instanceof $$Error && y instanceof $$Error) {
                    return Data_Eq.eq(Data_Array_NonEmpty_Internal.eqNonEmptyArray(dictEq))(x.value0)(y.value0) && Data_Eq.eq(Data_Maybe.eqMaybe(dictEq1))(x.value1)(y.value1);
                };
                return false;
            };
        });
    };
};
var bifunctorErroring = new Data_Bifunctor.Bifunctor(function (v) {
    return function (g) {
        return function (v1) {
            if (v1 instanceof Success) {
                return new Success(g(v1.value0));
            };
            if (v1 instanceof $$Error) {
                return new $$Error(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(v)(v1.value0), Data_Functor.map(Data_Maybe.functorMaybe)(g)(v1.value1));
            };
            throw new Error("Failed pattern match at Validation.These (line 41, column 1 - line 43, column 54): " + [ v.constructor.name, g.constructor.name, v1.constructor.name ]);
        };
    };
});
var applyErroring = new Control_Apply.Apply(function () {
    return functorErroring;
}, function (v) {
    return function (v1) {
        if (v instanceof Success && v1 instanceof Success) {
            return new Success(v.value0(v1.value0));
        };
        if (v instanceof $$Error && v1 instanceof Success) {
            return new $$Error(v.value0, Data_Functor.flap(Data_Maybe.functorMaybe)(v.value1)(v1.value0));
        };
        if (v instanceof Success && v1 instanceof $$Error) {
            return new $$Error(v1.value0, Data_Functor.map(Data_Maybe.functorMaybe)(v.value0)(v1.value1));
        };
        if (v instanceof $$Error && v1 instanceof $$Error) {
            return new $$Error(Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(v.value0)(v1.value0), Control_Apply.apply(Data_Maybe.applyMaybe)(v.value1)(v1.value1));
        };
        throw new Error("Failed pattern match at Validation.These (line 45, column 1 - line 49, column 71): " + [ v.constructor.name, v1.constructor.name ]);
    };
});

// | The `Bind` instance can only take the error from the first computation if it
// | errors, so it is not compatible with the `Apply` instance, and thus does
// | not form a `Monad`. Moral of the story: Use `<*>` when possible!
var bindErroring = new Control_Bind.Bind(function () {
    return applyErroring;
}, function (v) {
    return function (v1) {
        if (v instanceof Success) {
            return v1(v.value0);
        };
        if (v instanceof $$Error && v.value1 instanceof Data_Maybe.Nothing) {
            return new $$Error(v.value0, Data_Maybe.Nothing.value);
        };
        if (v instanceof $$Error && v.value1 instanceof Data_Maybe.Just) {
            var v2 = v1(v.value1.value0);
            if (v2 instanceof Success) {
                return new $$Error(v.value0, new Data_Maybe.Just(v2.value0));
            };
            if (v2 instanceof $$Error) {
                return new $$Error(Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(v.value0)(v2.value0), v2.value1);
            };
            throw new Error("Failed pattern match at Validation.These (line 60, column 32 - line 62, column 43): " + [ v2.constructor.name ]);
        };
        throw new Error("Failed pattern match at Validation.These (line 57, column 1 - line 62, column 43): " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var applicativeErroring = new Control_Applicative.Applicative(function () {
    return applyErroring;
}, Success.create);

//------------------------------------------------------------------------------
// | Return the value inside the `Maybe` or throw the provide error.
var note = function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(applicativeErroring)(v1.value0);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return erroring(v);
        };
        throw new Error("Failed pattern match at Validation.These (line 71, column 1 - line 71, column 49): " + [ v.constructor.name, v1.constructor.name ]);
    };
};

// | Throw an error if the result is `Nothing`.
var onFailure = function (e) {
    return function (c) {
        return Control_Bind.bind(bindErroring)(c)(note(e));
    };
};
module.exports = {
    Success: Success,
    "Error": $$Error,
    suggest: suggest,
    note: note,
    onFailure: onFailure,
    hush: hush,
    "hush'": hush$prime,
    erroring: erroring,
    erroringBut: erroringBut,
    liftW: liftW,
    hushW: hushW,
    "hushW'": hushW$prime,
    liftCL: liftCL,
    liftCR: liftCR,
    eqErroring: eqErroring,
    showErroring: showErroring,
    foldableErroring: foldableErroring,
    functorErroring: functorErroring,
    bifunctorErroring: bifunctorErroring,
    applyErroring: applyErroring,
    applicativeErroring: applicativeErroring,
    bindErroring: bindErroring
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Bind/index.js":23,"../Control.Plus/index.js":65,"../Data.Array.NonEmpty.Internal/index.js":85,"../Data.Bifunctor/index.js":98,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Functor.Compose/index.js":134,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Monoid/index.js":195,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.Tuple/index.js":251}],395:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var paste = "paste";
var cut = "cut";
var copy = "copy";
var clipboardchange = "clipboardchange";
module.exports = {
    clipboardchange: clipboardchange,
    copy: copy,
    cut: cut,
    paste: paste
};

},{}],396:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (doc) {
    return function () {
      return doc[name];
    };
  };
};

exports.url = getEffProp("URL");
exports.documentURI = getEffProp("documentURI");
exports.origin = getEffProp("origin");
exports.compatMode = getEffProp("compatMode");
exports.characterSet = getEffProp("characterSet");
exports.contentType = getEffProp("contentType");

exports._doctype = getEffProp("doctype");
exports._documentElement = getEffProp("documentElement");

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.createElement = function (localName) {
  return function (doc) {
    return function () {
      return doc.createElement(localName);
    };
  };
};

exports._createElementNS = function (ns) {
  return function (qualifiedName) {
    return function (doc) {
      return function () {
        return doc.createElementNS(ns, qualifiedName);
      };
    };
  };
};

exports.createDocumentFragment = function (doc) {
  return function () {
    return doc.createDocumentFragment();
  };
};

exports.createTextNode = function (data) {
  return function (doc) {
    return function () {
      return doc.createTextNode(data);
    };
  };
};

exports.createComment = function (data) {
  return function (doc) {
    return function () {
      return doc.createComment(data);
    };
  };
};

exports.createProcessingInstruction = function (target) {
  return function (data) {
    return function (doc) {
      return function () {
        return doc.createProcessingInstruction(target, data);
      };
    };
  };
};

exports.importNode = function (node) {
  return function (deep) {
    return function (doc) {
      return function () {
        return doc.importNode(node, deep);
      };
    };
  };
};

exports.adoptNode = function (node) {
  return function (doc) {
    return function () {
      return doc.adoptNode(node);
    };
  };
};

},{}],397:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var getElementsByTagNameNS = function ($0) {
    return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($0));
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Document");
var documentElement = (function () {
    var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($2) {
        return $1($foreign["_documentElement"]($2));
    };
})();
var doctype = (function () {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($4) {
        return $3($foreign["_doctype"]($4));
    };
})();
var createElementNS = function ($5) {
    return $foreign["_createElementNS"](Data_Nullable.toNullable($5));
};
module.exports = {
    fromNode: fromNode,
    fromParentNode: fromParentNode,
    fromNonElementParentNode: fromNonElementParentNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toParentNode: toParentNode,
    toNonElementParentNode: toNonElementParentNode,
    toEventTarget: toEventTarget,
    doctype: doctype,
    documentElement: documentElement,
    getElementsByTagNameNS: getElementsByTagNameNS,
    createElementNS: createElementNS,
    url: $foreign.url,
    documentURI: $foreign.documentURI,
    origin: $foreign.origin,
    compatMode: $foreign.compatMode,
    characterSet: $foreign.characterSet,
    contentType: $foreign.contentType,
    getElementsByTagName: $foreign.getElementsByTagName,
    getElementsByClassName: $foreign.getElementsByClassName,
    createElement: $foreign.createElement,
    createDocumentFragment: $foreign.createDocumentFragment,
    createTextNode: $foreign.createTextNode,
    createComment: $foreign.createComment,
    createProcessingInstruction: $foreign.createProcessingInstruction,
    importNode: $foreign.importNode,
    adoptNode: $foreign.adoptNode
};

},{"../Data.Functor/index.js":143,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.Internal.FFI/index.js":429,"./foreign.js":396}],398:[function(require,module,exports){
"use strict";

var getProp = function (name) {
  return function (doctype) {
    return doctype[name];
  };
};

exports._namespaceURI = getProp("namespaceURI");
exports._prefix = getProp("prefix");
exports.localName = getProp("localName");
exports.tagName = getProp("tagName");

exports.id = function (node) {
  return function () {
    return node.id;
  };
};

exports.setId = function (id) {
  return function (node) {
    return function () {
      node.id = id;
      return {};
    };
  };
};

exports.className = function (node) {
  return function () {
    return node.className;
  };
};

exports.setClassName = function (className) {
  return function (node) {
    return function () {
      node.className = className;
      return {};
    };
  };
};

exports.getElementsByTagName = function (localName) {
  return function (doc) {
    return function () {
      return doc.getElementsByTagName(localName);
    };
  };
};

exports._getElementsByTagNameNS = function (ns) {
  return function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagNameNS(ns, localName);
      };
    };
  };
};

exports.getElementsByClassName = function (classNames) {
  return function (doc) {
    return function () {
      return doc.getElementsByClassName(classNames);
    };
  };
};

exports.setAttribute = function (name) {
  return function (value) {
    return function (element) {
      return function () {
        element.setAttribute(name, value);
        return {};
      };
    };
  };
};

exports._getAttribute = function (name) {
  return function (element) {
    return function () {
      return element.getAttribute(name);
    };
  };
};

exports.hasAttribute = function(name) {
  return function (element) {
    return element.hasAttribute(name);
  };
};

exports.removeAttribute = function (name) {
  return function (element) {
    return function () {
      element.removeAttribute(name);
      return {};
    };
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.scrollTop = function (node) {
  return function () {
    return node.scrollTop;
  };
};

exports.setScrollTop = function (scrollTop) {
  return function (node) {
    return function () {
      node.scrollTop = scrollTop;
      return {};
    };
  };
};

exports.scrollLeft = function (node) {
  return function () {
    return node.scrollLeft;
  };
};

exports.setScrollLeft = function (scrollLeft) {
  return function (node) {
    return function () {
      node.scrollLeft = scrollLeft;
      return {};
    };
  };
};

exports.scrollWidth = function (el) {
  return function () {
    return el.scrollWidth;
  };
};

exports.scrollHeight = function (el) {
  return function () {
    return el.scrollHeight;
  };
};

exports.clientTop = function (el) {
  return function () {
    return el.clientTop;
  };
};

exports.clientLeft = function (el) {
  return function () {
    return el.clientLeft;
  };
};

exports.clientWidth = function (el) {
  return function () {
    return el.clientWidth;
  };
};

exports.clientHeight = function (el) {
  return function () {
    return el.clientHeight;
  };
};

},{}],399:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var prefix = function ($0) {
    return Data_Nullable.toMaybe($foreign["_prefix"]($0));
};
var namespaceURI = function ($1) {
    return Data_Nullable.toMaybe($foreign["_namespaceURI"]($1));
};
var getElementsByTagNameNS = function ($2) {
    return $foreign["_getElementsByTagNameNS"](Data_Nullable.toNullable($2));
};
var getAttribute = function (attr) {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $4 = $foreign["_getAttribute"](attr);
    return function ($5) {
        return $3($4($5));
    };
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
module.exports = {
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    namespaceURI: namespaceURI,
    prefix: prefix,
    getElementsByTagNameNS: getElementsByTagNameNS,
    getAttribute: getAttribute,
    localName: $foreign.localName,
    tagName: $foreign.tagName,
    id: $foreign.id,
    setId: $foreign.setId,
    className: $foreign.className,
    setClassName: $foreign.setClassName,
    getElementsByTagName: $foreign.getElementsByTagName,
    getElementsByClassName: $foreign.getElementsByClassName,
    setAttribute: $foreign.setAttribute,
    hasAttribute: $foreign.hasAttribute,
    removeAttribute: $foreign.removeAttribute,
    scrollTop: $foreign.scrollTop,
    setScrollTop: $foreign.setScrollTop,
    scrollLeft: $foreign.scrollLeft,
    setScrollLeft: $foreign.setScrollLeft,
    scrollWidth: $foreign.scrollWidth,
    scrollHeight: $foreign.scrollHeight,
    clientTop: $foreign.clientTop,
    clientLeft: $foreign.clientLeft,
    clientWidth: $foreign.clientWidth,
    clientHeight: $foreign.clientHeight
};

},{"../Data.Functor/index.js":143,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.Internal.FFI/index.js":429,"./foreign.js":398}],400:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.nodeTypeIndex = function (node) {
  return node.nodeType;
};

exports.nodeName = function (node) {
  return node.nodeName;
};

exports.baseURI = getEffProp("baseURI");

exports._ownerDocument = getEffProp("ownerDocument");

exports._parentNode = getEffProp("parentNode");

exports._parentElement = getEffProp("parentElement");

exports.hasChildNodes = function (node) {
  return function () {
    return node.hasChildNodes();
  };
};

exports.childNodes = getEffProp("childNodes");

exports._firstChild = getEffProp("firstChild");

exports._lastChild = getEffProp("lastChild");

exports._previousSibling = getEffProp("previousSibling");

exports._nextSibling = getEffProp("nextSibling");

exports._nodeValue = getEffProp("nodeValue");

exports.setNodeValue = function (value) {
  return function (node) {
    return function () {
      node.nodeValue = value;
      return {};
    };
  };
};

exports.textContent = getEffProp("textContent");

exports.setTextContent = function (value) {
  return function (node) {
    return function () {
      node.textContent = value;
      return {};
    };
  };
};

exports.normalize = function (node) {
  return function () {
    node.normalize();
    return {};
  };
};

exports.clone = function (node) {
  return function () {
    return node.cloneNode(false);
  };
};

exports.deepClone = function (node) {
  return function () {
    return node.cloneNode(true);
  };
};

exports.isEqualNode = function (node1) {
  return function (node2) {
    return function () {
      return node1.isEqualNode(node2);
    };
  };
};

exports.compareDocumentPositionBits = function (node1) {
  return function (node2) {
    return function () {
      return node1.compareDocumentPosition(node2);
    };
  };
};

exports.contains = function (node1) {
  return function (node2) {
    return function () {
      return node1.contains(node2);
    };
  };
};

exports._lookupPrefix = function (prefix) {
  return function (node) {
    return function () {
      return node.lookupPrefix(prefix);
    };
  };
};

exports._lookupNamespaceURI = function (ns) {
  return function (node) {
    return function () {
      return node.lookupNamespaceURI(ns);
    };
  };
};

exports.isDefaultNamespace = function (ns) {
  return function (node) {
    return function () {
      return node.isDefaultNamespace(ns);
    };
  };
};

exports.insertBefore = function (node1) {
  return function (node2) {
    return function (parent) {
      return function () {
        return parent.insertBefore(node1, node2);
      };
    };
  };
};

exports.appendChild = function (node) {
  return function (parent) {
    return function () {
      return parent.appendChild(node);
    };
  };
};

exports.replaceChild = function (newChild) {
  return function (oldChild) {
    return function (parent) {
      return function () {
        return parent.replaceChild(newChild, oldChild);
      };
    };
  };
};

exports.removeChild = function (node) {
  return function (parent) {
    return function () {
      return parent.removeChild(node);
    };
  };
};

},{}],401:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_DOM_NodeType = require("../Web.DOM.NodeType/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var previousSibling = (function () {
    var $1 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($2) {
        return $1($foreign["_previousSibling"]($2));
    };
})();
var parentNode = (function () {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($4) {
        return $3($foreign["_parentNode"]($4));
    };
})();
var parentElement = (function () {
    var $5 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($6) {
        return $5($foreign["_parentElement"]($6));
    };
})();
var ownerDocument = (function () {
    var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($8) {
        return $7($foreign["_ownerDocument"]($8));
    };
})();
var nodeValue = (function () {
    var $9 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($10) {
        return $9($foreign["_nodeValue"]($10));
    };
})();
var nodeType = function (dictPartial) {
    var $11 = Data_Maybe.fromJust(dictPartial);
    var $12 = Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType);
    return function ($13) {
        return $11($12($foreign.nodeTypeIndex($13)));
    };
};
var nextSibling = (function () {
    var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($15) {
        return $14($foreign["_nextSibling"]($15));
    };
})();
var lookupPrefix = function (p) {
    var $16 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $17 = $foreign["_lookupPrefix"](p);
    return function ($18) {
        return $16($17($18));
    };
};
var lookupNamespaceURI = function (ns) {
    var $19 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $20 = $foreign["_lookupNamespaceURI"](ns);
    return function ($21) {
        return $19($20($21));
    };
};
var lastChild = (function () {
    var $22 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($23) {
        return $22($foreign["_lastChild"]($23));
    };
})();
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Node");
var firstChild = (function () {
    var $24 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($25) {
        return $24($foreign["_firstChild"]($25));
    };
})();
module.exports = {
    fromEventTarget: fromEventTarget,
    toEventTarget: toEventTarget,
    nodeType: nodeType,
    ownerDocument: ownerDocument,
    parentNode: parentNode,
    parentElement: parentElement,
    firstChild: firstChild,
    lastChild: lastChild,
    previousSibling: previousSibling,
    nextSibling: nextSibling,
    nodeValue: nodeValue,
    lookupPrefix: lookupPrefix,
    lookupNamespaceURI: lookupNamespaceURI,
    nodeTypeIndex: $foreign.nodeTypeIndex,
    nodeName: $foreign.nodeName,
    baseURI: $foreign.baseURI,
    hasChildNodes: $foreign.hasChildNodes,
    childNodes: $foreign.childNodes,
    setNodeValue: $foreign.setNodeValue,
    textContent: $foreign.textContent,
    setTextContent: $foreign.setTextContent,
    normalize: $foreign.normalize,
    clone: $foreign.clone,
    deepClone: $foreign.deepClone,
    isEqualNode: $foreign.isEqualNode,
    compareDocumentPositionBits: $foreign.compareDocumentPositionBits,
    contains: $foreign.contains,
    isDefaultNamespace: $foreign.isDefaultNamespace,
    insertBefore: $foreign.insertBefore,
    appendChild: $foreign.appendChild,
    replaceChild: $foreign.replaceChild,
    removeChild: $foreign.removeChild
};

},{"../Data.Enum/index.js":121,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.DOM.NodeType/index.js":402,"../Web.Internal.FFI/index.js":429,"./foreign.js":400}],402:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var ElementNode = (function () {
    function ElementNode() {

    };
    ElementNode.value = new ElementNode();
    return ElementNode;
})();
var AttributeNode = (function () {
    function AttributeNode() {

    };
    AttributeNode.value = new AttributeNode();
    return AttributeNode;
})();
var TextNode = (function () {
    function TextNode() {

    };
    TextNode.value = new TextNode();
    return TextNode;
})();
var CDATASectionNode = (function () {
    function CDATASectionNode() {

    };
    CDATASectionNode.value = new CDATASectionNode();
    return CDATASectionNode;
})();
var EntityReferenceNode = (function () {
    function EntityReferenceNode() {

    };
    EntityReferenceNode.value = new EntityReferenceNode();
    return EntityReferenceNode;
})();
var EntityNode = (function () {
    function EntityNode() {

    };
    EntityNode.value = new EntityNode();
    return EntityNode;
})();
var ProcessingInstructionNode = (function () {
    function ProcessingInstructionNode() {

    };
    ProcessingInstructionNode.value = new ProcessingInstructionNode();
    return ProcessingInstructionNode;
})();
var CommentNode = (function () {
    function CommentNode() {

    };
    CommentNode.value = new CommentNode();
    return CommentNode;
})();
var DocumentNode = (function () {
    function DocumentNode() {

    };
    DocumentNode.value = new DocumentNode();
    return DocumentNode;
})();
var DocumentTypeNode = (function () {
    function DocumentTypeNode() {

    };
    DocumentTypeNode.value = new DocumentTypeNode();
    return DocumentTypeNode;
})();
var DocumentFragmentNode = (function () {
    function DocumentFragmentNode() {

    };
    DocumentFragmentNode.value = new DocumentFragmentNode();
    return DocumentFragmentNode;
})();
var NotationNode = (function () {
    function NotationNode() {

    };
    NotationNode.value = new NotationNode();
    return NotationNode;
})();
var toEnumNodeType = function (v) {
    if (v === 1) {
        return new Data_Maybe.Just(ElementNode.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AttributeNode.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(TextNode.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(CDATASectionNode.value);
    };
    if (v === 5) {
        return new Data_Maybe.Just(EntityReferenceNode.value);
    };
    if (v === 6) {
        return new Data_Maybe.Just(EntityNode.value);
    };
    if (v === 7) {
        return new Data_Maybe.Just(ProcessingInstructionNode.value);
    };
    if (v === 8) {
        return new Data_Maybe.Just(CommentNode.value);
    };
    if (v === 9) {
        return new Data_Maybe.Just(DocumentNode.value);
    };
    if (v === 10) {
        return new Data_Maybe.Just(DocumentTypeNode.value);
    };
    if (v === 11) {
        return new Data_Maybe.Just(DocumentFragmentNode.value);
    };
    if (v === 12) {
        return new Data_Maybe.Just(NotationNode.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumNodeType = function (v) {
    if (v instanceof ElementNode) {
        return 1;
    };
    if (v instanceof AttributeNode) {
        return 2;
    };
    if (v instanceof TextNode) {
        return 3;
    };
    if (v instanceof CDATASectionNode) {
        return 4;
    };
    if (v instanceof EntityReferenceNode) {
        return 5;
    };
    if (v instanceof EntityNode) {
        return 6;
    };
    if (v instanceof ProcessingInstructionNode) {
        return 7;
    };
    if (v instanceof CommentNode) {
        return 8;
    };
    if (v instanceof DocumentNode) {
        return 9;
    };
    if (v instanceof DocumentTypeNode) {
        return 10;
    };
    if (v instanceof DocumentFragmentNode) {
        return 11;
    };
    if (v instanceof NotationNode) {
        return 12;
    };
    throw new Error("Failed pattern match at Web.DOM.NodeType (line 54, column 1 - line 54, column 36): " + [ v.constructor.name ]);
};
var eqNodeType = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof ElementNode && y instanceof ElementNode) {
            return true;
        };
        if (x instanceof AttributeNode && y instanceof AttributeNode) {
            return true;
        };
        if (x instanceof TextNode && y instanceof TextNode) {
            return true;
        };
        if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
            return true;
        };
        if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
            return true;
        };
        if (x instanceof EntityNode && y instanceof EntityNode) {
            return true;
        };
        if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
            return true;
        };
        if (x instanceof CommentNode && y instanceof CommentNode) {
            return true;
        };
        if (x instanceof DocumentNode && y instanceof DocumentNode) {
            return true;
        };
        if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
            return true;
        };
        if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
            return true;
        };
        if (x instanceof NotationNode && y instanceof NotationNode) {
            return true;
        };
        return false;
    };
});
var ordNodeType = new Data_Ord.Ord(function () {
    return eqNodeType;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
    };
});
var enumNodeType = new Data_Enum.Enum(function () {
    return ordNodeType;
}, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
var boundedNodeType = new Data_Bounded.Bounded(function () {
    return ordNodeType;
}, ElementNode.value, NotationNode.value);
var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
    return boundedNodeType;
}, function () {
    return enumNodeType;
}, 12, fromEnumNodeType, toEnumNodeType);
module.exports = {
    ElementNode: ElementNode,
    AttributeNode: AttributeNode,
    TextNode: TextNode,
    CDATASectionNode: CDATASectionNode,
    EntityReferenceNode: EntityReferenceNode,
    EntityNode: EntityNode,
    ProcessingInstructionNode: ProcessingInstructionNode,
    CommentNode: CommentNode,
    DocumentNode: DocumentNode,
    DocumentTypeNode: DocumentTypeNode,
    DocumentFragmentNode: DocumentFragmentNode,
    NotationNode: NotationNode,
    eqNodeType: eqNodeType,
    ordNodeType: ordNodeType,
    boundedNodeType: boundedNodeType,
    enumNodeType: enumNodeType,
    boundedEnumNodeType: boundedEnumNodeType
};

},{"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205}],403:[function(require,module,exports){
"use strict";

exports._getElementById = function (id) {
  return function (node) {
    return function () {
      return node.getElementById(id);
    };
  };
};

},{}],404:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var getElementById = function (eid) {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $1 = $foreign["_getElementById"](eid);
    return function ($2) {
        return $0($1($2));
    };
};
module.exports = {
    getElementById: getElementById
};

},{"../Data.Functor/index.js":143,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"./foreign.js":403}],405:[function(require,module,exports){
"use strict";

var getEffProp = function (name) {
  return function (node) {
    return function () {
      return node[name];
    };
  };
};

exports.children = getEffProp("children");

exports._firstElementChild = getEffProp("firstElementChild");

exports._lastElementChild = getEffProp("lastElementChild");

exports.childElementCount = getEffProp("childElementCount");

exports._querySelector = function (selector) {
  return function (node) {
    return function () {
      return node.querySelector(selector);
    };
  };
};

exports.querySelectorAll = function (selector) {
  return function (node) {
    return function () {
      return node.querySelectorAll(selector);
    };
  };
};

},{}],406:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var QuerySelector = function (x) {
    return x;
};
var querySelector = function (qs) {
    var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    var $4 = $foreign["_querySelector"](qs);
    return function ($5) {
        return $3($4($5));
    };
};
var ordQuerySelector = Data_Ord.ordString;
var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
    return n;
}, QuerySelector);
var lastElementChild = (function () {
    var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($7) {
        return $6($foreign["_lastElementChild"]($7));
    };
})();
var firstElementChild = (function () {
    var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($9) {
        return $8($foreign["_firstElementChild"]($9));
    };
})();
var eqQuerySelector = Data_Eq.eqString;
module.exports = {
    firstElementChild: firstElementChild,
    lastElementChild: lastElementChild,
    QuerySelector: QuerySelector,
    querySelector: querySelector,
    eqQuerySelector: eqQuerySelector,
    ordQuerySelector: ordQuerySelector,
    newtypeQuerySelector: newtypeQuerySelector,
    children: $foreign.children,
    childElementCount: $foreign.childElementCount,
    querySelectorAll: $foreign.querySelectorAll
};

},{"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Nullable/index.js":200,"../Data.Ord/index.js":205,"../Effect/index.js":309,"./foreign.js":405}],407:[function(require,module,exports){
"use strict";

exports.bubbles = function (e) {
  return e.bubbles;
};

exports.cancelable = function (e) {
  return e.cancelable;
};

exports._currentTarget = function (e) {
  return e.currentTarget;
};

exports.defaultPrevented = function (e) {
  return function() {
    return e.defaultPrevented;
  };
};

exports.eventPhaseIndex = function (e) {
  return e.eventPhase;
};

exports._target = function (e) {
  return e.target;
};

exports.timeStamp = function (e) {
  return e.timeStamp;
};

exports.type_ = function (e) {
  return e.type;
};

exports.preventDefault = function (e) {
  return function () {
    return e.preventDefault();
  };
};

exports.stopImmediatePropagation = function (e) {
  return function () {
    return e.stopImmediatePropagation();
  };
};

exports.stopPropagation = function (e) {
  return function () {
    return e.stopPropagation();
  };
};

},{}],408:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Web_Event_EventPhase = require("../Web.Event.EventPhase/index.js");
var EventType = function (x) {
    return x;
};
var target = function ($4) {
    return Data_Nullable.toMaybe($foreign["_target"]($4));
};
var ordEventType = Data_Ord.ordString;
var newtypeEventType = new Data_Newtype.Newtype(function (n) {
    return n;
}, EventType);
var eventPhase = function (dictPartial) {
    var $5 = Data_Maybe.fromJust(dictPartial);
    var $6 = Data_Enum.toEnum(Web_Event_EventPhase.boundedEnumEventPhase);
    return function ($7) {
        return $5($6($foreign.eventPhaseIndex($7)));
    };
};
var eqEventType = Data_Eq.eqString;
var currentTarget = function ($8) {
    return Data_Nullable.toMaybe($foreign["_currentTarget"]($8));
};
module.exports = {
    EventType: EventType,
    target: target,
    currentTarget: currentTarget,
    eventPhase: eventPhase,
    newtypeEventType: newtypeEventType,
    eqEventType: eqEventType,
    ordEventType: ordEventType,
    type_: $foreign.type_,
    stopPropagation: $foreign.stopPropagation,
    stopImmediatePropagation: $foreign.stopImmediatePropagation,
    bubbles: $foreign.bubbles,
    cancelable: $foreign.cancelable,
    preventDefault: $foreign.preventDefault,
    defaultPrevented: $foreign.defaultPrevented,
    timeStamp: $foreign.timeStamp
};

},{"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Newtype/index.js":197,"../Data.Nullable/index.js":200,"../Data.Ord/index.js":205,"../Web.Event.EventPhase/index.js":409,"./foreign.js":407}],409:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Capturing = (function () {
    function Capturing() {

    };
    Capturing.value = new Capturing();
    return Capturing;
})();
var AtTarget = (function () {
    function AtTarget() {

    };
    AtTarget.value = new AtTarget();
    return AtTarget;
})();
var Bubbling = (function () {
    function Bubbling() {

    };
    Bubbling.value = new Bubbling();
    return Bubbling;
})();
var toEnumEventPhase = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(None.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Capturing.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AtTarget.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Bubbling.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumEventPhase = function (v) {
    if (v instanceof None) {
        return 0;
    };
    if (v instanceof Capturing) {
        return 1;
    };
    if (v instanceof AtTarget) {
        return 2;
    };
    if (v instanceof Bubbling) {
        return 3;
    };
    throw new Error("Failed pattern match at Web.Event.EventPhase (line 40, column 3 - line 44, column 18): " + [ v.constructor.name ]);
};
var eqEventPhase = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof None && y instanceof None) {
            return true;
        };
        if (x instanceof Capturing && y instanceof Capturing) {
            return true;
        };
        if (x instanceof AtTarget && y instanceof AtTarget) {
            return true;
        };
        if (x instanceof Bubbling && y instanceof Bubbling) {
            return true;
        };
        return false;
    };
});
var ordEventPhase = new Data_Ord.Ord(function () {
    return eqEventPhase;
}, function (x) {
    return function (y) {
        if (x instanceof None && y instanceof None) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof None) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof None) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Capturing && y instanceof Capturing) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Capturing) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Capturing) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof AtTarget && y instanceof AtTarget) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof AtTarget) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AtTarget) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Bubbling && y instanceof Bubbling) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.Event.EventPhase (line 14, column 1 - line 14, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var enumEventPhase = new Data_Enum.Enum(function () {
    return ordEventPhase;
}, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
var boundedEventPhase = new Data_Bounded.Bounded(function () {
    return ordEventPhase;
}, None.value, Bubbling.value);
var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
    return boundedEventPhase;
}, function () {
    return enumEventPhase;
}, 4, fromEnumEventPhase, toEnumEventPhase);
module.exports = {
    None: None,
    Capturing: Capturing,
    AtTarget: AtTarget,
    Bubbling: Bubbling,
    toEnumEventPhase: toEnumEventPhase,
    fromEnumEventPhase: fromEnumEventPhase,
    eqEventPhase: eqEventPhase,
    ordEventPhase: ordEventPhase,
    boundedEventPhase: boundedEventPhase,
    enumEventPhase: enumEventPhase,
    boundedEnumEventPhase: boundedEnumEventPhase
};

},{"../Data.Bounded/index.js":103,"../Data.Enum/index.js":121,"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206}],410:[function(require,module,exports){
"use strict";

exports.eventListener = function (fn) {
  return function () {
    return function (event) {
      return fn(event)();
    };
  };
};

exports.addEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.removeEventListener = function (type) {
  return function (listener) {
    return function (useCapture) {
      return function (target) {
        return function () {
          return target.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
};

exports.dispatchEvent = function (event) {
  return function (target) {
    return function () {
      return target.dispatchEvent(event);
    };
  };
};

},{}],411:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    eventListener: $foreign.eventListener,
    addEventListener: $foreign.addEventListener,
    removeEventListener: $foreign.removeEventListener,
    dispatchEvent: $foreign.dispatchEvent
};

},{"./foreign.js":410}],412:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var drop = "drop";
var dragstart = "dragstart";
var dragover = "dragover";
var dragleave = "dragleave";
var dragexit = "dragexit";
var dragenter = "dragenter";
var dragend = "dragend";
var drag = "drag";
module.exports = {
    dragstart: dragstart,
    drag: drag,
    dragenter: dragenter,
    dragexit: dragexit,
    dragleave: dragleave,
    dragover: dragover,
    drop: drop,
    dragend: dragend
};

},{}],413:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var unload = "unload";
var toggle = "toggle";
var submit = "submit";
var storage = "storage";
var select = "select";
var reset = "reset";
var readystatechange = "readystatechange";
var progress = "progress";
var paste = "paste";
var online = "online";
var offline = "offline";
var message = "message";
var loadstart = "loadstart";
var loadend = "loadend";
var load = "load";
var languagechange = "languagechange";
var invalid = "invalid";
var input = "input";
var focus = "focus";
var error = "error";
var domcontentloaded = "DOMContentLoaded";
var cut = "cut";
var copy = "copy";
var close = "close";
var click = "click";
var change = "change";
var cancel = "cancel";
var blur = "blur";
var beforescriptexecute = "beforescriptexecute";
var beforeprint = "beforeprint";
var afterscriptexecute = "afterscriptexecute";
var afterprint = "afterprint";
var abort = "abort";
module.exports = {
    abort: abort,
    afterprint: afterprint,
    afterscriptexecute: afterscriptexecute,
    beforeprint: beforeprint,
    beforescriptexecute: beforescriptexecute,
    blur: blur,
    cancel: cancel,
    change: change,
    click: click,
    close: close,
    copy: copy,
    cut: cut,
    domcontentloaded: domcontentloaded,
    error: error,
    focus: focus,
    input: input,
    invalid: invalid,
    languagechange: languagechange,
    load: load,
    loadend: loadend,
    loadstart: loadstart,
    message: message,
    offline: offline,
    online: online,
    paste: paste,
    progress: progress,
    readystatechange: readystatechange,
    reset: reset,
    select: select,
    storage: storage,
    submit: submit,
    toggle: toggle,
    unload: unload
};

},{}],414:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Loading = (function () {
    function Loading() {

    };
    Loading.value = new Loading();
    return Loading;
})();
var Interactive = (function () {
    function Interactive() {

    };
    Interactive.value = new Interactive();
    return Interactive;
})();
var Complete = (function () {
    function Complete() {

    };
    Complete.value = new Complete();
    return Complete;
})();
var showReadyState = new Data_Show.Show(function (v) {
    if (v instanceof Loading) {
        return "Loading";
    };
    if (v instanceof Interactive) {
        return "Interactive";
    };
    if (v instanceof Complete) {
        return "Complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [ v.constructor.name ]);
});
var print = function (v) {
    if (v instanceof Loading) {
        return "loading";
    };
    if (v instanceof Interactive) {
        return "interactive";
    };
    if (v instanceof Complete) {
        return "complete";
    };
    throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [ v.constructor.name ]);
};
var parse = function (v) {
    if (v === "loading") {
        return new Data_Maybe.Just(Loading.value);
    };
    if (v === "interactive") {
        return new Data_Maybe.Just(Interactive.value);
    };
    if (v === "complete") {
        return new Data_Maybe.Just(Complete.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqReadyState = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return true;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return true;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Data_Ord.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        if (x instanceof Loading && y instanceof Loading) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Loading) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Loading) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Interactive && y instanceof Interactive) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Interactive) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Interactive) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Complete && y instanceof Complete) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Loading: Loading,
    Interactive: Interactive,
    Complete: Complete,
    print: print,
    parse: parse,
    eqReadyState: eqReadyState,
    ordReadyState: ordReadyState,
    showReadyState: showReadyState
};

},{"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226}],415:[function(require,module,exports){
"use strict";

exports._body = function (doc) {
  return function () {
    return doc.body;
  };
};

exports._readyState = function (doc) {
  return function () {
    return doc.readyState;
  };
};

exports._activeElement = function (doc) {
  return function () {
    return doc.activeElement;
  };
};

exports._currentScript = function (doc) {
  return function () {
    return doc.currentScript;
  };
};

exports.referrer = function (doc) {
  return function () {
    return doc.referrer;
  };
};

exports.title = function (doc) {
  return function () {
    return doc.title;
  };
};

exports.setTitle = function (title) {
  return function (doc) {
    return function () {
      doc.title = title;
      return {};
    };
  };
};
},{}],416:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_HTMLDocument_ReadyState = require("../Web.HTML.HTMLDocument.ReadyState/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toDocument = Unsafe_Coerce.unsafeCoerce;
var readyState = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)((function () {
        var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
        return function ($3) {
            return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
        };
    })());
    return function ($1) {
        return $0($foreign["_readyState"]($1));
    };
})();
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
var currentScript = (function () {
    var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($5) {
        return $4($foreign["_currentScript"]($5));
    };
})();
var body = (function () {
    var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($7) {
        return $6($foreign["_body"]($7));
    };
})();
var activeElement = (function () {
    var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($9) {
        return $8($foreign["_activeElement"]($9));
    };
})();
module.exports = {
    fromDocument: fromDocument,
    fromNode: fromNode,
    fromParentNode: fromParentNode,
    fromNonElementParentNode: fromNonElementParentNode,
    fromEventTarget: fromEventTarget,
    toDocument: toDocument,
    toNode: toNode,
    toParentNode: toParentNode,
    toNonElementParentNode: toNonElementParentNode,
    toEventTarget: toEventTarget,
    body: body,
    readyState: readyState,
    activeElement: activeElement,
    currentScript: currentScript,
    referrer: $foreign.referrer,
    title: $foreign.title,
    setTitle: $foreign.setTitle
};

},{"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.HTML.HTMLDocument.ReadyState/index.js":414,"../Web.Internal.FFI/index.js":429,"./foreign.js":415}],417:[function(require,module,exports){
"use strict";

exports._read = function (nothing, just, value) {
  var tag = Object.prototype.toString.call(value);
  if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
    return just(value);
  } else {
    return nothing;
  }
};

// ----------------------------------------------------------------------------

exports.title = function (elt) {
  return function () {
    return elt.title;
  };
};

exports.setTitle = function (title) {
  return function (elt) {
    return function () {
      elt.title = title;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.lang = function (elt) {
  return function () {
    return elt.lang;
  };
};

exports.setLang = function (lang) {
  return function (elt) {
    return function () {
      elt.lang = lang;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.dir = function (elt) {
  return function () {
    return elt.dir;
  };
};

exports.setDir = function (dir) {
  return function (elt) {
    return function () {
      elt.dir = dir;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.className = function (elt) {
  return function () {
    return elt.className;
  };
};

exports.setClassName = function (className) {
  return function (elt) {
    return function () {
      elt.className = className;
      return {};
    };
  };
};

exports.classList = function (element) {
  return function () {
    return element.classList;
  };
};

// ----------------------------------------------------------------------------

exports.hidden = function (elt) {
  return function () {
    return elt.hidden;
  };
};

exports.setHidden = function (hidden) {
  return function (elt) {
    return function () {
      elt.hidden = hidden;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.tabIndex = function (elt) {
  return function () {
    return elt.tabIndex;
  };
};

exports.setTabIndex = function (tabIndex) {
  return function (elt) {
    return function () {
      elt.tabIndex = tabIndex;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.draggable = function (elt) {
  return function () {
    return elt.draggable;
  };
};

exports.setDraggable = function (draggable) {
  return function (elt) {
    return function () {
      elt.draggable = draggable;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.contentEditable = function (elt) {
  return function () {
    return elt.contentEditable;
  };
};

exports.setContentEditable = function (contentEditable) {
  return function (elt) {
    return function () {
      elt.contentEditable = contentEditable;
      return {};
    };
  };
};

exports.isContentEditable = function (elt) {
  return function () {
    return elt.isContentEditable;
  };
};

// ----------------------------------------------------------------------------

exports.spellcheck = function (elt) {
  return function () {
    return elt.spellcheck;
  };
};

exports.setSpellcheck = function (spellcheck) {
  return function (elt) {
    return function () {
      elt.spellcheck = spellcheck;
      return {};
    };
  };
};

// ----------------------------------------------------------------------------

exports.click = function (elt) {
  return function () {
    return elt.click();
  };
};

exports.focus = function (elt) {
  return function () {
    return elt.focus();
  };
};

exports.blur = function (elt) {
  return function () {
    return elt.blur();
  };
};

// - CSSOM ---------------------------------------------------------------------

exports.getBoundingClientRect = function (el) {
  return function () {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top,
      right: rect.right,
      bottom: rect.bottom,
      left: rect.left,
      width: rect.width,
      height: rect.height
    };
  };
};

exports._offsetParent = function (el) {
  return function () {
    return el.offsetParent;
  };
};

exports.offsetTop = function (el) {
  return function () {
    return el.offsetTop;
  };
};

exports.offsetLeft = function (el) {
  return function () {
    return el.offsetLeft;
  };
};

exports.offsetWidth = function (el) {
  return function () {
    return el.offsetWidth;
  };
};

exports.offsetHeight = function (el) {
  return function () {
    return el.offsetHeight;
  };
};

},{}],418:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var offsetParent = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($1) {
        return $0($foreign["_offsetParent"]($1));
    };
})();
var fromParentNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNonDocumentTypeChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromEventTarget = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromElement = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
var fromChildNode = function (x) {
    return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
};
module.exports = {
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    offsetParent: offsetParent,
    title: $foreign.title,
    setTitle: $foreign.setTitle,
    lang: $foreign.lang,
    setLang: $foreign.setLang,
    dir: $foreign.dir,
    setDir: $foreign.setDir,
    className: $foreign.className,
    setClassName: $foreign.setClassName,
    classList: $foreign.classList,
    hidden: $foreign.hidden,
    setHidden: $foreign.setHidden,
    tabIndex: $foreign.tabIndex,
    setTabIndex: $foreign.setTabIndex,
    draggable: $foreign.draggable,
    setDraggable: $foreign.setDraggable,
    contentEditable: $foreign.contentEditable,
    setContentEditable: $foreign.setContentEditable,
    isContentEditable: $foreign.isContentEditable,
    spellcheck: $foreign.spellcheck,
    setSpellcheck: $foreign.setSpellcheck,
    click: $foreign.click,
    focus: $foreign.focus,
    blur: $foreign.blur,
    getBoundingClientRect: $foreign.getBoundingClientRect,
    offsetTop: $foreign.offsetTop,
    offsetLeft: $foreign.offsetLeft,
    offsetWidth: $foreign.offsetWidth,
    offsetHeight: $foreign.offsetHeight
};

},{"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"./foreign.js":417}],419:[function(require,module,exports){
"use strict";

exports.accept = function (input) {
  return function () {
    return input.accept;
  };
};

exports.setAccept = function (accept) {
  return function (input) {
    return function () {
      input.accept = accept;
    };
  };
};

// ----------------------------------------------------------------------------

exports.alt = function (input) {
  return function () {
    return input.alt;
  };
};

exports.setAlt = function (alt) {
  return function (input) {
    return function () {
      input.alt = alt;
    };
  };
};

// ----------------------------------------------------------------------------

exports.autocomplete = function (input) {
  return function () {
    return input.autocomplete;
  };
};

exports.setAutocomplete = function (autocomplete) {
  return function (input) {
    return function () {
      input.autocomplete = autocomplete;
    };
  };
};

// ----------------------------------------------------------------------------

exports.autofocus = function (input) {
  return function () {
    return input.autofocus;
  };
};

exports.setAutofocus = function (autofocus) {
  return function (input) {
    return function () {
      input.autofocus = autofocus;
    };
  };
};

// ----------------------------------------------------------------------------

exports.defaultChecked = function (input) {
  return function () {
    return input.defaultChecked;
  };
};

exports.setDefaultChecked = function (defaultChecked) {
  return function (input) {
    return function () {
      input.defaultChecked = defaultChecked;
    };
  };
};

// ----------------------------------------------------------------------------

exports.checked = function (input) {
  return function () {
    return input.checked;
  };
};

exports.setChecked = function (checked) {
  return function (input) {
    return function () {
      input.checked = checked;
    };
  };
};

// ----------------------------------------------------------------------------

exports.dirName = function (input) {
  return function () {
    return input.dirName;
  };
};

exports.setDirName = function (dirName) {
  return function (input) {
    return function () {
      input.dirName = dirName;
    };
  };
};

// ----------------------------------------------------------------------------

exports.disabled = function (input) {
  return function () {
    return input.disabled;
  };
};

exports.setDisabled = function (disabled) {
  return function (input) {
    return function () {
      input.disabled = disabled;
    };
  };
};

// ----------------------------------------------------------------------------

exports._form = function (input) {
  return function () {
    return input.form;
  };
};

// ----------------------------------------------------------------------------

exports._files = function (input) {
  return function () {
    return input.files;
  };
};

// ----------------------------------------------------------------------------

exports.formAction = function (input) {
  return function () {
    return input.formAction;
  };
};

exports.setFormAction = function (formAction) {
  return function (input) {
    return function () {
      input.formAction = formAction;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formEnctype = function (input) {
  return function () {
    return input.formEnctype;
  };
};

exports.setFormEnctype = function (formEnctype) {
  return function (input) {
    return function () {
      input.formEnctype = formEnctype;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formMethod = function (input) {
  return function () {
    return input.formMethod;
  };
};

exports.setFormMethod = function (formMethod) {
  return function (input) {
    return function () {
      input.formMethod = formMethod;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formNoValidate = function (input) {
  return function () {
    return input.formNoValidate;
  };
};

exports.setFormNoValidate = function (formNoValidate) {
  return function (input) {
    return function () {
      input.formNoValidate = formNoValidate;
    };
  };
};

// ----------------------------------------------------------------------------

exports.formTarget = function (input) {
  return function () {
    return input.formTarget;
  };
};

exports.setFormTarget = function (formTarget) {
  return function (input) {
    return function () {
      input.formTarget = formTarget;
    };
  };
};

// ----------------------------------------------------------------------------

exports.height = function (input) {
  return function () {
    return input.height;
  };
};

exports.setHeight = function (height) {
  return function (input) {
    return function () {
      input.height = height;
    };
  };
};

// ----------------------------------------------------------------------------

exports.indeterminate = function (input) {
  return function () {
    return input.indeterminate;
  };
};

exports.setIndeterminate = function (indeterminate) {
  return function (input) {
    return function () {
      input.indeterminate = indeterminate;
    };
  };
};

// ----------------------------------------------------------------------------

exports._list = function (input) {
  return function () {
    return input.list;
  };
};

// ----------------------------------------------------------------------------

exports.max = function (input) {
  return function () {
    return input.max;
  };
};

exports.setMax = function (max) {
  return function (input) {
    return function () {
      input.max = max;
    };
  };
};

// ----------------------------------------------------------------------------

exports.maxLength = function (input) {
  return function () {
    return input.maxLength;
  };
};

exports.setMaxLength = function (maxLength) {
  return function (input) {
    return function () {
      input.maxLength = maxLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.min = function (input) {
  return function () {
    return input.min;
  };
};

exports.setMin = function (min) {
  return function (input) {
    return function () {
      input.min = min;
    };
  };
};

// ----------------------------------------------------------------------------

exports.minLength = function (input) {
  return function () {
    return input.minLength;
  };
};

exports.setMinLength = function (minLength) {
  return function (input) {
    return function () {
      input.minLength = minLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.multiple = function (input) {
  return function () {
    return input.multiple;
  };
};

exports.setMultiple = function (multiple) {
  return function (input) {
    return function () {
      input.multiple = multiple;
    };
  };
};

// ----------------------------------------------------------------------------

exports.name = function (input) {
  return function () {
    return input.name;
  };
};

exports.setName = function (name) {
  return function (input) {
    return function () {
      input.name = name;
    };
  };
};

// ----------------------------------------------------------------------------

exports.pattern = function (input) {
  return function () {
    return input.pattern;
  };
};

exports.setPattern = function (pattern) {
  return function (input) {
    return function () {
      input.pattern = pattern;
    };
  };
};

// ----------------------------------------------------------------------------

exports.placeholder = function (input) {
  return function () {
    return input.placeholder;
  };
};

exports.setPlaceholder = function (placeholder) {
  return function (input) {
    return function () {
      input.placeholder = placeholder;
    };
  };
};

// ----------------------------------------------------------------------------

exports.readOnly = function (input) {
  return function () {
    return input.readOnly;
  };
};

exports.setReadOnly = function (readOnly) {
  return function (input) {
    return function () {
      input.readOnly = readOnly;
    };
  };
};

// ----------------------------------------------------------------------------

exports.required = function (input) {
  return function () {
    return input.required;
  };
};

exports.setRequired = function (required) {
  return function (input) {
    return function () {
      input.required = required;
    };
  };
};

// ----------------------------------------------------------------------------

exports.size = function (input) {
  return function () {
    return input.size;
  };
};

exports.setSize = function (size) {
  return function (input) {
    return function () {
      input.size = size;
    };
  };
};

// ----------------------------------------------------------------------------

exports.src = function (input) {
  return function () {
    return input.src;
  };
};

exports.setSrc = function (src) {
  return function (input) {
    return function () {
      input.src = src;
    };
  };
};

// ----------------------------------------------------------------------------

exports.step = function (input) {
  return function () {
    return input.step;
  };
};

exports.setStep = function (step) {
  return function (input) {
    return function () {
      input.step = step;
    };
  };
};

// ----------------------------------------------------------------------------

exports.type_ = function (input) {
  return function () {
    return input.type;
  };
};

exports.setType = function (type) {
  return function (input) {
    return function () {
      input.type = type;
    };
  };
};

// ----------------------------------------------------------------------------

exports.defaultValue = function (input) {
  return function () {
    return input.defaultValue;
  };
};

exports.setDefaultValue = function (defaultValue) {
  return function (input) {
    return function () {
      input.defaultValue = defaultValue;
    };
  };
};

// ----------------------------------------------------------------------------

exports.value = function (input) {
  return function () {
    return input.value;
  };
};

exports.setValue = function (value) {
  return function (input) {
    return function () {
      input.value = value;
    };
  };
};

// ----------------------------------------------------------------------------

exports.valueAsDate = function (input) {
  return function () {
    return input.valueAsDate;
  };
};

exports.setValueAsDate = function (valueAsDate) {
  return function (input) {
    return function () {
      input.valueAsDate = valueAsDate;
    };
  };
};

// ----------------------------------------------------------------------------

exports.valueAsNumber = function (input) {
  return function () {
    return input.valueAsNumber;
  };
};

exports.setValueAsNumber = function (valueAsNumber) {
  return function (input) {
    return function () {
      input.valueAsNumber = valueAsNumber;
    };
  };
};

// ----------------------------------------------------------------------------

exports.width = function (input) {
  return function () {
    return input.width;
  };
};

exports.setWidth = function (width) {
  return function (input) {
    return function () {
      input.width = width;
    };
  };
};

// ----------------------------------------------------------------------------

exports["stepUp'"] = function (n) {
  return function (input) {
    return function () {
      input.stepUp(n);
    };
  };
};

// ----------------------------------------------------------------------------

exports["stepDown'"] = function (n) {
  return function (input) {
    return function () {
      input.stepDown(n);
    };
  };
};

// ----------------------------------------------------------------------------

exports.willValidate = function (input) {
  return function () {
    return input.willValidate;
  };
};

// ----------------------------------------------------------------------------

exports.validity = function (input) {
  return function () {
    return input.validity;
  };
};

// ----------------------------------------------------------------------------

exports.validationMessage = function (input) {
  return function () {
    return input.validationMessage;
  };
};

// ----------------------------------------------------------------------------

exports.checkValidity = function (input) {
  return function () {
    return input.checkValidity();
  };
};

// ----------------------------------------------------------------------------

exports.reportValidity = function (input) {
  return function () {
    return input.reportValidity();
  };
};

// ----------------------------------------------------------------------------

exports.setCustomValidity = function (value) {
  return function (input) {
    return function () {
      input.setCustomValidity(value);
    };
  };
};

// ----------------------------------------------------------------------------

exports.labels = function (input) {
  return function () {
    return input.labels;
  };
};

// ----------------------------------------------------------------------------

exports.select = function (input) {
  return function () {
    input.select();
  };
};

// ----------------------------------------------------------------------------

exports.selectionStart = function (input) {
  return function () {
    return input.selectionStart;
  };
};

exports.setSelectionStart = function (selectionStart) {
  return function (input) {
    return function () {
      input.selectionStart = selectionStart;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionEnd = function (input) {
  return function () {
    return input.selectionEnd;
  };
};

exports.setSelectionEnd = function (selectionEnd) {
  return function (input) {
    return function () {
      input.selectionEnd = selectionEnd;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionDirection = function (input) {
  return function () {
    return input.selectionDirection;
  };
};

exports.setSelectionDirection = function (selectionDirection) {
  return function (input) {
    return function () {
      input.selectionDirection = selectionDirection;
    };
  };
};

// ----------------------------------------------------------------------------

exports.setRangeText = function (replacement) {
  return function (input) {
    return function () {
      input.setRangeText(replacement);
    };
  };
};
exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
  textarea.setRangeText(replacement, start, end, selectionMode);
};

// ----------------------------------------------------------------------------

exports.setSelectionRange = function (start) {
  return function (end) {
    return function (direction) {
      return function (input) {
        return function () {
          input.setSelectionRange(start, end, direction, input);
        };
      };
    };
  };
};

},{}],420:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_SelectionMode = require("../Web.HTML.SelectionMode/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var stepUp = $foreign["stepUp'"](1);
var stepDown = $foreign["stepDown'"](1);
var setRangeText$prime = function (rpl) {
    return function (s) {
        return function (e) {
            return function (mode) {
                return function (area) {
                    return function () {
                        return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                    };
                };
            };
        };
    };
};
var list = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($1) {
        return $0($foreign["_list"]($1));
    };
})();
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
var form = (function () {
    var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($3) {
        return $2($foreign["_form"]($3));
    };
})();
var files = (function () {
    var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($5) {
        return $4($foreign["_files"]($5));
    };
})();
module.exports = {
    fromHTMLElement: fromHTMLElement,
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toHTMLElement: toHTMLElement,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    form: form,
    files: files,
    list: list,
    "setRangeText'": setRangeText$prime,
    accept: $foreign.accept,
    setAccept: $foreign.setAccept,
    alt: $foreign.alt,
    setAlt: $foreign.setAlt,
    autocomplete: $foreign.autocomplete,
    setAutocomplete: $foreign.setAutocomplete,
    autofocus: $foreign.autofocus,
    setAutofocus: $foreign.setAutofocus,
    defaultChecked: $foreign.defaultChecked,
    setDefaultChecked: $foreign.setDefaultChecked,
    checked: $foreign.checked,
    setChecked: $foreign.setChecked,
    dirName: $foreign.dirName,
    setDirName: $foreign.setDirName,
    disabled: $foreign.disabled,
    setDisabled: $foreign.setDisabled,
    formAction: $foreign.formAction,
    setFormAction: $foreign.setFormAction,
    formEnctype: $foreign.formEnctype,
    setFormEnctype: $foreign.setFormEnctype,
    formMethod: $foreign.formMethod,
    setFormMethod: $foreign.setFormMethod,
    formNoValidate: $foreign.formNoValidate,
    setFormNoValidate: $foreign.setFormNoValidate,
    formTarget: $foreign.formTarget,
    setFormTarget: $foreign.setFormTarget,
    height: $foreign.height,
    setHeight: $foreign.setHeight,
    indeterminate: $foreign.indeterminate,
    setIndeterminate: $foreign.setIndeterminate,
    max: $foreign.max,
    setMax: $foreign.setMax,
    maxLength: $foreign.maxLength,
    setMaxLength: $foreign.setMaxLength,
    min: $foreign.min,
    setMin: $foreign.setMin,
    minLength: $foreign.minLength,
    setMinLength: $foreign.setMinLength,
    multiple: $foreign.multiple,
    setMultiple: $foreign.setMultiple,
    name: $foreign.name,
    setName: $foreign.setName,
    pattern: $foreign.pattern,
    setPattern: $foreign.setPattern,
    placeholder: $foreign.placeholder,
    setPlaceholder: $foreign.setPlaceholder,
    readOnly: $foreign.readOnly,
    setReadOnly: $foreign.setReadOnly,
    required: $foreign.required,
    setRequired: $foreign.setRequired,
    size: $foreign.size,
    setSize: $foreign.setSize,
    src: $foreign.src,
    setSrc: $foreign.setSrc,
    step: $foreign.step,
    setStep: $foreign.setStep,
    type_: $foreign.type_,
    setType: $foreign.setType,
    defaultValue: $foreign.defaultValue,
    setDefaultValue: $foreign.setDefaultValue,
    value: $foreign.value,
    setValue: $foreign.setValue,
    valueAsDate: $foreign.valueAsDate,
    setValueAsDate: $foreign.setValueAsDate,
    valueAsNumber: $foreign.valueAsNumber,
    setValueAsNumber: $foreign.setValueAsNumber,
    width: $foreign.width,
    setWidth: $foreign.setWidth,
    "stepUp'": $foreign["stepUp'"],
    "stepDown'": $foreign["stepDown'"],
    willValidate: $foreign.willValidate,
    validity: $foreign.validity,
    validationMessage: $foreign.validationMessage,
    checkValidity: $foreign.checkValidity,
    reportValidity: $foreign.reportValidity,
    setCustomValidity: $foreign.setCustomValidity,
    labels: $foreign.labels,
    select: $foreign.select,
    selectionStart: $foreign.selectionStart,
    setSelectionStart: $foreign.setSelectionStart,
    selectionEnd: $foreign.selectionEnd,
    setSelectionEnd: $foreign.setSelectionEnd,
    selectionDirection: $foreign.selectionDirection,
    setSelectionDirection: $foreign.setSelectionDirection,
    setRangeText: $foreign.setRangeText,
    setSelectionRange: $foreign.setSelectionRange
};

},{"../Data.Functor/index.js":143,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.HTML.SelectionMode/index.js":423,"../Web.Internal.FFI/index.js":429,"./foreign.js":419}],421:[function(require,module,exports){
"use strict";

exports.autocomplete = function (textarea) {
  return function () {
    return textarea.autocomplete;
  };
};

exports.setAutocomplete = function (autocomplete) {
  return function (textarea) {
    return function () {
      textarea.autocomplete = autocomplete;
    };
  };
};

// ----------------------------------------------------------------------------

exports.autofocus = function (textarea) {
  return function () {
    return textarea.autofocus;
  };
};

exports.setAutofocus = function (autofocus) {
  return function (textarea) {
    return function () {
      textarea.autofocus = autofocus;
    };
  };
};

// ----------------------------------------------------------------------------

exports.cols = function (textarea) {
  return function () {
    return textarea.cols;
  };
};

exports.setCols = function (cols) {
  return function (textarea) {
    return function () {
      textarea.cols = cols;
    };
  };
};

// ----------------------------------------------------------------------------

exports.dirName = function (textarea) {
  return function () {
    return textarea.dirName;
  };
};

exports.setDirName = function (dirName) {
  return function (textarea) {
    return function () {
      textarea.dirName = dirName;
    };
  };
};

// ----------------------------------------------------------------------------

exports.disabled = function (textarea) {
  return function () {
    return textarea.disabled;
  };
};

exports.setDisabled = function (disabled) {
  return function (textarea) {
    return function () {
      textarea.disabled = disabled;
    };
  };
};

// ----------------------------------------------------------------------------

exports._form = function (textarea) {
  return function () {
    return textarea.form;
  };
};

// ----------------------------------------------------------------------------

exports.maxLength = function (textarea) {
  return function () {
    return textarea.maxLength;
  };
};

exports.setMaxLength = function (maxLength) {
  return function (textarea) {
    return function () {
      textarea.maxLength = maxLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.minLength = function (textarea) {
  return function () {
    return textarea.minLength;
  };
};

exports.setMinLength = function (minLength) {
  return function (textarea) {
    return function () {
      textarea.minLength = minLength;
    };
  };
};

// ----------------------------------------------------------------------------

exports.name = function (textarea) {
  return function () {
    return textarea.name;
  };
};

exports.setName = function (name) {
  return function (textarea) {
    return function () {
      textarea.name = name;
    };
  };
};

// ----------------------------------------------------------------------------

exports.placeholder = function (textarea) {
  return function () {
    return textarea.placeholder;
  };
};

exports.setPlaceholder = function (placeholder) {
  return function (textarea) {
    return function () {
      textarea.placeholder = placeholder;
    };
  };
};

// ----------------------------------------------------------------------------

exports.readOnly = function (textarea) {
  return function () {
    return textarea.readOnly;
  };
};

exports.setReadOnly = function (readOnly) {
  return function (textarea) {
    return function () {
      textarea.readOnly = readOnly;
    };
  };
};

// ----------------------------------------------------------------------------

exports.required = function (textarea) {
  return function () {
    return textarea.required;
  };
};

exports.setRequired = function (required) {
  return function (textarea) {
    return function () {
      textarea.required = required;
    };
  };
};

// ----------------------------------------------------------------------------

exports.rows = function (textarea) {
  return function () {
    return textarea.rows;
  };
};

exports.setRows = function (rows) {
  return function (textarea) {
    return function () {
      textarea.rows = rows;
    };
  };
};

// ----------------------------------------------------------------------------

exports.wrap = function (textarea) {
  return function () {
    return textarea.wrap;
  };
};

exports.setWrap = function (wrap) {
  return function (textarea) {
    return function () {
      textarea.wrap = wrap;
    };
  };
};

// ----------------------------------------------------------------------------

exports.type_ = function (textarea) {
  return function () {
    return textarea.type;
  };
};

// ----------------------------------------------------------------------------

exports.defaultValue = function (textarea) {
  return function () {
    return textarea.defaultValue;
  };
};

exports.setDefaultValue = function (defaultValue) {
  return function (textarea) {
    return function () {
      textarea.defaultValue = defaultValue;
    };
  };
};

// ----------------------------------------------------------------------------

exports.value = function (textarea) {
  return function () {
    return textarea.value;
  };
};

exports.setValue = function (value) {
  return function (textarea) {
    return function () {
      textarea.value = value;
    };
  };
};

// ----------------------------------------------------------------------------

exports.textLength = function (textarea) {
  return function () {
    return textarea.textLength;
  };
};

// ----------------------------------------------------------------------------

exports.willValidate = function (textarea) {
  return function () {
    return textarea.willValidate;
  };
};

// ----------------------------------------------------------------------------

exports.validity = function (textarea) {
  return function () {
    return textarea.validity;
  };
};

// ----------------------------------------------------------------------------

exports.validationMessage = function (textarea) {
  return function () {
    return textarea.validationMessage;
  };
};

// ----------------------------------------------------------------------------

exports.checkValidity = function (textarea) {
  return function () {
    return textarea.checkValidity();
  };
};

// ----------------------------------------------------------------------------

exports.reportValidity = function (textarea) {
  return function () {
    return textarea.reportValidity();
  };
};

// ----------------------------------------------------------------------------

exports.setCustomValidity = function (value) {
  return function (textarea) {
    return function () {
      textarea.setCustomValidity(value);
    };
  };
};

// ----------------------------------------------------------------------------

exports.labels = function (textarea) {
  return function () {
    return textarea.labels;
  };
};

// ----------------------------------------------------------------------------

exports.select = function (textarea) {
  return function () {
    textarea.select();
  };
};

// ----------------------------------------------------------------------------

exports.selectionStart = function (textarea) {
  return function () {
    return textarea.selectionStart;
  };
};

exports.setSelectionStart = function (selectionStart) {
  return function (textarea) {
    return function () {
      textarea.selectionStart = selectionStart;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionEnd = function (textarea) {
  return function () {
    return textarea.selectionEnd;
  };
};

exports.setSelectionEnd = function (selectionEnd) {
  return function (textarea) {
    return function () {
      textarea.selectionEnd = selectionEnd;
    };
  };
};

// ----------------------------------------------------------------------------

exports.selectionDirection = function (textarea) {
  return function () {
    return textarea.selectionDirection;
  };
};

exports.setSelectionDirection = function (selectionDirection) {
  return function (textarea) {
    return function () {
      textarea.selectionDirection = selectionDirection;
    };
  };
};

// ----------------------------------------------------------------------------

exports.setRangeText = function (replacement) {
  return function (textarea) {
    return function () {
      textarea.setRangeText(replacement);
    };
  };
};

exports._setRangeText = function (replacement, start, end, selectionMode, textarea) {
  textarea.setRangeText(replacement, start, end, selectionMode);
};

// ----------------------------------------------------------------------------

exports.setSelectionRange = function (start) {
  return function (end) {
    return function (direction) {
      return function (textarea) {
        return function () {
          textarea.setSelectionRange(start, end, direction);
        };
      };
    };
  };
};

},{}],422:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_HTML_SelectionMode = require("../Web.HTML.SelectionMode/index.js");
var Web_Internal_FFI = require("../Web.Internal.FFI/index.js");
var toParentNode = Unsafe_Coerce.unsafeCoerce;
var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
var toNode = Unsafe_Coerce.unsafeCoerce;
var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var toElement = Unsafe_Coerce.unsafeCoerce;
var toChildNode = Unsafe_Coerce.unsafeCoerce;
var setRangeText$prime = function (rpl) {
    return function (s) {
        return function (e) {
            return function (mode) {
                return function (area) {
                    return function () {
                        return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                    };
                };
            };
        };
    };
};
var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
var form = (function () {
    var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
    return function ($1) {
        return $0($foreign["_form"]($1));
    };
})();
module.exports = {
    fromHTMLElement: fromHTMLElement,
    fromElement: fromElement,
    fromNode: fromNode,
    fromChildNode: fromChildNode,
    fromNonDocumentTypeChildNode: fromNonDocumentTypeChildNode,
    fromParentNode: fromParentNode,
    fromEventTarget: fromEventTarget,
    toHTMLElement: toHTMLElement,
    toElement: toElement,
    toNode: toNode,
    toChildNode: toChildNode,
    toNonDocumentTypeChildNode: toNonDocumentTypeChildNode,
    toParentNode: toParentNode,
    toEventTarget: toEventTarget,
    form: form,
    "setRangeText'": setRangeText$prime,
    autocomplete: $foreign.autocomplete,
    setAutocomplete: $foreign.setAutocomplete,
    autofocus: $foreign.autofocus,
    setAutofocus: $foreign.setAutofocus,
    cols: $foreign.cols,
    setCols: $foreign.setCols,
    dirName: $foreign.dirName,
    setDirName: $foreign.setDirName,
    disabled: $foreign.disabled,
    setDisabled: $foreign.setDisabled,
    maxLength: $foreign.maxLength,
    setMaxLength: $foreign.setMaxLength,
    minLength: $foreign.minLength,
    setMinLength: $foreign.setMinLength,
    name: $foreign.name,
    setName: $foreign.setName,
    placeholder: $foreign.placeholder,
    setPlaceholder: $foreign.setPlaceholder,
    readOnly: $foreign.readOnly,
    setReadOnly: $foreign.setReadOnly,
    required: $foreign.required,
    setRequired: $foreign.setRequired,
    rows: $foreign.rows,
    setRows: $foreign.setRows,
    wrap: $foreign.wrap,
    setWrap: $foreign.setWrap,
    type_: $foreign.type_,
    defaultValue: $foreign.defaultValue,
    setDefaultValue: $foreign.setDefaultValue,
    value: $foreign.value,
    setValue: $foreign.setValue,
    textLength: $foreign.textLength,
    willValidate: $foreign.willValidate,
    validity: $foreign.validity,
    validationMessage: $foreign.validationMessage,
    checkValidity: $foreign.checkValidity,
    reportValidity: $foreign.reportValidity,
    setCustomValidity: $foreign.setCustomValidity,
    labels: $foreign.labels,
    select: $foreign.select,
    selectionStart: $foreign.selectionStart,
    setSelectionStart: $foreign.setSelectionStart,
    selectionEnd: $foreign.selectionEnd,
    setSelectionEnd: $foreign.setSelectionEnd,
    selectionDirection: $foreign.selectionDirection,
    setSelectionDirection: $foreign.setSelectionDirection,
    setRangeText: $foreign.setRangeText,
    setSelectionRange: $foreign.setSelectionRange
};

},{"../Data.Functor/index.js":143,"../Data.Nullable/index.js":200,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"../Web.HTML.SelectionMode/index.js":423,"../Web.Internal.FFI/index.js":429,"./foreign.js":421}],423:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Preserve = (function () {
    function Preserve() {

    };
    Preserve.value = new Preserve();
    return Preserve;
})();
var Select = (function () {
    function Select() {

    };
    Select.value = new Select();
    return Select;
})();
var Start = (function () {
    function Start() {

    };
    Start.value = new Start();
    return Start;
})();
var End = (function () {
    function End() {

    };
    End.value = new End();
    return End;
})();
var showSelectionMode = new Data_Show.Show(function (v) {
    if (v instanceof Preserve) {
        return "Preserve";
    };
    if (v instanceof Select) {
        return "Select";
    };
    if (v instanceof Start) {
        return "Start";
    };
    if (v instanceof End) {
        return "End";
    };
    throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 17, column 10 - line 21, column 17): " + [ v.constructor.name ]);
});
var print = function (v) {
    if (v instanceof Preserve) {
        return "preserve";
    };
    if (v instanceof Select) {
        return "select";
    };
    if (v instanceof Start) {
        return "start";
    };
    if (v instanceof End) {
        return "end";
    };
    throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 32, column 9 - line 36, column 15): " + [ v.constructor.name ]);
};
var parse = function (v) {
    if (v === "preserve") {
        return new Data_Maybe.Just(Preserve.value);
    };
    if (v === "select") {
        return new Data_Maybe.Just(Select.value);
    };
    if (v === "start") {
        return new Data_Maybe.Just(Start.value);
    };
    if (v === "end") {
        return new Data_Maybe.Just(End.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqSelectionMode = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Preserve && y instanceof Preserve) {
            return true;
        };
        if (x instanceof Select && y instanceof Select) {
            return true;
        };
        if (x instanceof Start && y instanceof Start) {
            return true;
        };
        if (x instanceof End && y instanceof End) {
            return true;
        };
        return false;
    };
});
var ordSelectionMode = new Data_Ord.Ord(function () {
    return eqSelectionMode;
}, function (x) {
    return function (y) {
        if (x instanceof Preserve && y instanceof Preserve) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Preserve) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Preserve) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Select && y instanceof Select) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Select) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Select) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Start && y instanceof Start) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Start) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Start) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof End && y instanceof End) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 14, column 1 - line 14, column 54): " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    Preserve: Preserve,
    Select: Select,
    Start: Start,
    End: End,
    parse: parse,
    print: print,
    eqSelectionMode: eqSelectionMode,
    ordSelectionMode: ordSelectionMode,
    showSelectionMode: showSelectionMode
};

},{"../Data.Eq/index.js":123,"../Data.Maybe/index.js":187,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Show/index.js":226}],424:[function(require,module,exports){
"use strict";

exports.document = function (window) {
  return function () {
    return window.document;
  };
};

exports.navigator = function (window) {
  return function () {
    return window.navigator;
  };
};

exports.location = function (window) {
  return function () {
    return window.location;
  };
};

exports.history = function(window) {
  return function() {
    return window.history;
  };
};

exports.innerWidth = function (window) {
  return function () {
    return window.innerWidth;
  };
};

exports.innerHeight = function (window) {
  return function () {
    return window.innerHeight;
  };
};

exports.alert = function (str) {
  return function (window) {
    return function () {
      window.alert(str);
      return {};
    };
  };
};

exports.confirm = function (str) {
  return function (window) {
    return function () {
      return window.confirm(str);
    };
  };
};

exports.moveBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.moveBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.moveTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.moveTo(width, height);
        return {};
      };
    };
  };
};

exports._open = function (url) {
  return function (name) {
    return function (features) {
      return function (window) {
        return function () {
          return window.open(url, name, features);
        };
      };
    };
  };
};

exports.outerHeight = function (window) {
  return function () {
    return window.outerHeight;
  };
};

exports.outerWidth = function (window) {
  return function () {
    return window.outerWidth;
  };
};

exports.print = function (window) {
  return function () {
    window.print();
    return {};
  };
};

exports._prompt = function (str) {
  return function (defaultText) {
    return function (window) {
      return function () {
        return window.prompt(str, defaultText);
      };
    };
  };
};

exports.resizeBy = function (xDelta) {
  return function (yDelta) {
    return function (window) {
      return function () {
        window.resizeBy(xDelta, yDelta);
        return {};
      };
    };
  };
};

exports.resizeTo = function (width) {
  return function (height) {
    return function (window) {
      return function () {
        window.resizeTo(width, height);
        return {};
      };
    };
  };
};

exports.screenX = function (window) {
  return function () {
    return window.screenX;
  };
};

exports.screenY = function (window) {
  return function () {
    return window.screenY;
  };
};

exports.scroll = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scroll(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollBy = function (xCoord) {
  return function (yCoord) {
    return function (window) {
      return function () {
        window.scrollBy(xCoord, yCoord);
        return {};
      };
    };
  };
};

exports.scrollX = function (window) {
  return function () {
    return window.scrollX;
  };
};

exports.scrollY = function (window) {
  return function () {
    return window.scrollY;
  };
};

exports.localStorage = function (window) {
  return function () {
    return window.localStorage;
  };
};

exports.sessionStorage = function (window) {
  return function () {
    return window.sessionStorage;
  };
};

exports._requestAnimationFrame = function(fn) {
  return function(window) {
    return function() {
      return window.requestAnimationFrame(fn);
    };
  };
};

exports._cancelAnimationFrame = function(id) {
  return function(window) {
    return function() {
      return window.cancelAnimationFrame(id);
    };
  };
};

exports._requestIdleCallback = function(opts) {
  return function(fn) {
    return function(window) {
      return function() {
        return window.requestIdleCallback(fn, opts);
      };
    };
  };
};

exports._cancelIdleCallback = function(id) {
  return function(window) {
    return function() {
      return window.cancelIdleCallback(id);
    };
  };
};

exports.parent = function(window) {
  return function() {
    return window.parent;
  };
};

exports._opener = function(window) {
  return function() {
    return window.opener;
  };
};

},{}],425:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Effect = require("../Effect/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var RequestIdleCallbackId = function (x) {
    return x;
};
var RequestAnimationFrameId = function (x) {
    return x;
};
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var requestIdleCallback = function (opts) {
    return function (fn) {
        var $30 = Data_Functor.map(Effect.functorEffect)(RequestIdleCallbackId);
        var $31 = $foreign["_requestIdleCallback"](opts)(fn);
        return function ($32) {
            return $30($31($32));
        };
    };
};
var requestAnimationFrame = function (fn) {
    var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
    var $34 = $foreign["_requestAnimationFrame"](fn);
    return function ($35) {
        return $33($34($35));
    };
};
var promptDefault = function (msg) {
    return function (defaultText) {
        return function (window) {
            return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window));
        };
    };
};
var prompt = function (msg) {
    return function (window) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window));
    };
};
var opener = function (window) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window));
};
var open = function (url$prime) {
    return function (name) {
        return function (features) {
            return function (window) {
                return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window));
            };
        };
    };
};
var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestIdleCallbackId);
var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
    return n;
}, RequestAnimationFrameId);
var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
    return eqRequestIdleCallbackId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
    return eqRequestAnimationFrameId;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
    };
});
var cancelIdleCallback = function (idAF) {
    return $foreign["_cancelIdleCallback"](Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
};
var cancelAnimationFrame = function (idAF) {
    return $foreign["_cancelAnimationFrame"](Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
};
module.exports = {
    toEventTarget: toEventTarget,
    open: open,
    prompt: prompt,
    promptDefault: promptDefault,
    requestAnimationFrame: requestAnimationFrame,
    cancelAnimationFrame: cancelAnimationFrame,
    requestIdleCallback: requestIdleCallback,
    cancelIdleCallback: cancelIdleCallback,
    opener: opener,
    newtypeRequestAnimationFrameId: newtypeRequestAnimationFrameId,
    eqRequestAnimationFrameId: eqRequestAnimationFrameId,
    ordRequestAnimationFrameId: ordRequestAnimationFrameId,
    newtypeRequestIdleCallbackId: newtypeRequestIdleCallbackId,
    eqRequestIdleCallbackId: eqRequestIdleCallbackId,
    ordRequestIdleCallbackId: ordRequestIdleCallbackId,
    document: $foreign.document,
    navigator: $foreign.navigator,
    location: $foreign.location,
    history: $foreign.history,
    innerWidth: $foreign.innerWidth,
    innerHeight: $foreign.innerHeight,
    alert: $foreign.alert,
    confirm: $foreign.confirm,
    moveBy: $foreign.moveBy,
    moveTo: $foreign.moveTo,
    outerHeight: $foreign.outerHeight,
    outerWidth: $foreign.outerWidth,
    print: $foreign.print,
    resizeBy: $foreign.resizeBy,
    resizeTo: $foreign.resizeTo,
    screenX: $foreign.screenX,
    screenY: $foreign.screenY,
    scroll: $foreign.scroll,
    scrollBy: $foreign.scrollBy,
    scrollX: $foreign.scrollX,
    scrollY: $foreign.scrollY,
    localStorage: $foreign.localStorage,
    sessionStorage: $foreign.sessionStorage,
    parent: $foreign.parent
};

},{"../Data.Eq/index.js":123,"../Data.Functor/index.js":143,"../Data.Newtype/index.js":197,"../Data.Nullable/index.js":200,"../Data.Ord/index.js":205,"../Effect/index.js":309,"../Unsafe.Coerce/index.js":391,"./foreign.js":424}],426:[function(require,module,exports){
/* global window */
"use strict";

exports.window = function () {
  return window;
};

},{}],427:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
module.exports = {
    window: $foreign.window
};

},{"./foreign.js":426}],428:[function(require,module,exports){
"use strict";

exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
  if (typeof window !== "undefined") {
    var ty = window[name];
    if (ty != null && value instanceof ty) {
      return just(value);
    }
    return nothing;
  } 
  var obj = value;
  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;
    if (constructorName === name) {
      return just(value);
    } else if (constructorName === "Object") {
      return nothing;
    }
    obj = proto;
  }
  return nothing;
};

},{}],429:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var unsafeReadProtoTagged = function (name) {
    return function (value) {
        return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
    };
};
module.exports = {
    unsafeReadProtoTagged: unsafeReadProtoTagged
};

},{"../Data.Maybe/index.js":187,"./foreign.js":428}],430:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var focusout = "focusout";
var focusin = "focusin";
var focus = "focus";
var blur = "blur";
module.exports = {
    blur: blur,
    focus: focus,
    focusin: focusin,
    focusout: focusout
};

},{}],431:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var keyup = "keyup";
var keydown = "keydown";
module.exports = {
    keydown: keydown,
    keyup: keyup
};

},{}],432:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var mouseup = "mouseup";
var mouseover = "mouseover";
var mouseout = "mouseout";
var mousemove = "mousemove";
var mouseleave = "mouseleave";
var mouseenter = "mouseenter";
var mousedown = "mousedown";
var dblclick = "dblclick";
var click = "click";
module.exports = {
    click: click,
    dblclick: dblclick,
    mousedown: mousedown,
    mouseenter: mouseenter,
    mouseleave: mouseleave,
    mousemove: mousemove,
    mouseout: mouseout,
    mouseover: mouseover,
    mouseup: mouseup
};

},{}],433:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var wheel = "wheel";
module.exports = {
    wheel: wheel
};

},{}],434:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Web_HTML_HTMLInputElement = require("../Web.HTML.HTMLInputElement/index.js");
var Web_HTML_HTMLTextAreaElement = require("../Web.HTML.HTMLTextAreaElement/index.js");
var Web_Util_TextCursor = require("../Web.Util.TextCursor/index.js");
var Web_Util_TextCursor_Element_Type = require("../Web.Util.TextCursor.Element.Type/index.js");
var setter = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v3 instanceof Web_Util_TextCursor_Element_Type.Input) {
                    return v(v2)(v3.value0);
                };
                if (v3 instanceof Web_Util_TextCursor_Element_Type.TextArea) {
                    return v1(v2)(v3.value0);
                };
                throw new Error("Failed pattern match at Web.Util.TextCursor.Element.HTML (line 30, column 1 - line 34, column 30): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
            };
        };
    };
};
var setValue = setter(Web_HTML_HTMLInputElement.setValue)(Web_HTML_HTMLTextAreaElement.setValue);
var setSelectionStart = setter(Web_HTML_HTMLInputElement.setSelectionStart)(Web_HTML_HTMLTextAreaElement.setSelectionStart);
var setSelectionEnd = setter(Web_HTML_HTMLInputElement.setSelectionEnd)(Web_HTML_HTMLTextAreaElement.setSelectionEnd);
var setSelectionDirection = (function () {
    var $19 = setter(Web_HTML_HTMLInputElement.setSelectionDirection)(Web_HTML_HTMLTextAreaElement.setSelectionDirection);
    var $20 = Data_Show.show(Web_Util_TextCursor.showDirection);
    return function ($21) {
        return $19($20($21));
    };
})();
var getter = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Web_Util_TextCursor_Element_Type.Input) {
                return v(v2.value0);
            };
            if (v2 instanceof Web_Util_TextCursor_Element_Type.TextArea) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Web.Util.TextCursor.Element.HTML (line 21, column 1 - line 25, column 25): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var selectionDirection = (function () {
    var $22 = Data_Functor.map(Effect.functorEffect)(function (v) {
        if (v === "forward") {
            return Web_Util_TextCursor.Forward.value;
        };
        if (v === "backward") {
            return Web_Util_TextCursor.Backward.value;
        };
        return Web_Util_TextCursor.None.value;
    });
    var $23 = getter(Web_HTML_HTMLInputElement.selectionDirection)(Web_HTML_HTMLTextAreaElement.selectionDirection);
    return function ($24) {
        return $22($23($24));
    };
})();
var selectionEnd = getter(Web_HTML_HTMLInputElement.selectionEnd)(Web_HTML_HTMLTextAreaElement.selectionEnd);
var selectionStart = getter(Web_HTML_HTMLInputElement.selectionStart)(Web_HTML_HTMLTextAreaElement.selectionStart);
var value = getter(Web_HTML_HTMLInputElement.value)(Web_HTML_HTMLTextAreaElement.value);
module.exports = {
    value: value,
    setValue: setValue,
    selectionStart: selectionStart,
    setSelectionStart: setSelectionStart,
    selectionEnd: selectionEnd,
    setSelectionEnd: setSelectionEnd,
    selectionDirection: selectionDirection,
    setSelectionDirection: setSelectionDirection
};

},{"../Data.Functor/index.js":143,"../Data.Show/index.js":226,"../Effect/index.js":309,"../Web.HTML.HTMLInputElement/index.js":420,"../Web.HTML.HTMLTextAreaElement/index.js":422,"../Web.Util.TextCursor.Element.Type/index.js":435,"../Web.Util.TextCursor/index.js":437}],435:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Effect = require("../Effect/index.js");
var Web_DOM_Element = require("../Web.DOM.Element/index.js");
var Web_DOM_NonElementParentNode = require("../Web.DOM.NonElementParentNode/index.js");
var Web_Event_Event = require("../Web.Event.Event/index.js");
var Web_HTML = require("../Web.HTML/index.js");
var Web_HTML_HTMLDocument = require("../Web.HTML.HTMLDocument/index.js");
var Web_HTML_HTMLInputElement = require("../Web.HTML.HTMLInputElement/index.js");
var Web_HTML_HTMLTextAreaElement = require("../Web.HTML.HTMLTextAreaElement/index.js");
var Web_HTML_Window = require("../Web.HTML.Window/index.js");
var Input = (function () {
    function Input(value0) {
        this.value0 = value0;
    };
    Input.create = function (value0) {
        return new Input(value0);
    };
    return Input;
})();
var TextArea = (function () {
    function TextArea(value0) {
        this.value0 = value0;
    };
    TextArea.create = function (value0) {
        return new TextArea(value0);
    };
    return TextArea;
})();
var validate = (function () {
    var validateInput = function (e) {
        var whitelist = [ "", "text", "email", "search", "url" ];
        return function __do() {
            var v = Web_HTML_HTMLInputElement.type_(e)();
            var $6 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v)(whitelist);
            if ($6) {
                return new Data_Maybe.Just(e);
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return function (v) {
        if (v instanceof TextArea) {
            return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Maybe.Just(v));
        };
        if (v instanceof Input) {
            return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Maybe.functorMaybe)(Input.create))(validateInput(v.value0));
        };
        throw new Error("Failed pattern match at Web.Util.TextCursor.Element.Type (line 62, column 12 - line 64, column 43): " + [ v.constructor.name ]);
    };
})();
var validate$prime = function (f) {
    if (f instanceof Data_Maybe.Nothing) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
    };
    if (f instanceof Data_Maybe.Just) {
        return validate(f.value0);
    };
    throw new Error("Failed pattern match at Web.Util.TextCursor.Element.Type (line 79, column 3 - line 81, column 25): " + [ f.constructor.name ]);
};
var toHTMLElement = function (v) {
    if (v instanceof Input) {
        return Web_HTML_HTMLInputElement.toHTMLElement(v.value0);
    };
    if (v instanceof TextArea) {
        return Web_HTML_HTMLTextAreaElement.toHTMLElement(v.value0);
    };
    throw new Error("Failed pattern match at Web.Util.TextCursor.Element.Type (line 40, column 1 - line 40, column 50): " + [ v.constructor.name ]);
};
var read = function (e) {
    var ta = Data_Functor.map(Data_Maybe.functorMaybe)(TextArea.create)(Web_HTML_HTMLTextAreaElement.fromElement(e));
    var i = Data_Functor.map(Data_Maybe.functorMaybe)(Input.create)(Web_HTML_HTMLInputElement.fromElement(e));
    return Control_Alt.alt(Data_Maybe.altMaybe)(ta)(i);
};
var readEventTarget = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(read)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Web_DOM_Element.fromEventTarget)(Web_Event_Event.target));
var lookupAndValidate = function (name) {
    return function __do() {
        var v = Web_HTML.window();
        var v1 = Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toNonElementParentNode)(Web_HTML_Window.document(v))();
        return Control_Bind.bind(Effect.bindEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Web_DOM_NonElementParentNode.getElementById(name)(v1))(Data_Functor.map(Data_Maybe.functorMaybe)(read)))(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(validate$prime))();
    };
};
var lookupValidateAndDo = function (name) {
    return function (action) {
        return Control_Bind.bind(Effect.bindEffect)(lookupAndValidate(name))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(action));
    };
};
module.exports = {
    Input: Input,
    TextArea: TextArea,
    toHTMLElement: toHTMLElement,
    read: read,
    readEventTarget: readEventTarget,
    validate: validate,
    "validate'": validate$prime,
    lookupAndValidate: lookupAndValidate,
    lookupValidateAndDo: lookupValidateAndDo
};

},{"../Control.Alt/index.js":14,"../Control.Applicative/index.js":17,"../Control.Bind/index.js":23,"../Data.Eq/index.js":123,"../Data.Foldable/index.js":128,"../Data.Functor/index.js":143,"../Data.Maybe/index.js":187,"../Effect/index.js":309,"../Web.DOM.Element/index.js":399,"../Web.DOM.NonElementParentNode/index.js":404,"../Web.Event.Event/index.js":408,"../Web.HTML.HTMLDocument/index.js":416,"../Web.HTML.HTMLInputElement/index.js":420,"../Web.HTML.HTMLTextAreaElement/index.js":422,"../Web.HTML.Window/index.js":425,"../Web.HTML/index.js":427}],436:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Web_HTML_HTMLElement = require("../Web.HTML.HTMLElement/index.js");
var Web_Util_TextCursor = require("../Web.Util.TextCursor/index.js");
var Web_Util_TextCursor_Element_HTML = require("../Web.Util.TextCursor.Element.HTML/index.js");
var Web_Util_TextCursor_Element_Type = require("../Web.Util.TextCursor.Element.Type/index.js");
var textCursor = function (element) {
    return function __do() {
        var v = Web_Util_TextCursor_Element_HTML.value(element)();
        var v1 = Web_Util_TextCursor_Element_HTML.selectionStart(element)();
        var v2 = Web_Util_TextCursor_Element_HTML.selectionEnd(element)();
        var v3 = Web_Util_TextCursor_Element_HTML.selectionDirection(element)();
        var v4 = Data_String_CodePoints.splitAt(v2)(v);
        var v5 = Data_String_CodePoints.splitAt(v1)(v4.before);
        return {
            before: v5.before,
            selected: v5.after,
            after: v4.after,
            direction: v3
        };
    };
};
var setTextCursor = function (v) {
    return function (element) {
        return function __do() {
            Web_Util_TextCursor_Element_HTML.setValue(Web_Util_TextCursor.content(v))(element)();
            var start = Data_String_CodePoints.length(v.before);
            var end = start + Data_String_CodePoints.length(v.selected) | 0;
            Web_Util_TextCursor_Element_HTML.setSelectionStart(start)(element)();
            Web_Util_TextCursor_Element_HTML.setSelectionEnd(end)(element)();
            return Web_Util_TextCursor_Element_HTML.setSelectionDirection(v.direction)(element)();
        };
    };
};
var modifyTextCursorST = function (dictMonadState) {
    return function (dictMonadEffect) {
        return function (l) {
            return function (f) {
                return function (element) {
                    return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Data_Functor.map(Effect.functorEffect)(f)(textCursor(element))))(function (v) {
                        return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(setTextCursor(v)(element)))(function () {
                            return Control_Monad_State_Class.modify(dictMonadState)(Data_Lens_Setter.set(l(Data_Profunctor_Strong.strongFn))(v));
                        });
                    });
                };
            };
        };
    };
};
var modifyTextCursorST_ = function (dictMonadState) {
    return function (dictMonadEffect) {
        return function (l) {
            return function (f) {
                return function (element) {
                    return Data_Functor["void"]((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(modifyTextCursorST(dictMonadState)(dictMonadEffect)(function (dictStrong) {
                        return l(dictStrong);
                    })(f)(element));
                };
            };
        };
    };
};
var modifyTextCursor = function (f) {
    return function (element) {
        return function __do() {
            var v = Data_Functor.map(Effect.functorEffect)(f)(textCursor(element))();
            return setTextCursor(v)(element)();
        };
    };
};
var focusTextCursor = function (tc) {
    return function (element) {
        return function __do() {
            setTextCursor(tc)(element)();
            return Web_HTML_HTMLElement.focus(Web_Util_TextCursor_Element_Type.toHTMLElement(element))();
        };
    };
};
var focusTextCursorById = function (name) {
    return function (tc) {
        return Web_Util_TextCursor_Element_Type.lookupValidateAndDo(name)(focusTextCursor(tc));
    };
};
module.exports = {
    textCursor: textCursor,
    setTextCursor: setTextCursor,
    modifyTextCursor: modifyTextCursor,
    modifyTextCursorST: modifyTextCursorST,
    focusTextCursor: focusTextCursor,
    focusTextCursorById: focusTextCursorById
};

},{"../Control.Bind/index.js":23,"../Control.Monad.State.Class/index.js":53,"../Data.Functor/index.js":143,"../Data.Lens.Setter/index.js":177,"../Data.Profunctor.Strong/index.js":212,"../Data.String.CodePoints/index.js":228,"../Effect.Class/index.js":299,"../Effect/index.js":309,"../Web.HTML.HTMLElement/index.js":418,"../Web.Util.TextCursor.Element.HTML/index.js":434,"../Web.Util.TextCursor.Element.Type/index.js":435,"../Web.Util.TextCursor/index.js":437}],437:[function(require,module,exports){
// Generated by purs version 0.13.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Gen = require("../Data.String.Gen/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Backward = (function () {
    function Backward() {

    };
    Backward.value = new Backward();
    return Backward;
})();
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Forward = (function () {
    function Forward() {

    };
    Forward.value = new Forward();
    return Forward;
})();
var TextCursor = function (x) {
    return x;
};
var Null = (function () {
    function Null() {

    };
    Null.value = new Null();
    return Null;
})();
var Any = (function () {
    function Any() {

    };
    Any.value = new Any();
    return Any;
})();
var Full = (function () {
    function Full() {

    };
    Full.value = new Full();
    return Full;
})();
var textCursorNewtype = new Data_Newtype.Newtype(function (n) {
    return n;
}, TextCursor);
var testContent = function (v) {
    return function (v1) {
        var test = function (v2) {
            return function (v3) {
                if (v2 instanceof Any) {
                    return true;
                };
                if (v2 instanceof Null) {
                    return Data_String_Common["null"](v3);
                };
                if (v2 instanceof Full) {
                    return !Data_String_Common["null"](v3);
                };
                throw new Error("Failed pattern match at Web.Util.TextCursor (line 92, column 5 - line 92, column 22): " + [ v2.constructor.name, v3.constructor.name ]);
            };
        };
        return test(v.before)(v1.before) && (test(v.selected)(v1.selected) && test(v.after)(v1.after));
    };
};
var showTextCursor = new Data_Show.Show(function (v) {
    if (v.before === "" && (v.selected === "" && v.after === "")) {
        return "\xab\xbb";
    };
    if (v.selected === "") {
        return "\xab" + (v.before + ("|" + (v.after + "\xbb")));
    };
    return "\xab" + (v.before + ("[|" + (v.selected + ("|]" + (v.after + "\xbb")))));
});
var showDirection = new Data_Show.Show(function (v) {
    if (v instanceof Forward) {
        return "forward";
    };
    if (v instanceof None) {
        return "none";
    };
    if (v instanceof Backward) {
        return "backward";
    };
    throw new Error("Failed pattern match at Web.Util.TextCursor (line 39, column 1 - line 42, column 29): " + [ v.constructor.name ]);
});
var semigroupDirection = new Data_Semigroup.Semigroup(function (v) {
    if (v instanceof None) {
        return Control_Category.identity(Control_Category.categoryFn);
    };
    return Data_Function["const"](v);
});
var $$null = testContent({
    before: Null.value,
    selected: Null.value,
    after: Null.value
});
var monoidDirection = new Data_Monoid.Monoid(function () {
    return semigroupDirection;
}, None.value);
var mkTextCursor = function (before) {
    return function (selected) {
        return function (after) {
            return {
                before: before,
                selected: selected,
                after: after,
                direction: None.value
            };
        };
    };
};
var length = function (v) {
    return (Data_String_CodePoints.length(v.before) + Data_String_CodePoints.length(v.selected) | 0) + Data_String_CodePoints.length(v.after) | 0;
};
var isSelection = testContent({
    before: Any.value,
    selected: Full.value,
    after: Any.value
});
var isCursor = testContent({
    before: Any.value,
    selected: Null.value,
    after: Any.value
});
var genTextCursor = function (dictMonadRec) {
    return function (dictMonadGen) {
        return Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Control_Apply.apply(((dictMonadGen.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(mkTextCursor)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen)))(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen)))(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen));
    };
};
var eqDirection = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof Backward && y instanceof Backward) {
            return true;
        };
        if (x instanceof None && y instanceof None) {
            return true;
        };
        if (x instanceof Forward && y instanceof Forward) {
            return true;
        };
        return false;
    };
});
var eqTextCursor = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v.before === v1.before && (v.selected === v1.selected && (v.after === v1.after && Data_Eq.eq(eqDirection)(v1.direction)(v1.direction)));
    };
});
var ordDirection = new Data_Ord.Ord(function () {
    return eqDirection;
}, function (x) {
    return function (y) {
        if (x instanceof Backward && y instanceof Backward) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Backward) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Backward) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof None && y instanceof None) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof None) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof None) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Forward && y instanceof Forward) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Web.Util.TextCursor (line 31, column 1 - line 31, column 46): " + [ x.constructor.name, y.constructor.name ]);
    };
});
var empty = {
    before: "",
    selected: "",
    after: "",
    direction: None.value
};
var single = function (l) {
    return function (v) {
        return Data_Lens_Setter.set(l)(v)(empty);
    };
};
var content = function (v) {
    return v.before + (v.selected + v.after);
};
var atStart = testContent({
    before: Null.value,
    selected: Null.value,
    after: Any.value
});
var cursorAtStart = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isCursor)(atStart);
var selectionAtStart = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isSelection)(atStart);
var atEnd = testContent({
    before: Any.value,
    selected: Any.value,
    after: Null.value
});
var cursorAtEnd = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isCursor)(atEnd);
var selectionAtEnd = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(isSelection)(atEnd);
var allSelected = testContent({
    before: Null.value,
    selected: Any.value,
    after: Null.value
});
var _selected = function (dictStrong) {
    var $79 = Data_Lens_Iso_Newtype["_Newtype"](textCursorNewtype)(textCursorNewtype)(dictStrong.Profunctor0());
    var $80 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "selected";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($81) {
        return $79($80($81));
    };
};
var modifySelected = Data_Lens_Setter.over(_selected(Data_Profunctor_Strong.strongFn));
var _nonselected = function (dictWander) {
    return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(mkTextCursor)(f(v.before)))(Control_Applicative.pure(dictApplicative)(v.selected)))(f(v.after));
            };
        };
    });
};
var modifyNonselected = Data_Lens_Setter.over(_nonselected(Data_Lens_Internal_Wander.wanderFunction));
var _direction = function (dictStrong) {
    var $82 = Data_Lens_Iso_Newtype["_Newtype"](textCursorNewtype)(textCursorNewtype)(dictStrong.Profunctor0());
    var $83 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "direction";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($84) {
        return $82($83($84));
    };
};
var placeCursorAtEnd = function (tc) {
    return {
        before: content(tc),
        selected: "",
        after: "",
        direction: Data_Lens_Getter.viewOn(tc)(_direction(Data_Lens_Internal_Forget.strongForget))
    };
};
var placeCursorAtStart = function (tc) {
    return {
        before: "",
        selected: "",
        after: content(tc),
        direction: Data_Lens_Getter.viewOn(tc)(_direction(Data_Lens_Internal_Forget.strongForget))
    };
};
var selectAll = function (tc) {
    return {
        before: "",
        selected: content(tc),
        after: "",
        direction: Data_Lens_Getter.viewOn(tc)(_direction(Data_Lens_Internal_Forget.strongForget))
    };
};
var _before = function (dictStrong) {
    var $85 = Data_Lens_Iso_Newtype["_Newtype"](textCursorNewtype)(textCursorNewtype)(dictStrong.Profunctor0());
    var $86 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "before";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($87) {
        return $85($86($87));
    };
};
var appendl = function (s) {
    return function (tc) {
        return Data_Lens_Setter.over(_before(Data_Profunctor_Strong.strongFn))(function (v) {
            return s + v;
        })(tc);
    };
};
var insert = function (insertion) {
    return function (v) {
        if (v.selected === "") {
            return Data_Lens_Setter.over(_before(Data_Profunctor_Strong.strongFn))(function (before) {
                return before + insertion;
            })(v);
        };
        return Data_Lens_Setter.over(_selected(Data_Profunctor_Strong.strongFn))(function (selected) {
            return selected + insertion;
        })(v);
    };
};
var _all = function (dictWander) {
    return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
        return function (f) {
            return function (v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(mkTextCursor)(f(v.before)))(f(v.selected)))(f(v.after));
            };
        };
    });
};
var modifyAll = Data_Lens_Setter.over(_all(Data_Lens_Internal_Wander.wanderFunction));
var _after = function (dictStrong) {
    var $88 = Data_Lens_Iso_Newtype["_Newtype"](textCursorNewtype)(textCursorNewtype)(dictStrong.Profunctor0());
    var $89 = Data_Lens_Record.prop(new Data_Symbol.IsSymbol(function () {
        return "after";
    }))()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($90) {
        return $88($89($90));
    };
};
var appendr = function (tc) {
    return function (s) {
        return Data_Lens_Setter.over(_after(Data_Profunctor_Strong.strongFn))(function (v) {
            return v + s;
        })(tc);
    };
};
module.exports = {
    TextCursor: TextCursor,
    Backward: Backward,
    None: None,
    Forward: Forward,
    mkTextCursor: mkTextCursor,
    genTextCursor: genTextCursor,
    content: content,
    length: length,
    "null": $$null,
    empty: empty,
    single: single,
    "_before": _before,
    "_selected": _selected,
    "_after": _after,
    "_all": _all,
    "_nonselected": _nonselected,
    atStart: atStart,
    atEnd: atEnd,
    allSelected: allSelected,
    isCursor: isCursor,
    cursorAtStart: cursorAtStart,
    cursorAtEnd: cursorAtEnd,
    isSelection: isSelection,
    selectionAtStart: selectionAtStart,
    selectionAtEnd: selectionAtEnd,
    selectAll: selectAll,
    placeCursorAtStart: placeCursorAtStart,
    placeCursorAtEnd: placeCursorAtEnd,
    modifySelected: modifySelected,
    modifyAll: modifyAll,
    appendl: appendl,
    appendr: appendr,
    insert: insert,
    eqDirection: eqDirection,
    ordDirection: ordDirection,
    semigroupDirection: semigroupDirection,
    monoidDirection: monoidDirection,
    showDirection: showDirection,
    textCursorNewtype: textCursorNewtype,
    eqTextCursor: eqTextCursor,
    showTextCursor: showTextCursor
};

},{"../Control.Applicative/index.js":17,"../Control.Apply/index.js":19,"../Control.Category/index.js":24,"../Data.Eq/index.js":123,"../Data.Function/index.js":132,"../Data.Functor/index.js":143,"../Data.HeytingAlgebra/index.js":149,"../Data.Lens.Getter/index.js":158,"../Data.Lens.Internal.Forget/index.js":162,"../Data.Lens.Internal.Wander/index.js":168,"../Data.Lens.Iso.Newtype/index.js":169,"../Data.Lens.Record/index.js":176,"../Data.Lens.Setter/index.js":177,"../Data.Monoid/index.js":195,"../Data.Newtype/index.js":197,"../Data.Ord/index.js":205,"../Data.Ordering/index.js":206,"../Data.Profunctor.Strong/index.js":212,"../Data.Semigroup/index.js":221,"../Data.Show/index.js":226,"../Data.String.CodePoints/index.js":228,"../Data.String.Common/index.js":232,"../Data.String.Gen/index.js":233,"../Data.Symbol/index.js":240}],438:[function(require,module,exports){
require('Dhall.Interactive').main();

},{"Dhall.Interactive":281}],439:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],440:[function(require,module,exports){

},{}],441:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":439,"buffer":441,"ieee754":442}],442:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],443:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],444:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":443,"timers":444}],445:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],446:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],447:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":446,"_process":443,"inherits":445}]},{},[438]);
